[
  {
    "form": "(reaper.AddMediaItemToTrack tr) :: (MediaItem)",
    "doc": "(reaper.AddMediaItemToTrack tr) :: (MediaItem)\ntr :: MediaTrack\ncreates a new media item.",
    "name": "AddMediaItemToTrack",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      }
    ],
    "returns": [
      {
        "type": "MediaItem"
      }
    ],
    "namespace": "reaper",
    "description": "creates a new media item."
  },
  {
    "form": "(reaper.AddProjectMarker proj isrgn pos rgnend name wantidx) :: (integer)",
    "doc": "(reaper.AddProjectMarker proj isrgn pos rgnend name wantidx) :: (integer)\nproj :: ReaProject\nisrgn :: boolean\npos :: number\nrgnend :: number\nname :: string\nwantidx :: integer\nReturns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use.",
    "name": "AddProjectMarker",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "boolean",
        "name": "isrgn"
      },
      {
        "type": "number",
        "name": "pos"
      },
      {
        "type": "number",
        "name": "rgnend"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "integer",
        "name": "wantidx"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use."
  },
  {
    "form": "(reaper.AddProjectMarker2 proj isrgn pos rgnend name wantidx color) :: (integer)",
    "doc": "(reaper.AddProjectMarker2 proj isrgn pos rgnend name wantidx color) :: (integer)\nproj :: ReaProject\nisrgn :: boolean\npos :: number\nrgnend :: number\nname :: string\nwantidx :: integer\ncolor :: integer\nReturns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use. color should be 0 (default color), or ColorToNative(r,g,b)|0x1000000",
    "name": "AddProjectMarker2",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "boolean",
        "name": "isrgn"
      },
      {
        "type": "number",
        "name": "pos"
      },
      {
        "type": "number",
        "name": "rgnend"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "integer",
        "name": "wantidx"
      },
      {
        "type": "integer",
        "name": "color"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use. color should be 0 (default color), or ColorToNative(r,g,b)|0x1000000"
  },
  {
    "form": "(reaper.AddRemoveReaScript add sectionID scriptfn commit) :: (integer)",
    "doc": "(reaper.AddRemoveReaScript add sectionID scriptfn commit) :: (integer)\nadd :: boolean\nsectionID :: integer\nscriptfn :: string\ncommit :: boolean\nAdd a ReaScript (return the new command ID, or 0 if failed) or remove a ReaScript (return >0 on success). Use commit==true when adding/removing a single script. When bulk adding/removing n scripts, you can optimize the n-1 first calls with commit==false and commit==true for the last call.",
    "name": "AddRemoveReaScript",
    "params": [
      {
        "type": "boolean",
        "name": "add"
      },
      {
        "type": "integer",
        "name": "sectionID"
      },
      {
        "type": "string",
        "name": "scriptfn"
      },
      {
        "type": "boolean",
        "name": "commit"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Add a ReaScript (return the new command ID, or 0 if failed) or remove a ReaScript (return >0 on success). Use commit==true when adding/removing a single script. When bulk adding/removing n scripts, you can optimize the n-1 first calls with commit==false and commit==true for the last call."
  },
  {
    "form": "(reaper.AddTakeToMediaItem item) :: (MediaItem_Take)",
    "doc": "(reaper.AddTakeToMediaItem item) :: (MediaItem_Take)\nitem :: MediaItem\ncreates a new take in an item",
    "name": "AddTakeToMediaItem",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      }
    ],
    "returns": [
      {
        "type": "MediaItem_Take"
      }
    ],
    "namespace": "reaper",
    "description": "creates a new take in an item"
  },
  {
    "form": "(reaper.AddTempoTimeSigMarker proj timepos bpm timesig_num timesig_denom lineartempochange) :: (boolean)",
    "doc": "(reaper.AddTempoTimeSigMarker proj timepos bpm timesig_num timesig_denom lineartempochange) :: (boolean)\nproj :: ReaProject\ntimepos :: number\nbpm :: number\ntimesig_num :: integer\ntimesig_denom :: integer\nlineartempochange :: boolean\nDeprecated. Use SetTempoTimeSigMarker with ptidx=-1.",
    "name": "AddTempoTimeSigMarker",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "number",
        "name": "timepos"
      },
      {
        "type": "number",
        "name": "bpm"
      },
      {
        "type": "integer",
        "name": "timesig_num"
      },
      {
        "type": "integer",
        "name": "timesig_denom"
      },
      {
        "type": "boolean",
        "name": "lineartempochange"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Deprecated. Use SetTempoTimeSigMarker with ptidx=-1."
  },
  {
    "form": "(reaper.adjustZoom amt forceset doupd centermode) :: nil",
    "doc": "(reaper.adjustZoom amt forceset doupd centermode) :: nil\namt :: number\nforceset :: integer\ndoupd :: boolean\ncentermode :: integer\nforceset=0,doupd=true,centermode=-1 for default",
    "name": "adjustZoom",
    "params": [
      {
        "type": "number",
        "name": "amt"
      },
      {
        "type": "integer",
        "name": "forceset"
      },
      {
        "type": "boolean",
        "name": "doupd"
      },
      {
        "type": "integer",
        "name": "centermode"
      }
    ],
    "namespace": "reaper",
    "description": "forceset=0,doupd=true,centermode=-1 for default"
  },
  {
    "form": "(reaper.AnyTrackSolo proj) :: (boolean)",
    "doc": "(reaper.AnyTrackSolo proj) :: (boolean)\nproj :: ReaProject\n",
    "name": "AnyTrackSolo",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.APIExists function_name) :: (boolean)",
    "doc": "(reaper.APIExists function_name) :: (boolean)\nfunction_name :: string\nReturns true if function_name exists in the REAPER API",
    "name": "APIExists",
    "params": [
      {
        "type": "string",
        "name": "function_name"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Returns true if function_name exists in the REAPER API"
  },
  {
    "form": "(reaper.APITest ) :: nil",
    "doc": "(reaper.APITest ) :: nil\nDisplays a message window if the API was successfully called.",
    "name": "APITest",
    "namespace": "reaper",
    "description": "Displays a message window if the API was successfully called."
  },
  {
    "form": "(reaper.ApplyNudge project nudgeflag nudgewhat nudgeunits value reverse copies) :: (boolean)",
    "doc": "(reaper.ApplyNudge project nudgeflag nudgewhat nudgeunits value reverse copies) :: (boolean)\nproject :: ReaProject\nnudgeflag :: integer\nnudgewhat :: integer\nnudgeunits :: integer\nvalue :: number\nreverse :: boolean\ncopies :: integer\nnudgeflag: &1=set to value (otherwise nudge by value), &2=snap\nnudgewhat: 0=position, 1=left trim, 2=left edge, 3=right edge, 4=contents, 5=duplicate, 6=edit cursor\nnudgeunit: 0=ms, 1=seconds, 2=grid, 3=256th notes, ..., 15=whole notes, 16=measures.beats (1.15 = 1 measure + 1.5 beats), 17=samples, 18=frames, 19=pixels, 20=item lengths, 21=item selections\nvalue: amount to nudge by, or value to set to\nreverse: in nudge mode, nudges left (otherwise ignored)\ncopies: in nudge duplicate mode, number of copies (otherwise ignored)",
    "name": "ApplyNudge",
    "params": [
      {
        "type": "ReaProject",
        "name": "project"
      },
      {
        "type": "integer",
        "name": "nudgeflag"
      },
      {
        "type": "integer",
        "name": "nudgewhat"
      },
      {
        "type": "integer",
        "name": "nudgeunits"
      },
      {
        "type": "number",
        "name": "value"
      },
      {
        "type": "boolean",
        "name": "reverse"
      },
      {
        "type": "integer",
        "name": "copies"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "nudgeflag: &1=set to value (otherwise nudge by value), &2=snap\nnudgewhat: 0=position, 1=left trim, 2=left edge, 3=right edge, 4=contents, 5=duplicate, 6=edit cursor\nnudgeunit: 0=ms, 1=seconds, 2=grid, 3=256th notes, ..., 15=whole notes, 16=measures.beats (1.15 = 1 measure + 1.5 beats), 17=samples, 18=frames, 19=pixels, 20=item lengths, 21=item selections\nvalue: amount to nudge by, or value to set to\nreverse: in nudge mode, nudges left (otherwise ignored)\ncopies: in nudge duplicate mode, number of copies (otherwise ignored)"
  },
  {
    "form": "(reaper.ArmCommand cmd sectionname) :: nil",
    "doc": "(reaper.ArmCommand cmd sectionname) :: nil\ncmd :: integer\nsectionname :: string\narms a command (or disarms if 0 passed) in section sectionname (empty string for main)",
    "name": "ArmCommand",
    "params": [
      {
        "type": "integer",
        "name": "cmd"
      },
      {
        "type": "string",
        "name": "sectionname"
      }
    ],
    "namespace": "reaper",
    "description": "arms a command (or disarms if 0 passed) in section sectionname (empty string for main)"
  },
  {
    "form": "(reaper.Audio_Init ) :: nil",
    "doc": "(reaper.Audio_Init ) :: nil\nopen all audio and MIDI devices, if not open",
    "name": "Audio_Init",
    "namespace": "reaper",
    "description": "open all audio and MIDI devices, if not open"
  },
  {
    "form": "(reaper.Audio_IsPreBuffer ) :: (integer)",
    "doc": "(reaper.Audio_IsPreBuffer ) :: (integer)\nis in pre-buffer? threadsafe",
    "name": "Audio_IsPreBuffer",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "is in pre-buffer? threadsafe"
  },
  {
    "form": "(reaper.Audio_IsRunning ) :: (integer)",
    "doc": "(reaper.Audio_IsRunning ) :: (integer)\nis audio running at all? threadsafe",
    "name": "Audio_IsRunning",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "is audio running at all? threadsafe"
  },
  {
    "form": "(reaper.Audio_Quit ) :: nil",
    "doc": "(reaper.Audio_Quit ) :: nil\nclose all audio and MIDI devices, if open",
    "name": "Audio_Quit",
    "namespace": "reaper",
    "description": "close all audio and MIDI devices, if open"
  },
  {
    "form": "(reaper.AudioAccessorStateChanged accessor) :: (boolean)",
    "doc": "(reaper.AudioAccessorStateChanged accessor) :: (boolean)\naccessor :: AudioAccessor\nReturns true if the underlying samples (track or media item take) have changed, but does not update the audio accessor, so the user can selectively call AudioAccessorValidateState only when needed. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorEndTime, GetAudioAccessorSamples.",
    "name": "AudioAccessorStateChanged",
    "params": [
      {
        "type": "AudioAccessor",
        "name": "accessor"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Returns true if the underlying samples (track or media item take) have changed, but does not update the audio accessor, so the user can selectively call AudioAccessorValidateState only when needed. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorEndTime, GetAudioAccessorSamples."
  },
  {
    "form": "(reaper.AudioAccessorUpdate accessor) :: nil",
    "doc": "(reaper.AudioAccessorUpdate accessor) :: nil\naccessor :: AudioAccessor\nForce the accessor to reload its state from the underlying track or media item take. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.",
    "name": "AudioAccessorUpdate",
    "params": [
      {
        "type": "AudioAccessor",
        "name": "accessor"
      }
    ],
    "namespace": "reaper",
    "description": "Force the accessor to reload its state from the underlying track or media item take. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples."
  },
  {
    "form": "(reaper.AudioAccessorValidateState accessor) :: (boolean)",
    "doc": "(reaper.AudioAccessorValidateState accessor) :: (boolean)\naccessor :: AudioAccessor\nValidates the current state of the audio accessor -- must ONLY call this from the main thread. Returns true if the state changed.",
    "name": "AudioAccessorValidateState",
    "params": [
      {
        "type": "AudioAccessor",
        "name": "accessor"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Validates the current state of the audio accessor -- must ONLY call this from the main thread. Returns true if the state changed."
  },
  {
    "form": "(reaper.BypassFxAllTracks bypass) :: nil",
    "doc": "(reaper.BypassFxAllTracks bypass) :: nil\nbypass :: integer\n-1 = bypass all if not all bypassed,otherwise unbypass all",
    "name": "BypassFxAllTracks",
    "params": [
      {
        "type": "integer",
        "name": "bypass"
      }
    ],
    "namespace": "reaper",
    "description": "-1 = bypass all if not all bypassed,otherwise unbypass all"
  },
  {
    "form": "(reaper.CalcMediaSrcLoudness mediasource) :: (integer)",
    "doc": "(reaper.CalcMediaSrcLoudness mediasource) :: (integer)\nmediasource :: PCM_source\nCalculates loudness statistics of media via dry run render. Statistics will be displayed to the user; call GetSetProjectInfo_String(\"RENDER_STATS\") to retrieve via API. Returns 1 if loudness was calculated successfully, -1 if user canceled the dry run render.",
    "name": "CalcMediaSrcLoudness",
    "params": [
      {
        "type": "PCM_source",
        "name": "mediasource"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Calculates loudness statistics of media via dry run render. Statistics will be displayed to the user; call GetSetProjectInfo_String(\"RENDER_STATS\") to retrieve via API. Returns 1 if loudness was calculated successfully, -1 if user canceled the dry run render."
  },
  {
    "form": "(reaper.CalculateNormalization source normalizeTo normalizeTarget normalizeStart normalizeEnd) :: (number)",
    "doc": "(reaper.CalculateNormalization source normalizeTo normalizeTarget normalizeStart normalizeEnd) :: (number)\nsource :: PCM_source\nnormalizeTo :: integer\nnormalizeTarget :: number\nnormalizeStart :: number\nnormalizeEnd :: number\nCalculate normalize adjustment for source media. normalizeTo: 0=LUFS-I, 1=RMS-I, 2=peak, 3=true peak, 4=LUFS-M max, 5=LUFS-S max. normalizeTarget: dBFS or LUFS value. normalizeStart, normalizeEnd: time bounds within source media for normalization calculation. If normalizationStart=0 and normalizationEnd=0, the full duration of the media will be used for the calculation.",
    "name": "CalculateNormalization",
    "params": [
      {
        "type": "PCM_source",
        "name": "source"
      },
      {
        "type": "integer",
        "name": "normalizeTo"
      },
      {
        "type": "number",
        "name": "normalizeTarget"
      },
      {
        "type": "number",
        "name": "normalizeStart"
      },
      {
        "type": "number",
        "name": "normalizeEnd"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Calculate normalize adjustment for source media. normalizeTo: 0=LUFS-I, 1=RMS-I, 2=peak, 3=true peak, 4=LUFS-M max, 5=LUFS-S max. normalizeTarget: dBFS or LUFS value. normalizeStart, normalizeEnd: time bounds within source media for normalization calculation. If normalizationStart=0 and normalizationEnd=0, the full duration of the media will be used for the calculation."
  },
  {
    "form": "(reaper.ClearAllRecArmed ) :: nil",
    "doc": "(reaper.ClearAllRecArmed ) :: nil\n",
    "name": "ClearAllRecArmed",
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ClearConsole ) :: nil",
    "doc": "(reaper.ClearConsole ) :: nil\nClear the ReaScript console. See ShowConsoleMsg",
    "name": "ClearConsole",
    "namespace": "reaper",
    "description": "Clear the ReaScript console. See ShowConsoleMsg"
  },
  {
    "form": "(reaper.ClearPeakCache ) :: nil",
    "doc": "(reaper.ClearPeakCache ) :: nil\nresets the global peak caches",
    "name": "ClearPeakCache",
    "namespace": "reaper",
    "description": "resets the global peak caches"
  },
  {
    "form": "(reaper.ColorFromNative col) :: (integer integer integer)",
    "doc": "(reaper.ColorFromNative col) :: (integer integer integer)\ncol :: integer\nExtract RGB values from an OS dependent color. See ColorToNative.",
    "name": "ColorFromNative",
    "params": [
      {
        "type": "integer",
        "name": "col"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "r"
      },
      {
        "type": "integer",
        "name": "g"
      },
      {
        "type": "integer",
        "name": "b"
      }
    ],
    "namespace": "reaper",
    "description": "Extract RGB values from an OS dependent color. See ColorToNative."
  },
  {
    "form": "(reaper.ColorToNative r g b) :: (integer)",
    "doc": "(reaper.ColorToNative r g b) :: (integer)\nr :: integer\ng :: integer\nb :: integer\nMake an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. See ColorFromNative.",
    "name": "ColorToNative",
    "params": [
      {
        "type": "integer",
        "name": "r"
      },
      {
        "type": "integer",
        "name": "g"
      },
      {
        "type": "integer",
        "name": "b"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. See ColorFromNative."
  },
  {
    "form": "(reaper.CountActionShortcuts section cmdID) :: (integer)",
    "doc": "(reaper.CountActionShortcuts section cmdID) :: (integer)\nsection :: KbdSectionInfo\ncmdID :: integer\nReturns the number of shortcuts that exist for the given command ID.\nsee GetActionShortcutDesc, DeleteActionShortcut, DoActionShortcutDialog.",
    "name": "CountActionShortcuts",
    "params": [
      {
        "type": "KbdSectionInfo",
        "name": "section"
      },
      {
        "type": "integer",
        "name": "cmdID"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the number of shortcuts that exist for the given command ID.\nsee GetActionShortcutDesc, DeleteActionShortcut, DoActionShortcutDialog."
  },
  {
    "form": "(reaper.CountAutomationItems env) :: (integer)",
    "doc": "(reaper.CountAutomationItems env) :: (integer)\nenv :: TrackEnvelope\nReturns the number of automation items on this envelope. See GetSetAutomationItemInfo",
    "name": "CountAutomationItems",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "env"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the number of automation items on this envelope. See GetSetAutomationItemInfo"
  },
  {
    "form": "(reaper.CountEnvelopePoints envelope) :: (integer)",
    "doc": "(reaper.CountEnvelopePoints envelope) :: (integer)\nenvelope :: TrackEnvelope\nReturns the number of points in the envelope. See CountEnvelopePointsEx.",
    "name": "CountEnvelopePoints",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "envelope"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the number of points in the envelope. See CountEnvelopePointsEx."
  },
  {
    "form": "(reaper.CountEnvelopePointsEx envelope autoitem_idx) :: (integer)",
    "doc": "(reaper.CountEnvelopePointsEx envelope autoitem_idx) :: (integer)\nenvelope :: TrackEnvelope\nautoitem_idx :: integer\nReturns the number of points in the envelope.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.",
    "name": "CountEnvelopePointsEx",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "envelope"
      },
      {
        "type": "integer",
        "name": "autoitem_idx"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the number of points in the envelope.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx."
  },
  {
    "form": "(reaper.CountMediaItems proj) :: (integer)",
    "doc": "(reaper.CountMediaItems proj) :: (integer)\nproj :: ReaProject\ncount the number of items in the project (proj=0 for active project)",
    "name": "CountMediaItems",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "count the number of items in the project (proj=0 for active project)"
  },
  {
    "form": "(reaper.CountProjectMarkers proj) :: (integer integer integer)",
    "doc": "(reaper.CountProjectMarkers proj) :: (integer integer integer)\nproj :: ReaProject\nnum_markersOut and num_regionsOut may be NULL.",
    "name": "CountProjectMarkers",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "num_markers"
      },
      {
        "type": "integer",
        "name": "num_regions"
      }
    ],
    "namespace": "reaper",
    "description": "num_markersOut and num_regionsOut may be NULL."
  },
  {
    "form": "(reaper.CountSelectedMediaItems proj) :: (integer)",
    "doc": "(reaper.CountSelectedMediaItems proj) :: (integer)\nproj :: ReaProject\ncount the number of selected items in the project (proj=0 for active project)",
    "name": "CountSelectedMediaItems",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "count the number of selected items in the project (proj=0 for active project)"
  },
  {
    "form": "(reaper.CountSelectedTracks proj) :: (integer)",
    "doc": "(reaper.CountSelectedTracks proj) :: (integer)\nproj :: ReaProject\nCount the number of selected tracks in the project (proj=0 for active project). This function ignores the master track, see CountSelectedTracks2.",
    "name": "CountSelectedTracks",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Count the number of selected tracks in the project (proj=0 for active project). This function ignores the master track, see CountSelectedTracks2."
  },
  {
    "form": "(reaper.CountSelectedTracks2 proj wantmaster) :: (integer)",
    "doc": "(reaper.CountSelectedTracks2 proj wantmaster) :: (integer)\nproj :: ReaProject\nwantmaster :: boolean\nCount the number of selected tracks in the project (proj=0 for active project).",
    "name": "CountSelectedTracks2",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "boolean",
        "name": "wantmaster"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Count the number of selected tracks in the project (proj=0 for active project)."
  },
  {
    "form": "(reaper.CountTakeEnvelopes take) :: (integer)",
    "doc": "(reaper.CountTakeEnvelopes take) :: (integer)\ntake :: MediaItem_Take\nSee GetTakeEnvelope",
    "name": "CountTakeEnvelopes",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "See GetTakeEnvelope"
  },
  {
    "form": "(reaper.CountTakes item) :: (integer)",
    "doc": "(reaper.CountTakes item) :: (integer)\nitem :: MediaItem\ncount the number of takes in the item",
    "name": "CountTakes",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "count the number of takes in the item"
  },
  {
    "form": "(reaper.CountTCPFXParms project track) :: (integer)",
    "doc": "(reaper.CountTCPFXParms project track) :: (integer)\nproject :: ReaProject\ntrack :: MediaTrack\nCount the number of FX parameter knobs displayed on the track control panel.",
    "name": "CountTCPFXParms",
    "params": [
      {
        "type": "ReaProject",
        "name": "project"
      },
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Count the number of FX parameter knobs displayed on the track control panel."
  },
  {
    "form": "(reaper.CountTempoTimeSigMarkers proj) :: (integer)",
    "doc": "(reaper.CountTempoTimeSigMarkers proj) :: (integer)\nproj :: ReaProject\nCount the number of tempo/time signature markers in the project. See GetTempoTimeSigMarker, SetTempoTimeSigMarker, AddTempoTimeSigMarker.",
    "name": "CountTempoTimeSigMarkers",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Count the number of tempo/time signature markers in the project. See GetTempoTimeSigMarker, SetTempoTimeSigMarker, AddTempoTimeSigMarker."
  },
  {
    "form": "(reaper.CountTrackEnvelopes track) :: (integer)",
    "doc": "(reaper.CountTrackEnvelopes track) :: (integer)\ntrack :: MediaTrack\nsee GetTrackEnvelope",
    "name": "CountTrackEnvelopes",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "see GetTrackEnvelope"
  },
  {
    "form": "(reaper.CountTrackMediaItems track) :: (integer)",
    "doc": "(reaper.CountTrackMediaItems track) :: (integer)\ntrack :: MediaTrack\ncount the number of items in the track",
    "name": "CountTrackMediaItems",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "count the number of items in the track"
  },
  {
    "form": "(reaper.CountTracks proj) :: (integer)",
    "doc": "(reaper.CountTracks proj) :: (integer)\nproj :: ReaProject\ncount the number of tracks in the project (proj=0 for active project)",
    "name": "CountTracks",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "count the number of tracks in the project (proj=0 for active project)"
  },
  {
    "form": "(reaper.CreateNewMIDIItemInProj track starttime endtime ?qnIn) :: (MediaItem)",
    "doc": "(reaper.CreateNewMIDIItemInProj track starttime endtime ?qnIn) :: (MediaItem)\ntrack :: MediaTrack\nstarttime :: number\nendtime :: number\nqnIn :: boolean (optional)\nCreate a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set.",
    "name": "CreateNewMIDIItemInProj",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "number",
        "name": "starttime"
      },
      {
        "type": "number",
        "name": "endtime"
      },
      {
        "type": "boolean",
        "name": "qnIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "MediaItem"
      }
    ],
    "namespace": "reaper",
    "description": "Create a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set."
  },
  {
    "form": "(reaper.CreateTakeAudioAccessor take) :: (AudioAccessor)",
    "doc": "(reaper.CreateTakeAudioAccessor take) :: (AudioAccessor)\ntake :: MediaItem_Take\nCreate an audio accessor object for this take. Must only call from the main thread. See CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.",
    "name": "CreateTakeAudioAccessor",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "AudioAccessor"
      }
    ],
    "namespace": "reaper",
    "description": "Create an audio accessor object for this take. Must only call from the main thread. See CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples."
  },
  {
    "form": "(reaper.CreateTrackAudioAccessor track) :: (AudioAccessor)",
    "doc": "(reaper.CreateTrackAudioAccessor track) :: (AudioAccessor)\ntrack :: MediaTrack\nCreate an audio accessor object for this track. Must only call from the main thread. See CreateTakeAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.",
    "name": "CreateTrackAudioAccessor",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "AudioAccessor"
      }
    ],
    "namespace": "reaper",
    "description": "Create an audio accessor object for this track. Must only call from the main thread. See CreateTakeAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples."
  },
  {
    "form": "(reaper.CreateTrackSend tr desttrIn) :: (integer)",
    "doc": "(reaper.CreateTrackSend tr desttrIn) :: (integer)\ntr :: MediaTrack\ndesttrIn :: MediaTrack\nCreate a send/receive (desttrInOptional!=NULL), or a hardware output (desttrInOptional==NULL) with default properties, return >=0 on success (== new send/receive index). See RemoveTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value.",
    "name": "CreateTrackSend",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      },
      {
        "type": "MediaTrack",
        "name": "desttrIn"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Create a send/receive (desttrInOptional!=NULL), or a hardware output (desttrInOptional==NULL) with default properties, return >=0 on success (== new send/receive index). See RemoveTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value."
  },
  {
    "form": "(reaper.CSurf_FlushUndo force) :: nil",
    "doc": "(reaper.CSurf_FlushUndo force) :: nil\nforce :: boolean\ncall this to force flushing of the undo states after using CSurf_On*Change()",
    "name": "CSurf_FlushUndo",
    "params": [
      {
        "type": "boolean",
        "name": "force"
      }
    ],
    "namespace": "reaper",
    "description": "call this to force flushing of the undo states after using CSurf_On*Change()"
  },
  {
    "form": "(reaper.CSurf_GetTouchState trackid isPan) :: (boolean)",
    "doc": "(reaper.CSurf_GetTouchState trackid isPan) :: (boolean)\ntrackid :: MediaTrack\nisPan :: integer\n",
    "name": "CSurf_GetTouchState",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "integer",
        "name": "isPan"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_GoEnd ) :: nil",
    "doc": "(reaper.CSurf_GoEnd ) :: nil\n",
    "name": "CSurf_GoEnd",
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_GoStart ) :: nil",
    "doc": "(reaper.CSurf_GoStart ) :: nil\n",
    "name": "CSurf_GoStart",
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_NumTracks mcpView) :: (integer)",
    "doc": "(reaper.CSurf_NumTracks mcpView) :: (integer)\nmcpView :: boolean\n",
    "name": "CSurf_NumTracks",
    "params": [
      {
        "type": "boolean",
        "name": "mcpView"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnArrow whichdir wantzoom) :: nil",
    "doc": "(reaper.CSurf_OnArrow whichdir wantzoom) :: nil\nwhichdir :: integer\nwantzoom :: boolean\n",
    "name": "CSurf_OnArrow",
    "params": [
      {
        "type": "integer",
        "name": "whichdir"
      },
      {
        "type": "boolean",
        "name": "wantzoom"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnFwd seekplay) :: nil",
    "doc": "(reaper.CSurf_OnFwd seekplay) :: nil\nseekplay :: integer\n",
    "name": "CSurf_OnFwd",
    "params": [
      {
        "type": "integer",
        "name": "seekplay"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnFXChange trackid en) :: (boolean)",
    "doc": "(reaper.CSurf_OnFXChange trackid en) :: (boolean)\ntrackid :: MediaTrack\nen :: integer\n",
    "name": "CSurf_OnFXChange",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "integer",
        "name": "en"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnInputMonitorChange trackid monitor) :: (integer)",
    "doc": "(reaper.CSurf_OnInputMonitorChange trackid monitor) :: (integer)\ntrackid :: MediaTrack\nmonitor :: integer\n",
    "name": "CSurf_OnInputMonitorChange",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "integer",
        "name": "monitor"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnInputMonitorChangeEx trackid monitor allowgang) :: (integer)",
    "doc": "(reaper.CSurf_OnInputMonitorChangeEx trackid monitor allowgang) :: (integer)\ntrackid :: MediaTrack\nmonitor :: integer\nallowgang :: boolean\n",
    "name": "CSurf_OnInputMonitorChangeEx",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "integer",
        "name": "monitor"
      },
      {
        "type": "boolean",
        "name": "allowgang"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnMuteChange trackid mute) :: (boolean)",
    "doc": "(reaper.CSurf_OnMuteChange trackid mute) :: (boolean)\ntrackid :: MediaTrack\nmute :: integer\n",
    "name": "CSurf_OnMuteChange",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "integer",
        "name": "mute"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnMuteChangeEx trackid mute allowgang) :: (boolean)",
    "doc": "(reaper.CSurf_OnMuteChangeEx trackid mute allowgang) :: (boolean)\ntrackid :: MediaTrack\nmute :: integer\nallowgang :: boolean\n",
    "name": "CSurf_OnMuteChangeEx",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "integer",
        "name": "mute"
      },
      {
        "type": "boolean",
        "name": "allowgang"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnPanChange trackid pan relative) :: (number)",
    "doc": "(reaper.CSurf_OnPanChange trackid pan relative) :: (number)\ntrackid :: MediaTrack\npan :: number\nrelative :: boolean\n",
    "name": "CSurf_OnPanChange",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "number",
        "name": "pan"
      },
      {
        "type": "boolean",
        "name": "relative"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnPanChangeEx trackid pan relative allowGang) :: (number)",
    "doc": "(reaper.CSurf_OnPanChangeEx trackid pan relative allowGang) :: (number)\ntrackid :: MediaTrack\npan :: number\nrelative :: boolean\nallowGang :: boolean\n",
    "name": "CSurf_OnPanChangeEx",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "number",
        "name": "pan"
      },
      {
        "type": "boolean",
        "name": "relative"
      },
      {
        "type": "boolean",
        "name": "allowGang"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnPause ) :: nil",
    "doc": "(reaper.CSurf_OnPause ) :: nil\n",
    "name": "CSurf_OnPause",
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnPlay ) :: nil",
    "doc": "(reaper.CSurf_OnPlay ) :: nil\n",
    "name": "CSurf_OnPlay",
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnPlayRateChange playrate) :: nil",
    "doc": "(reaper.CSurf_OnPlayRateChange playrate) :: nil\nplayrate :: number\n",
    "name": "CSurf_OnPlayRateChange",
    "params": [
      {
        "type": "number",
        "name": "playrate"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnRecArmChange trackid recarm) :: (boolean)",
    "doc": "(reaper.CSurf_OnRecArmChange trackid recarm) :: (boolean)\ntrackid :: MediaTrack\nrecarm :: integer\n",
    "name": "CSurf_OnRecArmChange",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "integer",
        "name": "recarm"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnRecArmChangeEx trackid recarm allowgang) :: (boolean)",
    "doc": "(reaper.CSurf_OnRecArmChangeEx trackid recarm allowgang) :: (boolean)\ntrackid :: MediaTrack\nrecarm :: integer\nallowgang :: boolean\n",
    "name": "CSurf_OnRecArmChangeEx",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "integer",
        "name": "recarm"
      },
      {
        "type": "boolean",
        "name": "allowgang"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnRecord ) :: nil",
    "doc": "(reaper.CSurf_OnRecord ) :: nil\n",
    "name": "CSurf_OnRecord",
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnRecvPanChange trackid recv_index pan relative) :: (number)",
    "doc": "(reaper.CSurf_OnRecvPanChange trackid recv_index pan relative) :: (number)\ntrackid :: MediaTrack\nrecv_index :: integer\npan :: number\nrelative :: boolean\n",
    "name": "CSurf_OnRecvPanChange",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "integer",
        "name": "recv_index"
      },
      {
        "type": "number",
        "name": "pan"
      },
      {
        "type": "boolean",
        "name": "relative"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnRecvVolumeChange trackid recv_index volume relative) :: (number)",
    "doc": "(reaper.CSurf_OnRecvVolumeChange trackid recv_index volume relative) :: (number)\ntrackid :: MediaTrack\nrecv_index :: integer\nvolume :: number\nrelative :: boolean\n",
    "name": "CSurf_OnRecvVolumeChange",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "integer",
        "name": "recv_index"
      },
      {
        "type": "number",
        "name": "volume"
      },
      {
        "type": "boolean",
        "name": "relative"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnRew seekplay) :: nil",
    "doc": "(reaper.CSurf_OnRew seekplay) :: nil\nseekplay :: integer\n",
    "name": "CSurf_OnRew",
    "params": [
      {
        "type": "integer",
        "name": "seekplay"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnRewFwd seekplay dir) :: nil",
    "doc": "(reaper.CSurf_OnRewFwd seekplay dir) :: nil\nseekplay :: integer\ndir :: integer\n",
    "name": "CSurf_OnRewFwd",
    "params": [
      {
        "type": "integer",
        "name": "seekplay"
      },
      {
        "type": "integer",
        "name": "dir"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnScroll xdir ydir) :: nil",
    "doc": "(reaper.CSurf_OnScroll xdir ydir) :: nil\nxdir :: integer\nydir :: integer\n",
    "name": "CSurf_OnScroll",
    "params": [
      {
        "type": "integer",
        "name": "xdir"
      },
      {
        "type": "integer",
        "name": "ydir"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnSelectedChange trackid selected) :: (boolean)",
    "doc": "(reaper.CSurf_OnSelectedChange trackid selected) :: (boolean)\ntrackid :: MediaTrack\nselected :: integer\n",
    "name": "CSurf_OnSelectedChange",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "integer",
        "name": "selected"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnSendPanChange trackid send_index pan relative) :: (number)",
    "doc": "(reaper.CSurf_OnSendPanChange trackid send_index pan relative) :: (number)\ntrackid :: MediaTrack\nsend_index :: integer\npan :: number\nrelative :: boolean\n",
    "name": "CSurf_OnSendPanChange",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "integer",
        "name": "send_index"
      },
      {
        "type": "number",
        "name": "pan"
      },
      {
        "type": "boolean",
        "name": "relative"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnSendVolumeChange trackid send_index volume relative) :: (number)",
    "doc": "(reaper.CSurf_OnSendVolumeChange trackid send_index volume relative) :: (number)\ntrackid :: MediaTrack\nsend_index :: integer\nvolume :: number\nrelative :: boolean\n",
    "name": "CSurf_OnSendVolumeChange",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "integer",
        "name": "send_index"
      },
      {
        "type": "number",
        "name": "volume"
      },
      {
        "type": "boolean",
        "name": "relative"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnSoloChange trackid solo) :: (boolean)",
    "doc": "(reaper.CSurf_OnSoloChange trackid solo) :: (boolean)\ntrackid :: MediaTrack\nsolo :: integer\n",
    "name": "CSurf_OnSoloChange",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "integer",
        "name": "solo"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnSoloChangeEx trackid solo allowgang) :: (boolean)",
    "doc": "(reaper.CSurf_OnSoloChangeEx trackid solo allowgang) :: (boolean)\ntrackid :: MediaTrack\nsolo :: integer\nallowgang :: boolean\n",
    "name": "CSurf_OnSoloChangeEx",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "integer",
        "name": "solo"
      },
      {
        "type": "boolean",
        "name": "allowgang"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnStop ) :: nil",
    "doc": "(reaper.CSurf_OnStop ) :: nil\n",
    "name": "CSurf_OnStop",
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnTempoChange bpm) :: nil",
    "doc": "(reaper.CSurf_OnTempoChange bpm) :: nil\nbpm :: number\n",
    "name": "CSurf_OnTempoChange",
    "params": [
      {
        "type": "number",
        "name": "bpm"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnTrackSelection trackid) :: nil",
    "doc": "(reaper.CSurf_OnTrackSelection trackid) :: nil\ntrackid :: MediaTrack\n",
    "name": "CSurf_OnTrackSelection",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnVolumeChange trackid volume relative) :: (number)",
    "doc": "(reaper.CSurf_OnVolumeChange trackid volume relative) :: (number)\ntrackid :: MediaTrack\nvolume :: number\nrelative :: boolean\n",
    "name": "CSurf_OnVolumeChange",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "number",
        "name": "volume"
      },
      {
        "type": "boolean",
        "name": "relative"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnVolumeChangeEx trackid volume relative allowGang) :: (number)",
    "doc": "(reaper.CSurf_OnVolumeChangeEx trackid volume relative allowGang) :: (number)\ntrackid :: MediaTrack\nvolume :: number\nrelative :: boolean\nallowGang :: boolean\n",
    "name": "CSurf_OnVolumeChangeEx",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "number",
        "name": "volume"
      },
      {
        "type": "boolean",
        "name": "relative"
      },
      {
        "type": "boolean",
        "name": "allowGang"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnWidthChange trackid width relative) :: (number)",
    "doc": "(reaper.CSurf_OnWidthChange trackid width relative) :: (number)\ntrackid :: MediaTrack\nwidth :: number\nrelative :: boolean\n",
    "name": "CSurf_OnWidthChange",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "number",
        "name": "width"
      },
      {
        "type": "boolean",
        "name": "relative"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnWidthChangeEx trackid width relative allowGang) :: (number)",
    "doc": "(reaper.CSurf_OnWidthChangeEx trackid width relative allowGang) :: (number)\ntrackid :: MediaTrack\nwidth :: number\nrelative :: boolean\nallowGang :: boolean\n",
    "name": "CSurf_OnWidthChangeEx",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "number",
        "name": "width"
      },
      {
        "type": "boolean",
        "name": "relative"
      },
      {
        "type": "boolean",
        "name": "allowGang"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_OnZoom xdir ydir) :: nil",
    "doc": "(reaper.CSurf_OnZoom xdir ydir) :: nil\nxdir :: integer\nydir :: integer\n",
    "name": "CSurf_OnZoom",
    "params": [
      {
        "type": "integer",
        "name": "xdir"
      },
      {
        "type": "integer",
        "name": "ydir"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_ResetAllCachedVolPanStates ) :: nil",
    "doc": "(reaper.CSurf_ResetAllCachedVolPanStates ) :: nil\n",
    "name": "CSurf_ResetAllCachedVolPanStates",
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_ScrubAmt amt) :: nil",
    "doc": "(reaper.CSurf_ScrubAmt amt) :: nil\namt :: number\n",
    "name": "CSurf_ScrubAmt",
    "params": [
      {
        "type": "number",
        "name": "amt"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_SetAutoMode mode ignoresurf) :: nil",
    "doc": "(reaper.CSurf_SetAutoMode mode ignoresurf) :: nil\nmode :: integer\nignoresurf :: IReaperControlSurface\n",
    "name": "CSurf_SetAutoMode",
    "params": [
      {
        "type": "integer",
        "name": "mode"
      },
      {
        "type": "IReaperControlSurface",
        "name": "ignoresurf"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_SetPlayState play pause rec ignoresurf) :: nil",
    "doc": "(reaper.CSurf_SetPlayState play pause rec ignoresurf) :: nil\nplay :: boolean\npause :: boolean\nrec :: boolean\nignoresurf :: IReaperControlSurface\n",
    "name": "CSurf_SetPlayState",
    "params": [
      {
        "type": "boolean",
        "name": "play"
      },
      {
        "type": "boolean",
        "name": "pause"
      },
      {
        "type": "boolean",
        "name": "rec"
      },
      {
        "type": "IReaperControlSurface",
        "name": "ignoresurf"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_SetRepeatState rep ignoresurf) :: nil",
    "doc": "(reaper.CSurf_SetRepeatState rep ignoresurf) :: nil\nrep :: boolean\nignoresurf :: IReaperControlSurface\n",
    "name": "CSurf_SetRepeatState",
    "params": [
      {
        "type": "boolean",
        "name": "rep"
      },
      {
        "type": "IReaperControlSurface",
        "name": "ignoresurf"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_SetSurfaceMute trackid mute ignoresurf) :: nil",
    "doc": "(reaper.CSurf_SetSurfaceMute trackid mute ignoresurf) :: nil\ntrackid :: MediaTrack\nmute :: boolean\nignoresurf :: IReaperControlSurface\n",
    "name": "CSurf_SetSurfaceMute",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "boolean",
        "name": "mute"
      },
      {
        "type": "IReaperControlSurface",
        "name": "ignoresurf"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_SetSurfacePan trackid pan ignoresurf) :: nil",
    "doc": "(reaper.CSurf_SetSurfacePan trackid pan ignoresurf) :: nil\ntrackid :: MediaTrack\npan :: number\nignoresurf :: IReaperControlSurface\n",
    "name": "CSurf_SetSurfacePan",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "number",
        "name": "pan"
      },
      {
        "type": "IReaperControlSurface",
        "name": "ignoresurf"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_SetSurfaceRecArm trackid recarm ignoresurf) :: nil",
    "doc": "(reaper.CSurf_SetSurfaceRecArm trackid recarm ignoresurf) :: nil\ntrackid :: MediaTrack\nrecarm :: boolean\nignoresurf :: IReaperControlSurface\n",
    "name": "CSurf_SetSurfaceRecArm",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "boolean",
        "name": "recarm"
      },
      {
        "type": "IReaperControlSurface",
        "name": "ignoresurf"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_SetSurfaceSelected trackid selected ignoresurf) :: nil",
    "doc": "(reaper.CSurf_SetSurfaceSelected trackid selected ignoresurf) :: nil\ntrackid :: MediaTrack\nselected :: boolean\nignoresurf :: IReaperControlSurface\n",
    "name": "CSurf_SetSurfaceSelected",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "boolean",
        "name": "selected"
      },
      {
        "type": "IReaperControlSurface",
        "name": "ignoresurf"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_SetSurfaceSolo trackid solo ignoresurf) :: nil",
    "doc": "(reaper.CSurf_SetSurfaceSolo trackid solo ignoresurf) :: nil\ntrackid :: MediaTrack\nsolo :: boolean\nignoresurf :: IReaperControlSurface\n",
    "name": "CSurf_SetSurfaceSolo",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "boolean",
        "name": "solo"
      },
      {
        "type": "IReaperControlSurface",
        "name": "ignoresurf"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_SetSurfaceVolume trackid volume ignoresurf) :: nil",
    "doc": "(reaper.CSurf_SetSurfaceVolume trackid volume ignoresurf) :: nil\ntrackid :: MediaTrack\nvolume :: number\nignoresurf :: IReaperControlSurface\n",
    "name": "CSurf_SetSurfaceVolume",
    "params": [
      {
        "type": "MediaTrack",
        "name": "trackid"
      },
      {
        "type": "number",
        "name": "volume"
      },
      {
        "type": "IReaperControlSurface",
        "name": "ignoresurf"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_SetTrackListChange ) :: nil",
    "doc": "(reaper.CSurf_SetTrackListChange ) :: nil\n",
    "name": "CSurf_SetTrackListChange",
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_TrackFromID idx mcpView) :: (MediaTrack)",
    "doc": "(reaper.CSurf_TrackFromID idx mcpView) :: (MediaTrack)\nidx :: integer\nmcpView :: boolean\n",
    "name": "CSurf_TrackFromID",
    "params": [
      {
        "type": "integer",
        "name": "idx"
      },
      {
        "type": "boolean",
        "name": "mcpView"
      }
    ],
    "returns": [
      {
        "type": "MediaTrack"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.CSurf_TrackToID track mcpView) :: (integer)",
    "doc": "(reaper.CSurf_TrackToID track mcpView) :: (integer)\ntrack :: MediaTrack\nmcpView :: boolean\n",
    "name": "CSurf_TrackToID",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "boolean",
        "name": "mcpView"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.DB2SLIDER x) :: (number)",
    "doc": "(reaper.DB2SLIDER x) :: (number)\nx :: number\n",
    "name": "DB2SLIDER",
    "params": [
      {
        "type": "number",
        "name": "x"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.DeleteActionShortcut section cmdID shortcutidx) :: (boolean)",
    "doc": "(reaper.DeleteActionShortcut section cmdID shortcutidx) :: (boolean)\nsection :: KbdSectionInfo\ncmdID :: integer\nshortcutidx :: integer\nDelete the specific shortcut for the given command ID.\nSee CountActionShortcuts, GetActionShortcutDesc, DoActionShortcutDialog.",
    "name": "DeleteActionShortcut",
    "params": [
      {
        "type": "KbdSectionInfo",
        "name": "section"
      },
      {
        "type": "integer",
        "name": "cmdID"
      },
      {
        "type": "integer",
        "name": "shortcutidx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Delete the specific shortcut for the given command ID.\nSee CountActionShortcuts, GetActionShortcutDesc, DoActionShortcutDialog."
  },
  {
    "form": "(reaper.DeleteEnvelopePointEx envelope autoitem_idx ptidx) :: (boolean)",
    "doc": "(reaper.DeleteEnvelopePointEx envelope autoitem_idx ptidx) :: (boolean)\nenvelope :: TrackEnvelope\nautoitem_idx :: integer\nptidx :: integer\nDelete an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx.",
    "name": "DeleteEnvelopePointEx",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "envelope"
      },
      {
        "type": "integer",
        "name": "autoitem_idx"
      },
      {
        "type": "integer",
        "name": "ptidx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Delete an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx."
  },
  {
    "form": "(reaper.DeleteEnvelopePointRange envelope time_start time_end) :: (boolean)",
    "doc": "(reaper.DeleteEnvelopePointRange envelope time_start time_end) :: (boolean)\nenvelope :: TrackEnvelope\ntime_start :: number\ntime_end :: number\nDelete a range of envelope points. See DeleteEnvelopePointRangeEx, DeleteEnvelopePointEx.",
    "name": "DeleteEnvelopePointRange",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "envelope"
      },
      {
        "type": "number",
        "name": "time_start"
      },
      {
        "type": "number",
        "name": "time_end"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Delete a range of envelope points. See DeleteEnvelopePointRangeEx, DeleteEnvelopePointEx."
  },
  {
    "form": "(reaper.DeleteEnvelopePointRangeEx envelope autoitem_idx time_start time_end) :: (boolean)",
    "doc": "(reaper.DeleteEnvelopePointRangeEx envelope autoitem_idx time_start time_end) :: (boolean)\nenvelope :: TrackEnvelope\nautoitem_idx :: integer\ntime_start :: number\ntime_end :: number\nDelete a range of envelope points. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.",
    "name": "DeleteEnvelopePointRangeEx",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "envelope"
      },
      {
        "type": "integer",
        "name": "autoitem_idx"
      },
      {
        "type": "number",
        "name": "time_start"
      },
      {
        "type": "number",
        "name": "time_end"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Delete a range of envelope points. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc."
  },
  {
    "form": "(reaper.DeleteExtState section key persist) :: nil",
    "doc": "(reaper.DeleteExtState section key persist) :: nil\nsection :: string\nkey :: string\npersist :: boolean\nDelete the extended state value for a specific section and key. persist=true means the value should remain deleted the next time REAPER is opened. See SetExtState, GetExtState, HasExtState.",
    "name": "DeleteExtState",
    "params": [
      {
        "type": "string",
        "name": "section"
      },
      {
        "type": "string",
        "name": "key"
      },
      {
        "type": "boolean",
        "name": "persist"
      }
    ],
    "namespace": "reaper",
    "description": "Delete the extended state value for a specific section and key. persist=true means the value should remain deleted the next time REAPER is opened. See SetExtState, GetExtState, HasExtState."
  },
  {
    "form": "(reaper.DeleteProjectMarker proj markrgnindexnumber isrgn) :: (boolean)",
    "doc": "(reaper.DeleteProjectMarker proj markrgnindexnumber isrgn) :: (boolean)\nproj :: ReaProject\nmarkrgnindexnumber :: integer\nisrgn :: boolean\nDelete a marker.  proj==NULL for the active project.",
    "name": "DeleteProjectMarker",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "markrgnindexnumber"
      },
      {
        "type": "boolean",
        "name": "isrgn"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Delete a marker.  proj==NULL for the active project."
  },
  {
    "form": "(reaper.DeleteProjectMarkerByIndex proj markrgnidx) :: (boolean)",
    "doc": "(reaper.DeleteProjectMarkerByIndex proj markrgnidx) :: (boolean)\nproj :: ReaProject\nmarkrgnidx :: integer\nDiffers from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker4).",
    "name": "DeleteProjectMarkerByIndex",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "markrgnidx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker4)."
  },
  {
    "form": "(reaper.DeleteTakeMarker take idx) :: (boolean)",
    "doc": "(reaper.DeleteTakeMarker take idx) :: (boolean)\ntake :: MediaItem_Take\nidx :: integer\nDelete a take marker. Note that idx will change for all following take markers. See GetNumTakeMarkers, GetTakeMarker, SetTakeMarker",
    "name": "DeleteTakeMarker",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "idx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Delete a take marker. Note that idx will change for all following take markers. See GetNumTakeMarkers, GetTakeMarker, SetTakeMarker"
  },
  {
    "form": "(reaper.DeleteTakeStretchMarkers take idx ?countIn) :: (integer)",
    "doc": "(reaper.DeleteTakeStretchMarkers take idx ?countIn) :: (integer)\ntake :: MediaItem_Take\nidx :: integer\ncountIn :: integer (optional)\nDeletes one or more stretch markers. Returns number of stretch markers deleted.",
    "name": "DeleteTakeStretchMarkers",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "idx"
      },
      {
        "type": "integer",
        "name": "countIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Deletes one or more stretch markers. Returns number of stretch markers deleted."
  },
  {
    "form": "(reaper.DeleteTempoTimeSigMarker project markerindex) :: (boolean)",
    "doc": "(reaper.DeleteTempoTimeSigMarker project markerindex) :: (boolean)\nproject :: ReaProject\nmarkerindex :: integer\nDelete a tempo/time signature marker.",
    "name": "DeleteTempoTimeSigMarker",
    "params": [
      {
        "type": "ReaProject",
        "name": "project"
      },
      {
        "type": "integer",
        "name": "markerindex"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Delete a tempo/time signature marker."
  },
  {
    "form": "(reaper.DeleteTrack tr) :: nil",
    "doc": "(reaper.DeleteTrack tr) :: nil\ntr :: MediaTrack\ndeletes a track",
    "name": "DeleteTrack",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      }
    ],
    "namespace": "reaper",
    "description": "deletes a track"
  },
  {
    "form": "(reaper.DeleteTrackMediaItem tr it) :: (boolean)",
    "doc": "(reaper.DeleteTrackMediaItem tr it) :: (boolean)\ntr :: MediaTrack\nit :: MediaItem\n",
    "name": "DeleteTrackMediaItem",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      },
      {
        "type": "MediaItem",
        "name": "it"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.DestroyAudioAccessor accessor) :: nil",
    "doc": "(reaper.DestroyAudioAccessor accessor) :: nil\naccessor :: AudioAccessor\nDestroy an audio accessor. Must only call from the main thread. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.",
    "name": "DestroyAudioAccessor",
    "params": [
      {
        "type": "AudioAccessor",
        "name": "accessor"
      }
    ],
    "namespace": "reaper",
    "description": "Destroy an audio accessor. Must only call from the main thread. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples."
  },
  {
    "form": "(reaper.DoActionShortcutDialog hwnd section cmdID shortcutidx) :: (boolean)",
    "doc": "(reaper.DoActionShortcutDialog hwnd section cmdID shortcutidx) :: (boolean)\nhwnd :: HWND\nsection :: KbdSectionInfo\ncmdID :: integer\nshortcutidx :: integer\nOpen the action shortcut dialog to edit or add a shortcut for the given command ID. If (shortcutidx >= 0 && shortcutidx < CountActionShortcuts()), that specific shortcut will be replaced, otherwise a new shortcut will be added.\nSee CountActionShortcuts, GetActionShortcutDesc, DeleteActionShortcut.",
    "name": "DoActionShortcutDialog",
    "params": [
      {
        "type": "HWND",
        "name": "hwnd"
      },
      {
        "type": "KbdSectionInfo",
        "name": "section"
      },
      {
        "type": "integer",
        "name": "cmdID"
      },
      {
        "type": "integer",
        "name": "shortcutidx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Open the action shortcut dialog to edit or add a shortcut for the given command ID. If (shortcutidx >= 0 && shortcutidx < CountActionShortcuts()), that specific shortcut will be replaced, otherwise a new shortcut will be added.\nSee CountActionShortcuts, GetActionShortcutDesc, DeleteActionShortcut."
  },
  {
    "form": "(reaper.Dock_UpdateDockID ident_str whichDock) :: nil",
    "doc": "(reaper.Dock_UpdateDockID ident_str whichDock) :: nil\nident_str :: string\nwhichDock :: integer\nupdates preference for docker window ident_str to be in dock whichDock on next open",
    "name": "Dock_UpdateDockID",
    "params": [
      {
        "type": "string",
        "name": "ident_str"
      },
      {
        "type": "integer",
        "name": "whichDock"
      }
    ],
    "namespace": "reaper",
    "description": "updates preference for docker window ident_str to be in dock whichDock on next open"
  },
  {
    "form": "(reaper.DockGetPosition whichDock) :: (integer)",
    "doc": "(reaper.DockGetPosition whichDock) :: (integer)\nwhichDock :: integer\n-1=not found, 0=bottom, 1=left, 2=top, 3=right, 4=floating",
    "name": "DockGetPosition",
    "params": [
      {
        "type": "integer",
        "name": "whichDock"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "-1=not found, 0=bottom, 1=left, 2=top, 3=right, 4=floating"
  },
  {
    "form": "(reaper.DockIsChildOfDock hwnd) :: (integer boolean)",
    "doc": "(reaper.DockIsChildOfDock hwnd) :: (integer boolean)\nhwnd :: HWND\nreturns dock index that contains hwnd, or -1",
    "name": "DockIsChildOfDock",
    "params": [
      {
        "type": "HWND",
        "name": "hwnd"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "isFloatingDocker"
      }
    ],
    "namespace": "reaper",
    "description": "returns dock index that contains hwnd, or -1"
  },
  {
    "form": "(reaper.DockWindowActivate hwnd) :: nil",
    "doc": "(reaper.DockWindowActivate hwnd) :: nil\nhwnd :: HWND\n",
    "name": "DockWindowActivate",
    "params": [
      {
        "type": "HWND",
        "name": "hwnd"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.DockWindowAdd hwnd name pos allowShow) :: nil",
    "doc": "(reaper.DockWindowAdd hwnd name pos allowShow) :: nil\nhwnd :: HWND\nname :: string\npos :: integer\nallowShow :: boolean\n",
    "name": "DockWindowAdd",
    "params": [
      {
        "type": "HWND",
        "name": "hwnd"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "integer",
        "name": "pos"
      },
      {
        "type": "boolean",
        "name": "allowShow"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.DockWindowAddEx hwnd name identstr allowShow) :: nil",
    "doc": "(reaper.DockWindowAddEx hwnd name identstr allowShow) :: nil\nhwnd :: HWND\nname :: string\nidentstr :: string\nallowShow :: boolean\n",
    "name": "DockWindowAddEx",
    "params": [
      {
        "type": "HWND",
        "name": "hwnd"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "string",
        "name": "identstr"
      },
      {
        "type": "boolean",
        "name": "allowShow"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.DockWindowRefresh ) :: nil",
    "doc": "(reaper.DockWindowRefresh ) :: nil\n",
    "name": "DockWindowRefresh",
    "namespace": "reaper"
  },
  {
    "form": "(reaper.DockWindowRefreshForHWND hwnd) :: nil",
    "doc": "(reaper.DockWindowRefreshForHWND hwnd) :: nil\nhwnd :: HWND\n",
    "name": "DockWindowRefreshForHWND",
    "params": [
      {
        "type": "HWND",
        "name": "hwnd"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.DockWindowRemove hwnd) :: nil",
    "doc": "(reaper.DockWindowRemove hwnd) :: nil\nhwnd :: HWND\n",
    "name": "DockWindowRemove",
    "params": [
      {
        "type": "HWND",
        "name": "hwnd"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.EditTempoTimeSigMarker project markerindex) :: (boolean)",
    "doc": "(reaper.EditTempoTimeSigMarker project markerindex) :: (boolean)\nproject :: ReaProject\nmarkerindex :: integer\nOpen the tempo/time signature marker editor dialog.",
    "name": "EditTempoTimeSigMarker",
    "params": [
      {
        "type": "ReaProject",
        "name": "project"
      },
      {
        "type": "integer",
        "name": "markerindex"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Open the tempo/time signature marker editor dialog."
  },
  {
    "form": "(reaper.EnsureNotCompletelyOffscreen integerr.left integerr.top integerr.right integerr.bot) :: (integerr.left integerr.top integerr.right integerr.bot)",
    "doc": "(reaper.EnsureNotCompletelyOffscreen integerr.left integerr.top integerr.right integerr.bot) :: (integerr.left integerr.top integerr.right integerr.bot)\nintegerr.left :: \nintegerr.top :: \nintegerr.right :: \nintegerr.bot :: \ncall with a saved window rect for your window and it'll correct any positioning info.",
    "name": "EnsureNotCompletelyOffscreen",
    "params": [
      {
        "name": "integerr.left"
      },
      {
        "name": "integerr.top"
      },
      {
        "name": "integerr.right"
      },
      {
        "name": "integerr.bot"
      }
    ],
    "returns": [
      {
        "type": "integerr.left"
      },
      {
        "type": "integerr.top"
      },
      {
        "type": "integerr.right"
      },
      {
        "type": "integerr.bot"
      }
    ],
    "namespace": "reaper",
    "description": "call with a saved window rect for your window and it'll correct any positioning info."
  },
  {
    "form": "(reaper.EnumerateFiles path fileindex) :: (string)",
    "doc": "(reaper.EnumerateFiles path fileindex) :: (string)\npath :: string\nfileindex :: integer\nList the files in the \"path\" directory. Returns NULL/nil when all files have been listed. Use fileindex = -1 to force re-read of directory (invalidate cache). See EnumerateSubdirectories",
    "name": "EnumerateFiles",
    "params": [
      {
        "type": "string",
        "name": "path"
      },
      {
        "type": "integer",
        "name": "fileindex"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "List the files in the \"path\" directory. Returns NULL/nil when all files have been listed. Use fileindex = -1 to force re-read of directory (invalidate cache). See EnumerateSubdirectories"
  },
  {
    "form": "(reaper.EnumerateSubdirectories path subdirindex) :: (string)",
    "doc": "(reaper.EnumerateSubdirectories path subdirindex) :: (string)\npath :: string\nsubdirindex :: integer\nList the subdirectories in the \"path\" directory. Use subdirindex = -1 to force re-read of directory (invalidate cache). Returns NULL/nil when all subdirectories have been listed. See EnumerateFiles",
    "name": "EnumerateSubdirectories",
    "params": [
      {
        "type": "string",
        "name": "path"
      },
      {
        "type": "integer",
        "name": "subdirindex"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "List the subdirectories in the \"path\" directory. Use subdirindex = -1 to force re-read of directory (invalidate cache). Returns NULL/nil when all subdirectories have been listed. See EnumerateFiles"
  },
  {
    "form": "(reaper.EnumInstalledFX index) :: (boolean string string)",
    "doc": "(reaper.EnumInstalledFX index) :: (boolean string string)\nindex :: integer\nEnumerates installed FX. Returns true if successful, sets nameOut and identOut to name and ident of FX at index.",
    "name": "EnumInstalledFX",
    "params": [
      {
        "type": "integer",
        "name": "index"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "string",
        "name": "ident"
      }
    ],
    "namespace": "reaper",
    "description": "Enumerates installed FX. Returns true if successful, sets nameOut and identOut to name and ident of FX at index."
  },
  {
    "form": "(reaper.EnumPitchShiftModes mode) :: (boolean string)",
    "doc": "(reaper.EnumPitchShiftModes mode) :: (boolean string)\nmode :: integer\nStart querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported",
    "name": "EnumPitchShiftModes",
    "params": [
      {
        "type": "integer",
        "name": "mode"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "str"
      }
    ],
    "namespace": "reaper",
    "description": "Start querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported"
  },
  {
    "form": "(reaper.EnumPitchShiftSubModes mode submode) :: (string)",
    "doc": "(reaper.EnumPitchShiftSubModes mode submode) :: (string)\nmode :: integer\nsubmode :: integer\nReturns submode name, or NULL",
    "name": "EnumPitchShiftSubModes",
    "params": [
      {
        "type": "integer",
        "name": "mode"
      },
      {
        "type": "integer",
        "name": "submode"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "Returns submode name, or NULL"
  },
  {
    "form": "(reaper.EnumProjectMarkers idx) :: (integer boolean number number string integer)",
    "doc": "(reaper.EnumProjectMarkers idx) :: (integer boolean number number string integer)\nidx :: integer\n",
    "name": "EnumProjectMarkers",
    "params": [
      {
        "type": "integer",
        "name": "idx"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "isrgn"
      },
      {
        "type": "number",
        "name": "pos"
      },
      {
        "type": "number",
        "name": "rgnend"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "integer",
        "name": "markrgnindexnumber"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.EnumProjectMarkers2 proj idx) :: (integer boolean number number string integer)",
    "doc": "(reaper.EnumProjectMarkers2 proj idx) :: (integer boolean number number string integer)\nproj :: ReaProject\nidx :: integer\n",
    "name": "EnumProjectMarkers2",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "idx"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "isrgn"
      },
      {
        "type": "number",
        "name": "pos"
      },
      {
        "type": "number",
        "name": "rgnend"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "integer",
        "name": "markrgnindexnumber"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.EnumProjectMarkers3 proj idx) :: (integer boolean number number string integer integer)",
    "doc": "(reaper.EnumProjectMarkers3 proj idx) :: (integer boolean number number string integer integer)\nproj :: ReaProject\nidx :: integer\n",
    "name": "EnumProjectMarkers3",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "idx"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "isrgn"
      },
      {
        "type": "number",
        "name": "pos"
      },
      {
        "type": "number",
        "name": "rgnend"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "integer",
        "name": "markrgnindexnumber"
      },
      {
        "type": "integer",
        "name": "color"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.EnumProjects idx) :: (ReaProject string)",
    "doc": "(reaper.EnumProjects idx) :: (ReaProject string)\nidx :: integer\nidx=-1 for current project,projfn can be NULL if not interested in filename. use idx 0x40000000 for currently rendering project, if any.",
    "name": "EnumProjects",
    "params": [
      {
        "type": "integer",
        "name": "idx"
      }
    ],
    "returns": [
      {
        "type": "ReaProject",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "projfn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "idx=-1 for current project,projfn can be NULL if not interested in filename. use idx 0x40000000 for currently rendering project, if any."
  },
  {
    "form": "(reaper.EnumProjExtState proj extname idx) :: (boolean string string)",
    "doc": "(reaper.EnumProjExtState proj extname idx) :: (boolean string string)\nproj :: ReaProject\nextname :: string\nidx :: integer\nEnumerate the data stored with the project for a specific extname. Returns false when there is no more data. See SetProjExtState, GetProjExtState.",
    "name": "EnumProjExtState",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "string",
        "name": "extname"
      },
      {
        "type": "integer",
        "name": "idx"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "key",
        "optional": true
      },
      {
        "type": "string",
        "name": "val",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Enumerate the data stored with the project for a specific extname. Returns false when there is no more data. See SetProjExtState, GetProjExtState."
  },
  {
    "form": "(reaper.EnumRegionRenderMatrix proj regionindex rendertrack) :: (MediaTrack)",
    "doc": "(reaper.EnumRegionRenderMatrix proj regionindex rendertrack) :: (MediaTrack)\nproj :: ReaProject\nregionindex :: integer\nrendertrack :: integer\nEnumerate which tracks will be rendered within this region when using the region render matrix. When called with rendertrack==0, the function returns the first track that will be rendered (which may be the master track); rendertrack==1 will return the next track rendered, and so on. The function returns NULL when there are no more tracks that will be rendered within this region.",
    "name": "EnumRegionRenderMatrix",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "regionindex"
      },
      {
        "type": "integer",
        "name": "rendertrack"
      }
    ],
    "returns": [
      {
        "type": "MediaTrack"
      }
    ],
    "namespace": "reaper",
    "description": "Enumerate which tracks will be rendered within this region when using the region render matrix. When called with rendertrack==0, the function returns the first track that will be rendered (which may be the master track); rendertrack==1 will return the next track rendered, and so on. The function returns NULL when there are no more tracks that will be rendered within this region."
  },
  {
    "form": "(reaper.EnumTrackMIDIProgramNames track programNumber programName) :: (boolean string)",
    "doc": "(reaper.EnumTrackMIDIProgramNames track programNumber programName) :: (boolean string)\ntrack :: integer\nprogramNumber :: integer\nprogramName :: string\nreturns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated",
    "name": "EnumTrackMIDIProgramNames",
    "params": [
      {
        "type": "integer",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "programNumber"
      },
      {
        "type": "string",
        "name": "programName"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "programName"
      }
    ],
    "namespace": "reaper",
    "description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated"
  },
  {
    "form": "(reaper.EnumTrackMIDIProgramNamesEx proj track programNumber programName) :: (boolean string)",
    "doc": "(reaper.EnumTrackMIDIProgramNamesEx proj track programNumber programName) :: (boolean string)\nproj :: ReaProject\ntrack :: MediaTrack\nprogramNumber :: integer\nprogramName :: string\nreturns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated",
    "name": "EnumTrackMIDIProgramNamesEx",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "programNumber"
      },
      {
        "type": "string",
        "name": "programName"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "programName"
      }
    ],
    "namespace": "reaper",
    "description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated"
  },
  {
    "form": "(reaper.Envelope_Evaluate envelope time samplerate samplesRequested) :: (integer number number number number)",
    "doc": "(reaper.Envelope_Evaluate envelope time samplerate samplesRequested) :: (integer number number number number)\nenvelope :: TrackEnvelope\ntime :: number\nsamplerate :: number\nsamplesRequested :: integer\nGet the effective envelope value at a given time position. samplesRequested is how long the caller expects until the next call to Envelope_Evaluate (often, the buffer block size). The return value is how many samples beyond that time position that the returned values are valid. dVdS is the change in value per sample (first derivative), ddVdS is the second derivative, dddVdS is the third derivative. See GetEnvelopeScalingMode.",
    "name": "Envelope_Evaluate",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "envelope"
      },
      {
        "type": "number",
        "name": "time"
      },
      {
        "type": "number",
        "name": "samplerate"
      },
      {
        "type": "integer",
        "name": "samplesRequested"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "value"
      },
      {
        "type": "number",
        "name": "dVdS"
      },
      {
        "type": "number",
        "name": "ddVdS"
      },
      {
        "type": "number",
        "name": "dddVdS"
      }
    ],
    "namespace": "reaper",
    "description": "Get the effective envelope value at a given time position. samplesRequested is how long the caller expects until the next call to Envelope_Evaluate (often, the buffer block size). The return value is how many samples beyond that time position that the returned values are valid. dVdS is the change in value per sample (first derivative), ddVdS is the second derivative, dddVdS is the third derivative. See GetEnvelopeScalingMode."
  },
  {
    "form": "(reaper.Envelope_FormatValue env value) :: (string)",
    "doc": "(reaper.Envelope_FormatValue env value) :: (string)\nenv :: TrackEnvelope\nvalue :: number\nFormats the value of an envelope to a user-readable form",
    "name": "Envelope_FormatValue",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "env"
      },
      {
        "type": "number",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "Formats the value of an envelope to a user-readable form"
  },
  {
    "form": "(reaper.Envelope_GetParentTake env) :: (MediaItem_Take integer integer)",
    "doc": "(reaper.Envelope_GetParentTake env) :: (MediaItem_Take integer integer)\nenv :: TrackEnvelope\nIf take envelope, gets the take from the envelope. If FX, indexOut set to FX index, index2Out set to parameter index, otherwise -1.",
    "name": "Envelope_GetParentTake",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "env"
      }
    ],
    "returns": [
      {
        "type": "MediaItem_Take",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "index"
      },
      {
        "type": "integer",
        "name": "index2"
      }
    ],
    "namespace": "reaper",
    "description": "If take envelope, gets the take from the envelope. If FX, indexOut set to FX index, index2Out set to parameter index, otherwise -1."
  },
  {
    "form": "(reaper.Envelope_GetParentTrack env) :: (MediaTrack integer integer)",
    "doc": "(reaper.Envelope_GetParentTrack env) :: (MediaTrack integer integer)\nenv :: TrackEnvelope\nIf track envelope, gets the track from the envelope. If FX, indexOut set to FX index, index2Out set to parameter index, otherwise -1.",
    "name": "Envelope_GetParentTrack",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "env"
      }
    ],
    "returns": [
      {
        "type": "MediaTrack",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "index"
      },
      {
        "type": "integer",
        "name": "index2"
      }
    ],
    "namespace": "reaper",
    "description": "If track envelope, gets the track from the envelope. If FX, indexOut set to FX index, index2Out set to parameter index, otherwise -1."
  },
  {
    "form": "(reaper.Envelope_SortPoints envelope) :: (boolean)",
    "doc": "(reaper.Envelope_SortPoints envelope) :: (boolean)\nenvelope :: TrackEnvelope\nSort envelope points by time. See SetEnvelopePoint, InsertEnvelopePoint.",
    "name": "Envelope_SortPoints",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "envelope"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Sort envelope points by time. See SetEnvelopePoint, InsertEnvelopePoint."
  },
  {
    "form": "(reaper.Envelope_SortPointsEx envelope autoitem_idx) :: (boolean)",
    "doc": "(reaper.Envelope_SortPointsEx envelope autoitem_idx) :: (boolean)\nenvelope :: TrackEnvelope\nautoitem_idx :: integer\nSort envelope points by time. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See SetEnvelopePoint, InsertEnvelopePoint.",
    "name": "Envelope_SortPointsEx",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "envelope"
      },
      {
        "type": "integer",
        "name": "autoitem_idx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Sort envelope points by time. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See SetEnvelopePoint, InsertEnvelopePoint."
  },
  {
    "form": "(reaper.ExecProcess cmdline timeoutmsec) :: (string)",
    "doc": "(reaper.ExecProcess cmdline timeoutmsec) :: (string)\ncmdline :: string\ntimeoutmsec :: integer\nExecutes command line, returns NULL on total failure, otherwise the return value, a newline, and then the output of the command. If timeoutmsec is 0, command will be allowed to run indefinitely (recommended for large amounts of returned output). timeoutmsec is -1 for no wait/terminate, -2 for no wait and minimize",
    "name": "ExecProcess",
    "params": [
      {
        "type": "string",
        "name": "cmdline"
      },
      {
        "type": "integer",
        "name": "timeoutmsec"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "Executes command line, returns NULL on total failure, otherwise the return value, a newline, and then the output of the command. If timeoutmsec is 0, command will be allowed to run indefinitely (recommended for large amounts of returned output). timeoutmsec is -1 for no wait/terminate, -2 for no wait and minimize"
  },
  {
    "form": "(reaper.file_exists path) :: (boolean)",
    "doc": "(reaper.file_exists path) :: (boolean)\npath :: string\nreturns true if path points to a valid, readable file",
    "name": "file_exists",
    "params": [
      {
        "type": "string",
        "name": "path"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "returns true if path points to a valid, readable file"
  },
  {
    "form": "(reaper.FindTempoTimeSigMarker project time) :: (integer)",
    "doc": "(reaper.FindTempoTimeSigMarker project time) :: (integer)\nproject :: ReaProject\ntime :: number\nFind the tempo/time signature marker that falls at or before this time position (the marker that is in effect as of this time position).",
    "name": "FindTempoTimeSigMarker",
    "params": [
      {
        "type": "ReaProject",
        "name": "project"
      },
      {
        "type": "number",
        "name": "time"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Find the tempo/time signature marker that falls at or before this time position (the marker that is in effect as of this time position)."
  },
  {
    "form": "(reaper.format_timestr tpos buf) :: (string)",
    "doc": "(reaper.format_timestr tpos buf) :: (string)\ntpos :: number\nbuf :: string\nFormat tpos (which is time in seconds) as hh:mm:ss.sss. See format_timestr_pos, format_timestr_len.",
    "name": "format_timestr",
    "params": [
      {
        "type": "number",
        "name": "tpos"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "Format tpos (which is time in seconds) as hh:mm:ss.sss. See format_timestr_pos, format_timestr_len."
  },
  {
    "form": "(reaper.format_timestr_len tpos buf offset modeoverride) :: (string)",
    "doc": "(reaper.format_timestr_len tpos buf offset modeoverride) :: (string)\ntpos :: number\nbuf :: string\noffset :: number\nmodeoverride :: integer\ntime formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f\noffset is start of where the length will be calculated from",
    "name": "format_timestr_len",
    "params": [
      {
        "type": "number",
        "name": "tpos"
      },
      {
        "type": "string",
        "name": "buf"
      },
      {
        "type": "number",
        "name": "offset"
      },
      {
        "type": "integer",
        "name": "modeoverride"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f\noffset is start of where the length will be calculated from"
  },
  {
    "form": "(reaper.format_timestr_pos tpos buf modeoverride) :: (string)",
    "doc": "(reaper.format_timestr_pos tpos buf modeoverride) :: (string)\ntpos :: number\nbuf :: string\nmodeoverride :: integer\ntime formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f",
    "name": "format_timestr_pos",
    "params": [
      {
        "type": "number",
        "name": "tpos"
      },
      {
        "type": "string",
        "name": "buf"
      },
      {
        "type": "integer",
        "name": "modeoverride"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f"
  },
  {
    "form": "(reaper.genGuid gGUID) :: (string)",
    "doc": "(reaper.genGuid gGUID) :: (string)\ngGUID :: string\n",
    "name": "genGuid",
    "params": [
      {
        "type": "string",
        "name": "gGUID"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "gGUID"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.get_config_var_string name) :: (boolean string)",
    "doc": "(reaper.get_config_var_string name) :: (boolean string)\nname :: string\ngets ini configuration variable value as string",
    "name": "get_config_var_string",
    "params": [
      {
        "type": "string",
        "name": "name"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "gets ini configuration variable value as string"
  },
  {
    "form": "(reaper.get_ini_file ) :: (string)",
    "doc": "(reaper.get_ini_file ) :: (string)\nGet reaper.ini full filename.",
    "name": "get_ini_file",
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "Get reaper.ini full filename."
  },
  {
    "form": "(reaper.GetActionShortcutDesc section cmdID shortcutidx) :: (boolean string)",
    "doc": "(reaper.GetActionShortcutDesc section cmdID shortcutidx) :: (boolean string)\nsection :: KbdSectionInfo\ncmdID :: integer\nshortcutidx :: integer\nGet the text description of a specific shortcut for the given command ID.\nSee CountActionShortcuts,DeleteActionShortcut,DoActionShortcutDialog.",
    "name": "GetActionShortcutDesc",
    "params": [
      {
        "type": "KbdSectionInfo",
        "name": "section"
      },
      {
        "type": "integer",
        "name": "cmdID"
      },
      {
        "type": "integer",
        "name": "shortcutidx"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "desc"
      }
    ],
    "namespace": "reaper",
    "description": "Get the text description of a specific shortcut for the given command ID.\nSee CountActionShortcuts,DeleteActionShortcut,DoActionShortcutDialog."
  },
  {
    "form": "(reaper.GetActiveTake item) :: (MediaItem_Take)",
    "doc": "(reaper.GetActiveTake item) :: (MediaItem_Take)\nitem :: MediaItem\nget the active take in this item",
    "name": "GetActiveTake",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      }
    ],
    "returns": [
      {
        "type": "MediaItem_Take"
      }
    ],
    "namespace": "reaper",
    "description": "get the active take in this item"
  },
  {
    "form": "(reaper.GetAllProjectPlayStates ignoreProject) :: (integer)",
    "doc": "(reaper.GetAllProjectPlayStates ignoreProject) :: (integer)\nignoreProject :: ReaProject\nreturns the bitwise OR of all project play states (1=playing, 2=pause, 4=recording)",
    "name": "GetAllProjectPlayStates",
    "params": [
      {
        "type": "ReaProject",
        "name": "ignoreProject"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "returns the bitwise OR of all project play states (1=playing, 2=pause, 4=recording)"
  },
  {
    "form": "(reaper.GetAppVersion ) :: (string)",
    "doc": "(reaper.GetAppVersion ) :: (string)\nReturns app version which may include an OS/arch signifier, such as: \"6.17\" (windows 32-bit), \"6.17/x64\" (windows 64-bit), \"6.17/OSX64\" (macOS 64-bit Intel), \"6.17/OSX\" (macOS 32-bit), \"6.17/macOS-arm64\", \"6.17/linux-x86_64\", \"6.17/linux-i686\", \"6.17/linux-aarch64\", \"6.17/linux-armv7l\", etc",
    "name": "GetAppVersion",
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "Returns app version which may include an OS/arch signifier, such as: \"6.17\" (windows 32-bit), \"6.17/x64\" (windows 64-bit), \"6.17/OSX64\" (macOS 64-bit Intel), \"6.17/OSX\" (macOS 32-bit), \"6.17/macOS-arm64\", \"6.17/linux-x86_64\", \"6.17/linux-i686\", \"6.17/linux-aarch64\", \"6.17/linux-armv7l\", etc"
  },
  {
    "form": "(reaper.GetArmedCommand ) :: (integer string)",
    "doc": "(reaper.GetArmedCommand ) :: (integer string)\ngets the currently armed command and section name (returns 0 if nothing armed). section name is empty-string for main section.",
    "name": "GetArmedCommand",
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "sec"
      }
    ],
    "namespace": "reaper",
    "description": "gets the currently armed command and section name (returns 0 if nothing armed). section name is empty-string for main section."
  },
  {
    "form": "(reaper.GetAudioAccessorEndTime accessor) :: (number)",
    "doc": "(reaper.GetAudioAccessorEndTime accessor) :: (number)\naccessor :: AudioAccessor\nGet the end time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorSamples.",
    "name": "GetAudioAccessorEndTime",
    "params": [
      {
        "type": "AudioAccessor",
        "name": "accessor"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Get the end time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorSamples."
  },
  {
    "form": "(reaper.GetAudioAccessorHash accessor hashNeed128) :: (string)",
    "doc": "(reaper.GetAudioAccessorHash accessor hashNeed128) :: (string)\naccessor :: AudioAccessor\nhashNeed128 :: string\nDeprecated. See AudioAccessorStateChanged instead.",
    "name": "GetAudioAccessorHash",
    "params": [
      {
        "type": "AudioAccessor",
        "name": "accessor"
      },
      {
        "type": "string",
        "name": "hashNeed128"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "hashNeed128"
      }
    ],
    "namespace": "reaper",
    "description": "Deprecated. See AudioAccessorStateChanged instead."
  },
  {
    "form": "(reaper.GetAudioAccessorSamples accessor samplerate numchannels starttime_sec numsamplesperchannel samplebuffer) :: (integer)",
    "doc": "(reaper.GetAudioAccessorSamples accessor samplerate numchannels starttime_sec numsamplesperchannel samplebuffer) :: (integer)\naccessor :: AudioAccessor\nsamplerate :: integer\nnumchannels :: integer\nstarttime_sec :: number\nnumsamplesperchannel :: integer\nsamplebuffer :: reaper.array\nGet a block of samples from the audio accessor. Samples are extracted immediately pre-FX, and returned interleaved (first sample of first channel, first sample of second channel...). Returns 0 if no audio, 1 if audio, -1 on error. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime.\nThis function has special handling in Python, and only returns two objects, the API function return value, and the sample buffer. Example usage:",
    "name": "GetAudioAccessorSamples",
    "params": [
      {
        "type": "AudioAccessor",
        "name": "accessor"
      },
      {
        "type": "integer",
        "name": "samplerate"
      },
      {
        "type": "integer",
        "name": "numchannels"
      },
      {
        "type": "number",
        "name": "starttime_sec"
      },
      {
        "type": "integer",
        "name": "numsamplesperchannel"
      },
      {
        "type": "reaper.array",
        "name": "samplebuffer"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Get a block of samples from the audio accessor. Samples are extracted immediately pre-FX, and returned interleaved (first sample of first channel, first sample of second channel...). Returns 0 if no audio, 1 if audio, -1 on error. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime.\nThis function has special handling in Python, and only returns two objects, the API function return value, and the sample buffer. Example usage:"
  },
  {
    "form": "(reaper.GetAudioAccessorStartTime accessor) :: (number)",
    "doc": "(reaper.GetAudioAccessorStartTime accessor) :: (number)\naccessor :: AudioAccessor\nGet the start time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorEndTime, GetAudioAccessorSamples.",
    "name": "GetAudioAccessorStartTime",
    "params": [
      {
        "type": "AudioAccessor",
        "name": "accessor"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Get the start time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorEndTime, GetAudioAccessorSamples."
  },
  {
    "form": "(reaper.GetAudioDeviceInfo attribute) :: (boolean string)",
    "doc": "(reaper.GetAudioDeviceInfo attribute) :: (boolean string)\nattribute :: string\nget information about the currently open audio device. attribute can be MODE, IDENT_IN, IDENT_OUT, BSIZE, SRATE, BPS. returns false if unknown attribute or device not open.",
    "name": "GetAudioDeviceInfo",
    "params": [
      {
        "type": "string",
        "name": "attribute"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "desc"
      }
    ],
    "namespace": "reaper",
    "description": "get information about the currently open audio device. attribute can be MODE, IDENT_IN, IDENT_OUT, BSIZE, SRATE, BPS. returns false if unknown attribute or device not open."
  },
  {
    "form": "(reaper.GetConfigWantsDock ident_str) :: (integer)",
    "doc": "(reaper.GetConfigWantsDock ident_str) :: (integer)\nident_str :: string\ngets the dock ID desired by ident_str, if any",
    "name": "GetConfigWantsDock",
    "params": [
      {
        "type": "string",
        "name": "ident_str"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "gets the dock ID desired by ident_str, if any"
  },
  {
    "form": "(reaper.GetCurrentProjectInLoadSave ) :: (ReaProject)",
    "doc": "(reaper.GetCurrentProjectInLoadSave ) :: (ReaProject)\nreturns current project if in load/save (usually only used from project_config_extension_t)",
    "name": "GetCurrentProjectInLoadSave",
    "returns": [
      {
        "type": "ReaProject"
      }
    ],
    "namespace": "reaper",
    "description": "returns current project if in load/save (usually only used from project_config_extension_t)"
  },
  {
    "form": "(reaper.GetCursorContext ) :: (integer)",
    "doc": "(reaper.GetCursorContext ) :: (integer)\nreturn the current cursor context: 0 if track panels, 1 if items, 2 if envelopes, otherwise unknown",
    "name": "GetCursorContext",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "return the current cursor context: 0 if track panels, 1 if items, 2 if envelopes, otherwise unknown"
  },
  {
    "form": "(reaper.GetCursorContext2 want_last_valid) :: (integer)",
    "doc": "(reaper.GetCursorContext2 want_last_valid) :: (integer)\nwant_last_valid :: boolean\n0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)",
    "name": "GetCursorContext2",
    "params": [
      {
        "type": "boolean",
        "name": "want_last_valid"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)"
  },
  {
    "form": "(reaper.GetCursorPosition ) :: (number)",
    "doc": "(reaper.GetCursorPosition ) :: (number)\nedit cursor position",
    "name": "GetCursorPosition",
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "edit cursor position"
  },
  {
    "form": "(reaper.GetCursorPositionEx proj) :: (number)",
    "doc": "(reaper.GetCursorPositionEx proj) :: (number)\nproj :: ReaProject\nedit cursor position",
    "name": "GetCursorPositionEx",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "edit cursor position"
  },
  {
    "form": "(reaper.GetDisplayedMediaItemColor item) :: (integer)",
    "doc": "(reaper.GetDisplayedMediaItemColor item) :: (integer)\nitem :: MediaItem\nsee GetDisplayedMediaItemColor2.",
    "name": "GetDisplayedMediaItemColor",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "see GetDisplayedMediaItemColor2."
  },
  {
    "form": "(reaper.GetDisplayedMediaItemColor2 item take) :: (integer)",
    "doc": "(reaper.GetDisplayedMediaItemColor2 item take) :: (integer)\nitem :: MediaItem\ntake :: MediaItem_Take\nReturns the custom take, item, or track color that is used (according to the user preference) to color the media item. The returned color is OS dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return of zero means \"no color\", not black.",
    "name": "GetDisplayedMediaItemColor2",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      },
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the custom take, item, or track color that is used (according to the user preference) to color the media item. The returned color is OS dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return of zero means \"no color\", not black."
  },
  {
    "form": "(reaper.GetEnvelopeInfo_Value env parmname) :: (number)",
    "doc": "(reaper.GetEnvelopeInfo_Value env parmname) :: (number)\nenv :: TrackEnvelope\nparmname :: string\nGets an envelope numerical-value attribute:\nI_TCPY : int : Y offset of envelope relative to parent track (may be separate lane or overlap with track contents)\nI_TCPH : int : visible height of envelope\nI_TCPY_USED : int : Y offset of envelope relative to parent track, exclusive of padding\nI_TCPH_USED : int : visible height of envelope, exclusive of padding\nP_TRACK : MediaTrack * : parent track pointer (if any)\nP_DESTTRACK : MediaTrack * : destination track pointer, if on a send\nP_ITEM : MediaItem * : parent item pointer (if any)\nP_TAKE : MediaItem_Take * : parent take pointer (if any)\nI_SEND_IDX : int : 1-based index of send in P_TRACK, or 0 if not a send\nI_HWOUT_IDX : int : 1-based index of hardware output in P_TRACK or 0 if not a hardware output\nI_RECV_IDX : int : 1-based index of receive in P_DESTTRACK or 0 if not a send/receive",
    "name": "GetEnvelopeInfo_Value",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "env"
      },
      {
        "type": "string",
        "name": "parmname"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Gets an envelope numerical-value attribute:\nI_TCPY : int : Y offset of envelope relative to parent track (may be separate lane or overlap with track contents)\nI_TCPH : int : visible height of envelope\nI_TCPY_USED : int : Y offset of envelope relative to parent track, exclusive of padding\nI_TCPH_USED : int : visible height of envelope, exclusive of padding\nP_TRACK : MediaTrack * : parent track pointer (if any)\nP_DESTTRACK : MediaTrack * : destination track pointer, if on a send\nP_ITEM : MediaItem * : parent item pointer (if any)\nP_TAKE : MediaItem_Take * : parent take pointer (if any)\nI_SEND_IDX : int : 1-based index of send in P_TRACK, or 0 if not a send\nI_HWOUT_IDX : int : 1-based index of hardware output in P_TRACK or 0 if not a hardware output\nI_RECV_IDX : int : 1-based index of receive in P_DESTTRACK or 0 if not a send/receive"
  },
  {
    "form": "(reaper.GetEnvelopeName env) :: (boolean string)",
    "doc": "(reaper.GetEnvelopeName env) :: (boolean string)\nenv :: TrackEnvelope\n",
    "name": "GetEnvelopeName",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "env"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetEnvelopePoint envelope ptidx) :: (boolean number number integer number boolean)",
    "doc": "(reaper.GetEnvelopePoint envelope ptidx) :: (boolean number number integer number boolean)\nenvelope :: TrackEnvelope\nptidx :: integer\nGet the attributes of an envelope point. See GetEnvelopePointEx.",
    "name": "GetEnvelopePoint",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "envelope"
      },
      {
        "type": "integer",
        "name": "ptidx"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "time"
      },
      {
        "type": "number",
        "name": "value"
      },
      {
        "type": "integer",
        "name": "shape"
      },
      {
        "type": "number",
        "name": "tension"
      },
      {
        "type": "boolean",
        "name": "selected"
      }
    ],
    "namespace": "reaper",
    "description": "Get the attributes of an envelope point. See GetEnvelopePointEx."
  },
  {
    "form": "(reaper.GetEnvelopePointByTime envelope time) :: (integer)",
    "doc": "(reaper.GetEnvelopePointByTime envelope time) :: (integer)\nenvelope :: TrackEnvelope\ntime :: number\nReturns the envelope point at or immediately prior to the given time position. See GetEnvelopePointByTimeEx.",
    "name": "GetEnvelopePointByTime",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "envelope"
      },
      {
        "type": "number",
        "name": "time"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the envelope point at or immediately prior to the given time position. See GetEnvelopePointByTimeEx."
  },
  {
    "form": "(reaper.GetEnvelopePointByTimeEx envelope autoitem_idx time) :: (integer)",
    "doc": "(reaper.GetEnvelopePointByTimeEx envelope autoitem_idx time) :: (integer)\nenvelope :: TrackEnvelope\nautoitem_idx :: integer\ntime :: number\nReturns the envelope point at or immediately prior to the given time position.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.",
    "name": "GetEnvelopePointByTimeEx",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "envelope"
      },
      {
        "type": "integer",
        "name": "autoitem_idx"
      },
      {
        "type": "number",
        "name": "time"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the envelope point at or immediately prior to the given time position.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx."
  },
  {
    "form": "(reaper.GetEnvelopePointEx envelope autoitem_idx ptidx) :: (boolean number number integer number boolean)",
    "doc": "(reaper.GetEnvelopePointEx envelope autoitem_idx ptidx) :: (boolean number number integer number boolean)\nenvelope :: TrackEnvelope\nautoitem_idx :: integer\nptidx :: integer\nGet the attributes of an envelope point.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee CountEnvelopePointsEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.",
    "name": "GetEnvelopePointEx",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "envelope"
      },
      {
        "type": "integer",
        "name": "autoitem_idx"
      },
      {
        "type": "integer",
        "name": "ptidx"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "time"
      },
      {
        "type": "number",
        "name": "value"
      },
      {
        "type": "integer",
        "name": "shape"
      },
      {
        "type": "number",
        "name": "tension"
      },
      {
        "type": "boolean",
        "name": "selected"
      }
    ],
    "namespace": "reaper",
    "description": "Get the attributes of an envelope point.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee CountEnvelopePointsEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx."
  },
  {
    "form": "(reaper.GetEnvelopeScalingMode env) :: (integer)",
    "doc": "(reaper.GetEnvelopeScalingMode env) :: (integer)\nenv :: TrackEnvelope\nReturns the envelope scaling mode: 0=no scaling, 1=fader scaling. All API functions deal with raw envelope point values, to convert raw from/to scaled values see ScaleFromEnvelopeMode, ScaleToEnvelopeMode.",
    "name": "GetEnvelopeScalingMode",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "env"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the envelope scaling mode: 0=no scaling, 1=fader scaling. All API functions deal with raw envelope point values, to convert raw from/to scaled values see ScaleFromEnvelopeMode, ScaleToEnvelopeMode."
  },
  {
    "form": "(reaper.GetEnvelopeStateChunk env str isundo) :: (boolean string)",
    "doc": "(reaper.GetEnvelopeStateChunk env str isundo) :: (boolean string)\nenv :: TrackEnvelope\nstr :: string\nisundo :: boolean\nGets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.",
    "name": "GetEnvelopeStateChunk",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "env"
      },
      {
        "type": "string",
        "name": "str"
      },
      {
        "type": "boolean",
        "name": "isundo"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "str"
      }
    ],
    "namespace": "reaper",
    "description": "Gets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint."
  },
  {
    "form": "(reaper.GetEnvelopeUIState env) :: (integer)",
    "doc": "(reaper.GetEnvelopeUIState env) :: (integer)\nenv :: TrackEnvelope\ngets information on the UI state of an envelope: returns &1 if automation/modulation is playing back, &2 if automation is being actively written, &4 if the envelope recently had an effective automation mode change",
    "name": "GetEnvelopeUIState",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "env"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "gets information on the UI state of an envelope: returns &1 if automation/modulation is playing back, &2 if automation is being actively written, &4 if the envelope recently had an effective automation mode change"
  },
  {
    "form": "(reaper.GetExePath ) :: (string)",
    "doc": "(reaper.GetExePath ) :: (string)\nreturns path of REAPER.exe (not including EXE), i.e. C:\\Program Files\\REAPER",
    "name": "GetExePath",
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "returns path of REAPER.exe (not including EXE), i.e. C:\\Program Files\\REAPER"
  },
  {
    "form": "(reaper.GetExtState section key) :: (string)",
    "doc": "(reaper.GetExtState section key) :: (string)\nsection :: string\nkey :: string\nGet the extended state value for a specific section and key. See SetExtState, DeleteExtState, HasExtState.",
    "name": "GetExtState",
    "params": [
      {
        "type": "string",
        "name": "section"
      },
      {
        "type": "string",
        "name": "key"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "Get the extended state value for a specific section and key. See SetExtState, DeleteExtState, HasExtState."
  },
  {
    "form": "(reaper.GetFocusedFX ) :: (integer integer integer integer)",
    "doc": "(reaper.GetFocusedFX ) :: (integer integer integer integer)\nThis function is deprecated (returns GetFocusedFX2()&3), see GetTouchedOrFocusedFX.",
    "name": "GetFocusedFX",
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "tracknumber"
      },
      {
        "type": "integer",
        "name": "itemnumber"
      },
      {
        "type": "integer",
        "name": "fxnumber"
      }
    ],
    "namespace": "reaper",
    "description": "This function is deprecated (returns GetFocusedFX2()&3), see GetTouchedOrFocusedFX."
  },
  {
    "form": "(reaper.GetFocusedFX2 ) :: (integer integer integer integer)",
    "doc": "(reaper.GetFocusedFX2 ) :: (integer integer integer integer)\nReturn value has 1 set if track FX, 2 if take/item FX, 4 set if FX is no longer focused but still open. tracknumber==0 means the master track, 1 means track 1, etc. itemnumber is zero-based (or -1 if not an item). For interpretation of fxnumber, see GetLastTouchedFX. Deprecated, see GetTouchedOrFocusedFX",
    "name": "GetFocusedFX2",
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "tracknumber"
      },
      {
        "type": "integer",
        "name": "itemnumber"
      },
      {
        "type": "integer",
        "name": "fxnumber"
      }
    ],
    "namespace": "reaper",
    "description": "Return value has 1 set if track FX, 2 if take/item FX, 4 set if FX is no longer focused but still open. tracknumber==0 means the master track, 1 means track 1, etc. itemnumber is zero-based (or -1 if not an item). For interpretation of fxnumber, see GetLastTouchedFX. Deprecated, see GetTouchedOrFocusedFX"
  },
  {
    "form": "(reaper.GetFreeDiskSpaceForRecordPath proj pathidx) :: (integer)",
    "doc": "(reaper.GetFreeDiskSpaceForRecordPath proj pathidx) :: (integer)\nproj :: ReaProject\npathidx :: integer\nreturns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate.",
    "name": "GetFreeDiskSpaceForRecordPath",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "pathidx"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate."
  },
  {
    "form": "(reaper.GetFXEnvelope track fxindex parameterindex create) :: (TrackEnvelope)",
    "doc": "(reaper.GetFXEnvelope track fxindex parameterindex create) :: (TrackEnvelope)\ntrack :: MediaTrack\nfxindex :: integer\nparameterindex :: integer\ncreate :: boolean\nReturns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created. If the envelope already exists and is bypassed and create=true, then the envelope will be unbypassed.",
    "name": "GetFXEnvelope",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fxindex"
      },
      {
        "type": "integer",
        "name": "parameterindex"
      },
      {
        "type": "boolean",
        "name": "create"
      }
    ],
    "returns": [
      {
        "type": "TrackEnvelope"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created. If the envelope already exists and is bypassed and create=true, then the envelope will be unbypassed."
  },
  {
    "form": "(reaper.GetGlobalAutomationOverride ) :: (integer)",
    "doc": "(reaper.GetGlobalAutomationOverride ) :: (integer)\nreturn -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass",
    "name": "GetGlobalAutomationOverride",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass"
  },
  {
    "form": "(reaper.GetHZoomLevel ) :: (number)",
    "doc": "(reaper.GetHZoomLevel ) :: (number)\nreturns pixels/second",
    "name": "GetHZoomLevel",
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "returns pixels/second"
  },
  {
    "form": "(reaper.GetInputActivityLevel input_id) :: (number)",
    "doc": "(reaper.GetInputActivityLevel input_id) :: (number)\ninput_id :: integer\nreturns approximate input level if available, 0-511 mono inputs, |1024 for stereo pairs, 4096+devidx*32 for MIDI devices",
    "name": "GetInputActivityLevel",
    "params": [
      {
        "type": "integer",
        "name": "input_id"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "returns approximate input level if available, 0-511 mono inputs, |1024 for stereo pairs, 4096+devidx*32 for MIDI devices"
  },
  {
    "form": "(reaper.GetInputChannelName channelIndex) :: (string)",
    "doc": "(reaper.GetInputChannelName channelIndex) :: (string)\nchannelIndex :: integer\n",
    "name": "GetInputChannelName",
    "params": [
      {
        "type": "integer",
        "name": "channelIndex"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetInputOutputLatency ) :: (integer integer)",
    "doc": "(reaper.GetInputOutputLatency ) :: (integer integer)\nGets the audio device input/output latency in samples",
    "name": "GetInputOutputLatency",
    "returns": [
      {
        "type": "integer",
        "name": "inputlatency"
      },
      {
        "type": "integer",
        "name": "outputLatency"
      }
    ],
    "namespace": "reaper",
    "description": "Gets the audio device input/output latency in samples"
  },
  {
    "form": "(reaper.GetItemEditingTime2 ) :: (number PCM_source integer)",
    "doc": "(reaper.GetItemEditingTime2 ) :: (number PCM_source integer)\nreturns time of relevant edit, set which_item to the pcm_source (if applicable), flags (if specified) will be set to 1 for edge resizing, 2 for fade change, 4 for item move, 8 for item slip edit (edit cursor time or start of item)",
    "name": "GetItemEditingTime2",
    "returns": [
      {
        "type": "number"
      },
      {
        "type": "PCM_source",
        "name": "which_item"
      },
      {
        "type": "integer",
        "name": "flags"
      }
    ],
    "namespace": "reaper",
    "description": "returns time of relevant edit, set which_item to the pcm_source (if applicable), flags (if specified) will be set to 1 for edge resizing, 2 for fade change, 4 for item move, 8 for item slip edit (edit cursor time or start of item)"
  },
  {
    "form": "(reaper.GetItemFromPoint screen_x screen_y allow_locked) :: (MediaItem MediaItem_Take)",
    "doc": "(reaper.GetItemFromPoint screen_x screen_y allow_locked) :: (MediaItem MediaItem_Take)\nscreen_x :: integer\nscreen_y :: integer\nallow_locked :: boolean\nReturns the first item at the screen coordinates specified. If allow_locked is false, locked items are ignored. If takeOutOptional specified, returns the take hit. See GetThingFromPoint.",
    "name": "GetItemFromPoint",
    "params": [
      {
        "type": "integer",
        "name": "screen_x"
      },
      {
        "type": "integer",
        "name": "screen_y"
      },
      {
        "type": "boolean",
        "name": "allow_locked"
      }
    ],
    "returns": [
      {
        "type": "MediaItem"
      },
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the first item at the screen coordinates specified. If allow_locked is false, locked items are ignored. If takeOutOptional specified, returns the take hit. See GetThingFromPoint."
  },
  {
    "form": "(reaper.GetItemProjectContext item) :: (ReaProject)",
    "doc": "(reaper.GetItemProjectContext item) :: (ReaProject)\nitem :: MediaItem\n",
    "name": "GetItemProjectContext",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      }
    ],
    "returns": [
      {
        "type": "ReaProject"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetItemStateChunk item str isundo) :: (boolean string)",
    "doc": "(reaper.GetItemStateChunk item str isundo) :: (boolean string)\nitem :: MediaItem\nstr :: string\nisundo :: boolean\nGets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.",
    "name": "GetItemStateChunk",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      },
      {
        "type": "string",
        "name": "str"
      },
      {
        "type": "boolean",
        "name": "isundo"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "str"
      }
    ],
    "namespace": "reaper",
    "description": "Gets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint."
  },
  {
    "form": "(reaper.GetLastColorThemeFile ) :: (string)",
    "doc": "(reaper.GetLastColorThemeFile ) :: (string)\n",
    "name": "GetLastColorThemeFile",
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetLastMarkerAndCurRegion proj time) :: (integer integer)",
    "doc": "(reaper.GetLastMarkerAndCurRegion proj time) :: (integer integer)\nproj :: ReaProject\ntime :: number\nGet the last project marker before time, and/or the project region that includes time. markeridx and regionidx are returned not necessarily as the displayed marker/region index, but as the index that can be passed to EnumProjectMarkers. Either or both of markeridx and regionidx may be NULL. See EnumProjectMarkers.",
    "name": "GetLastMarkerAndCurRegion",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "number",
        "name": "time"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "markeridx"
      },
      {
        "type": "integer",
        "name": "regionidx"
      }
    ],
    "namespace": "reaper",
    "description": "Get the last project marker before time, and/or the project region that includes time. markeridx and regionidx are returned not necessarily as the displayed marker/region index, but as the index that can be passed to EnumProjectMarkers. Either or both of markeridx and regionidx may be NULL. See EnumProjectMarkers."
  },
  {
    "form": "(reaper.GetLastTouchedFX ) :: (boolean integer integer integer)",
    "doc": "(reaper.GetLastTouchedFX ) :: (boolean integer integer integer)\nReturns true if the last touched FX parameter is valid, false otherwise. The low word of tracknumber is the 1-based track index -- 0 means the master track, 1 means track 1, etc. If the high word of tracknumber is nonzero, it refers to the 1-based item index (1 is the first item on the track, etc). For track FX, the low 24 bits of fxnumber refer to the FX index in the chain, and if the next 8 bits are 01, then the FX is record FX. For item FX, the low word defines the FX index in the chain, and the high word defines the take number. Deprecated, see GetTouchedOrFocusedFX.",
    "name": "GetLastTouchedFX",
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "tracknumber"
      },
      {
        "type": "integer",
        "name": "fxnumber"
      },
      {
        "type": "integer",
        "name": "paramnumber"
      }
    ],
    "namespace": "reaper",
    "description": "Returns true if the last touched FX parameter is valid, false otherwise. The low word of tracknumber is the 1-based track index -- 0 means the master track, 1 means track 1, etc. If the high word of tracknumber is nonzero, it refers to the 1-based item index (1 is the first item on the track, etc). For track FX, the low 24 bits of fxnumber refer to the FX index in the chain, and if the next 8 bits are 01, then the FX is record FX. For item FX, the low word defines the FX index in the chain, and the high word defines the take number. Deprecated, see GetTouchedOrFocusedFX."
  },
  {
    "form": "(reaper.GetLastTouchedTrack ) :: (MediaTrack)",
    "doc": "(reaper.GetLastTouchedTrack ) :: (MediaTrack)\n",
    "name": "GetLastTouchedTrack",
    "returns": [
      {
        "type": "MediaTrack"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetMainHwnd ) :: (HWND)",
    "doc": "(reaper.GetMainHwnd ) :: (HWND)\n",
    "name": "GetMainHwnd",
    "returns": [
      {
        "type": "HWND"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetMasterMuteSoloFlags ) :: (integer)",
    "doc": "(reaper.GetMasterMuteSoloFlags ) :: (integer)\n&1=master mute,&2=master solo. This is deprecated as you can just query the master track as well.",
    "name": "GetMasterMuteSoloFlags",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "&1=master mute,&2=master solo. This is deprecated as you can just query the master track as well."
  },
  {
    "form": "(reaper.GetMasterTrack proj) :: (MediaTrack)",
    "doc": "(reaper.GetMasterTrack proj) :: (MediaTrack)\nproj :: ReaProject\n",
    "name": "GetMasterTrack",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "MediaTrack"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetMasterTrackVisibility ) :: (integer)",
    "doc": "(reaper.GetMasterTrackVisibility ) :: (integer)\nreturns &1 if the master track is visible in the TCP, &2 if NOT visible in the mixer. See SetMasterTrackVisibility.",
    "name": "GetMasterTrackVisibility",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "returns &1 if the master track is visible in the TCP, &2 if NOT visible in the mixer. See SetMasterTrackVisibility."
  },
  {
    "form": "(reaper.GetMaxMidiInputs ) :: (integer)",
    "doc": "(reaper.GetMaxMidiInputs ) :: (integer)\nreturns max dev for midi inputs/outputs",
    "name": "GetMaxMidiInputs",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "returns max dev for midi inputs/outputs"
  },
  {
    "form": "(reaper.GetMaxMidiOutputs ) :: (integer)",
    "doc": "(reaper.GetMaxMidiOutputs ) :: (integer)\n",
    "name": "GetMaxMidiOutputs",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetMediaFileMetadata mediaSource identifier) :: (integer string)",
    "doc": "(reaper.GetMediaFileMetadata mediaSource identifier) :: (integer string)\nmediaSource :: PCM_source\nidentifier :: string\nGet text-based metadata from a media file for a given identifier. Call with identifier=\"\" to list all identifiers contained in the file, separated by newlines. May return \"[Binary data]\" for metadata that REAPER doesn't handle.",
    "name": "GetMediaFileMetadata",
    "params": [
      {
        "type": "PCM_source",
        "name": "mediaSource"
      },
      {
        "type": "string",
        "name": "identifier"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "Get text-based metadata from a media file for a given identifier. Call with identifier=\"\" to list all identifiers contained in the file, separated by newlines. May return \"[Binary data]\" for metadata that REAPER doesn't handle."
  },
  {
    "form": "(reaper.GetMediaItem proj itemidx) :: (MediaItem)",
    "doc": "(reaper.GetMediaItem proj itemidx) :: (MediaItem)\nproj :: ReaProject\nitemidx :: integer\nget an item from a project by item count (zero-based) (proj=0 for active project)",
    "name": "GetMediaItem",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "itemidx"
      }
    ],
    "returns": [
      {
        "type": "MediaItem"
      }
    ],
    "namespace": "reaper",
    "description": "get an item from a project by item count (zero-based) (proj=0 for active project)"
  },
  {
    "form": "(reaper.GetMediaItem_Track item) :: (MediaTrack)",
    "doc": "(reaper.GetMediaItem_Track item) :: (MediaTrack)\nitem :: MediaItem\nGet parent track of media item",
    "name": "GetMediaItem_Track",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      }
    ],
    "returns": [
      {
        "type": "MediaTrack"
      }
    ],
    "namespace": "reaper",
    "description": "Get parent track of media item"
  },
  {
    "form": "(reaper.GetMediaItemInfo_Value item parmname) :: (number)",
    "doc": "(reaper.GetMediaItemInfo_Value item parmname) :: (number)\nitem :: MediaItem\nparmname :: string\nGet media item numerical-value attributes.\nB_MUTE : bool * : muted (item solo overrides). setting this value will clear C_MUTE_SOLO.\nB_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.\nC_LANEPLAYS : char * : in fixed lane tracks, 0=this item lane does not play, 1=this item lane plays exclusively, 2=this item lane plays and other lanes also play, -1=this item is on a non-visible, non-playing lane on a non-fixed-lane track (read-only)\nC_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.\nB_LOOPSRC : bool * : loop source\nB_ALLTAKESPLAY : bool * : all takes play\nB_UISEL : bool * : selected in arrange view\nC_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1\nC_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1\nC_LOCK : char * : locked, &1=locked\nD_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_POSITION : double * : item position in seconds\nD_LENGTH : double * : item length in seconds\nD_SNAPOFFSET : double * : item snap offset in seconds\nD_FADEINLEN : double * : item manual fadein length in seconds\nD_FADEOUTLEN : double * : item manual fadeout length in seconds\nD_FADEINDIR : double * : item fadein curvature, -1..1\nD_FADEOUTDIR : double * : item fadeout curvature, -1..1\nD_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein\nD_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout\nC_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear\nC_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear\nI_GROUPID : int * : group ID, 0=no group\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nI_CURTAKE : int * : active take number\nIP_ITEMNUMBER : int : item number on this track (read-only, returns the item number directly)\nF_FREEMODE_Y : float * : free item positioning or fixed lane Y-position. 0=top of track, 1.0=bottom of track\nF_FREEMODE_H : float * : free item positioning or fixed lane height. 0.5=half the track height, 1.0=full track height\nI_FIXEDLANE : int * : fixed lane of item (fine to call with setNewValue, but returned value is read-only)\nB_FIXEDLANE_HIDDEN : bool * : true if displaying only one fixed lane and this item is in a different lane (read-only)\nP_TRACK : MediaTrack * : (read-only)",
    "name": "GetMediaItemInfo_Value",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      },
      {
        "type": "string",
        "name": "parmname"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Get media item numerical-value attributes.\nB_MUTE : bool * : muted (item solo overrides). setting this value will clear C_MUTE_SOLO.\nB_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.\nC_LANEPLAYS : char * : in fixed lane tracks, 0=this item lane does not play, 1=this item lane plays exclusively, 2=this item lane plays and other lanes also play, -1=this item is on a non-visible, non-playing lane on a non-fixed-lane track (read-only)\nC_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.\nB_LOOPSRC : bool * : loop source\nB_ALLTAKESPLAY : bool * : all takes play\nB_UISEL : bool * : selected in arrange view\nC_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1\nC_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1\nC_LOCK : char * : locked, &1=locked\nD_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_POSITION : double * : item position in seconds\nD_LENGTH : double * : item length in seconds\nD_SNAPOFFSET : double * : item snap offset in seconds\nD_FADEINLEN : double * : item manual fadein length in seconds\nD_FADEOUTLEN : double * : item manual fadeout length in seconds\nD_FADEINDIR : double * : item fadein curvature, -1..1\nD_FADEOUTDIR : double * : item fadeout curvature, -1..1\nD_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein\nD_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout\nC_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear\nC_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear\nI_GROUPID : int * : group ID, 0=no group\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nI_CURTAKE : int * : active take number\nIP_ITEMNUMBER : int : item number on this track (read-only, returns the item number directly)\nF_FREEMODE_Y : float * : free item positioning or fixed lane Y-position. 0=top of track, 1.0=bottom of track\nF_FREEMODE_H : float * : free item positioning or fixed lane height. 0.5=half the track height, 1.0=full track height\nI_FIXEDLANE : int * : fixed lane of item (fine to call with setNewValue, but returned value is read-only)\nB_FIXEDLANE_HIDDEN : bool * : true if displaying only one fixed lane and this item is in a different lane (read-only)\nP_TRACK : MediaTrack * : (read-only)"
  },
  {
    "form": "(reaper.GetMediaItemNumTakes item) :: (integer)",
    "doc": "(reaper.GetMediaItemNumTakes item) :: (integer)\nitem :: MediaItem\n",
    "name": "GetMediaItemNumTakes",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetMediaItemTake item tk) :: (MediaItem_Take)",
    "doc": "(reaper.GetMediaItemTake item tk) :: (MediaItem_Take)\nitem :: MediaItem\ntk :: integer\n",
    "name": "GetMediaItemTake",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      },
      {
        "type": "integer",
        "name": "tk"
      }
    ],
    "returns": [
      {
        "type": "MediaItem_Take"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetMediaItemTake_Item take) :: (MediaItem)",
    "doc": "(reaper.GetMediaItemTake_Item take) :: (MediaItem)\ntake :: MediaItem_Take\nGet parent item of media item take",
    "name": "GetMediaItemTake_Item",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "MediaItem"
      }
    ],
    "namespace": "reaper",
    "description": "Get parent item of media item take"
  },
  {
    "form": "(reaper.GetMediaItemTake_Peaks take peakrate starttime numchannels numsamplesperchannel want_extra_type buf) :: (integer)",
    "doc": "(reaper.GetMediaItemTake_Peaks take peakrate starttime numchannels numsamplesperchannel want_extra_type buf) :: (integer)\ntake :: MediaItem_Take\npeakrate :: number\nstarttime :: number\nnumchannels :: integer\nnumsamplesperchannel :: integer\nwant_extra_type :: integer\nbuf :: reaper.array\nGets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.",
    "name": "GetMediaItemTake_Peaks",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "number",
        "name": "peakrate"
      },
      {
        "type": "number",
        "name": "starttime"
      },
      {
        "type": "integer",
        "name": "numchannels"
      },
      {
        "type": "integer",
        "name": "numsamplesperchannel"
      },
      {
        "type": "integer",
        "name": "want_extra_type"
      },
      {
        "type": "reaper.array",
        "name": "buf"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality."
  },
  {
    "form": "(reaper.GetMediaItemTake_Source take) :: (PCM_source)",
    "doc": "(reaper.GetMediaItemTake_Source take) :: (PCM_source)\ntake :: MediaItem_Take\nGet media source of media item take",
    "name": "GetMediaItemTake_Source",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "PCM_source"
      }
    ],
    "namespace": "reaper",
    "description": "Get media source of media item take"
  },
  {
    "form": "(reaper.GetMediaItemTake_Track take) :: (MediaTrack)",
    "doc": "(reaper.GetMediaItemTake_Track take) :: (MediaTrack)\ntake :: MediaItem_Take\nGet parent track of media item take",
    "name": "GetMediaItemTake_Track",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "MediaTrack"
      }
    ],
    "namespace": "reaper",
    "description": "Get parent track of media item take"
  },
  {
    "form": "(reaper.GetMediaItemTakeByGUID project guidGUID) :: (MediaItem_Take)",
    "doc": "(reaper.GetMediaItemTakeByGUID project guidGUID) :: (MediaItem_Take)\nproject :: ReaProject\nguidGUID :: string\n",
    "name": "GetMediaItemTakeByGUID",
    "params": [
      {
        "type": "ReaProject",
        "name": "project"
      },
      {
        "type": "string",
        "name": "guidGUID"
      }
    ],
    "returns": [
      {
        "type": "MediaItem_Take"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetMediaItemTakeInfo_Value take parmname) :: (number)",
    "doc": "(reaper.GetMediaItemTakeInfo_Value take parmname) :: (number)\ntake :: MediaItem_Take\nparmname :: string\nGet media item take numerical-value attributes.\nD_STARTOFFS : double * : start offset in source media, in seconds\nD_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped\nD_PAN : double * : take pan, -1..1\nD_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc\nD_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc\nD_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc\nB_PPITCH : bool * : preserve pitch when changing playback rate\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right\nI_PITCHMODE : int * : pitch shifter mode, -1=project default, otherwise high 2 bytes=shifter, low 2 bytes=parameter\nI_STRETCHFLAGS : int * : stretch marker flags (&7 mask for mode override: 0=default, 1=balanced, 2/3/6=tonal, 4=transient, 5=no pre-echo)\nF_STRETCHFADESIZE : float * : stretch marker fade size in seconds (0.0025 default)\nI_RECPASSID : int * : record pass ID\nI_TAKEFX_NCH : int * : number of internal audio channels for per-take FX to use (OK to call with setNewValue, but the returned value is read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nIP_TAKENUMBER : int : take number (read-only, returns the take number directly)\nP_TRACK : pointer to MediaTrack (read-only)\nP_ITEM : pointer to MediaItem (read-only)\nP_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old.",
    "name": "GetMediaItemTakeInfo_Value",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "string",
        "name": "parmname"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Get media item take numerical-value attributes.\nD_STARTOFFS : double * : start offset in source media, in seconds\nD_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped\nD_PAN : double * : take pan, -1..1\nD_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc\nD_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc\nD_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc\nB_PPITCH : bool * : preserve pitch when changing playback rate\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right\nI_PITCHMODE : int * : pitch shifter mode, -1=project default, otherwise high 2 bytes=shifter, low 2 bytes=parameter\nI_STRETCHFLAGS : int * : stretch marker flags (&7 mask for mode override: 0=default, 1=balanced, 2/3/6=tonal, 4=transient, 5=no pre-echo)\nF_STRETCHFADESIZE : float * : stretch marker fade size in seconds (0.0025 default)\nI_RECPASSID : int * : record pass ID\nI_TAKEFX_NCH : int * : number of internal audio channels for per-take FX to use (OK to call with setNewValue, but the returned value is read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nIP_TAKENUMBER : int : take number (read-only, returns the take number directly)\nP_TRACK : pointer to MediaTrack (read-only)\nP_ITEM : pointer to MediaItem (read-only)\nP_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old."
  },
  {
    "form": "(reaper.GetMediaItemTrack item) :: (MediaTrack)",
    "doc": "(reaper.GetMediaItemTrack item) :: (MediaTrack)\nitem :: MediaItem\n",
    "name": "GetMediaItemTrack",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      }
    ],
    "returns": [
      {
        "type": "MediaTrack"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetMediaSourceFileName source) :: (string)",
    "doc": "(reaper.GetMediaSourceFileName source) :: (string)\nsource :: PCM_source\nCopies the media source filename to filenamebuf. Note that in-project MIDI media sources have no associated filename. See GetMediaSourceParent.",
    "name": "GetMediaSourceFileName",
    "params": [
      {
        "type": "PCM_source",
        "name": "source"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "filenamebuf"
      }
    ],
    "namespace": "reaper",
    "description": "Copies the media source filename to filenamebuf. Note that in-project MIDI media sources have no associated filename. See GetMediaSourceParent."
  },
  {
    "form": "(reaper.GetMediaSourceLength source) :: (number boolean)",
    "doc": "(reaper.GetMediaSourceLength source) :: (number boolean)\nsource :: PCM_source\nReturns the length of the source media. If the media source is beat-based, the length will be in quarter notes, otherwise it will be in seconds.",
    "name": "GetMediaSourceLength",
    "params": [
      {
        "type": "PCM_source",
        "name": "source"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "lengthIsQN"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the length of the source media. If the media source is beat-based, the length will be in quarter notes, otherwise it will be in seconds."
  },
  {
    "form": "(reaper.GetMediaSourceNumChannels source) :: (integer)",
    "doc": "(reaper.GetMediaSourceNumChannels source) :: (integer)\nsource :: PCM_source\nReturns the number of channels in the source media.",
    "name": "GetMediaSourceNumChannels",
    "params": [
      {
        "type": "PCM_source",
        "name": "source"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the number of channels in the source media."
  },
  {
    "form": "(reaper.GetMediaSourceParent src) :: (PCM_source)",
    "doc": "(reaper.GetMediaSourceParent src) :: (PCM_source)\nsrc :: PCM_source\nReturns the parent source, or NULL if src is the root source. This can be used to retrieve the parent properties of sections or reversed sources for example.",
    "name": "GetMediaSourceParent",
    "params": [
      {
        "type": "PCM_source",
        "name": "src"
      }
    ],
    "returns": [
      {
        "type": "PCM_source"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the parent source, or NULL if src is the root source. This can be used to retrieve the parent properties of sections or reversed sources for example."
  },
  {
    "form": "(reaper.GetMediaSourceSampleRate source) :: (integer)",
    "doc": "(reaper.GetMediaSourceSampleRate source) :: (integer)\nsource :: PCM_source\nReturns the sample rate. MIDI source media will return zero.",
    "name": "GetMediaSourceSampleRate",
    "params": [
      {
        "type": "PCM_source",
        "name": "source"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the sample rate. MIDI source media will return zero."
  },
  {
    "form": "(reaper.GetMediaSourceType source) :: (string)",
    "doc": "(reaper.GetMediaSourceType source) :: (string)\nsource :: PCM_source\ncopies the media source type (\"WAV\", \"MIDI\", etc) to typebuf",
    "name": "GetMediaSourceType",
    "params": [
      {
        "type": "PCM_source",
        "name": "source"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "typebuf"
      }
    ],
    "namespace": "reaper",
    "description": "copies the media source type (\"WAV\", \"MIDI\", etc) to typebuf"
  },
  {
    "form": "(reaper.GetMediaTrackInfo_Value tr parmname) :: (number)",
    "doc": "(reaper.GetMediaTrackInfo_Value tr parmname) :: (number)\ntr :: MediaTrack\nparmname :: string\nGet track numerical-value attributes.\nB_MUTE : bool * : muted\nB_PHASE : bool * : track phase inverted\nB_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)\nIP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)\nI_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place\nB_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is not muted, this track acts soloed\nI_FXEN : int * : fx enabled, 0=bypassed, !0=fx active\nI_RECARM : int * : record armed, 0=not record armed, 1=record armed\nI_RECINPUT : int * : record input, <0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.\nI_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace\nI_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)\nI_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)\nI_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on\nB_AUTO_RECARM : bool * : automatically set record arm when selected (does not immediately affect recarm state, script should set directly if desired)\nI_VUMODE : int * : track vu mode, &1:disabled, &30==0:stereo peaks, &30==2:multichannel peaks, &30==4:stereo RMS, &30==8:combined RMS, &30==12:LUFS-M, &30==16:LUFS-S (readout=max), &30==20:LUFS-S (readout=current), &32:LUFS calculation on channels 1+2 only\nI_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch\nI_NCHAN : int * : number of track channels, 2-128, even numbers only\nI_SELECTED : int * : track selected, 0=unselected, 1=selected\nI_WNDH : int * : current TCP window height in pixels including envelopes (read-only)\nI_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)\nI_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)\nI_MCPX : int * : current MCP X-position in pixels relative to mixer container (read-only)\nI_MCPY : int * : current MCP Y-position in pixels relative to mixer container (read-only)\nI_MCPW : int * : current MCP width in pixels (read-only)\nI_MCPH : int * : current MCP height in pixels (read-only)\nI_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\nI_FOLDERCOMPACT : int * : folder collapsed state (only valid on folders), 0=normal, 1=collapsed, 2=fully collapsed\nI_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)\nI_MIDI_INPUT_CHANMAP : int * : -1 maps to source channel, otherwise 1-16 to map to MIDI channel\nI_MIDI_CTL_CHAN : int * : -1 no link, 0-15 link to MIDI volume/pan on channel, 16 link to MIDI volume/pan on all channels\nI_MIDI_TRACKSEL_FLAG : int * : MIDI editor track list options: &1=expand media items, &2=exclude from list, &4=auto-pruned\nI_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels\nI_SPACER : int * : 1=TCP track spacer above this trackB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)\nD_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_PAN : double * : trim pan of track, -1..1\nD_WIDTH : double * : width of track, -1..1\nD_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6\nD_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6\nI_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan\nD_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc\nI_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper\nP_ENV:<envchunkname or P_ENV:{GUID... : TrackEnvelope * : (read-only) chunkname can be <VOLENV, <PANENV, etc; GUID is the stringified envelope GUID.\nB_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)\nB_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)\nB_MAINSEND : bool * : track sends audio to parent\nC_MAINSEND_OFFS : char * : channel offset of track send to parent\nC_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child track channels, 1=use one channel only)\nI_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)\nI_NUMFIXEDLANES : int * : number of track fixed lanes (fine to call with setNewValue, but returned value is read-only)\nC_LANESCOLLAPSED : char * : fixed lane collapse state (1=lanes collapsed, 2=track displays as non-fixed-lanes but hidden lanes exist)\nC_LANESETTINGS : char * : fixed lane settings (&1=auto-remove empty lanes at bottom, &2=do not auto-comp new recording, &4=newly recorded lanes play exclusively (else add lanes in layers), &8=big lanes (else small lanes), &16=add new recording at bottom (else record into first available lane), &32=hide lane buttons\nC_LANEPLAYS:N : char * :  on fixed lane tracks, 0=lane N does not play, 1=lane N plays exclusively, 2=lane N plays and other lanes also play (fine to call with setNewValue, but returned value is read-only)\nC_ALLLANESPLAY : char * : on fixed lane tracks, 0=no lanes play, 1=all lanes play, 2=some lanes play (fine to call with setNewValue 0 or 1, but returned value is read-only)\nC_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)\nF_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)\nI_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)\nD_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG\nP_PARTRACK : MediaTrack * : parent track (read-only)\nP_PROJECT : ReaProject * : parent project (read-only)",
    "name": "GetMediaTrackInfo_Value",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      },
      {
        "type": "string",
        "name": "parmname"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Get track numerical-value attributes.\nB_MUTE : bool * : muted\nB_PHASE : bool * : track phase inverted\nB_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)\nIP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)\nI_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place\nB_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is not muted, this track acts soloed\nI_FXEN : int * : fx enabled, 0=bypassed, !0=fx active\nI_RECARM : int * : record armed, 0=not record armed, 1=record armed\nI_RECINPUT : int * : record input, <0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.\nI_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace\nI_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)\nI_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)\nI_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on\nB_AUTO_RECARM : bool * : automatically set record arm when selected (does not immediately affect recarm state, script should set directly if desired)\nI_VUMODE : int * : track vu mode, &1:disabled, &30==0:stereo peaks, &30==2:multichannel peaks, &30==4:stereo RMS, &30==8:combined RMS, &30==12:LUFS-M, &30==16:LUFS-S (readout=max), &30==20:LUFS-S (readout=current), &32:LUFS calculation on channels 1+2 only\nI_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch\nI_NCHAN : int * : number of track channels, 2-128, even numbers only\nI_SELECTED : int * : track selected, 0=unselected, 1=selected\nI_WNDH : int * : current TCP window height in pixels including envelopes (read-only)\nI_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)\nI_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)\nI_MCPX : int * : current MCP X-position in pixels relative to mixer container (read-only)\nI_MCPY : int * : current MCP Y-position in pixels relative to mixer container (read-only)\nI_MCPW : int * : current MCP width in pixels (read-only)\nI_MCPH : int * : current MCP height in pixels (read-only)\nI_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\nI_FOLDERCOMPACT : int * : folder collapsed state (only valid on folders), 0=normal, 1=collapsed, 2=fully collapsed\nI_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)\nI_MIDI_INPUT_CHANMAP : int * : -1 maps to source channel, otherwise 1-16 to map to MIDI channel\nI_MIDI_CTL_CHAN : int * : -1 no link, 0-15 link to MIDI volume/pan on channel, 16 link to MIDI volume/pan on all channels\nI_MIDI_TRACKSEL_FLAG : int * : MIDI editor track list options: &1=expand media items, &2=exclude from list, &4=auto-pruned\nI_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels\nI_SPACER : int * : 1=TCP track spacer above this trackB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)\nD_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_PAN : double * : trim pan of track, -1..1\nD_WIDTH : double * : width of track, -1..1\nD_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6\nD_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6\nI_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan\nD_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc\nI_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper\nP_ENV:<envchunkname or P_ENV:{GUID... : TrackEnvelope * : (read-only) chunkname can be <VOLENV, <PANENV, etc; GUID is the stringified envelope GUID.\nB_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)\nB_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)\nB_MAINSEND : bool * : track sends audio to parent\nC_MAINSEND_OFFS : char * : channel offset of track send to parent\nC_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child track channels, 1=use one channel only)\nI_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)\nI_NUMFIXEDLANES : int * : number of track fixed lanes (fine to call with setNewValue, but returned value is read-only)\nC_LANESCOLLAPSED : char * : fixed lane collapse state (1=lanes collapsed, 2=track displays as non-fixed-lanes but hidden lanes exist)\nC_LANESETTINGS : char * : fixed lane settings (&1=auto-remove empty lanes at bottom, &2=do not auto-comp new recording, &4=newly recorded lanes play exclusively (else add lanes in layers), &8=big lanes (else small lanes), &16=add new recording at bottom (else record into first available lane), &32=hide lane buttons\nC_LANEPLAYS:N : char * :  on fixed lane tracks, 0=lane N does not play, 1=lane N plays exclusively, 2=lane N plays and other lanes also play (fine to call with setNewValue, but returned value is read-only)\nC_ALLLANESPLAY : char * : on fixed lane tracks, 0=no lanes play, 1=all lanes play, 2=some lanes play (fine to call with setNewValue 0 or 1, but returned value is read-only)\nC_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)\nF_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)\nI_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)\nD_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG\nP_PARTRACK : MediaTrack * : parent track (read-only)\nP_PROJECT : ReaProject * : parent project (read-only)"
  },
  {
    "form": "(reaper.GetMIDIInputName dev nameout) :: (boolean string)",
    "doc": "(reaper.GetMIDIInputName dev nameout) :: (boolean string)\ndev :: integer\nnameout :: string\nreturns true if device present",
    "name": "GetMIDIInputName",
    "params": [
      {
        "type": "integer",
        "name": "dev"
      },
      {
        "type": "string",
        "name": "nameout"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "nameout"
      }
    ],
    "namespace": "reaper",
    "description": "returns true if device present"
  },
  {
    "form": "(reaper.GetMIDIOutputName dev nameout) :: (boolean string)",
    "doc": "(reaper.GetMIDIOutputName dev nameout) :: (boolean string)\ndev :: integer\nnameout :: string\nreturns true if device present",
    "name": "GetMIDIOutputName",
    "params": [
      {
        "type": "integer",
        "name": "dev"
      },
      {
        "type": "string",
        "name": "nameout"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "nameout"
      }
    ],
    "namespace": "reaper",
    "description": "returns true if device present"
  },
  {
    "form": "(reaper.GetMixerScroll ) :: (MediaTrack)",
    "doc": "(reaper.GetMixerScroll ) :: (MediaTrack)\nGet the leftmost track visible in the mixer",
    "name": "GetMixerScroll",
    "returns": [
      {
        "type": "MediaTrack"
      }
    ],
    "namespace": "reaper",
    "description": "Get the leftmost track visible in the mixer"
  },
  {
    "form": "(reaper.GetMouseModifier context modifier_flag) :: (string)",
    "doc": "(reaper.GetMouseModifier context modifier_flag) :: (string)\ncontext :: string\nmodifier_flag :: integer\nGet the current mouse modifier assignment for a specific modifier key assignment, in a specific context.\naction will be filled in with the command ID number for a built-in mouse modifier\nor built-in REAPER command ID, or the custom action ID string.\nNote: the action string may have a space and 'c' or 'm' appended to it to specify command ID vs mouse modifier ID.\nSee SetMouseModifier for more information.",
    "name": "GetMouseModifier",
    "params": [
      {
        "type": "string",
        "name": "context"
      },
      {
        "type": "integer",
        "name": "modifier_flag"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "action"
      }
    ],
    "namespace": "reaper",
    "description": "Get the current mouse modifier assignment for a specific modifier key assignment, in a specific context.\naction will be filled in with the command ID number for a built-in mouse modifier\nor built-in REAPER command ID, or the custom action ID string.\nNote: the action string may have a space and 'c' or 'm' appended to it to specify command ID vs mouse modifier ID.\nSee SetMouseModifier for more information."
  },
  {
    "form": "(reaper.GetMousePosition ) :: (integer integer)",
    "doc": "(reaper.GetMousePosition ) :: (integer integer)\nget mouse position in screen coordinates",
    "name": "GetMousePosition",
    "returns": [
      {
        "type": "integer",
        "name": "x"
      },
      {
        "type": "integer",
        "name": "y"
      }
    ],
    "namespace": "reaper",
    "description": "get mouse position in screen coordinates"
  },
  {
    "form": "(reaper.GetNumAudioInputs ) :: (integer)",
    "doc": "(reaper.GetNumAudioInputs ) :: (integer)\nReturn number of normal audio hardware inputs available",
    "name": "GetNumAudioInputs",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Return number of normal audio hardware inputs available"
  },
  {
    "form": "(reaper.GetNumAudioOutputs ) :: (integer)",
    "doc": "(reaper.GetNumAudioOutputs ) :: (integer)\nReturn number of normal audio hardware outputs available",
    "name": "GetNumAudioOutputs",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Return number of normal audio hardware outputs available"
  },
  {
    "form": "(reaper.GetNumMIDIInputs ) :: (integer)",
    "doc": "(reaper.GetNumMIDIInputs ) :: (integer)\nreturns max number of real midi hardware inputs",
    "name": "GetNumMIDIInputs",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "returns max number of real midi hardware inputs"
  },
  {
    "form": "(reaper.GetNumMIDIOutputs ) :: (integer)",
    "doc": "(reaper.GetNumMIDIOutputs ) :: (integer)\nreturns max number of real midi hardware outputs",
    "name": "GetNumMIDIOutputs",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "returns max number of real midi hardware outputs"
  },
  {
    "form": "(reaper.GetNumTakeMarkers take) :: (integer)",
    "doc": "(reaper.GetNumTakeMarkers take) :: (integer)\ntake :: MediaItem_Take\nReturns number of take markers. See GetTakeMarker, SetTakeMarker, DeleteTakeMarker",
    "name": "GetNumTakeMarkers",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Returns number of take markers. See GetTakeMarker, SetTakeMarker, DeleteTakeMarker"
  },
  {
    "form": "(reaper.GetNumTracks ) :: (integer)",
    "doc": "(reaper.GetNumTracks ) :: (integer)\n",
    "name": "GetNumTracks",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetOS ) :: (string)",
    "doc": "(reaper.GetOS ) :: (string)\nReturns \"Win32\", \"Win64\", \"OSX32\", \"OSX64\", \"macOS-arm64\", or \"Other\".",
    "name": "GetOS",
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "Returns \"Win32\", \"Win64\", \"OSX32\", \"OSX64\", \"macOS-arm64\", or \"Other\"."
  },
  {
    "form": "(reaper.GetOutputChannelName channelIndex) :: (string)",
    "doc": "(reaper.GetOutputChannelName channelIndex) :: (string)\nchannelIndex :: integer\n",
    "name": "GetOutputChannelName",
    "params": [
      {
        "type": "integer",
        "name": "channelIndex"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetOutputLatency ) :: (number)",
    "doc": "(reaper.GetOutputLatency ) :: (number)\nreturns output latency in seconds",
    "name": "GetOutputLatency",
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "returns output latency in seconds"
  },
  {
    "form": "(reaper.GetParentTrack track) :: (MediaTrack)",
    "doc": "(reaper.GetParentTrack track) :: (MediaTrack)\ntrack :: MediaTrack\n",
    "name": "GetParentTrack",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "MediaTrack"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetPeakFileName fn) :: (string)",
    "doc": "(reaper.GetPeakFileName fn) :: (string)\nfn :: string\nget the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)",
    "name": "GetPeakFileName",
    "params": [
      {
        "type": "string",
        "name": "fn"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)"
  },
  {
    "form": "(reaper.GetPeakFileNameEx fn buf forWrite) :: (string)",
    "doc": "(reaper.GetPeakFileNameEx fn buf forWrite) :: (string)\nfn :: string\nbuf :: string\nforWrite :: boolean\nget the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)",
    "name": "GetPeakFileNameEx",
    "params": [
      {
        "type": "string",
        "name": "fn"
      },
      {
        "type": "string",
        "name": "buf"
      },
      {
        "type": "boolean",
        "name": "forWrite"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)"
  },
  {
    "form": "(reaper.GetPeakFileNameEx2 fn buf forWrite peaksfileextension) :: (string)",
    "doc": "(reaper.GetPeakFileNameEx2 fn buf forWrite peaksfileextension) :: (string)\nfn :: string\nbuf :: string\nforWrite :: boolean\npeaksfileextension :: string\nLike GetPeakFileNameEx, but you can specify peaksfileextension such as \".reapeaks\"",
    "name": "GetPeakFileNameEx2",
    "params": [
      {
        "type": "string",
        "name": "fn"
      },
      {
        "type": "string",
        "name": "buf"
      },
      {
        "type": "boolean",
        "name": "forWrite"
      },
      {
        "type": "string",
        "name": "peaksfileextension"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "Like GetPeakFileNameEx, but you can specify peaksfileextension such as \".reapeaks\""
  },
  {
    "form": "(reaper.GetPlayPosition ) :: (number)",
    "doc": "(reaper.GetPlayPosition ) :: (number)\nreturns latency-compensated actual-what-you-hear position",
    "name": "GetPlayPosition",
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "returns latency-compensated actual-what-you-hear position"
  },
  {
    "form": "(reaper.GetPlayPosition2 ) :: (number)",
    "doc": "(reaper.GetPlayPosition2 ) :: (number)\nreturns position of next audio block being processed",
    "name": "GetPlayPosition2",
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "returns position of next audio block being processed"
  },
  {
    "form": "(reaper.GetPlayPosition2Ex proj) :: (number)",
    "doc": "(reaper.GetPlayPosition2Ex proj) :: (number)\nproj :: ReaProject\nreturns position of next audio block being processed",
    "name": "GetPlayPosition2Ex",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "returns position of next audio block being processed"
  },
  {
    "form": "(reaper.GetPlayPositionEx proj) :: (number)",
    "doc": "(reaper.GetPlayPositionEx proj) :: (number)\nproj :: ReaProject\nreturns latency-compensated actual-what-you-hear position",
    "name": "GetPlayPositionEx",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "returns latency-compensated actual-what-you-hear position"
  },
  {
    "form": "(reaper.GetPlayState ) :: (integer)",
    "doc": "(reaper.GetPlayState ) :: (integer)\n&1=playing, &2=paused, &4=is recording",
    "name": "GetPlayState",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "&1=playing, &2=paused, &4=is recording"
  },
  {
    "form": "(reaper.GetPlayStateEx proj) :: (integer)",
    "doc": "(reaper.GetPlayStateEx proj) :: (integer)\nproj :: ReaProject\n&1=playing, &2=paused, &4=is recording",
    "name": "GetPlayStateEx",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "&1=playing, &2=paused, &4=is recording"
  },
  {
    "form": "(reaper.GetProjectLength proj) :: (number)",
    "doc": "(reaper.GetProjectLength proj) :: (number)\nproj :: ReaProject\nreturns length of project (maximum of end of media item, markers, end of regions, tempo map",
    "name": "GetProjectLength",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "returns length of project (maximum of end of media item, markers, end of regions, tempo map"
  },
  {
    "form": "(reaper.GetProjectName proj) :: (string)",
    "doc": "(reaper.GetProjectName proj) :: (string)\nproj :: ReaProject\n",
    "name": "GetProjectName",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetProjectPath ) :: (string)",
    "doc": "(reaper.GetProjectPath ) :: (string)\nGet the project recording path.",
    "name": "GetProjectPath",
    "returns": [
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "Get the project recording path."
  },
  {
    "form": "(reaper.GetProjectPathEx proj) :: (string)",
    "doc": "(reaper.GetProjectPathEx proj) :: (string)\nproj :: ReaProject\nGet the project recording path.",
    "name": "GetProjectPathEx",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "Get the project recording path."
  },
  {
    "form": "(reaper.GetProjectStateChangeCount proj) :: (integer)",
    "doc": "(reaper.GetProjectStateChangeCount proj) :: (integer)\nproj :: ReaProject\nreturns an integer that changes when the project state changes",
    "name": "GetProjectStateChangeCount",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "returns an integer that changes when the project state changes"
  },
  {
    "form": "(reaper.GetProjectTimeOffset proj rndframe) :: (number)",
    "doc": "(reaper.GetProjectTimeOffset proj rndframe) :: (number)\nproj :: ReaProject\nrndframe :: boolean\nGets project time offset in seconds (project settings - project start time). If rndframe is true, the offset is rounded to a multiple of the project frame size.",
    "name": "GetProjectTimeOffset",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "boolean",
        "name": "rndframe"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Gets project time offset in seconds (project settings - project start time). If rndframe is true, the offset is rounded to a multiple of the project frame size."
  },
  {
    "form": "(reaper.GetProjectTimeSignature ) :: (number number)",
    "doc": "(reaper.GetProjectTimeSignature ) :: (number number)\ndeprecated",
    "name": "GetProjectTimeSignature",
    "returns": [
      {
        "type": "number",
        "name": "bpm"
      },
      {
        "type": "number",
        "name": "bpi"
      }
    ],
    "namespace": "reaper",
    "description": "deprecated"
  },
  {
    "form": "(reaper.GetProjectTimeSignature2 proj) :: (number number)",
    "doc": "(reaper.GetProjectTimeSignature2 proj) :: (number number)\nproj :: ReaProject\nGets basic time signature (beats per minute, numerator of time signature in bpi)\nthis does not reflect tempo envelopes but is purely what is set in the project settings.",
    "name": "GetProjectTimeSignature2",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "bpm"
      },
      {
        "type": "number",
        "name": "bpi"
      }
    ],
    "namespace": "reaper",
    "description": "Gets basic time signature (beats per minute, numerator of time signature in bpi)\nthis does not reflect tempo envelopes but is purely what is set in the project settings."
  },
  {
    "form": "(reaper.GetProjExtState proj extname key) :: (integer string)",
    "doc": "(reaper.GetProjExtState proj extname key) :: (integer string)\nproj :: ReaProject\nextname :: string\nkey :: string\nGet the value previously associated with this extname and key, the last time the project was saved. See SetProjExtState, EnumProjExtState.",
    "name": "GetProjExtState",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "string",
        "name": "extname"
      },
      {
        "type": "string",
        "name": "key"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "val"
      }
    ],
    "namespace": "reaper",
    "description": "Get the value previously associated with this extname and key, the last time the project was saved. See SetProjExtState, EnumProjExtState."
  },
  {
    "form": "(reaper.GetResourcePath ) :: (string)",
    "doc": "(reaper.GetResourcePath ) :: (string)\nreturns path where ini files are stored, other things are in subdirectories.",
    "name": "GetResourcePath",
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "returns path where ini files are stored, other things are in subdirectories."
  },
  {
    "form": "(reaper.GetSelectedEnvelope proj) :: (TrackEnvelope)",
    "doc": "(reaper.GetSelectedEnvelope proj) :: (TrackEnvelope)\nproj :: ReaProject\nget the currently selected envelope, returns NULL/nil if no envelope is selected",
    "name": "GetSelectedEnvelope",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "TrackEnvelope"
      }
    ],
    "namespace": "reaper",
    "description": "get the currently selected envelope, returns NULL/nil if no envelope is selected"
  },
  {
    "form": "(reaper.GetSelectedMediaItem proj selitem) :: (MediaItem)",
    "doc": "(reaper.GetSelectedMediaItem proj selitem) :: (MediaItem)\nproj :: ReaProject\nselitem :: integer\nget a selected item by selected item count (zero-based) (proj=0 for active project)",
    "name": "GetSelectedMediaItem",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "selitem"
      }
    ],
    "returns": [
      {
        "type": "MediaItem"
      }
    ],
    "namespace": "reaper",
    "description": "get a selected item by selected item count (zero-based) (proj=0 for active project)"
  },
  {
    "form": "(reaper.GetSelectedTrack proj seltrackidx) :: (MediaTrack)",
    "doc": "(reaper.GetSelectedTrack proj seltrackidx) :: (MediaTrack)\nproj :: ReaProject\nseltrackidx :: integer\nGet a selected track from a project (proj=0 for active project) by selected track count (zero-based). This function ignores the master track, see GetSelectedTrack2.",
    "name": "GetSelectedTrack",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "seltrackidx"
      }
    ],
    "returns": [
      {
        "type": "MediaTrack"
      }
    ],
    "namespace": "reaper",
    "description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based). This function ignores the master track, see GetSelectedTrack2."
  },
  {
    "form": "(reaper.GetSelectedTrack2 proj seltrackidx wantmaster) :: (MediaTrack)",
    "doc": "(reaper.GetSelectedTrack2 proj seltrackidx wantmaster) :: (MediaTrack)\nproj :: ReaProject\nseltrackidx :: integer\nwantmaster :: boolean\nGet a selected track from a project (proj=0 for active project) by selected track count (zero-based).",
    "name": "GetSelectedTrack2",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "seltrackidx"
      },
      {
        "type": "boolean",
        "name": "wantmaster"
      }
    ],
    "returns": [
      {
        "type": "MediaTrack"
      }
    ],
    "namespace": "reaper",
    "description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based)."
  },
  {
    "form": "(reaper.GetSelectedTrackEnvelope proj) :: (TrackEnvelope)",
    "doc": "(reaper.GetSelectedTrackEnvelope proj) :: (TrackEnvelope)\nproj :: ReaProject\nget the currently selected track envelope, returns NULL/nil if no envelope is selected",
    "name": "GetSelectedTrackEnvelope",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "TrackEnvelope"
      }
    ],
    "namespace": "reaper",
    "description": "get the currently selected track envelope, returns NULL/nil if no envelope is selected"
  },
  {
    "form": "(reaper.GetSet_ArrangeView2 proj isSet screen_x_start screen_x_end start_time end_time) :: (number number)",
    "doc": "(reaper.GetSet_ArrangeView2 proj isSet screen_x_start screen_x_end start_time end_time) :: (number number)\nproj :: ReaProject\nisSet :: boolean\nscreen_x_start :: integer\nscreen_x_end :: integer\nstart_time :: number\nend_time :: number\nGets or sets the arrange view start/end time for screen coordinates. use screen_x_start=screen_x_end=0 to use the full arrange view's start/end time",
    "name": "GetSet_ArrangeView2",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "boolean",
        "name": "isSet"
      },
      {
        "type": "integer",
        "name": "screen_x_start"
      },
      {
        "type": "integer",
        "name": "screen_x_end"
      },
      {
        "type": "number",
        "name": "start_time"
      },
      {
        "type": "number",
        "name": "end_time"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "start_time"
      },
      {
        "type": "number",
        "name": "end_time"
      }
    ],
    "namespace": "reaper",
    "description": "Gets or sets the arrange view start/end time for screen coordinates. use screen_x_start=screen_x_end=0 to use the full arrange view's start/end time"
  },
  {
    "form": "(reaper.GetSet_LoopTimeRange isSet isLoop start end allowautoseek) :: (number number)",
    "doc": "(reaper.GetSet_LoopTimeRange isSet isLoop start end allowautoseek) :: (number number)\nisSet :: boolean\nisLoop :: boolean\nstart :: number\nend :: number\nallowautoseek :: boolean\n",
    "name": "GetSet_LoopTimeRange",
    "params": [
      {
        "type": "boolean",
        "name": "isSet"
      },
      {
        "type": "boolean",
        "name": "isLoop"
      },
      {
        "type": "number",
        "name": "start"
      },
      {
        "type": "number",
        "name": "end"
      },
      {
        "type": "boolean",
        "name": "allowautoseek"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "start"
      },
      {
        "type": "number",
        "name": "end"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetSet_LoopTimeRange2 proj isSet isLoop start end allowautoseek) :: (number number)",
    "doc": "(reaper.GetSet_LoopTimeRange2 proj isSet isLoop start end allowautoseek) :: (number number)\nproj :: ReaProject\nisSet :: boolean\nisLoop :: boolean\nstart :: number\nend :: number\nallowautoseek :: boolean\n",
    "name": "GetSet_LoopTimeRange2",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "boolean",
        "name": "isSet"
      },
      {
        "type": "boolean",
        "name": "isLoop"
      },
      {
        "type": "number",
        "name": "start"
      },
      {
        "type": "number",
        "name": "end"
      },
      {
        "type": "boolean",
        "name": "allowautoseek"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "start"
      },
      {
        "type": "number",
        "name": "end"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetSetAutomationItemInfo env autoitem_idx desc value is_set) :: (number)",
    "doc": "(reaper.GetSetAutomationItemInfo env autoitem_idx desc value is_set) :: (number)\nenv :: TrackEnvelope\nautoitem_idx :: integer\ndesc :: string\nvalue :: number\nis_set :: boolean\nGet or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. desc can be any of the following:\nD_POOL_ID : double * : automation item pool ID (as an integer); edits are propagated to all other automation items that share a pool ID\nD_POSITION : double * : automation item timeline position in seconds\nD_LENGTH : double * : automation item length in seconds\nD_STARTOFFS : double * : automation item start offset in seconds\nD_PLAYRATE : double * : automation item playback rate\nD_BASELINE : double * : automation item baseline value in the range [0,1]\nD_AMPLITUDE : double * : automation item amplitude in the range [-1,1]\nD_LOOPSRC : double * : nonzero if the automation item contents are looped\nD_UISEL : double * : nonzero if the automation item is selected in the arrange view\nD_POOL_QNLEN : double * : automation item pooled source length in quarter notes (setting will affect all pooled instances)",
    "name": "GetSetAutomationItemInfo",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "env"
      },
      {
        "type": "integer",
        "name": "autoitem_idx"
      },
      {
        "type": "string",
        "name": "desc"
      },
      {
        "type": "number",
        "name": "value"
      },
      {
        "type": "boolean",
        "name": "is_set"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Get or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. desc can be any of the following:\nD_POOL_ID : double * : automation item pool ID (as an integer); edits are propagated to all other automation items that share a pool ID\nD_POSITION : double * : automation item timeline position in seconds\nD_LENGTH : double * : automation item length in seconds\nD_STARTOFFS : double * : automation item start offset in seconds\nD_PLAYRATE : double * : automation item playback rate\nD_BASELINE : double * : automation item baseline value in the range [0,1]\nD_AMPLITUDE : double * : automation item amplitude in the range [-1,1]\nD_LOOPSRC : double * : nonzero if the automation item contents are looped\nD_UISEL : double * : nonzero if the automation item is selected in the arrange view\nD_POOL_QNLEN : double * : automation item pooled source length in quarter notes (setting will affect all pooled instances)"
  },
  {
    "form": "(reaper.GetSetAutomationItemInfo_String env autoitem_idx desc valuestrNeedBig is_set) :: (boolean string)",
    "doc": "(reaper.GetSetAutomationItemInfo_String env autoitem_idx desc valuestrNeedBig is_set) :: (boolean string)\nenv :: TrackEnvelope\nautoitem_idx :: integer\ndesc :: string\nvaluestrNeedBig :: string\nis_set :: boolean\nGet or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. returns true on success. desc can be any of the following:\nP_POOL_NAME : char * : name of the underlying automation item pool\nP_POOL_EXT:xyz : char * : extension-specific persistent data",
    "name": "GetSetAutomationItemInfo_String",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "env"
      },
      {
        "type": "integer",
        "name": "autoitem_idx"
      },
      {
        "type": "string",
        "name": "desc"
      },
      {
        "type": "string",
        "name": "valuestrNeedBig"
      },
      {
        "type": "boolean",
        "name": "is_set"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "valuestrNeedBig"
      }
    ],
    "namespace": "reaper",
    "description": "Get or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. returns true on success. desc can be any of the following:\nP_POOL_NAME : char * : name of the underlying automation item pool\nP_POOL_EXT:xyz : char * : extension-specific persistent data"
  },
  {
    "form": "(reaper.GetSetEnvelopeInfo_String env parmname stringNeedBig setNewValue) :: (boolean string)",
    "doc": "(reaper.GetSetEnvelopeInfo_String env parmname stringNeedBig setNewValue) :: (boolean string)\nenv :: TrackEnvelope\nparmname :: string\nstringNeedBig :: string\nsetNewValue :: boolean\nGets/sets an attribute string:\nP_EXT:xyz : char * : extension-specific persistent data\nGUID : GUID * : 16-byte GUID, can query only, not set. If using a _String() function, GUID is a string {xyz-...}.",
    "name": "GetSetEnvelopeInfo_String",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "env"
      },
      {
        "type": "string",
        "name": "parmname"
      },
      {
        "type": "string",
        "name": "stringNeedBig"
      },
      {
        "type": "boolean",
        "name": "setNewValue"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "stringNeedBig"
      }
    ],
    "namespace": "reaper",
    "description": "Gets/sets an attribute string:\nP_EXT:xyz : char * : extension-specific persistent data\nGUID : GUID * : 16-byte GUID, can query only, not set. If using a _String() function, GUID is a string {xyz-...}."
  },
  {
    "form": "(reaper.GetSetEnvelopeState env str) :: (boolean string)",
    "doc": "(reaper.GetSetEnvelopeState env str) :: (boolean string)\nenv :: TrackEnvelope\nstr :: string\ndeprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk",
    "name": "GetSetEnvelopeState",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "env"
      },
      {
        "type": "string",
        "name": "str"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "str"
      }
    ],
    "namespace": "reaper",
    "description": "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk"
  },
  {
    "form": "(reaper.GetSetEnvelopeState2 env str isundo) :: (boolean string)",
    "doc": "(reaper.GetSetEnvelopeState2 env str isundo) :: (boolean string)\nenv :: TrackEnvelope\nstr :: string\nisundo :: boolean\ndeprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk",
    "name": "GetSetEnvelopeState2",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "env"
      },
      {
        "type": "string",
        "name": "str"
      },
      {
        "type": "boolean",
        "name": "isundo"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "str"
      }
    ],
    "namespace": "reaper",
    "description": "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk"
  },
  {
    "form": "(reaper.GetSetItemState item str) :: (boolean string)",
    "doc": "(reaper.GetSetItemState item str) :: (boolean string)\nitem :: MediaItem\nstr :: string\ndeprecated -- see SetItemStateChunk, GetItemStateChunk",
    "name": "GetSetItemState",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      },
      {
        "type": "string",
        "name": "str"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "str"
      }
    ],
    "namespace": "reaper",
    "description": "deprecated -- see SetItemStateChunk, GetItemStateChunk"
  },
  {
    "form": "(reaper.GetSetItemState2 item str isundo) :: (boolean string)",
    "doc": "(reaper.GetSetItemState2 item str isundo) :: (boolean string)\nitem :: MediaItem\nstr :: string\nisundo :: boolean\ndeprecated -- see SetItemStateChunk, GetItemStateChunk",
    "name": "GetSetItemState2",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      },
      {
        "type": "string",
        "name": "str"
      },
      {
        "type": "boolean",
        "name": "isundo"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "str"
      }
    ],
    "namespace": "reaper",
    "description": "deprecated -- see SetItemStateChunk, GetItemStateChunk"
  },
  {
    "form": "(reaper.GetSetMediaItemInfo_String item parmname stringNeedBig setNewValue) :: (boolean string)",
    "doc": "(reaper.GetSetMediaItemInfo_String item parmname stringNeedBig setNewValue) :: (boolean string)\nitem :: MediaItem\nparmname :: string\nstringNeedBig :: string\nsetNewValue :: boolean\nGets/sets an item attribute string:\nP_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)\nP_EXT:xyz : char * : extension-specific persistent data\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.",
    "name": "GetSetMediaItemInfo_String",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      },
      {
        "type": "string",
        "name": "parmname"
      },
      {
        "type": "string",
        "name": "stringNeedBig"
      },
      {
        "type": "boolean",
        "name": "setNewValue"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "stringNeedBig"
      }
    ],
    "namespace": "reaper",
    "description": "Gets/sets an item attribute string:\nP_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)\nP_EXT:xyz : char * : extension-specific persistent data\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}."
  },
  {
    "form": "(reaper.GetSetMediaItemTakeInfo_String tk parmname stringNeedBig setNewValue) :: (boolean string)",
    "doc": "(reaper.GetSetMediaItemTakeInfo_String tk parmname stringNeedBig setNewValue) :: (boolean string)\ntk :: MediaItem_Take\nparmname :: string\nstringNeedBig :: string\nsetNewValue :: boolean\nGets/sets a take attribute string:\nP_NAME : char * : take name\nP_EXT:xyz : char * : extension-specific persistent data\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.",
    "name": "GetSetMediaItemTakeInfo_String",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "tk"
      },
      {
        "type": "string",
        "name": "parmname"
      },
      {
        "type": "string",
        "name": "stringNeedBig"
      },
      {
        "type": "boolean",
        "name": "setNewValue"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "stringNeedBig"
      }
    ],
    "namespace": "reaper",
    "description": "Gets/sets a take attribute string:\nP_NAME : char * : take name\nP_EXT:xyz : char * : extension-specific persistent data\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}."
  },
  {
    "form": "(reaper.GetSetMediaTrackInfo_String tr parmname stringNeedBig setNewValue) :: (boolean string)",
    "doc": "(reaper.GetSetMediaTrackInfo_String tr parmname stringNeedBig setNewValue) :: (boolean string)\ntr :: MediaTrack\nparmname :: string\nstringNeedBig :: string\nsetNewValue :: boolean\nGet or set track string attributes.\nP_NAME : char * : track name (on master returns NULL)\nP_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)\nP_LANENAME:n : char * : lane name (returns NULL for non-fixed-lane-tracks)\nP_MCP_LAYOUT : const char * : layout name\nP_RAZOREDITS : const char * : list of razor edit areas, as space-separated triples of start time, end time, and envelope GUID string.\n  Example: \"0.0 1.0 \\\"\\\" 0.0 1.0 \"{xyz-...}\"\nP_RAZOREDITS_EXT : const char * : list of razor edit areas, as comma-separated sets of space-separated tuples of start time, end time, optional: envelope GUID string, fixed/fipm top y-position, fixed/fipm bottom y-position.\n  Example: \"0.0 1.0,0.0 1.0 \"{xyz-...}\",1.0 2.0 \"\" 0.25 0.75\"\nP_TCP_LAYOUT : const char * : layout name\nP_EXT:xyz : char * : extension-specific persistent data\nP_UI_RECT:tcp.mute : char * : read-only, allows querying screen position + size of track WALTER elements (tcp.size queries screen position and size of entire TCP, etc).\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.",
    "name": "GetSetMediaTrackInfo_String",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      },
      {
        "type": "string",
        "name": "parmname"
      },
      {
        "type": "string",
        "name": "stringNeedBig"
      },
      {
        "type": "boolean",
        "name": "setNewValue"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "stringNeedBig"
      }
    ],
    "namespace": "reaper",
    "description": "Get or set track string attributes.\nP_NAME : char * : track name (on master returns NULL)\nP_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)\nP_LANENAME:n : char * : lane name (returns NULL for non-fixed-lane-tracks)\nP_MCP_LAYOUT : const char * : layout name\nP_RAZOREDITS : const char * : list of razor edit areas, as space-separated triples of start time, end time, and envelope GUID string.\n  Example: \"0.0 1.0 \\\"\\\" 0.0 1.0 \"{xyz-...}\"\nP_RAZOREDITS_EXT : const char * : list of razor edit areas, as comma-separated sets of space-separated tuples of start time, end time, optional: envelope GUID string, fixed/fipm top y-position, fixed/fipm bottom y-position.\n  Example: \"0.0 1.0,0.0 1.0 \"{xyz-...}\",1.0 2.0 \"\" 0.25 0.75\"\nP_TCP_LAYOUT : const char * : layout name\nP_EXT:xyz : char * : extension-specific persistent data\nP_UI_RECT:tcp.mute : char * : read-only, allows querying screen position + size of track WALTER elements (tcp.size queries screen position and size of entire TCP, etc).\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}."
  },
  {
    "form": "(reaper.GetSetProjectAuthor proj set author) :: (string)",
    "doc": "(reaper.GetSetProjectAuthor proj set author) :: (string)\nproj :: ReaProject\nset :: boolean\nauthor :: string\ndeprecated, see GetSetProjectInfo_String with desc=\"PROJECT_AUTHOR\"",
    "name": "GetSetProjectAuthor",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "boolean",
        "name": "set"
      },
      {
        "type": "string",
        "name": "author"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "author"
      }
    ],
    "namespace": "reaper",
    "description": "deprecated, see GetSetProjectInfo_String with desc=\"PROJECT_AUTHOR\""
  },
  {
    "form": "(reaper.GetSetProjectGrid project set ?division ?swingmode ?swingamt) :: (integer number integer number)",
    "doc": "(reaper.GetSetProjectGrid project set ?division ?swingmode ?swingamt) :: (integer number integer number)\nproject :: ReaProject\nset :: boolean\ndivision :: number (optional)\nswingmode :: integer (optional)\nswingamt :: number (optional)\nGet or set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled, swingamt is -1..1. swingmode can be 3 for measure-grid. Returns grid configuration flags",
    "name": "GetSetProjectGrid",
    "params": [
      {
        "type": "ReaProject",
        "name": "project"
      },
      {
        "type": "boolean",
        "name": "set"
      },
      {
        "type": "number",
        "name": "division",
        "optional": true
      },
      {
        "type": "integer",
        "name": "swingmode",
        "optional": true
      },
      {
        "type": "number",
        "name": "swingamt",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "division",
        "optional": true
      },
      {
        "type": "integer",
        "name": "swingmode",
        "optional": true
      },
      {
        "type": "number",
        "name": "swingamt",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Get or set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled, swingamt is -1..1. swingmode can be 3 for measure-grid. Returns grid configuration flags"
  },
  {
    "form": "(reaper.GetSetProjectInfo project desc value is_set) :: (number)",
    "doc": "(reaper.GetSetProjectInfo project desc value is_set) :: (number)\nproject :: ReaProject\ndesc :: string\nvalue :: number\nis_set :: boolean\nGet or set project information.\nRENDER_SETTINGS : &(1|2)=0:master mix, &1=stems+master mix, &2=stems only, &4=multichannel tracks to multichannel files, &8=use render matrix, &16=tracks with only mono media to mono files, &32=selected media items, &64=selected media items via master, &128=selected tracks via master, &256=embed transients if format supports, &512=embed metadata if format supports, &1024=embed take markers if format supports, &2048=2nd pass render\nRENDER_BOUNDSFLAG : 0=custom time bounds, 1=entire project, 2=time selection, 3=all project regions, 4=selected media items, 5=selected project regions, 6=all project markers, 7=selected project markers\nRENDER_CHANNELS : number of channels in rendered file\nRENDER_SRATE : sample rate of rendered file (or 0 for project sample rate)\nRENDER_STARTPOS : render start time when RENDER_BOUNDSFLAG=0\nRENDER_ENDPOS : render end time when RENDER_BOUNDSFLAG=0\nRENDER_TAILFLAG : apply render tail setting when rendering: &1=custom time bounds, &2=entire project, &4=time selection, &8=all project markers/regions, &16=selected media items, &32=selected project markers/regions\nRENDER_TAILMS : tail length in ms to render (only used if RENDER_BOUNDSFLAG and RENDER_TAILFLAG are set)\nRENDER_ADDTOPROJ : &1=add rendered files to project, &2=do not render files that are likely silent\nRENDER_DITHER : &1=dither, &2=noise shaping, &4=dither stems, &8=noise shaping on stems\nRENDER_NORMALIZE: &1=enable, (&14==0)=LUFS-I, (&14==2)=RMS, (&14==4)=peak, (&14==6)=true peak, (&14==8)=LUFS-M max, (&14==10)=LUFS-S max, &32=normalize stems to common gain based on master, &64=enable brickwall limit, &128=brickwall limit true peak, (&2304==256)=only normalize files that are too loud, (&2304==2048)=only normalize files that are too quiet, &512=apply fade-in, &1024=apply fade-out\nRENDER_NORMALIZE_TARGET: render normalization target as amplitude, so 0.5 means -6.02dB, 0.25 means -12.04dB, etc\nRENDER_BRICKWALL: render brickwall limit as amplitude, so 0.5 means -6.02dB, 0.25 means -12.04dB, etc\nRENDER_FADEIN: render fade-in (0.001 means 1 ms, requires RENDER_NORMALIZE&512)\nRENDER_FADEOUT: render fade-out (0.001 means 1 ms, requires RENDER_NORMALIZE&1024)\nRENDER_FADEINSHAPE: render fade-in shape\nRENDER_FADEOUTSHAPE: render fade-out shape\nPROJECT_SRATE : samplerate (ignored unless PROJECT_SRATE_USE set)\nPROJECT_SRATE_USE : set to 1 if project samplerate is used",
    "name": "GetSetProjectInfo",
    "params": [
      {
        "type": "ReaProject",
        "name": "project"
      },
      {
        "type": "string",
        "name": "desc"
      },
      {
        "type": "number",
        "name": "value"
      },
      {
        "type": "boolean",
        "name": "is_set"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Get or set project information.\nRENDER_SETTINGS : &(1|2)=0:master mix, &1=stems+master mix, &2=stems only, &4=multichannel tracks to multichannel files, &8=use render matrix, &16=tracks with only mono media to mono files, &32=selected media items, &64=selected media items via master, &128=selected tracks via master, &256=embed transients if format supports, &512=embed metadata if format supports, &1024=embed take markers if format supports, &2048=2nd pass render\nRENDER_BOUNDSFLAG : 0=custom time bounds, 1=entire project, 2=time selection, 3=all project regions, 4=selected media items, 5=selected project regions, 6=all project markers, 7=selected project markers\nRENDER_CHANNELS : number of channels in rendered file\nRENDER_SRATE : sample rate of rendered file (or 0 for project sample rate)\nRENDER_STARTPOS : render start time when RENDER_BOUNDSFLAG=0\nRENDER_ENDPOS : render end time when RENDER_BOUNDSFLAG=0\nRENDER_TAILFLAG : apply render tail setting when rendering: &1=custom time bounds, &2=entire project, &4=time selection, &8=all project markers/regions, &16=selected media items, &32=selected project markers/regions\nRENDER_TAILMS : tail length in ms to render (only used if RENDER_BOUNDSFLAG and RENDER_TAILFLAG are set)\nRENDER_ADDTOPROJ : &1=add rendered files to project, &2=do not render files that are likely silent\nRENDER_DITHER : &1=dither, &2=noise shaping, &4=dither stems, &8=noise shaping on stems\nRENDER_NORMALIZE: &1=enable, (&14==0)=LUFS-I, (&14==2)=RMS, (&14==4)=peak, (&14==6)=true peak, (&14==8)=LUFS-M max, (&14==10)=LUFS-S max, &32=normalize stems to common gain based on master, &64=enable brickwall limit, &128=brickwall limit true peak, (&2304==256)=only normalize files that are too loud, (&2304==2048)=only normalize files that are too quiet, &512=apply fade-in, &1024=apply fade-out\nRENDER_NORMALIZE_TARGET: render normalization target as amplitude, so 0.5 means -6.02dB, 0.25 means -12.04dB, etc\nRENDER_BRICKWALL: render brickwall limit as amplitude, so 0.5 means -6.02dB, 0.25 means -12.04dB, etc\nRENDER_FADEIN: render fade-in (0.001 means 1 ms, requires RENDER_NORMALIZE&512)\nRENDER_FADEOUT: render fade-out (0.001 means 1 ms, requires RENDER_NORMALIZE&1024)\nRENDER_FADEINSHAPE: render fade-in shape\nRENDER_FADEOUTSHAPE: render fade-out shape\nPROJECT_SRATE : samplerate (ignored unless PROJECT_SRATE_USE set)\nPROJECT_SRATE_USE : set to 1 if project samplerate is used"
  },
  {
    "form": "(reaper.GetSetProjectInfo_String project desc valuestrNeedBig is_set) :: (boolean string)",
    "doc": "(reaper.GetSetProjectInfo_String project desc valuestrNeedBig is_set) :: (boolean string)\nproject :: ReaProject\ndesc :: string\nvaluestrNeedBig :: string\nis_set :: boolean\nGet or set project information.\nPROJECT_NAME : project file name (read-only, is_set will be ignored)\nPROJECT_TITLE : title field from Project Settings/Notes dialog\nPROJECT_AUTHOR : author field from Project Settings/Notes dialog\nTRACK_GROUP_NAME:X : track group name, X should be 1..64\nMARKER_GUID:X : get the GUID (unique ID) of the marker or region with index X, where X is the index passed to EnumProjectMarkers, not necessarily the displayed number (read-only)\nMARKER_INDEX_FROM_GUID:{GUID} : get the GUID index of the marker or region with GUID {GUID} (read-only)\nOPENCOPY_CFGIDX : integer for the configuration of format to use when creating copies/applying FX. 0=wave (auto-depth), 1=APPLYFX_FORMAT, 2=RECORD_FORMAT\nRECORD_PATH : recording directory -- may be blank or a relative path, to get the effective path see GetProjectPathEx()\nRECORD_PATH_SECONDARY : secondary recording directory\nRECORD_FORMAT : base64-encoded sink configuration (see project files, etc). Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. \"evaw\" or \"l3pm\", to use default settings for that sink type.\nAPPLYFX_FORMAT : base64-encoded sink configuration (see project files, etc). Used only if RECFMT_OPENCOPY is set to 1. Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. \"evaw\" or \"l3pm\", to use default settings for that sink type.\nRENDER_FILE : render directory\nRENDER_PATTERN : render file name (may contain wildcards)\nRENDER_METADATA : get or set the metadata saved with the project (not metadata embedded in project media). Example, ID3 album name metadata: valuestr=\"ID3:TALB\" to get, valuestr=\"ID3:TALB|my album name\" to set. Call with valuestr=\"\" and is_set=false to get a semicolon-separated list of defined project metadata identifiers.\nRENDER_TARGETS : semicolon separated list of files that would be written if the project is rendered using the most recent render settings\nRENDER_STATS : (read-only) semicolon separated list of statistics for the most recently rendered files. call with valuestr=\"XXX\" to run an action (for example, \"42437\"=dry run render selected items) before returning statistics.\nRENDER_FORMAT : base64-encoded sink configuration (see project files, etc). Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. \"evaw\" or \"l3pm\", to use default settings for that sink type.\nRENDER_FORMAT2 : base64-encoded secondary sink configuration. Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. \"evaw\" or \"l3pm\", to use default settings for that sink type, or \"\" to disable secondary render.\n    Formats available on this machine:",
    "name": "GetSetProjectInfo_String",
    "params": [
      {
        "type": "ReaProject",
        "name": "project"
      },
      {
        "type": "string",
        "name": "desc"
      },
      {
        "type": "string",
        "name": "valuestrNeedBig"
      },
      {
        "type": "boolean",
        "name": "is_set"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "valuestrNeedBig"
      }
    ],
    "namespace": "reaper",
    "description": "Get or set project information.\nPROJECT_NAME : project file name (read-only, is_set will be ignored)\nPROJECT_TITLE : title field from Project Settings/Notes dialog\nPROJECT_AUTHOR : author field from Project Settings/Notes dialog\nTRACK_GROUP_NAME:X : track group name, X should be 1..64\nMARKER_GUID:X : get the GUID (unique ID) of the marker or region with index X, where X is the index passed to EnumProjectMarkers, not necessarily the displayed number (read-only)\nMARKER_INDEX_FROM_GUID:{GUID} : get the GUID index of the marker or region with GUID {GUID} (read-only)\nOPENCOPY_CFGIDX : integer for the configuration of format to use when creating copies/applying FX. 0=wave (auto-depth), 1=APPLYFX_FORMAT, 2=RECORD_FORMAT\nRECORD_PATH : recording directory -- may be blank or a relative path, to get the effective path see GetProjectPathEx()\nRECORD_PATH_SECONDARY : secondary recording directory\nRECORD_FORMAT : base64-encoded sink configuration (see project files, etc). Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. \"evaw\" or \"l3pm\", to use default settings for that sink type.\nAPPLYFX_FORMAT : base64-encoded sink configuration (see project files, etc). Used only if RECFMT_OPENCOPY is set to 1. Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. \"evaw\" or \"l3pm\", to use default settings for that sink type.\nRENDER_FILE : render directory\nRENDER_PATTERN : render file name (may contain wildcards)\nRENDER_METADATA : get or set the metadata saved with the project (not metadata embedded in project media). Example, ID3 album name metadata: valuestr=\"ID3:TALB\" to get, valuestr=\"ID3:TALB|my album name\" to set. Call with valuestr=\"\" and is_set=false to get a semicolon-separated list of defined project metadata identifiers.\nRENDER_TARGETS : semicolon separated list of files that would be written if the project is rendered using the most recent render settings\nRENDER_STATS : (read-only) semicolon separated list of statistics for the most recently rendered files. call with valuestr=\"XXX\" to run an action (for example, \"42437\"=dry run render selected items) before returning statistics.\nRENDER_FORMAT : base64-encoded sink configuration (see project files, etc). Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. \"evaw\" or \"l3pm\", to use default settings for that sink type.\nRENDER_FORMAT2 : base64-encoded secondary sink configuration. Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. \"evaw\" or \"l3pm\", to use default settings for that sink type, or \"\" to disable secondary render.\n    Formats available on this machine:"
  },
  {
    "form": "(reaper.GetSetProjectNotes proj set notes) :: (string)",
    "doc": "(reaper.GetSetProjectNotes proj set notes) :: (string)\nproj :: ReaProject\nset :: boolean\nnotes :: string\ngets or sets project notes, notesNeedBig_sz is ignored when setting",
    "name": "GetSetProjectNotes",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "boolean",
        "name": "set"
      },
      {
        "type": "string",
        "name": "notes"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "notes"
      }
    ],
    "namespace": "reaper",
    "description": "gets or sets project notes, notesNeedBig_sz is ignored when setting"
  },
  {
    "form": "(reaper.GetSetRepeat val) :: (integer)",
    "doc": "(reaper.GetSetRepeat val) :: (integer)\nval :: integer\n-1 == query,0=clear,1=set,>1=toggle . returns new value",
    "name": "GetSetRepeat",
    "params": [
      {
        "type": "integer",
        "name": "val"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "-1 == query,0=clear,1=set,>1=toggle . returns new value"
  },
  {
    "form": "(reaper.GetSetRepeatEx proj val) :: (integer)",
    "doc": "(reaper.GetSetRepeatEx proj val) :: (integer)\nproj :: ReaProject\nval :: integer\n-1 == query,0=clear,1=set,>1=toggle . returns new value",
    "name": "GetSetRepeatEx",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "val"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "-1 == query,0=clear,1=set,>1=toggle . returns new value"
  },
  {
    "form": "(reaper.GetSetTrackGroupMembership tr groupname setmask setvalue) :: (integer)",
    "doc": "(reaper.GetSetTrackGroupMembership tr groupname setmask setvalue) :: (integer)\ntr :: MediaTrack\ngroupname :: string\nsetmask :: integer\nsetvalue :: integer\nGets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\nMEDIA_EDIT_LEAD\nMEDIA_EDIT_FOLLOW\nVOLUME_LEAD\nVOLUME_FOLLOW\nVOLUME_VCA_LEAD\nVOLUME_VCA_FOLLOW\nPAN_LEAD\nPAN_FOLLOW\nWIDTH_LEAD\nWIDTH_FOLLOW\nMUTE_LEAD\nMUTE_FOLLOW\nSOLO_LEAD\nSOLO_FOLLOW\nRECARM_LEAD\nRECARM_FOLLOW\nPOLARITY_LEAD\nPOLARITY_FOLLOW\nAUTOMODE_LEAD\nAUTOMODE_FOLLOW\nVOLUME_REVERSE\nPAN_REVERSE\nWIDTH_REVERSE\nNO_LEAD_WHEN_FOLLOW\nVOLUME_VCA_FOLLOW_ISPREFX\nNote: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings).",
    "name": "GetSetTrackGroupMembership",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      },
      {
        "type": "string",
        "name": "groupname"
      },
      {
        "type": "integer",
        "name": "setmask"
      },
      {
        "type": "integer",
        "name": "setvalue"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\nMEDIA_EDIT_LEAD\nMEDIA_EDIT_FOLLOW\nVOLUME_LEAD\nVOLUME_FOLLOW\nVOLUME_VCA_LEAD\nVOLUME_VCA_FOLLOW\nPAN_LEAD\nPAN_FOLLOW\nWIDTH_LEAD\nWIDTH_FOLLOW\nMUTE_LEAD\nMUTE_FOLLOW\nSOLO_LEAD\nSOLO_FOLLOW\nRECARM_LEAD\nRECARM_FOLLOW\nPOLARITY_LEAD\nPOLARITY_FOLLOW\nAUTOMODE_LEAD\nAUTOMODE_FOLLOW\nVOLUME_REVERSE\nPAN_REVERSE\nWIDTH_REVERSE\nNO_LEAD_WHEN_FOLLOW\nVOLUME_VCA_FOLLOW_ISPREFX\nNote: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings)."
  },
  {
    "form": "(reaper.GetSetTrackGroupMembershipHigh tr groupname setmask setvalue) :: (integer)",
    "doc": "(reaper.GetSetTrackGroupMembershipHigh tr groupname setmask setvalue) :: (integer)\ntr :: MediaTrack\ngroupname :: string\nsetmask :: integer\nsetvalue :: integer\nGets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the high 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\nMEDIA_EDIT_LEAD\nMEDIA_EDIT_FOLLOW\nVOLUME_LEAD\nVOLUME_FOLLOW\nVOLUME_VCA_LEAD\nVOLUME_VCA_FOLLOW\nPAN_LEAD\nPAN_FOLLOW\nWIDTH_LEAD\nWIDTH_FOLLOW\nMUTE_LEAD\nMUTE_FOLLOW\nSOLO_LEAD\nSOLO_FOLLOW\nRECARM_LEAD\nRECARM_FOLLOW\nPOLARITY_LEAD\nPOLARITY_FOLLOW\nAUTOMODE_LEAD\nAUTOMODE_FOLLOW\nVOLUME_REVERSE\nPAN_REVERSE\nWIDTH_REVERSE\nNO_LEAD_WHEN_FOLLOW\nVOLUME_VCA_FOLLOW_ISPREFX\nNote: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings).",
    "name": "GetSetTrackGroupMembershipHigh",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      },
      {
        "type": "string",
        "name": "groupname"
      },
      {
        "type": "integer",
        "name": "setmask"
      },
      {
        "type": "integer",
        "name": "setvalue"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the high 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\nMEDIA_EDIT_LEAD\nMEDIA_EDIT_FOLLOW\nVOLUME_LEAD\nVOLUME_FOLLOW\nVOLUME_VCA_LEAD\nVOLUME_VCA_FOLLOW\nPAN_LEAD\nPAN_FOLLOW\nWIDTH_LEAD\nWIDTH_FOLLOW\nMUTE_LEAD\nMUTE_FOLLOW\nSOLO_LEAD\nSOLO_FOLLOW\nRECARM_LEAD\nRECARM_FOLLOW\nPOLARITY_LEAD\nPOLARITY_FOLLOW\nAUTOMODE_LEAD\nAUTOMODE_FOLLOW\nVOLUME_REVERSE\nPAN_REVERSE\nWIDTH_REVERSE\nNO_LEAD_WHEN_FOLLOW\nVOLUME_VCA_FOLLOW_ISPREFX\nNote: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings)."
  },
  {
    "form": "(reaper.GetSetTrackSendInfo_String tr category sendidx parmname stringNeedBig setNewValue) :: (boolean string)",
    "doc": "(reaper.GetSetTrackSendInfo_String tr category sendidx parmname stringNeedBig setNewValue) :: (boolean string)\ntr :: MediaTrack\ncategory :: integer\nsendidx :: integer\nparmname :: string\nstringNeedBig :: string\nsetNewValue :: boolean\nGets/sets a send attribute string:\nP_EXT:xyz : char * : extension-specific persistent data",
    "name": "GetSetTrackSendInfo_String",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      },
      {
        "type": "integer",
        "name": "category"
      },
      {
        "type": "integer",
        "name": "sendidx"
      },
      {
        "type": "string",
        "name": "parmname"
      },
      {
        "type": "string",
        "name": "stringNeedBig"
      },
      {
        "type": "boolean",
        "name": "setNewValue"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "stringNeedBig"
      }
    ],
    "namespace": "reaper",
    "description": "Gets/sets a send attribute string:\nP_EXT:xyz : char * : extension-specific persistent data"
  },
  {
    "form": "(reaper.GetSetTrackState track str) :: (boolean string)",
    "doc": "(reaper.GetSetTrackState track str) :: (boolean string)\ntrack :: MediaTrack\nstr :: string\ndeprecated -- see SetTrackStateChunk, GetTrackStateChunk",
    "name": "GetSetTrackState",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "string",
        "name": "str"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "str"
      }
    ],
    "namespace": "reaper",
    "description": "deprecated -- see SetTrackStateChunk, GetTrackStateChunk"
  },
  {
    "form": "(reaper.GetSetTrackState2 track str isundo) :: (boolean string)",
    "doc": "(reaper.GetSetTrackState2 track str isundo) :: (boolean string)\ntrack :: MediaTrack\nstr :: string\nisundo :: boolean\ndeprecated -- see SetTrackStateChunk, GetTrackStateChunk",
    "name": "GetSetTrackState2",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "string",
        "name": "str"
      },
      {
        "type": "boolean",
        "name": "isundo"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "str"
      }
    ],
    "namespace": "reaper",
    "description": "deprecated -- see SetTrackStateChunk, GetTrackStateChunk"
  },
  {
    "form": "(reaper.GetSubProjectFromSource src) :: (ReaProject)",
    "doc": "(reaper.GetSubProjectFromSource src) :: (ReaProject)\nsrc :: PCM_source\n",
    "name": "GetSubProjectFromSource",
    "params": [
      {
        "type": "PCM_source",
        "name": "src"
      }
    ],
    "returns": [
      {
        "type": "ReaProject"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetTake item takeidx) :: (MediaItem_Take)",
    "doc": "(reaper.GetTake item takeidx) :: (MediaItem_Take)\nitem :: MediaItem\ntakeidx :: integer\nget a take from an item by take count (zero-based)",
    "name": "GetTake",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      },
      {
        "type": "integer",
        "name": "takeidx"
      }
    ],
    "returns": [
      {
        "type": "MediaItem_Take"
      }
    ],
    "namespace": "reaper",
    "description": "get a take from an item by take count (zero-based)"
  },
  {
    "form": "(reaper.GetTakeEnvelope take envidx) :: (TrackEnvelope)",
    "doc": "(reaper.GetTakeEnvelope take envidx) :: (TrackEnvelope)\ntake :: MediaItem_Take\nenvidx :: integer\n",
    "name": "GetTakeEnvelope",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "envidx"
      }
    ],
    "returns": [
      {
        "type": "TrackEnvelope"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetTakeEnvelopeByName take envname) :: (TrackEnvelope)",
    "doc": "(reaper.GetTakeEnvelopeByName take envname) :: (TrackEnvelope)\ntake :: MediaItem_Take\nenvname :: string\n",
    "name": "GetTakeEnvelopeByName",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "string",
        "name": "envname"
      }
    ],
    "returns": [
      {
        "type": "TrackEnvelope"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetTakeMarker take idx) :: (number string integer)",
    "doc": "(reaper.GetTakeMarker take idx) :: (number string integer)\ntake :: MediaItem_Take\nidx :: integer\nGet information about a take marker. Returns the position in media item source time, or -1 if the take marker does not exist. See GetNumTakeMarkers, SetTakeMarker, DeleteTakeMarker",
    "name": "GetTakeMarker",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "idx"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "integer",
        "name": "color",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Get information about a take marker. Returns the position in media item source time, or -1 if the take marker does not exist. See GetNumTakeMarkers, SetTakeMarker, DeleteTakeMarker"
  },
  {
    "form": "(reaper.GetTakeName take) :: (string)",
    "doc": "(reaper.GetTakeName take) :: (string)\ntake :: MediaItem_Take\nreturns NULL if the take is not valid",
    "name": "GetTakeName",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "returns NULL if the take is not valid"
  },
  {
    "form": "(reaper.GetTakeNumStretchMarkers take) :: (integer)",
    "doc": "(reaper.GetTakeNumStretchMarkers take) :: (integer)\ntake :: MediaItem_Take\nReturns number of stretch markers in take",
    "name": "GetTakeNumStretchMarkers",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Returns number of stretch markers in take"
  },
  {
    "form": "(reaper.GetTakeStretchMarker take idx) :: (integer number number)",
    "doc": "(reaper.GetTakeStretchMarker take idx) :: (integer number number)\ntake :: MediaItem_Take\nidx :: integer\nGets information on a stretch marker, idx is 0..n. Returns -1 if stretch marker not valid. posOut will be set to position in item, srcposOutOptional will be set to source media position. Returns index. if input index is -1, the following marker is found using position (or source position if position is -1). If position/source position are used to find marker position, their values are not updated.",
    "name": "GetTakeStretchMarker",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "idx"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "pos"
      },
      {
        "type": "number",
        "name": "srcpos",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Gets information on a stretch marker, idx is 0..n. Returns -1 if stretch marker not valid. posOut will be set to position in item, srcposOutOptional will be set to source media position. Returns index. if input index is -1, the following marker is found using position (or source position if position is -1). If position/source position are used to find marker position, their values are not updated."
  },
  {
    "form": "(reaper.GetTakeStretchMarkerSlope take idx) :: (number)",
    "doc": "(reaper.GetTakeStretchMarkerSlope take idx) :: (number)\ntake :: MediaItem_Take\nidx :: integer\nSee SetTakeStretchMarkerSlope",
    "name": "GetTakeStretchMarkerSlope",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "idx"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "See SetTakeStretchMarkerSlope"
  },
  {
    "form": "(reaper.GetTCPFXParm project track index) :: (boolean integer integer)",
    "doc": "(reaper.GetTCPFXParm project track index) :: (boolean integer integer)\nproject :: ReaProject\ntrack :: MediaTrack\nindex :: integer\nGet information about a specific FX parameter knob (see CountTCPFXParms).",
    "name": "GetTCPFXParm",
    "params": [
      {
        "type": "ReaProject",
        "name": "project"
      },
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "index"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "fxindex"
      },
      {
        "type": "integer",
        "name": "parmidx"
      }
    ],
    "namespace": "reaper",
    "description": "Get information about a specific FX parameter knob (see CountTCPFXParms)."
  },
  {
    "form": "(reaper.GetTempoMatchPlayRate source srcscale position mult) :: (boolean number number)",
    "doc": "(reaper.GetTempoMatchPlayRate source srcscale position mult) :: (boolean number number)\nsource :: PCM_source\nsrcscale :: number\nposition :: number\nmult :: number\nfinds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256",
    "name": "GetTempoMatchPlayRate",
    "params": [
      {
        "type": "PCM_source",
        "name": "source"
      },
      {
        "type": "number",
        "name": "srcscale"
      },
      {
        "type": "number",
        "name": "position"
      },
      {
        "type": "number",
        "name": "mult"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "rate"
      },
      {
        "type": "number",
        "name": "targetlen"
      }
    ],
    "namespace": "reaper",
    "description": "finds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256"
  },
  {
    "form": "(reaper.GetTempoTimeSigMarker proj ptidx) :: (boolean number integer number number integer integer boolean)",
    "doc": "(reaper.GetTempoTimeSigMarker proj ptidx) :: (boolean number integer number number integer integer boolean)\nproj :: ReaProject\nptidx :: integer\nGet information about a tempo/time signature marker. See CountTempoTimeSigMarkers, SetTempoTimeSigMarker, AddTempoTimeSigMarker.",
    "name": "GetTempoTimeSigMarker",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "ptidx"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "timepos"
      },
      {
        "type": "integer",
        "name": "measurepos"
      },
      {
        "type": "number",
        "name": "beatpos"
      },
      {
        "type": "number",
        "name": "bpm"
      },
      {
        "type": "integer",
        "name": "timesig_num"
      },
      {
        "type": "integer",
        "name": "timesig_denom"
      },
      {
        "type": "boolean",
        "name": "lineartempo"
      }
    ],
    "namespace": "reaper",
    "description": "Get information about a tempo/time signature marker. See CountTempoTimeSigMarkers, SetTempoTimeSigMarker, AddTempoTimeSigMarker."
  },
  {
    "form": "(reaper.GetThemeColor ini_key flags) :: (integer)",
    "doc": "(reaper.GetThemeColor ini_key flags) :: (integer)\nini_key :: string\nflags :: integer\nReturns the theme color specified, or -1 on failure. If the low bit of flags is set, the color as originally specified by the theme (before any transformations) is returned, otherwise the current (possibly transformed and modified) color is returned. See SetThemeColor for a list of valid ini_key.",
    "name": "GetThemeColor",
    "params": [
      {
        "type": "string",
        "name": "ini_key"
      },
      {
        "type": "integer",
        "name": "flags"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the theme color specified, or -1 on failure. If the low bit of flags is set, the color as originally specified by the theme (before any transformations) is returned, otherwise the current (possibly transformed and modified) color is returned. See SetThemeColor for a list of valid ini_key."
  },
  {
    "form": "(reaper.GetThingFromPoint screen_x screen_y) :: (MediaTrack string)",
    "doc": "(reaper.GetThingFromPoint screen_x screen_y) :: (MediaTrack string)\nscreen_x :: integer\nscreen_y :: integer\nHit tests a point in screen coordinates. Updates infoOut with information such as \"arrange\", \"fx_chain\", \"fx_0\" (first FX in chain, floating), \"spacer_0\" (spacer before first track). If a track panel is hit, string will begin with \"tcp\" or \"mcp\" or \"tcp.mute\" etc (future versions may append additional information). May return NULL with valid info string to indicate non-track thing.",
    "name": "GetThingFromPoint",
    "params": [
      {
        "type": "integer",
        "name": "screen_x"
      },
      {
        "type": "integer",
        "name": "screen_y"
      }
    ],
    "returns": [
      {
        "type": "MediaTrack",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "info"
      }
    ],
    "namespace": "reaper",
    "description": "Hit tests a point in screen coordinates. Updates infoOut with information such as \"arrange\", \"fx_chain\", \"fx_0\" (first FX in chain, floating), \"spacer_0\" (spacer before first track). If a track panel is hit, string will begin with \"tcp\" or \"mcp\" or \"tcp.mute\" etc (future versions may append additional information). May return NULL with valid info string to indicate non-track thing."
  },
  {
    "form": "(reaper.GetToggleCommandState command_id) :: (integer)",
    "doc": "(reaper.GetToggleCommandState command_id) :: (integer)\ncommand_id :: integer\nSee GetToggleCommandStateEx.",
    "name": "GetToggleCommandState",
    "params": [
      {
        "type": "integer",
        "name": "command_id"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "See GetToggleCommandStateEx."
  },
  {
    "form": "(reaper.GetToggleCommandStateEx section_id command_id) :: (integer)",
    "doc": "(reaper.GetToggleCommandStateEx section_id command_id) :: (integer)\nsection_id :: integer\ncommand_id :: integer\nFor the main action context, the MIDI editor, or the media explorer, returns the toggle state of the action. 0=off, 1=on, -1=NA because the action does not have on/off states. For the MIDI editor, the action state for the most recently focused window will be returned.",
    "name": "GetToggleCommandStateEx",
    "params": [
      {
        "type": "integer",
        "name": "section_id"
      },
      {
        "type": "integer",
        "name": "command_id"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "For the main action context, the MIDI editor, or the media explorer, returns the toggle state of the action. 0=off, 1=on, -1=NA because the action does not have on/off states. For the MIDI editor, the action state for the most recently focused window will be returned."
  },
  {
    "form": "(reaper.GetTooltipWindow ) :: (HWND)",
    "doc": "(reaper.GetTooltipWindow ) :: (HWND)\ngets a tooltip window,in case you want to ask it for font information. Can return NULL.",
    "name": "GetTooltipWindow",
    "returns": [
      {
        "type": "HWND"
      }
    ],
    "namespace": "reaper",
    "description": "gets a tooltip window,in case you want to ask it for font information. Can return NULL."
  },
  {
    "form": "(reaper.GetTouchedOrFocusedFX mode) :: (boolean integer integer integer integer integer)",
    "doc": "(reaper.GetTouchedOrFocusedFX mode) :: (boolean integer integer integer integer integer)\nmode :: integer\nmode can be 0 to query last touched parameter, or 1 to query currently focused FX. Returns false if failed. If successful, trackIdxOut will be track index (-1 is master track, 0 is first track). itemidxOut will be 0-based item index if an item, or -1 if not an item. takeidxOut will be 0-based take index. fxidxOut will be FX index, potentially with 0x2000000 set to signify container-addressing, or with 0x1000000 set to signify record-input FX. parmOut will be set to the parameter index if querying last-touched. parmOut will have 1 set if querying focused state and FX is no longer focused but still open.",
    "name": "GetTouchedOrFocusedFX",
    "params": [
      {
        "type": "integer",
        "name": "mode"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "trackidx"
      },
      {
        "type": "integer",
        "name": "itemidx"
      },
      {
        "type": "integer",
        "name": "takeidx"
      },
      {
        "type": "integer",
        "name": "fxidx"
      },
      {
        "type": "integer",
        "name": "parm"
      }
    ],
    "namespace": "reaper",
    "description": "mode can be 0 to query last touched parameter, or 1 to query currently focused FX. Returns false if failed. If successful, trackIdxOut will be track index (-1 is master track, 0 is first track). itemidxOut will be 0-based item index if an item, or -1 if not an item. takeidxOut will be 0-based take index. fxidxOut will be FX index, potentially with 0x2000000 set to signify container-addressing, or with 0x1000000 set to signify record-input FX. parmOut will be set to the parameter index if querying last-touched. parmOut will have 1 set if querying focused state and FX is no longer focused but still open."
  },
  {
    "form": "(reaper.GetTrack proj trackidx) :: (MediaTrack)",
    "doc": "(reaper.GetTrack proj trackidx) :: (MediaTrack)\nproj :: ReaProject\ntrackidx :: integer\nget a track from a project by track count (zero-based) (proj=0 for active project)",
    "name": "GetTrack",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "trackidx"
      }
    ],
    "returns": [
      {
        "type": "MediaTrack"
      }
    ],
    "namespace": "reaper",
    "description": "get a track from a project by track count (zero-based) (proj=0 for active project)"
  },
  {
    "form": "(reaper.GetTrackAutomationMode tr) :: (integer)",
    "doc": "(reaper.GetTrackAutomationMode tr) :: (integer)\ntr :: MediaTrack\nreturn the track mode, regardless of global override",
    "name": "GetTrackAutomationMode",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "return the track mode, regardless of global override"
  },
  {
    "form": "(reaper.GetTrackColor track) :: (integer)",
    "doc": "(reaper.GetTrackColor track) :: (integer)\ntrack :: MediaTrack\nReturns the track custom color as OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). Black is returned as 0x1000000, no color setting is returned as 0.",
    "name": "GetTrackColor",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the track custom color as OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). Black is returned as 0x1000000, no color setting is returned as 0."
  },
  {
    "form": "(reaper.GetTrackDepth track) :: (integer)",
    "doc": "(reaper.GetTrackDepth track) :: (integer)\ntrack :: MediaTrack\n",
    "name": "GetTrackDepth",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetTrackEnvelope track envidx) :: (TrackEnvelope)",
    "doc": "(reaper.GetTrackEnvelope track envidx) :: (TrackEnvelope)\ntrack :: MediaTrack\nenvidx :: integer\n",
    "name": "GetTrackEnvelope",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "envidx"
      }
    ],
    "returns": [
      {
        "type": "TrackEnvelope"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetTrackEnvelopeByChunkName tr cfgchunkname_or_guid) :: (TrackEnvelope)",
    "doc": "(reaper.GetTrackEnvelopeByChunkName tr cfgchunkname_or_guid) :: (TrackEnvelope)\ntr :: MediaTrack\ncfgchunkname_or_guid :: string\nGets a built-in track envelope by configuration chunk name, like \"<VOLENV\", or GUID string, like \"{B577250D-146F-B544-9B34-F24FBE488F1F}\".",
    "name": "GetTrackEnvelopeByChunkName",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      },
      {
        "type": "string",
        "name": "cfgchunkname_or_guid"
      }
    ],
    "returns": [
      {
        "type": "TrackEnvelope"
      }
    ],
    "namespace": "reaper",
    "description": "Gets a built-in track envelope by configuration chunk name, like \"<VOLENV\", or GUID string, like \"{B577250D-146F-B544-9B34-F24FBE488F1F}\"."
  },
  {
    "form": "(reaper.GetTrackEnvelopeByName track envname) :: (TrackEnvelope)",
    "doc": "(reaper.GetTrackEnvelopeByName track envname) :: (TrackEnvelope)\ntrack :: MediaTrack\nenvname :: string\n",
    "name": "GetTrackEnvelopeByName",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "string",
        "name": "envname"
      }
    ],
    "returns": [
      {
        "type": "TrackEnvelope"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetTrackFromPoint screen_x screen_y) :: (MediaTrack integer)",
    "doc": "(reaper.GetTrackFromPoint screen_x screen_y) :: (MediaTrack integer)\nscreen_x :: integer\nscreen_y :: integer\nReturns the track from the screen coordinates specified. If the screen coordinates refer to a window associated to the track (such as FX), the track will be returned. infoOutOptional will be set to 1 if it is likely an envelope, 2 if it is likely a track FX. For a free item positioning or fixed lane track, the second byte of infoOutOptional will be set to the (approximate, for fipm tracks) item lane underneath the mouse. See GetThingFromPoint.",
    "name": "GetTrackFromPoint",
    "params": [
      {
        "type": "integer",
        "name": "screen_x"
      },
      {
        "type": "integer",
        "name": "screen_y"
      }
    ],
    "returns": [
      {
        "type": "MediaTrack",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "info",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Returns the track from the screen coordinates specified. If the screen coordinates refer to a window associated to the track (such as FX), the track will be returned. infoOutOptional will be set to 1 if it is likely an envelope, 2 if it is likely a track FX. For a free item positioning or fixed lane track, the second byte of infoOutOptional will be set to the (approximate, for fipm tracks) item lane underneath the mouse. See GetThingFromPoint."
  },
  {
    "form": "(reaper.GetTrackGUID tr) :: (string)",
    "doc": "(reaper.GetTrackGUID tr) :: (string)\ntr :: MediaTrack\n",
    "name": "GetTrackGUID",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "GUID"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetTrackMediaItem tr itemidx) :: (MediaItem)",
    "doc": "(reaper.GetTrackMediaItem tr itemidx) :: (MediaItem)\ntr :: MediaTrack\nitemidx :: integer\n",
    "name": "GetTrackMediaItem",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      },
      {
        "type": "integer",
        "name": "itemidx"
      }
    ],
    "returns": [
      {
        "type": "MediaItem"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetTrackMIDILyrics track flag) :: (boolean string)",
    "doc": "(reaper.GetTrackMIDILyrics track flag) :: (boolean string)\ntrack :: MediaTrack\nflag :: integer\nGet all MIDI lyrics on the track. Lyrics will be returned as one string with tabs between each word. flag&1: double tabs at the end of each measure and triple tabs when skipping measures, flag&2: each lyric is preceded by its beat position in the project (example with flag=2: \"1.1.2\\tLyric for measure 1 beat 2\\t2.1.1\\tLyric for measure 2 beat 1\t\"). See SetTrackMIDILyrics",
    "name": "GetTrackMIDILyrics",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "flag"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "Get all MIDI lyrics on the track. Lyrics will be returned as one string with tabs between each word. flag&1: double tabs at the end of each measure and triple tabs when skipping measures, flag&2: each lyric is preceded by its beat position in the project (example with flag=2: \"1.1.2\\tLyric for measure 1 beat 2\\t2.1.1\\tLyric for measure 2 beat 1\t\"). See SetTrackMIDILyrics"
  },
  {
    "form": "(reaper.GetTrackMIDINoteName track pitch chan) :: (string)",
    "doc": "(reaper.GetTrackMIDINoteName track pitch chan) :: (string)\ntrack :: integer\npitch :: integer\nchan :: integer\nsee GetTrackMIDINoteNameEx",
    "name": "GetTrackMIDINoteName",
    "params": [
      {
        "type": "integer",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "pitch"
      },
      {
        "type": "integer",
        "name": "chan"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "see GetTrackMIDINoteNameEx"
  },
  {
    "form": "(reaper.GetTrackMIDINoteNameEx proj track pitch chan) :: (string)",
    "doc": "(reaper.GetTrackMIDINoteNameEx proj track pitch chan) :: (string)\nproj :: ReaProject\ntrack :: MediaTrack\npitch :: integer\nchan :: integer\nGet note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See SetTrackMIDINoteNameEx",
    "name": "GetTrackMIDINoteNameEx",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "pitch"
      },
      {
        "type": "integer",
        "name": "chan"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "Get note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See SetTrackMIDINoteNameEx"
  },
  {
    "form": "(reaper.GetTrackMIDINoteRange proj track) :: (integer integer)",
    "doc": "(reaper.GetTrackMIDINoteRange proj track) :: (integer integer)\nproj :: ReaProject\ntrack :: MediaTrack\n",
    "name": "GetTrackMIDINoteRange",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "note_lo"
      },
      {
        "type": "integer",
        "name": "note_hi"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetTrackName track) :: (boolean string)",
    "doc": "(reaper.GetTrackName track) :: (boolean string)\ntrack :: MediaTrack\nReturns \"MASTER\" for master track, \"Track N\" if track has no name.",
    "name": "GetTrackName",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "Returns \"MASTER\" for master track, \"Track N\" if track has no name."
  },
  {
    "form": "(reaper.GetTrackNumMediaItems tr) :: (integer)",
    "doc": "(reaper.GetTrackNumMediaItems tr) :: (integer)\ntr :: MediaTrack\n",
    "name": "GetTrackNumMediaItems",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetTrackNumSends tr category) :: (integer)",
    "doc": "(reaper.GetTrackNumSends tr category) :: (integer)\ntr :: MediaTrack\ncategory :: integer\nreturns number of sends/receives/hardware outputs - category is <0 for receives, 0=sends, >0 for hardware outputs",
    "name": "GetTrackNumSends",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      },
      {
        "type": "integer",
        "name": "category"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "returns number of sends/receives/hardware outputs - category is <0 for receives, 0=sends, >0 for hardware outputs"
  },
  {
    "form": "(reaper.GetTrackReceiveName track recv_index) :: (boolean string)",
    "doc": "(reaper.GetTrackReceiveName track recv_index) :: (boolean string)\ntrack :: MediaTrack\nrecv_index :: integer\nSee GetTrackSendName.",
    "name": "GetTrackReceiveName",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "recv_index"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "See GetTrackSendName."
  },
  {
    "form": "(reaper.GetTrackReceiveUIMute track recv_index) :: (boolean boolean)",
    "doc": "(reaper.GetTrackReceiveUIMute track recv_index) :: (boolean boolean)\ntrack :: MediaTrack\nrecv_index :: integer\nSee GetTrackSendUIMute.",
    "name": "GetTrackReceiveUIMute",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "recv_index"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "mute"
      }
    ],
    "namespace": "reaper",
    "description": "See GetTrackSendUIMute."
  },
  {
    "form": "(reaper.GetTrackReceiveUIVolPan track recv_index) :: (boolean number number)",
    "doc": "(reaper.GetTrackReceiveUIVolPan track recv_index) :: (boolean number number)\ntrack :: MediaTrack\nrecv_index :: integer\nSee GetTrackSendUIVolPan.",
    "name": "GetTrackReceiveUIVolPan",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "recv_index"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "volume"
      },
      {
        "type": "number",
        "name": "pan"
      }
    ],
    "namespace": "reaper",
    "description": "See GetTrackSendUIVolPan."
  },
  {
    "form": "(reaper.GetTrackSendInfo_Value tr category sendidx parmname) :: (number)",
    "doc": "(reaper.GetTrackSendInfo_Value tr category sendidx parmname) :: (number)\ntr :: MediaTrack\ncategory :: integer\nsendidx :: integer\nparmname :: string\nGet send/receive/hardware output numerical-value attributes.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nparameter names:\nB_MUTE : bool *\nB_PHASE : bool * : true to flip phase\nB_MONO : bool *\nD_VOL : double * : 1.0 = +0dB etc\nD_PAN : double * : -1..+1\nD_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\nI_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\nI_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\nI_SRCCHAN : int * : -1 for no audio send. Low 10 bits specify channel offset, and higher bits specify channel count. (srcchan>>10) == 0 for stereo, 1 for mono, 2 for 4 channel, 3 for 6 channel, etc.\nI_DSTCHAN : int * : low 10 bits are destination index, &1024 set to mix to mono.\nI_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, 31=MIDI send disabled, next 5 bits=dest channel, 0=orig, 1-16=chan. &1024 for faders-send MIDI vol/pan. (>>14)&255 = src bus (0 for all, 1 for normal, 2+). (>>22)&255=destination bus (0 for all, 1 for normal, 2+)\nP_DESTTRACK : MediaTrack * : destination track, only applies for sends/recvs (read-only)\nP_SRCTRACK : MediaTrack * : source track, only applies for sends/recvs (read-only)\nP_ENV:<envchunkname : TrackEnvelope * : call with :<VOLENV, :<PANENV, etc appended (read-only)\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends.",
    "name": "GetTrackSendInfo_Value",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      },
      {
        "type": "integer",
        "name": "category"
      },
      {
        "type": "integer",
        "name": "sendidx"
      },
      {
        "type": "string",
        "name": "parmname"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Get send/receive/hardware output numerical-value attributes.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nparameter names:\nB_MUTE : bool *\nB_PHASE : bool * : true to flip phase\nB_MONO : bool *\nD_VOL : double * : 1.0 = +0dB etc\nD_PAN : double * : -1..+1\nD_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\nI_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\nI_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\nI_SRCCHAN : int * : -1 for no audio send. Low 10 bits specify channel offset, and higher bits specify channel count. (srcchan>>10) == 0 for stereo, 1 for mono, 2 for 4 channel, 3 for 6 channel, etc.\nI_DSTCHAN : int * : low 10 bits are destination index, &1024 set to mix to mono.\nI_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, 31=MIDI send disabled, next 5 bits=dest channel, 0=orig, 1-16=chan. &1024 for faders-send MIDI vol/pan. (>>14)&255 = src bus (0 for all, 1 for normal, 2+). (>>22)&255=destination bus (0 for all, 1 for normal, 2+)\nP_DESTTRACK : MediaTrack * : destination track, only applies for sends/recvs (read-only)\nP_SRCTRACK : MediaTrack * : source track, only applies for sends/recvs (read-only)\nP_ENV:<envchunkname : TrackEnvelope * : call with :<VOLENV, :<PANENV, etc appended (read-only)\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends."
  },
  {
    "form": "(reaper.GetTrackSendName track send_index) :: (boolean string)",
    "doc": "(reaper.GetTrackSendName track send_index) :: (boolean string)\ntrack :: MediaTrack\nsend_index :: integer\nsend_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveName.",
    "name": "GetTrackSendName",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "send_index"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveName."
  },
  {
    "form": "(reaper.GetTrackSendUIMute track send_index) :: (boolean boolean)",
    "doc": "(reaper.GetTrackSendUIMute track send_index) :: (boolean boolean)\ntrack :: MediaTrack\nsend_index :: integer\nsend_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIMute.",
    "name": "GetTrackSendUIMute",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "send_index"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "mute"
      }
    ],
    "namespace": "reaper",
    "description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIMute."
  },
  {
    "form": "(reaper.GetTrackSendUIVolPan track send_index) :: (boolean number number)",
    "doc": "(reaper.GetTrackSendUIVolPan track send_index) :: (boolean number number)\ntrack :: MediaTrack\nsend_index :: integer\nsend_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIVolPan.",
    "name": "GetTrackSendUIVolPan",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "send_index"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "volume"
      },
      {
        "type": "number",
        "name": "pan"
      }
    ],
    "namespace": "reaper",
    "description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIVolPan."
  },
  {
    "form": "(reaper.GetTrackState track) :: (string integer)",
    "doc": "(reaper.GetTrackState track) :: (string integer)\ntrack :: MediaTrack\nGets track state, returns track name.\nflags will be set to:\n&1=folder\n&2=selected\n&4=has fx enabled\n&8=muted\n&16=soloed\n&32=SIP'd (with &16)\n&64=rec armed\n&128=rec monitoring on\n&256=rec monitoring auto\n&512=hide from TCP\n&1024=hide from MCP",
    "name": "GetTrackState",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "flags"
      }
    ],
    "namespace": "reaper",
    "description": "Gets track state, returns track name.\nflags will be set to:\n&1=folder\n&2=selected\n&4=has fx enabled\n&8=muted\n&16=soloed\n&32=SIP'd (with &16)\n&64=rec armed\n&128=rec monitoring on\n&256=rec monitoring auto\n&512=hide from TCP\n&1024=hide from MCP"
  },
  {
    "form": "(reaper.GetTrackStateChunk track str isundo) :: (boolean string)",
    "doc": "(reaper.GetTrackStateChunk track str isundo) :: (boolean string)\ntrack :: MediaTrack\nstr :: string\nisundo :: boolean\nGets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.",
    "name": "GetTrackStateChunk",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "string",
        "name": "str"
      },
      {
        "type": "boolean",
        "name": "isundo"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "str"
      }
    ],
    "namespace": "reaper",
    "description": "Gets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint."
  },
  {
    "form": "(reaper.GetTrackUIMute track) :: (boolean boolean)",
    "doc": "(reaper.GetTrackUIMute track) :: (boolean boolean)\ntrack :: MediaTrack\n",
    "name": "GetTrackUIMute",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "mute"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetTrackUIPan track) :: (boolean number number integer)",
    "doc": "(reaper.GetTrackUIPan track) :: (boolean number number integer)\ntrack :: MediaTrack\n",
    "name": "GetTrackUIPan",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "pan1"
      },
      {
        "type": "number",
        "name": "pan2"
      },
      {
        "type": "integer",
        "name": "panmode"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetTrackUIVolPan track) :: (boolean number number)",
    "doc": "(reaper.GetTrackUIVolPan track) :: (boolean number number)\ntrack :: MediaTrack\n",
    "name": "GetTrackUIVolPan",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "volume"
      },
      {
        "type": "number",
        "name": "pan"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.GetUnderrunTime ) :: (integer integer integer)",
    "doc": "(reaper.GetUnderrunTime ) :: (integer integer integer)\nretrieves the last timestamps of audio xrun (yellow-flash, if available), media xrun (red-flash), and the current time stamp (all milliseconds)",
    "name": "GetUnderrunTime",
    "returns": [
      {
        "type": "integer",
        "name": "audio_xrun"
      },
      {
        "type": "integer",
        "name": "media_xrun"
      },
      {
        "type": "integer",
        "name": "curtime"
      }
    ],
    "namespace": "reaper",
    "description": "retrieves the last timestamps of audio xrun (yellow-flash, if available), media xrun (red-flash), and the current time stamp (all milliseconds)"
  },
  {
    "form": "(reaper.GetUserFileNameForRead filenameNeed4096 title defext) :: (boolean string)",
    "doc": "(reaper.GetUserFileNameForRead filenameNeed4096 title defext) :: (boolean string)\nfilenameNeed4096 :: string\ntitle :: string\ndefext :: string\nreturns true if the user selected a valid file, false if the user canceled the dialog",
    "name": "GetUserFileNameForRead",
    "params": [
      {
        "type": "string",
        "name": "filenameNeed4096"
      },
      {
        "type": "string",
        "name": "title"
      },
      {
        "type": "string",
        "name": "defext"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "filenameNeed4096"
      }
    ],
    "namespace": "reaper",
    "description": "returns true if the user selected a valid file, false if the user canceled the dialog"
  },
  {
    "form": "(reaper.GetUserInputs title num_inputs captions_csv retvals_csv) :: (boolean string)",
    "doc": "(reaper.GetUserInputs title num_inputs captions_csv retvals_csv) :: (boolean string)\ntitle :: string\nnum_inputs :: integer\ncaptions_csv :: string\nretvals_csv :: string\nGet values from the user.\nIf a caption begins with *, for example \"*password\", the edit field will not display the input text.\nMaximum fields is 16. Values are returned as a comma-separated string. Returns false if the user canceled the dialog. You can supply special extra information via additional caption fields: extrawidth=XXX to increase text field width, separator=X to use a different separator for returned fields.",
    "name": "GetUserInputs",
    "params": [
      {
        "type": "string",
        "name": "title"
      },
      {
        "type": "integer",
        "name": "num_inputs"
      },
      {
        "type": "string",
        "name": "captions_csv"
      },
      {
        "type": "string",
        "name": "retvals_csv"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "retvals_csv"
      }
    ],
    "namespace": "reaper",
    "description": "Get values from the user.\nIf a caption begins with *, for example \"*password\", the edit field will not display the input text.\nMaximum fields is 16. Values are returned as a comma-separated string. Returns false if the user canceled the dialog. You can supply special extra information via additional caption fields: extrawidth=XXX to increase text field width, separator=X to use a different separator for returned fields."
  },
  {
    "form": "(reaper.GoToMarker proj marker_index use_timeline_order) :: nil",
    "doc": "(reaper.GoToMarker proj marker_index use_timeline_order) :: nil\nproj :: ReaProject\nmarker_index :: integer\nuse_timeline_order :: boolean\nGo to marker. If use_timeline_order==true, marker_index 1 refers to the first marker on the timeline.  If use_timeline_order==false, marker_index 1 refers to the first marker with the user-editable index of 1.",
    "name": "GoToMarker",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "marker_index"
      },
      {
        "type": "boolean",
        "name": "use_timeline_order"
      }
    ],
    "namespace": "reaper",
    "description": "Go to marker. If use_timeline_order==true, marker_index 1 refers to the first marker on the timeline.  If use_timeline_order==false, marker_index 1 refers to the first marker with the user-editable index of 1."
  },
  {
    "form": "(reaper.GoToRegion proj region_index use_timeline_order) :: nil",
    "doc": "(reaper.GoToRegion proj region_index use_timeline_order) :: nil\nproj :: ReaProject\nregion_index :: integer\nuse_timeline_order :: boolean\nSeek to region after current region finishes playing (smooth seek). If use_timeline_order==true, region_index 1 refers to the first region on the timeline.  If use_timeline_order==false, region_index 1 refers to the first region with the user-editable index of 1.",
    "name": "GoToRegion",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "region_index"
      },
      {
        "type": "boolean",
        "name": "use_timeline_order"
      }
    ],
    "namespace": "reaper",
    "description": "Seek to region after current region finishes playing (smooth seek). If use_timeline_order==true, region_index 1 refers to the first region on the timeline.  If use_timeline_order==false, region_index 1 refers to the first region with the user-editable index of 1."
  },
  {
    "form": "(reaper.GR_SelectColor hwnd) :: (integer integer)",
    "doc": "(reaper.GR_SelectColor hwnd) :: (integer integer)\nhwnd :: HWND\nRuns the system color chooser dialog.  Returns 0 if the user cancels the dialog.",
    "name": "GR_SelectColor",
    "params": [
      {
        "type": "HWND",
        "name": "hwnd"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "color"
      }
    ],
    "namespace": "reaper",
    "description": "Runs the system color chooser dialog.  Returns 0 if the user cancels the dialog."
  },
  {
    "form": "(reaper.GSC_mainwnd t) :: (integer)",
    "doc": "(reaper.GSC_mainwnd t) :: (integer)\nt :: integer\nthis is just like win32 GetSysColor() but can have overrides.",
    "name": "GSC_mainwnd",
    "params": [
      {
        "type": "integer",
        "name": "t"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "this is just like win32 GetSysColor() but can have overrides."
  },
  {
    "form": "(reaper.guidToString gGUID destNeed64) :: (string)",
    "doc": "(reaper.guidToString gGUID destNeed64) :: (string)\ngGUID :: string\ndestNeed64 :: string\ndest should be at least 64 chars long to be safe",
    "name": "guidToString",
    "params": [
      {
        "type": "string",
        "name": "gGUID"
      },
      {
        "type": "string",
        "name": "destNeed64"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "destNeed64"
      }
    ],
    "namespace": "reaper",
    "description": "dest should be at least 64 chars long to be safe"
  },
  {
    "form": "(reaper.HasExtState section key) :: (boolean)",
    "doc": "(reaper.HasExtState section key) :: (boolean)\nsection :: string\nkey :: string\nReturns true if there exists an extended state value for a specific section and key. See SetExtState, GetExtState, DeleteExtState.",
    "name": "HasExtState",
    "params": [
      {
        "type": "string",
        "name": "section"
      },
      {
        "type": "string",
        "name": "key"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Returns true if there exists an extended state value for a specific section and key. See SetExtState, GetExtState, DeleteExtState."
  },
  {
    "form": "(reaper.HasTrackMIDIPrograms track) :: (string)",
    "doc": "(reaper.HasTrackMIDIPrograms track) :: (string)\ntrack :: integer\nreturns name of track plugin that is supplying MIDI programs,or NULL if there is none",
    "name": "HasTrackMIDIPrograms",
    "params": [
      {
        "type": "integer",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none"
  },
  {
    "form": "(reaper.HasTrackMIDIProgramsEx proj track) :: (string)",
    "doc": "(reaper.HasTrackMIDIProgramsEx proj track) :: (string)\nproj :: ReaProject\ntrack :: MediaTrack\nreturns name of track plugin that is supplying MIDI programs,or NULL if there is none",
    "name": "HasTrackMIDIProgramsEx",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none"
  },
  {
    "form": "(reaper.Help_Set helpstring is_temporary_help) :: nil",
    "doc": "(reaper.Help_Set helpstring is_temporary_help) :: nil\nhelpstring :: string\nis_temporary_help :: boolean\n",
    "name": "Help_Set",
    "params": [
      {
        "type": "string",
        "name": "helpstring"
      },
      {
        "type": "boolean",
        "name": "is_temporary_help"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.image_resolve_fn in out) :: (string)",
    "doc": "(reaper.image_resolve_fn in out) :: (string)\nin :: string\nout :: string\n",
    "name": "image_resolve_fn",
    "params": [
      {
        "type": "string",
        "name": "in"
      },
      {
        "type": "string",
        "name": "out"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "out"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.InsertAutomationItem env pool_id position length) :: (integer)",
    "doc": "(reaper.InsertAutomationItem env pool_id position length) :: (integer)\nenv :: TrackEnvelope\npool_id :: integer\nposition :: number\nlength :: number\nInsert a new automation item. pool_id < 0 collects existing envelope points into the automation item; if pool_id is >= 0 the automation item will be a new instance of that pool (which will be created as an empty instance if it does not exist). Returns the index of the item, suitable for passing to other automation item API functions. See GetSetAutomationItemInfo.",
    "name": "InsertAutomationItem",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "env"
      },
      {
        "type": "integer",
        "name": "pool_id"
      },
      {
        "type": "number",
        "name": "position"
      },
      {
        "type": "number",
        "name": "length"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Insert a new automation item. pool_id < 0 collects existing envelope points into the automation item; if pool_id is >= 0 the automation item will be a new instance of that pool (which will be created as an empty instance if it does not exist). Returns the index of the item, suitable for passing to other automation item API functions. See GetSetAutomationItemInfo."
  },
  {
    "form": "(reaper.InsertEnvelopePoint envelope time value shape tension selected ?noSortIn) :: (boolean)",
    "doc": "(reaper.InsertEnvelopePoint envelope time value shape tension selected ?noSortIn) :: (boolean)\nenvelope :: TrackEnvelope\ntime :: number\nvalue :: number\nshape :: integer\ntension :: number\nselected :: boolean\nnoSortIn :: boolean (optional)\nInsert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See InsertEnvelopePointEx.",
    "name": "InsertEnvelopePoint",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "envelope"
      },
      {
        "type": "number",
        "name": "time"
      },
      {
        "type": "number",
        "name": "value"
      },
      {
        "type": "integer",
        "name": "shape"
      },
      {
        "type": "number",
        "name": "tension"
      },
      {
        "type": "boolean",
        "name": "selected"
      },
      {
        "type": "boolean",
        "name": "noSortIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See InsertEnvelopePointEx."
  },
  {
    "form": "(reaper.InsertEnvelopePointEx envelope autoitem_idx time value shape tension selected ?noSortIn) :: (boolean)",
    "doc": "(reaper.InsertEnvelopePointEx envelope autoitem_idx time value shape tension selected ?noSortIn) :: (boolean)\nenvelope :: TrackEnvelope\nautoitem_idx :: integer\ntime :: number\nvalue :: number\nshape :: integer\ntension :: number\nselected :: boolean\nnoSortIn :: boolean (optional)\nInsert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, DeleteEnvelopePointEx.",
    "name": "InsertEnvelopePointEx",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "envelope"
      },
      {
        "type": "integer",
        "name": "autoitem_idx"
      },
      {
        "type": "number",
        "name": "time"
      },
      {
        "type": "number",
        "name": "value"
      },
      {
        "type": "integer",
        "name": "shape"
      },
      {
        "type": "number",
        "name": "tension"
      },
      {
        "type": "boolean",
        "name": "selected"
      },
      {
        "type": "boolean",
        "name": "noSortIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, DeleteEnvelopePointEx."
  },
  {
    "form": "(reaper.InsertMedia file mode) :: (integer)",
    "doc": "(reaper.InsertMedia file mode) :: (integer)\nfile :: string\nmode :: integer\nmode: 0=add to current track, 1=add new track, 3=add to selected items as takes, &4=stretch/loop to fit time sel, &8=try to match tempo 1x, &16=try to match tempo 0.5x, &32=try to match tempo 2x, &64=don't preserve pitch when matching tempo, &128=no loop/section if startpct/endpct set, &256=force loop regardless of global preference for looping imported items, &512=use high word as absolute track index if mode&3==0 or mode&2048, &1024=insert into reasamplomatic on a new track (add 1 to insert on last selected track), &2048=insert into open reasamplomatic instance (add 512 to use high word as absolute track index), &4096=move to source preferred position (BWF start offset), &8192=reverse",
    "name": "InsertMedia",
    "params": [
      {
        "type": "string",
        "name": "file"
      },
      {
        "type": "integer",
        "name": "mode"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "mode: 0=add to current track, 1=add new track, 3=add to selected items as takes, &4=stretch/loop to fit time sel, &8=try to match tempo 1x, &16=try to match tempo 0.5x, &32=try to match tempo 2x, &64=don't preserve pitch when matching tempo, &128=no loop/section if startpct/endpct set, &256=force loop regardless of global preference for looping imported items, &512=use high word as absolute track index if mode&3==0 or mode&2048, &1024=insert into reasamplomatic on a new track (add 1 to insert on last selected track), &2048=insert into open reasamplomatic instance (add 512 to use high word as absolute track index), &4096=move to source preferred position (BWF start offset), &8192=reverse"
  },
  {
    "form": "(reaper.InsertMediaSection file mode startpct endpct pitchshift) :: (integer)",
    "doc": "(reaper.InsertMediaSection file mode startpct endpct pitchshift) :: (integer)\nfile :: string\nmode :: integer\nstartpct :: number\nendpct :: number\npitchshift :: number\nSee InsertMedia.",
    "name": "InsertMediaSection",
    "params": [
      {
        "type": "string",
        "name": "file"
      },
      {
        "type": "integer",
        "name": "mode"
      },
      {
        "type": "number",
        "name": "startpct"
      },
      {
        "type": "number",
        "name": "endpct"
      },
      {
        "type": "number",
        "name": "pitchshift"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "See InsertMedia."
  },
  {
    "form": "(reaper.InsertTrackAtIndex idx wantDefaults) :: nil",
    "doc": "(reaper.InsertTrackAtIndex idx wantDefaults) :: nil\nidx :: integer\nwantDefaults :: boolean\ninserts a track at idx,of course this will be clamped to 0..GetNumTracks(). wantDefaults=TRUE for default envelopes/FX,otherwise no enabled fx/env",
    "name": "InsertTrackAtIndex",
    "params": [
      {
        "type": "integer",
        "name": "idx"
      },
      {
        "type": "boolean",
        "name": "wantDefaults"
      }
    ],
    "namespace": "reaper",
    "description": "inserts a track at idx,of course this will be clamped to 0..GetNumTracks(). wantDefaults=TRUE for default envelopes/FX,otherwise no enabled fx/env"
  },
  {
    "form": "(reaper.IsMediaExtension ext wantOthers) :: (boolean)",
    "doc": "(reaper.IsMediaExtension ext wantOthers) :: (boolean)\next :: string\nwantOthers :: boolean\nTests a file extension (i.e. \"wav\" or \"mid\") to see if it's a media extension.\nIf wantOthers is set, then \"RPP\", \"TXT\" and other project-type formats will also pass.",
    "name": "IsMediaExtension",
    "params": [
      {
        "type": "string",
        "name": "ext"
      },
      {
        "type": "boolean",
        "name": "wantOthers"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Tests a file extension (i.e. \"wav\" or \"mid\") to see if it's a media extension.\nIf wantOthers is set, then \"RPP\", \"TXT\" and other project-type formats will also pass."
  },
  {
    "form": "(reaper.IsMediaItemSelected item) :: (boolean)",
    "doc": "(reaper.IsMediaItemSelected item) :: (boolean)\nitem :: MediaItem\n",
    "name": "IsMediaItemSelected",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.IsProjectDirty proj) :: (integer)",
    "doc": "(reaper.IsProjectDirty proj) :: (integer)\nproj :: ReaProject\nIs the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences.",
    "name": "IsProjectDirty",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences."
  },
  {
    "form": "(reaper.IsTrackSelected track) :: (boolean)",
    "doc": "(reaper.IsTrackSelected track) :: (boolean)\ntrack :: MediaTrack\n",
    "name": "IsTrackSelected",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.IsTrackVisible track mixer) :: (boolean)",
    "doc": "(reaper.IsTrackVisible track mixer) :: (boolean)\ntrack :: MediaTrack\nmixer :: boolean\nIf mixer==true, returns true if the track is visible in the mixer.  If mixer==false, returns true if the track is visible in the track control panel.",
    "name": "IsTrackVisible",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "boolean",
        "name": "mixer"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "If mixer==true, returns true if the track is visible in the mixer.  If mixer==false, returns true if the track is visible in the track control panel."
  },
  {
    "form": "(reaper.joystick_create guidGUID) :: (joystick_device)",
    "doc": "(reaper.joystick_create guidGUID) :: (joystick_device)\nguidGUID :: string\ncreates a joystick device",
    "name": "joystick_create",
    "params": [
      {
        "type": "string",
        "name": "guidGUID"
      }
    ],
    "returns": [
      {
        "type": "joystick_device"
      }
    ],
    "namespace": "reaper",
    "description": "creates a joystick device"
  },
  {
    "form": "(reaper.joystick_destroy device) :: nil",
    "doc": "(reaper.joystick_destroy device) :: nil\ndevice :: joystick_device\ndestroys a joystick device",
    "name": "joystick_destroy",
    "params": [
      {
        "type": "joystick_device",
        "name": "device"
      }
    ],
    "namespace": "reaper",
    "description": "destroys a joystick device"
  },
  {
    "form": "(reaper.joystick_enum index) :: (string string)",
    "doc": "(reaper.joystick_enum index) :: (string string)\nindex :: integer\nenumerates installed devices, returns GUID as a string",
    "name": "joystick_enum",
    "params": [
      {
        "type": "integer",
        "name": "index"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "namestr",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "enumerates installed devices, returns GUID as a string"
  },
  {
    "form": "(reaper.joystick_getaxis dev axis) :: (number)",
    "doc": "(reaper.joystick_getaxis dev axis) :: (number)\ndev :: joystick_device\naxis :: integer\nreturns axis value (-1..1)",
    "name": "joystick_getaxis",
    "params": [
      {
        "type": "joystick_device",
        "name": "dev"
      },
      {
        "type": "integer",
        "name": "axis"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "returns axis value (-1..1)"
  },
  {
    "form": "(reaper.joystick_getbuttonmask dev) :: (integer)",
    "doc": "(reaper.joystick_getbuttonmask dev) :: (integer)\ndev :: joystick_device\nreturns button pressed mask, 1=first button, 2=second...",
    "name": "joystick_getbuttonmask",
    "params": [
      {
        "type": "joystick_device",
        "name": "dev"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "returns button pressed mask, 1=first button, 2=second..."
  },
  {
    "form": "(reaper.joystick_getinfo dev) :: (integer integer integer)",
    "doc": "(reaper.joystick_getinfo dev) :: (integer integer integer)\ndev :: joystick_device\nreturns button count",
    "name": "joystick_getinfo",
    "params": [
      {
        "type": "joystick_device",
        "name": "dev"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "axes",
        "optional": true
      },
      {
        "type": "integer",
        "name": "povs",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "returns button count"
  },
  {
    "form": "(reaper.joystick_getpov dev pov) :: (number)",
    "doc": "(reaper.joystick_getpov dev pov) :: (number)\ndev :: joystick_device\npov :: integer\nreturns POV value (usually 0..655.35, or 655.35 on error)",
    "name": "joystick_getpov",
    "params": [
      {
        "type": "joystick_device",
        "name": "dev"
      },
      {
        "type": "integer",
        "name": "pov"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "returns POV value (usually 0..655.35, or 655.35 on error)"
  },
  {
    "form": "(reaper.joystick_update dev) :: (boolean)",
    "doc": "(reaper.joystick_update dev) :: (boolean)\ndev :: joystick_device\nUpdates joystick state from hardware, returns true if successful (joystick_get* will not be valid until joystick_update() is called successfully)",
    "name": "joystick_update",
    "params": [
      {
        "type": "joystick_device",
        "name": "dev"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Updates joystick state from hardware, returns true if successful (joystick_get* will not be valid until joystick_update() is called successfully)"
  },
  {
    "form": "(reaper.kbd_enumerateActions section idx) :: (integer string)",
    "doc": "(reaper.kbd_enumerateActions section idx) :: (integer string)\nsection :: KbdSectionInfo\nidx :: integer\n",
    "name": "kbd_enumerateActions",
    "params": [
      {
        "type": "KbdSectionInfo",
        "name": "section"
      },
      {
        "type": "integer",
        "name": "idx"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "name"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.kbd_getTextFromCmd cmd section) :: (string)",
    "doc": "(reaper.kbd_getTextFromCmd cmd section) :: (string)\ncmd :: integer\nsection :: KbdSectionInfo\n",
    "name": "kbd_getTextFromCmd",
    "params": [
      {
        "type": "integer",
        "name": "cmd"
      },
      {
        "type": "KbdSectionInfo",
        "name": "section"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.LICE_ClipLine pX1 pY1 pX2 pY2 xLo yLo xHi yHi) :: (boolean integer integer integer integer)",
    "doc": "(reaper.LICE_ClipLine pX1 pY1 pX2 pY2 xLo yLo xHi yHi) :: (boolean integer integer integer integer)\npX1 :: integer\npY1 :: integer\npX2 :: integer\npY2 :: integer\nxLo :: integer\nyLo :: integer\nxHi :: integer\nyHi :: integer\nReturns false if the line is entirely offscreen.",
    "name": "LICE_ClipLine",
    "params": [
      {
        "type": "integer",
        "name": "pX1"
      },
      {
        "type": "integer",
        "name": "pY1"
      },
      {
        "type": "integer",
        "name": "pX2"
      },
      {
        "type": "integer",
        "name": "pY2"
      },
      {
        "type": "integer",
        "name": "xLo"
      },
      {
        "type": "integer",
        "name": "yLo"
      },
      {
        "type": "integer",
        "name": "xHi"
      },
      {
        "type": "integer",
        "name": "yHi"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "pX1"
      },
      {
        "type": "integer",
        "name": "pY1"
      },
      {
        "type": "integer",
        "name": "pX2"
      },
      {
        "type": "integer",
        "name": "pY2"
      }
    ],
    "namespace": "reaper",
    "description": "Returns false if the line is entirely offscreen."
  },
  {
    "form": "(reaper.LocalizeString src_string section flags) :: (string)",
    "doc": "(reaper.LocalizeString src_string section flags) :: (string)\nsrc_string :: string\nsection :: string\nflags :: integer\nReturns a localized version of src_string, in section section. flags can have 1 set to only localize if sprintf-style formatting matches the original.",
    "name": "LocalizeString",
    "params": [
      {
        "type": "string",
        "name": "src_string"
      },
      {
        "type": "string",
        "name": "section"
      },
      {
        "type": "integer",
        "name": "flags"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "Returns a localized version of src_string, in section section. flags can have 1 set to only localize if sprintf-style formatting matches the original."
  },
  {
    "form": "(reaper.Loop_OnArrow project direction) :: (boolean)",
    "doc": "(reaper.Loop_OnArrow project direction) :: (boolean)\nproject :: ReaProject\ndirection :: integer\nMove the loop selection left or right. Returns true if snap is enabled.",
    "name": "Loop_OnArrow",
    "params": [
      {
        "type": "ReaProject",
        "name": "project"
      },
      {
        "type": "integer",
        "name": "direction"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Move the loop selection left or right. Returns true if snap is enabled."
  },
  {
    "form": "(reaper.Main_OnCommand command flag) :: nil",
    "doc": "(reaper.Main_OnCommand command flag) :: nil\ncommand :: integer\nflag :: integer\nSee Main_OnCommandEx.",
    "name": "Main_OnCommand",
    "params": [
      {
        "type": "integer",
        "name": "command"
      },
      {
        "type": "integer",
        "name": "flag"
      }
    ],
    "namespace": "reaper",
    "description": "See Main_OnCommandEx."
  },
  {
    "form": "(reaper.Main_OnCommandEx command flag proj) :: nil",
    "doc": "(reaper.Main_OnCommandEx command flag proj) :: nil\ncommand :: integer\nflag :: integer\nproj :: ReaProject\nPerforms an action belonging to the main action section. To perform non-native actions (ReaScripts, custom or extension plugins' actions) safely, see NamedCommandLookup().",
    "name": "Main_OnCommandEx",
    "params": [
      {
        "type": "integer",
        "name": "command"
      },
      {
        "type": "integer",
        "name": "flag"
      },
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "namespace": "reaper",
    "description": "Performs an action belonging to the main action section. To perform non-native actions (ReaScripts, custom or extension plugins' actions) safely, see NamedCommandLookup()."
  },
  {
    "form": "(reaper.Main_openProject name) :: nil",
    "doc": "(reaper.Main_openProject name) :: nil\nname :: string\nopens a project. will prompt the user to save unless name is prefixed with 'noprompt:'. If name is prefixed with 'template:', project file will be loaded as a template.\nIf passed a .RTrackTemplate file, adds the template to the existing project.",
    "name": "Main_openProject",
    "params": [
      {
        "type": "string",
        "name": "name"
      }
    ],
    "namespace": "reaper",
    "description": "opens a project. will prompt the user to save unless name is prefixed with 'noprompt:'. If name is prefixed with 'template:', project file will be loaded as a template.\nIf passed a .RTrackTemplate file, adds the template to the existing project."
  },
  {
    "form": "(reaper.Main_SaveProject proj forceSaveAsIn) :: nil",
    "doc": "(reaper.Main_SaveProject proj forceSaveAsIn) :: nil\nproj :: ReaProject\nforceSaveAsIn :: boolean\nSave the project.",
    "name": "Main_SaveProject",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "boolean",
        "name": "forceSaveAsIn"
      }
    ],
    "namespace": "reaper",
    "description": "Save the project."
  },
  {
    "form": "(reaper.Main_SaveProjectEx proj filename options) :: nil",
    "doc": "(reaper.Main_SaveProjectEx proj filename options) :: nil\nproj :: ReaProject\nfilename :: string\noptions :: integer\nSave the project. options: &1=save selected tracks as track template, &2=include media with track template, &4=include envelopes with track template. See Main_openProject, Main_SaveProject.",
    "name": "Main_SaveProjectEx",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "string",
        "name": "filename"
      },
      {
        "type": "integer",
        "name": "options"
      }
    ],
    "namespace": "reaper",
    "description": "Save the project. options: &1=save selected tracks as track template, &2=include media with track template, &4=include envelopes with track template. See Main_openProject, Main_SaveProject."
  },
  {
    "form": "(reaper.Main_UpdateLoopInfo ignoremask) :: nil",
    "doc": "(reaper.Main_UpdateLoopInfo ignoremask) :: nil\nignoremask :: integer\n",
    "name": "Main_UpdateLoopInfo",
    "params": [
      {
        "type": "integer",
        "name": "ignoremask"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.MarkProjectDirty proj) :: nil",
    "doc": "(reaper.MarkProjectDirty proj) :: nil\nproj :: ReaProject\nMarks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences.",
    "name": "MarkProjectDirty",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "namespace": "reaper",
    "description": "Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences."
  },
  {
    "form": "(reaper.MarkTrackItemsDirty track item) :: nil",
    "doc": "(reaper.MarkTrackItemsDirty track item) :: nil\ntrack :: MediaTrack\nitem :: MediaItem\nIf track is supplied, item is ignored",
    "name": "MarkTrackItemsDirty",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "MediaItem",
        "name": "item"
      }
    ],
    "namespace": "reaper",
    "description": "If track is supplied, item is ignored"
  },
  {
    "form": "(reaper.Master_GetPlayRate project) :: (number)",
    "doc": "(reaper.Master_GetPlayRate project) :: (number)\nproject :: ReaProject\n",
    "name": "Master_GetPlayRate",
    "params": [
      {
        "type": "ReaProject",
        "name": "project"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.Master_GetPlayRateAtTime time_s proj) :: (number)",
    "doc": "(reaper.Master_GetPlayRateAtTime time_s proj) :: (number)\ntime_s :: number\nproj :: ReaProject\n",
    "name": "Master_GetPlayRateAtTime",
    "params": [
      {
        "type": "number",
        "name": "time_s"
      },
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.Master_GetTempo ) :: (number)",
    "doc": "(reaper.Master_GetTempo ) :: (number)\n",
    "name": "Master_GetTempo",
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.Master_NormalizePlayRate playrate isnormalized) :: (number)",
    "doc": "(reaper.Master_NormalizePlayRate playrate isnormalized) :: (number)\nplayrate :: number\nisnormalized :: boolean\nConvert play rate to/from a value between 0 and 1, representing the position on the project playrate slider.",
    "name": "Master_NormalizePlayRate",
    "params": [
      {
        "type": "number",
        "name": "playrate"
      },
      {
        "type": "boolean",
        "name": "isnormalized"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Convert play rate to/from a value between 0 and 1, representing the position on the project playrate slider."
  },
  {
    "form": "(reaper.Master_NormalizeTempo bpm isnormalized) :: (number)",
    "doc": "(reaper.Master_NormalizeTempo bpm isnormalized) :: (number)\nbpm :: number\nisnormalized :: boolean\nConvert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm.",
    "name": "Master_NormalizeTempo",
    "params": [
      {
        "type": "number",
        "name": "bpm"
      },
      {
        "type": "boolean",
        "name": "isnormalized"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Convert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm."
  },
  {
    "form": "(reaper.MB msg title type) :: (integer)",
    "doc": "(reaper.MB msg title type) :: (integer)\nmsg :: string\ntitle :: string\ntype :: integer\ntype 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO",
    "name": "MB",
    "params": [
      {
        "type": "string",
        "name": "msg"
      },
      {
        "type": "string",
        "name": "title"
      },
      {
        "type": "integer",
        "name": "type"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO"
  },
  {
    "form": "(reaper.MediaItemDescendsFromTrack item track) :: (integer)",
    "doc": "(reaper.MediaItemDescendsFromTrack item track) :: (integer)\nitem :: MediaItem\ntrack :: MediaTrack\nReturns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc.",
    "name": "MediaItemDescendsFromTrack",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      },
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Returns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc."
  },
  {
    "form": "(reaper.Menu_GetHash menuname flag) :: (boolean string)",
    "doc": "(reaper.Menu_GetHash menuname flag) :: (boolean string)\nmenuname :: string\nflag :: integer\nGet a string that only changes when menu/toolbar entries are added or removed (not re-ordered). Can be used to determine if a customized menu/toolbar differs from the default, or if the default changed after a menu/toolbar was customized. flag==0: current default menu/toolbar; flag==1: current customized menu/toolbar; flag==2: default menu/toolbar at the time the current menu/toolbar was most recently customized, if it was customized in REAPER v7.08 or later.",
    "name": "Menu_GetHash",
    "params": [
      {
        "type": "string",
        "name": "menuname"
      },
      {
        "type": "integer",
        "name": "flag"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "hash"
      }
    ],
    "namespace": "reaper",
    "description": "Get a string that only changes when menu/toolbar entries are added or removed (not re-ordered). Can be used to determine if a customized menu/toolbar differs from the default, or if the default changed after a menu/toolbar was customized. flag==0: current default menu/toolbar; flag==1: current customized menu/toolbar; flag==2: default menu/toolbar at the time the current menu/toolbar was most recently customized, if it was customized in REAPER v7.08 or later."
  },
  {
    "form": "(reaper.MIDI_CountEvts take) :: (integer integer integer integer)",
    "doc": "(reaper.MIDI_CountEvts take) :: (integer integer integer integer)\ntake :: MediaItem_Take\nCount the number of notes, CC events, and text/sysex events in a given MIDI item.",
    "name": "MIDI_CountEvts",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "notecnt"
      },
      {
        "type": "integer",
        "name": "ccevtcnt"
      },
      {
        "type": "integer",
        "name": "textsyxevtcnt"
      }
    ],
    "namespace": "reaper",
    "description": "Count the number of notes, CC events, and text/sysex events in a given MIDI item."
  },
  {
    "form": "(reaper.MIDI_DeleteCC take ccidx) :: (boolean)",
    "doc": "(reaper.MIDI_DeleteCC take ccidx) :: (boolean)\ntake :: MediaItem_Take\nccidx :: integer\nDelete a MIDI CC event.",
    "name": "MIDI_DeleteCC",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "ccidx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Delete a MIDI CC event."
  },
  {
    "form": "(reaper.MIDI_DeleteEvt take evtidx) :: (boolean)",
    "doc": "(reaper.MIDI_DeleteEvt take evtidx) :: (boolean)\ntake :: MediaItem_Take\nevtidx :: integer\nDelete a MIDI event.",
    "name": "MIDI_DeleteEvt",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "evtidx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Delete a MIDI event."
  },
  {
    "form": "(reaper.MIDI_DeleteNote take noteidx) :: (boolean)",
    "doc": "(reaper.MIDI_DeleteNote take noteidx) :: (boolean)\ntake :: MediaItem_Take\nnoteidx :: integer\nDelete a MIDI note.",
    "name": "MIDI_DeleteNote",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "noteidx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Delete a MIDI note."
  },
  {
    "form": "(reaper.MIDI_DeleteTextSysexEvt take textsyxevtidx) :: (boolean)",
    "doc": "(reaper.MIDI_DeleteTextSysexEvt take textsyxevtidx) :: (boolean)\ntake :: MediaItem_Take\ntextsyxevtidx :: integer\nDelete a MIDI text or sysex event.",
    "name": "MIDI_DeleteTextSysexEvt",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "textsyxevtidx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Delete a MIDI text or sysex event."
  },
  {
    "form": "(reaper.MIDI_DisableSort take) :: nil",
    "doc": "(reaper.MIDI_DisableSort take) :: nil\ntake :: MediaItem_Take\nDisable sorting for all MIDI insert, delete, get and set functions, until MIDI_Sort is called.",
    "name": "MIDI_DisableSort",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "namespace": "reaper",
    "description": "Disable sorting for all MIDI insert, delete, get and set functions, until MIDI_Sort is called."
  },
  {
    "form": "(reaper.MIDI_EnumSelCC take ccidx) :: (integer)",
    "doc": "(reaper.MIDI_EnumSelCC take ccidx) :: (integer)\ntake :: MediaItem_Take\nccidx :: integer\nReturns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events).",
    "name": "MIDI_EnumSelCC",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "ccidx"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events)."
  },
  {
    "form": "(reaper.MIDI_EnumSelEvts take evtidx) :: (integer)",
    "doc": "(reaper.MIDI_EnumSelEvts take evtidx) :: (integer)\ntake :: MediaItem_Take\nevtidx :: integer\nReturns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events).",
    "name": "MIDI_EnumSelEvts",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "evtidx"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events)."
  },
  {
    "form": "(reaper.MIDI_EnumSelNotes take noteidx) :: (integer)",
    "doc": "(reaper.MIDI_EnumSelNotes take noteidx) :: (integer)\ntake :: MediaItem_Take\nnoteidx :: integer\nReturns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events).",
    "name": "MIDI_EnumSelNotes",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "noteidx"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events)."
  },
  {
    "form": "(reaper.MIDI_EnumSelTextSysexEvts take textsyxidx) :: (integer)",
    "doc": "(reaper.MIDI_EnumSelTextSysexEvts take textsyxidx) :: (integer)\ntake :: MediaItem_Take\ntextsyxidx :: integer\nReturns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events).",
    "name": "MIDI_EnumSelTextSysexEvts",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "textsyxidx"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events)."
  },
  {
    "form": "(reaper.MIDI_GetAllEvts take) :: (boolean string)",
    "doc": "(reaper.MIDI_GetAllEvts take) :: (boolean string)\ntake :: MediaItem_Take\nGet all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg[] }.\noffset: MIDI ticks from previous event\nflag: &1=selected &2=muted\nflag high 4 bits for CC shape: &16=linear, &32=slow start/end, &16|32=fast start, &64=fast end, &64|16=bezier\nmsg: the MIDI message.\nA meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier curve data for the previous MIDI event: 1 byte for the bezier type (usually 0) and 4 bytes for the bezier tension as a float.\nFor tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.\nSee MIDI_SetAllEvts.",
    "name": "MIDI_GetAllEvts",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "Get all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg[] }.\noffset: MIDI ticks from previous event\nflag: &1=selected &2=muted\nflag high 4 bits for CC shape: &16=linear, &32=slow start/end, &16|32=fast start, &64=fast end, &64|16=bezier\nmsg: the MIDI message.\nA meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier curve data for the previous MIDI event: 1 byte for the bezier type (usually 0) and 4 bytes for the bezier tension as a float.\nFor tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.\nSee MIDI_SetAllEvts."
  },
  {
    "form": "(reaper.MIDI_GetCC take ccidx) :: (boolean boolean boolean number integer integer integer integer)",
    "doc": "(reaper.MIDI_GetCC take ccidx) :: (boolean boolean boolean number integer integer integer integer)\ntake :: MediaItem_Take\nccidx :: integer\nGet MIDI CC event properties.",
    "name": "MIDI_GetCC",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "ccidx"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "selected"
      },
      {
        "type": "boolean",
        "name": "muted"
      },
      {
        "type": "number",
        "name": "ppqpos"
      },
      {
        "type": "integer",
        "name": "chanmsg"
      },
      {
        "type": "integer",
        "name": "chan"
      },
      {
        "type": "integer",
        "name": "msg2"
      },
      {
        "type": "integer",
        "name": "msg3"
      }
    ],
    "namespace": "reaper",
    "description": "Get MIDI CC event properties."
  },
  {
    "form": "(reaper.MIDI_GetCCShape take ccidx) :: (boolean integer number)",
    "doc": "(reaper.MIDI_GetCCShape take ccidx) :: (boolean integer number)\ntake :: MediaItem_Take\nccidx :: integer\nGet CC shape and bezier tension. See MIDI_GetCC, MIDI_SetCCShape",
    "name": "MIDI_GetCCShape",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "ccidx"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "shape"
      },
      {
        "type": "number",
        "name": "beztension"
      }
    ],
    "namespace": "reaper",
    "description": "Get CC shape and bezier tension. See MIDI_GetCC, MIDI_SetCCShape"
  },
  {
    "form": "(reaper.MIDI_GetEvt take evtidx) :: (boolean boolean boolean number string)",
    "doc": "(reaper.MIDI_GetEvt take evtidx) :: (boolean boolean boolean number string)\ntake :: MediaItem_Take\nevtidx :: integer\nGet MIDI event properties.",
    "name": "MIDI_GetEvt",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "evtidx"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "selected"
      },
      {
        "type": "boolean",
        "name": "muted"
      },
      {
        "type": "number",
        "name": "ppqpos"
      },
      {
        "type": "string",
        "name": "msg"
      }
    ],
    "namespace": "reaper",
    "description": "Get MIDI event properties."
  },
  {
    "form": "(reaper.MIDI_GetGrid take) :: (number number number)",
    "doc": "(reaper.MIDI_GetGrid take) :: (number number number)\ntake :: MediaItem_Take\nReturns the most recent MIDI editor grid size for this MIDI take, in QN. Swing is between 0 and 1. Note length is 0 if it follows the grid size.",
    "name": "MIDI_GetGrid",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "swing",
        "optional": true
      },
      {
        "type": "number",
        "name": "noteLen",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Returns the most recent MIDI editor grid size for this MIDI take, in QN. Swing is between 0 and 1. Note length is 0 if it follows the grid size."
  },
  {
    "form": "(reaper.MIDI_GetHash take notesonly) :: (boolean string)",
    "doc": "(reaper.MIDI_GetHash take notesonly) :: (boolean string)\ntake :: MediaItem_Take\nnotesonly :: boolean\nGet a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetTrackHash",
    "name": "MIDI_GetHash",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "boolean",
        "name": "notesonly"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "hash"
      }
    ],
    "namespace": "reaper",
    "description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetTrackHash"
  },
  {
    "form": "(reaper.MIDI_GetNote take noteidx) :: (boolean boolean boolean number number integer integer integer)",
    "doc": "(reaper.MIDI_GetNote take noteidx) :: (boolean boolean boolean number number integer integer integer)\ntake :: MediaItem_Take\nnoteidx :: integer\nGet MIDI note properties.",
    "name": "MIDI_GetNote",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "noteidx"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "selected"
      },
      {
        "type": "boolean",
        "name": "muted"
      },
      {
        "type": "number",
        "name": "startppqpos"
      },
      {
        "type": "number",
        "name": "endppqpos"
      },
      {
        "type": "integer",
        "name": "chan"
      },
      {
        "type": "integer",
        "name": "pitch"
      },
      {
        "type": "integer",
        "name": "vel"
      }
    ],
    "namespace": "reaper",
    "description": "Get MIDI note properties."
  },
  {
    "form": "(reaper.MIDI_GetPPQPos_EndOfMeasure take ppqpos) :: (number)",
    "doc": "(reaper.MIDI_GetPPQPos_EndOfMeasure take ppqpos) :: (number)\ntake :: MediaItem_Take\nppqpos :: number\nReturns the MIDI tick (ppq) position corresponding to the end of the measure.",
    "name": "MIDI_GetPPQPos_EndOfMeasure",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "number",
        "name": "ppqpos"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the MIDI tick (ppq) position corresponding to the end of the measure."
  },
  {
    "form": "(reaper.MIDI_GetPPQPos_StartOfMeasure take ppqpos) :: (number)",
    "doc": "(reaper.MIDI_GetPPQPos_StartOfMeasure take ppqpos) :: (number)\ntake :: MediaItem_Take\nppqpos :: number\nReturns the MIDI tick (ppq) position corresponding to the start of the measure.",
    "name": "MIDI_GetPPQPos_StartOfMeasure",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "number",
        "name": "ppqpos"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the MIDI tick (ppq) position corresponding to the start of the measure."
  },
  {
    "form": "(reaper.MIDI_GetPPQPosFromProjQN take projqn) :: (number)",
    "doc": "(reaper.MIDI_GetPPQPosFromProjQN take projqn) :: (number)\ntake :: MediaItem_Take\nprojqn :: number\nReturns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes.",
    "name": "MIDI_GetPPQPosFromProjQN",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "number",
        "name": "projqn"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes."
  },
  {
    "form": "(reaper.MIDI_GetPPQPosFromProjTime take projtime) :: (number)",
    "doc": "(reaper.MIDI_GetPPQPosFromProjTime take projtime) :: (number)\ntake :: MediaItem_Take\nprojtime :: number\nReturns the MIDI tick (ppq) position corresponding to a specific project time in seconds.",
    "name": "MIDI_GetPPQPosFromProjTime",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "number",
        "name": "projtime"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in seconds."
  },
  {
    "form": "(reaper.MIDI_GetProjQNFromPPQPos take ppqpos) :: (number)",
    "doc": "(reaper.MIDI_GetProjQNFromPPQPos take ppqpos) :: (number)\ntake :: MediaItem_Take\nppqpos :: number\nReturns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position.",
    "name": "MIDI_GetProjQNFromPPQPos",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "number",
        "name": "ppqpos"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position."
  },
  {
    "form": "(reaper.MIDI_GetProjTimeFromPPQPos take ppqpos) :: (number)",
    "doc": "(reaper.MIDI_GetProjTimeFromPPQPos take ppqpos) :: (number)\ntake :: MediaItem_Take\nppqpos :: number\nReturns the project time in seconds corresponding to a specific MIDI tick (ppq) position.",
    "name": "MIDI_GetProjTimeFromPPQPos",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "number",
        "name": "ppqpos"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the project time in seconds corresponding to a specific MIDI tick (ppq) position."
  },
  {
    "form": "(reaper.MIDI_GetRecentInputEvent idx) :: (integer string integer integer number integer)",
    "doc": "(reaper.MIDI_GetRecentInputEvent idx) :: (integer string integer integer number integer)\nidx :: integer\nGets a recent MIDI input event from the global history. idx=0 for the most recent event, which also latches to the latest MIDI event state (to get a more recent list, calling with idx=0 is necessary). idx=1 next most recent event, returns a non-zero sequence number for the event, or zero if no more events. tsOut will be set to the timestamp in samples relative to the current position (0 is current, -48000 is one second ago, etc). devIdxOut will have the low 16 bits set to the input device index, and 0x10000 will be set if device was enabled only for control. projPosOut will be set to project position in seconds if project was playing back at time of event, otherwise -1. Large SysEx events will not be included in this event list.",
    "name": "MIDI_GetRecentInputEvent",
    "params": [
      {
        "type": "integer",
        "name": "idx"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      },
      {
        "type": "integer",
        "name": "ts"
      },
      {
        "type": "integer",
        "name": "devIdx"
      },
      {
        "type": "number",
        "name": "projPos"
      },
      {
        "type": "integer",
        "name": "projLoopCnt"
      }
    ],
    "namespace": "reaper",
    "description": "Gets a recent MIDI input event from the global history. idx=0 for the most recent event, which also latches to the latest MIDI event state (to get a more recent list, calling with idx=0 is necessary). idx=1 next most recent event, returns a non-zero sequence number for the event, or zero if no more events. tsOut will be set to the timestamp in samples relative to the current position (0 is current, -48000 is one second ago, etc). devIdxOut will have the low 16 bits set to the input device index, and 0x10000 will be set if device was enabled only for control. projPosOut will be set to project position in seconds if project was playing back at time of event, otherwise -1. Large SysEx events will not be included in this event list."
  },
  {
    "form": "(reaper.MIDI_GetScale take) :: (boolean integer integer string)",
    "doc": "(reaper.MIDI_GetScale take) :: (boolean integer integer string)\ntake :: MediaItem_Take\nGet the active scale in the media source, if any. root 0=C, 1=C#, etc. scale &0x1=root, &0x2=minor 2nd, &0x4=major 2nd, &0x8=minor 3rd, &0xF=fourth, etc.",
    "name": "MIDI_GetScale",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "root"
      },
      {
        "type": "integer",
        "name": "scale"
      },
      {
        "type": "string",
        "name": "name"
      }
    ],
    "namespace": "reaper",
    "description": "Get the active scale in the media source, if any. root 0=C, 1=C#, etc. scale &0x1=root, &0x2=minor 2nd, &0x4=major 2nd, &0x8=minor 3rd, &0xF=fourth, etc."
  },
  {
    "form": "(reaper.MIDI_GetTextSysexEvt take textsyxevtidx ?selected ?muted ?ppqpos ?type ?msg) :: (boolean boolean boolean number integer string)",
    "doc": "(reaper.MIDI_GetTextSysexEvt take textsyxevtidx ?selected ?muted ?ppqpos ?type ?msg) :: (boolean boolean boolean number integer string)\ntake :: MediaItem_Take\ntextsyxevtidx :: integer\nselected :: boolean (optional)\nmuted :: boolean (optional)\nppqpos :: number (optional)\ntype :: integer (optional)\nmsg :: string (optional)\nGet MIDI meta-event properties. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event. For all other meta-messages, type is returned as -2 and msg returned as all zeroes. See MIDI_GetEvt.",
    "name": "MIDI_GetTextSysexEvt",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "textsyxevtidx"
      },
      {
        "type": "boolean",
        "name": "selected",
        "optional": true
      },
      {
        "type": "boolean",
        "name": "muted",
        "optional": true
      },
      {
        "type": "number",
        "name": "ppqpos",
        "optional": true
      },
      {
        "type": "integer",
        "name": "type",
        "optional": true
      },
      {
        "type": "string",
        "name": "msg",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "selected",
        "optional": true
      },
      {
        "type": "boolean",
        "name": "muted",
        "optional": true
      },
      {
        "type": "number",
        "name": "ppqpos",
        "optional": true
      },
      {
        "type": "integer",
        "name": "type",
        "optional": true
      },
      {
        "type": "string",
        "name": "msg",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Get MIDI meta-event properties. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event. For all other meta-messages, type is returned as -2 and msg returned as all zeroes. See MIDI_GetEvt."
  },
  {
    "form": "(reaper.MIDI_GetTrackHash track notesonly) :: (boolean string)",
    "doc": "(reaper.MIDI_GetTrackHash track notesonly) :: (boolean string)\ntrack :: MediaTrack\nnotesonly :: boolean\nGet a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetHash",
    "name": "MIDI_GetTrackHash",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "boolean",
        "name": "notesonly"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "hash"
      }
    ],
    "namespace": "reaper",
    "description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetHash"
  },
  {
    "form": "(reaper.midi_init force_reinit_input force_reinit_output) :: nil",
    "doc": "(reaper.midi_init force_reinit_input force_reinit_output) :: nil\nforce_reinit_input :: integer\nforce_reinit_output :: integer\nOpens MIDI devices as configured in preferences. force_reinit_input and force_reinit_output force a particular device index to close/re-open (pass -1 to not force any devices to reopen).",
    "name": "midi_init",
    "params": [
      {
        "type": "integer",
        "name": "force_reinit_input"
      },
      {
        "type": "integer",
        "name": "force_reinit_output"
      }
    ],
    "namespace": "reaper",
    "description": "Opens MIDI devices as configured in preferences. force_reinit_input and force_reinit_output force a particular device index to close/re-open (pass -1 to not force any devices to reopen)."
  },
  {
    "form": "(reaper.MIDI_InsertCC take selected muted ppqpos chanmsg chan msg2 msg3) :: (boolean)",
    "doc": "(reaper.MIDI_InsertCC take selected muted ppqpos chanmsg chan msg2 msg3) :: (boolean)\ntake :: MediaItem_Take\nselected :: boolean\nmuted :: boolean\nppqpos :: number\nchanmsg :: integer\nchan :: integer\nmsg2 :: integer\nmsg3 :: integer\nInsert a new MIDI CC event.",
    "name": "MIDI_InsertCC",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "boolean",
        "name": "selected"
      },
      {
        "type": "boolean",
        "name": "muted"
      },
      {
        "type": "number",
        "name": "ppqpos"
      },
      {
        "type": "integer",
        "name": "chanmsg"
      },
      {
        "type": "integer",
        "name": "chan"
      },
      {
        "type": "integer",
        "name": "msg2"
      },
      {
        "type": "integer",
        "name": "msg3"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Insert a new MIDI CC event."
  },
  {
    "form": "(reaper.MIDI_InsertEvt take selected muted ppqpos bytestr) :: (boolean)",
    "doc": "(reaper.MIDI_InsertEvt take selected muted ppqpos bytestr) :: (boolean)\ntake :: MediaItem_Take\nselected :: boolean\nmuted :: boolean\nppqpos :: number\nbytestr :: string\nInsert a new MIDI event.",
    "name": "MIDI_InsertEvt",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "boolean",
        "name": "selected"
      },
      {
        "type": "boolean",
        "name": "muted"
      },
      {
        "type": "number",
        "name": "ppqpos"
      },
      {
        "type": "string",
        "name": "bytestr"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Insert a new MIDI event."
  },
  {
    "form": "(reaper.MIDI_InsertNote take selected muted startppqpos endppqpos chan pitch vel ?noSortIn) :: (boolean)",
    "doc": "(reaper.MIDI_InsertNote take selected muted startppqpos endppqpos chan pitch vel ?noSortIn) :: (boolean)\ntake :: MediaItem_Take\nselected :: boolean\nmuted :: boolean\nstartppqpos :: number\nendppqpos :: number\nchan :: integer\npitch :: integer\nvel :: integer\nnoSortIn :: boolean (optional)\nInsert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done.",
    "name": "MIDI_InsertNote",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "boolean",
        "name": "selected"
      },
      {
        "type": "boolean",
        "name": "muted"
      },
      {
        "type": "number",
        "name": "startppqpos"
      },
      {
        "type": "number",
        "name": "endppqpos"
      },
      {
        "type": "integer",
        "name": "chan"
      },
      {
        "type": "integer",
        "name": "pitch"
      },
      {
        "type": "integer",
        "name": "vel"
      },
      {
        "type": "boolean",
        "name": "noSortIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Insert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done."
  },
  {
    "form": "(reaper.MIDI_InsertTextSysexEvt take selected muted ppqpos type bytestr) :: (boolean)",
    "doc": "(reaper.MIDI_InsertTextSysexEvt take selected muted ppqpos type bytestr) :: (boolean)\ntake :: MediaItem_Take\nselected :: boolean\nmuted :: boolean\nppqpos :: number\ntype :: integer\nbytestr :: string\nInsert a new MIDI text or sysex event. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event.",
    "name": "MIDI_InsertTextSysexEvt",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "boolean",
        "name": "selected"
      },
      {
        "type": "boolean",
        "name": "muted"
      },
      {
        "type": "number",
        "name": "ppqpos"
      },
      {
        "type": "integer",
        "name": "type"
      },
      {
        "type": "string",
        "name": "bytestr"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Insert a new MIDI text or sysex event. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event."
  },
  {
    "form": "(reaper.midi_reinit ) :: nil",
    "doc": "(reaper.midi_reinit ) :: nil\nReset (close and re-open) all MIDI devices",
    "name": "midi_reinit",
    "namespace": "reaper",
    "description": "Reset (close and re-open) all MIDI devices"
  },
  {
    "form": "(reaper.MIDI_SelectAll take select) :: nil",
    "doc": "(reaper.MIDI_SelectAll take select) :: nil\ntake :: MediaItem_Take\nselect :: boolean\nSelect or deselect all MIDI content.",
    "name": "MIDI_SelectAll",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "boolean",
        "name": "select"
      }
    ],
    "namespace": "reaper",
    "description": "Select or deselect all MIDI content."
  },
  {
    "form": "(reaper.MIDI_SetAllEvts take buf) :: (boolean)",
    "doc": "(reaper.MIDI_SetAllEvts take buf) :: (boolean)\ntake :: MediaItem_Take\nbuf :: string\nSet all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg[] }.\noffset: MIDI ticks from previous event\nflag: &1=selected &2=muted\nflag high 4 bits for CC shape: &16=linear, &32=slow start/end, &16|32=fast start, &64=fast end, &64|16=bezier\nmsg: the MIDI message.\nA meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier curve data for the previous MIDI event: 1 byte for the bezier type (usually 0) and 4 bytes for the bezier tension as a float.\nFor tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.\nSee MIDI_GetAllEvts.",
    "name": "MIDI_SetAllEvts",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Set all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg[] }.\noffset: MIDI ticks from previous event\nflag: &1=selected &2=muted\nflag high 4 bits for CC shape: &16=linear, &32=slow start/end, &16|32=fast start, &64=fast end, &64|16=bezier\nmsg: the MIDI message.\nA meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier curve data for the previous MIDI event: 1 byte for the bezier type (usually 0) and 4 bytes for the bezier tension as a float.\nFor tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.\nSee MIDI_GetAllEvts."
  },
  {
    "form": "(reaper.MIDI_SetCC take ccidx ?selectedIn ?mutedIn ?ppqposIn ?chanmsgIn ?chanIn ?msg2In ?msg3In ?noSortIn) :: (boolean)",
    "doc": "(reaper.MIDI_SetCC take ccidx ?selectedIn ?mutedIn ?ppqposIn ?chanmsgIn ?chanIn ?msg2In ?msg3In ?noSortIn) :: (boolean)\ntake :: MediaItem_Take\nccidx :: integer\nselectedIn :: boolean (optional)\nmutedIn :: boolean (optional)\nppqposIn :: number (optional)\nchanmsgIn :: integer (optional)\nchanIn :: integer (optional)\nmsg2In :: integer (optional)\nmsg3In :: integer (optional)\nnoSortIn :: boolean (optional)\nSet MIDI CC event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.",
    "name": "MIDI_SetCC",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "ccidx"
      },
      {
        "type": "boolean",
        "name": "selectedIn",
        "optional": true
      },
      {
        "type": "boolean",
        "name": "mutedIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "ppqposIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "chanmsgIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "chanIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "msg2In",
        "optional": true
      },
      {
        "type": "integer",
        "name": "msg3In",
        "optional": true
      },
      {
        "type": "boolean",
        "name": "noSortIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Set MIDI CC event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done."
  },
  {
    "form": "(reaper.MIDI_SetCCShape take ccidx shape beztension ?noSortIn) :: (boolean)",
    "doc": "(reaper.MIDI_SetCCShape take ccidx shape beztension ?noSortIn) :: (boolean)\ntake :: MediaItem_Take\nccidx :: integer\nshape :: integer\nbeztension :: number\nnoSortIn :: boolean (optional)\nSet CC shape and bezier tension. set noSort if setting multiple events, then call MIDI_Sort when done. See MIDI_SetCC, MIDI_GetCCShape",
    "name": "MIDI_SetCCShape",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "ccidx"
      },
      {
        "type": "integer",
        "name": "shape"
      },
      {
        "type": "number",
        "name": "beztension"
      },
      {
        "type": "boolean",
        "name": "noSortIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Set CC shape and bezier tension. set noSort if setting multiple events, then call MIDI_Sort when done. See MIDI_SetCC, MIDI_GetCCShape"
  },
  {
    "form": "(reaper.MIDI_SetEvt take evtidx ?selectedIn ?mutedIn ?ppqposIn ?msg ?noSortIn) :: (boolean)",
    "doc": "(reaper.MIDI_SetEvt take evtidx ?selectedIn ?mutedIn ?ppqposIn ?msg ?noSortIn) :: (boolean)\ntake :: MediaItem_Take\nevtidx :: integer\nselectedIn :: boolean (optional)\nmutedIn :: boolean (optional)\nppqposIn :: number (optional)\nmsg :: string (optional)\nnoSortIn :: boolean (optional)\nSet MIDI event properties. Properties passed as NULL will not be set.  set noSort if setting multiple events, then call MIDI_Sort when done.",
    "name": "MIDI_SetEvt",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "evtidx"
      },
      {
        "type": "boolean",
        "name": "selectedIn",
        "optional": true
      },
      {
        "type": "boolean",
        "name": "mutedIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "ppqposIn",
        "optional": true
      },
      {
        "type": "string",
        "name": "msg",
        "optional": true
      },
      {
        "type": "boolean",
        "name": "noSortIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Set MIDI event properties. Properties passed as NULL will not be set.  set noSort if setting multiple events, then call MIDI_Sort when done."
  },
  {
    "form": "(reaper.MIDI_SetItemExtents item startQN endQN) :: (boolean)",
    "doc": "(reaper.MIDI_SetItemExtents item startQN endQN) :: (boolean)\nitem :: MediaItem\nstartQN :: number\nendQN :: number\nSet the start/end positions of a media item that contains a MIDI take.",
    "name": "MIDI_SetItemExtents",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      },
      {
        "type": "number",
        "name": "startQN"
      },
      {
        "type": "number",
        "name": "endQN"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Set the start/end positions of a media item that contains a MIDI take."
  },
  {
    "form": "(reaper.MIDI_SetNote take noteidx ?selectedIn ?mutedIn ?startppqposIn ?endppqposIn ?chanIn ?pitchIn ?velIn ?noSortIn) :: (boolean)",
    "doc": "(reaper.MIDI_SetNote take noteidx ?selectedIn ?mutedIn ?startppqposIn ?endppqposIn ?chanIn ?pitchIn ?velIn ?noSortIn) :: (boolean)\ntake :: MediaItem_Take\nnoteidx :: integer\nselectedIn :: boolean (optional)\nmutedIn :: boolean (optional)\nstartppqposIn :: number (optional)\nendppqposIn :: number (optional)\nchanIn :: integer (optional)\npitchIn :: integer (optional)\nvelIn :: integer (optional)\nnoSortIn :: boolean (optional)\nSet MIDI note properties. Properties passed as NULL (or negative values) will not be set. Set noSort if setting multiple events, then call MIDI_Sort when done. Setting multiple note start positions at once is done more safely by deleting and re-inserting the notes.",
    "name": "MIDI_SetNote",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "noteidx"
      },
      {
        "type": "boolean",
        "name": "selectedIn",
        "optional": true
      },
      {
        "type": "boolean",
        "name": "mutedIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "startppqposIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "endppqposIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "chanIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "pitchIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "velIn",
        "optional": true
      },
      {
        "type": "boolean",
        "name": "noSortIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Set MIDI note properties. Properties passed as NULL (or negative values) will not be set. Set noSort if setting multiple events, then call MIDI_Sort when done. Setting multiple note start positions at once is done more safely by deleting and re-inserting the notes."
  },
  {
    "form": "(reaper.MIDI_SetTextSysexEvt take textsyxevtidx ?selectedIn ?mutedIn ?ppqposIn ?typeIn ?msg ?noSortIn) :: (boolean)",
    "doc": "(reaper.MIDI_SetTextSysexEvt take textsyxevtidx ?selectedIn ?mutedIn ?ppqposIn ?typeIn ?msg ?noSortIn) :: (boolean)\ntake :: MediaItem_Take\ntextsyxevtidx :: integer\nselectedIn :: boolean (optional)\nmutedIn :: boolean (optional)\nppqposIn :: number (optional)\ntypeIn :: integer (optional)\nmsg :: string (optional)\nnoSortIn :: boolean (optional)\nSet MIDI text or sysex event properties. Properties passed as NULL will not be set. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event. set noSort if setting multiple events, then call MIDI_Sort when done.",
    "name": "MIDI_SetTextSysexEvt",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "textsyxevtidx"
      },
      {
        "type": "boolean",
        "name": "selectedIn",
        "optional": true
      },
      {
        "type": "boolean",
        "name": "mutedIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "ppqposIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "typeIn",
        "optional": true
      },
      {
        "type": "string",
        "name": "msg",
        "optional": true
      },
      {
        "type": "boolean",
        "name": "noSortIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Set MIDI text or sysex event properties. Properties passed as NULL will not be set. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event. set noSort if setting multiple events, then call MIDI_Sort when done."
  },
  {
    "form": "(reaper.MIDI_Sort take) :: nil",
    "doc": "(reaper.MIDI_Sort take) :: nil\ntake :: MediaItem_Take\nSort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc.",
    "name": "MIDI_Sort",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "namespace": "reaper",
    "description": "Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc."
  },
  {
    "form": "(reaper.MIDIEditor_EnumTakes midieditor takeindex editable_only) :: (MediaItem_Take)",
    "doc": "(reaper.MIDIEditor_EnumTakes midieditor takeindex editable_only) :: (MediaItem_Take)\nmidieditor :: HWND\ntakeindex :: integer\neditable_only :: boolean\nlist the takes that are currently being edited in this MIDI editor, starting with the active take. See MIDIEditor_GetTake",
    "name": "MIDIEditor_EnumTakes",
    "params": [
      {
        "type": "HWND",
        "name": "midieditor"
      },
      {
        "type": "integer",
        "name": "takeindex"
      },
      {
        "type": "boolean",
        "name": "editable_only"
      }
    ],
    "returns": [
      {
        "type": "MediaItem_Take"
      }
    ],
    "namespace": "reaper",
    "description": "list the takes that are currently being edited in this MIDI editor, starting with the active take. See MIDIEditor_GetTake"
  },
  {
    "form": "(reaper.MIDIEditor_GetActive ) :: (HWND)",
    "doc": "(reaper.MIDIEditor_GetActive ) :: (HWND)\nget a pointer to the focused MIDI editor window\nsee MIDIEditor_GetMode, MIDIEditor_OnCommand",
    "name": "MIDIEditor_GetActive",
    "returns": [
      {
        "type": "HWND"
      }
    ],
    "namespace": "reaper",
    "description": "get a pointer to the focused MIDI editor window\nsee MIDIEditor_GetMode, MIDIEditor_OnCommand"
  },
  {
    "form": "(reaper.MIDIEditor_GetMode midieditor) :: (integer)",
    "doc": "(reaper.MIDIEditor_GetMode midieditor) :: (integer)\nmidieditor :: HWND\nget the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)\nsee MIDIEditor_GetActive, MIDIEditor_OnCommand",
    "name": "MIDIEditor_GetMode",
    "params": [
      {
        "type": "HWND",
        "name": "midieditor"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)\nsee MIDIEditor_GetActive, MIDIEditor_OnCommand"
  },
  {
    "form": "(reaper.MIDIEditor_GetSetting_int midieditor setting_desc) :: (integer)",
    "doc": "(reaper.MIDIEditor_GetSetting_int midieditor setting_desc) :: (integer)\nmidieditor :: HWND\nsetting_desc :: string\nGet settings from a MIDI editor. setting_desc can be:\nsnap_enabled: returns 0 or 1\nactive_note_row: returns 0-127\nlast_clicked_cc_lane: returns 0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events, 0x210=media item lane\ndefault_note_vel: returns 0-127\ndefault_note_chan: returns 0-15\ndefault_note_len: returns default length in MIDI ticks\nscale_enabled: returns 0-1\nscale_root: returns 0-12 (0=C)\nlist_cnt: if viewing list view, returns event count\nif setting_desc is unsupported, the function returns -1.\nSee MIDIEditor_SetSetting_int, MIDIEditor_GetActive, MIDIEditor_GetSetting_str",
    "name": "MIDIEditor_GetSetting_int",
    "params": [
      {
        "type": "HWND",
        "name": "midieditor"
      },
      {
        "type": "string",
        "name": "setting_desc"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Get settings from a MIDI editor. setting_desc can be:\nsnap_enabled: returns 0 or 1\nactive_note_row: returns 0-127\nlast_clicked_cc_lane: returns 0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events, 0x210=media item lane\ndefault_note_vel: returns 0-127\ndefault_note_chan: returns 0-15\ndefault_note_len: returns default length in MIDI ticks\nscale_enabled: returns 0-1\nscale_root: returns 0-12 (0=C)\nlist_cnt: if viewing list view, returns event count\nif setting_desc is unsupported, the function returns -1.\nSee MIDIEditor_SetSetting_int, MIDIEditor_GetActive, MIDIEditor_GetSetting_str"
  },
  {
    "form": "(reaper.MIDIEditor_GetSetting_str midieditor setting_desc) :: (boolean string)",
    "doc": "(reaper.MIDIEditor_GetSetting_str midieditor setting_desc) :: (boolean string)\nmidieditor :: HWND\nsetting_desc :: string\nGet settings from a MIDI editor. setting_desc can be:\nlast_clicked_cc_lane: returns text description (\"velocity\", \"pitch\", etc)\nscale: returns the scale record, for example \"102034050607\" for a major scale\nlist_X: if viewing list view, returns string describing event at row X (0-based). String will have a list of key=value pairs, e.g. 'pos=4.0 len=4.0 offvel=127 msg=90317F'. pos/len times are in QN, len/offvel may not be present if event is not a note. other keys which may be present include pos_pq/len_pq, sel, mute, ccval14, ccshape, ccbeztension.\nif setting_desc is unsupported, the function returns false.\nSee MIDIEditor_GetActive, MIDIEditor_GetSetting_int",
    "name": "MIDIEditor_GetSetting_str",
    "params": [
      {
        "type": "HWND",
        "name": "midieditor"
      },
      {
        "type": "string",
        "name": "setting_desc"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "Get settings from a MIDI editor. setting_desc can be:\nlast_clicked_cc_lane: returns text description (\"velocity\", \"pitch\", etc)\nscale: returns the scale record, for example \"102034050607\" for a major scale\nlist_X: if viewing list view, returns string describing event at row X (0-based). String will have a list of key=value pairs, e.g. 'pos=4.0 len=4.0 offvel=127 msg=90317F'. pos/len times are in QN, len/offvel may not be present if event is not a note. other keys which may be present include pos_pq/len_pq, sel, mute, ccval14, ccshape, ccbeztension.\nif setting_desc is unsupported, the function returns false.\nSee MIDIEditor_GetActive, MIDIEditor_GetSetting_int"
  },
  {
    "form": "(reaper.MIDIEditor_GetTake midieditor) :: (MediaItem_Take)",
    "doc": "(reaper.MIDIEditor_GetTake midieditor) :: (MediaItem_Take)\nmidieditor :: HWND\nget the take that is currently being edited in this MIDI editor. see MIDIEditor_EnumTakes",
    "name": "MIDIEditor_GetTake",
    "params": [
      {
        "type": "HWND",
        "name": "midieditor"
      }
    ],
    "returns": [
      {
        "type": "MediaItem_Take"
      }
    ],
    "namespace": "reaper",
    "description": "get the take that is currently being edited in this MIDI editor. see MIDIEditor_EnumTakes"
  },
  {
    "form": "(reaper.MIDIEditor_LastFocused_OnCommand command_id islistviewcommand) :: (boolean)",
    "doc": "(reaper.MIDIEditor_LastFocused_OnCommand command_id islistviewcommand) :: (boolean)\ncommand_id :: integer\nislistviewcommand :: boolean\nSend an action command to the last focused MIDI editor. Returns false if there is no MIDI editor open, or if the view mode (piano roll or event list) does not match the input.\nsee MIDIEditor_OnCommand",
    "name": "MIDIEditor_LastFocused_OnCommand",
    "params": [
      {
        "type": "integer",
        "name": "command_id"
      },
      {
        "type": "boolean",
        "name": "islistviewcommand"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Send an action command to the last focused MIDI editor. Returns false if there is no MIDI editor open, or if the view mode (piano roll or event list) does not match the input.\nsee MIDIEditor_OnCommand"
  },
  {
    "form": "(reaper.MIDIEditor_OnCommand midieditor command_id) :: (boolean)",
    "doc": "(reaper.MIDIEditor_OnCommand midieditor command_id) :: (boolean)\nmidieditor :: HWND\ncommand_id :: integer\nSend an action command to a MIDI editor. Returns false if the supplied MIDI editor pointer is not valid (not an open MIDI editor).\nsee MIDIEditor_GetActive, MIDIEditor_LastFocused_OnCommand",
    "name": "MIDIEditor_OnCommand",
    "params": [
      {
        "type": "HWND",
        "name": "midieditor"
      },
      {
        "type": "integer",
        "name": "command_id"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Send an action command to a MIDI editor. Returns false if the supplied MIDI editor pointer is not valid (not an open MIDI editor).\nsee MIDIEditor_GetActive, MIDIEditor_LastFocused_OnCommand"
  },
  {
    "form": "(reaper.MIDIEditor_SetSetting_int midieditor setting_desc setting) :: (boolean)",
    "doc": "(reaper.MIDIEditor_SetSetting_int midieditor setting_desc setting) :: (boolean)\nmidieditor :: HWND\nsetting_desc :: string\nsetting :: integer\nSet settings for a MIDI editor. setting_desc can be:\nactive_note_row: 0-127\nSee MIDIEditor_GetSetting_int",
    "name": "MIDIEditor_SetSetting_int",
    "params": [
      {
        "type": "HWND",
        "name": "midieditor"
      },
      {
        "type": "string",
        "name": "setting_desc"
      },
      {
        "type": "integer",
        "name": "setting"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Set settings for a MIDI editor. setting_desc can be:\nactive_note_row: 0-127\nSee MIDIEditor_GetSetting_int"
  },
  {
    "form": "(reaper.MIDIEditorFlagsForTrack track pitchwheelrange flags is_set) :: (integer integer)",
    "doc": "(reaper.MIDIEditorFlagsForTrack track pitchwheelrange flags is_set) :: (integer integer)\ntrack :: MediaTrack\npitchwheelrange :: integer\nflags :: integer\nis_set :: boolean\nGet or set MIDI editor settings for this track. pitchwheelrange: semitones up or down. flags &1: snap pitch lane edits to semitones if pitchwheel range is defined.",
    "name": "MIDIEditorFlagsForTrack",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "pitchwheelrange"
      },
      {
        "type": "integer",
        "name": "flags"
      },
      {
        "type": "boolean",
        "name": "is_set"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "pitchwheelrange"
      },
      {
        "type": "integer",
        "name": "flags"
      }
    ],
    "namespace": "reaper",
    "description": "Get or set MIDI editor settings for this track. pitchwheelrange: semitones up or down. flags &1: snap pitch lane edits to semitones if pitchwheel range is defined."
  },
  {
    "form": "(reaper.mkpanstr strNeed64 pan) :: (string)",
    "doc": "(reaper.mkpanstr strNeed64 pan) :: (string)\nstrNeed64 :: string\npan :: number\n",
    "name": "mkpanstr",
    "params": [
      {
        "type": "string",
        "name": "strNeed64"
      },
      {
        "type": "number",
        "name": "pan"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "strNeed64"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.mkvolpanstr strNeed64 vol pan) :: (string)",
    "doc": "(reaper.mkvolpanstr strNeed64 vol pan) :: (string)\nstrNeed64 :: string\nvol :: number\npan :: number\n",
    "name": "mkvolpanstr",
    "params": [
      {
        "type": "string",
        "name": "strNeed64"
      },
      {
        "type": "number",
        "name": "vol"
      },
      {
        "type": "number",
        "name": "pan"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "strNeed64"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.mkvolstr strNeed64 vol) :: (string)",
    "doc": "(reaper.mkvolstr strNeed64 vol) :: (string)\nstrNeed64 :: string\nvol :: number\n",
    "name": "mkvolstr",
    "params": [
      {
        "type": "string",
        "name": "strNeed64"
      },
      {
        "type": "number",
        "name": "vol"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "strNeed64"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.MoveEditCursor adjamt dosel) :: nil",
    "doc": "(reaper.MoveEditCursor adjamt dosel) :: nil\nadjamt :: number\ndosel :: boolean\n",
    "name": "MoveEditCursor",
    "params": [
      {
        "type": "number",
        "name": "adjamt"
      },
      {
        "type": "boolean",
        "name": "dosel"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.MoveMediaItemToTrack item desttr) :: (boolean)",
    "doc": "(reaper.MoveMediaItemToTrack item desttr) :: (boolean)\nitem :: MediaItem\ndesttr :: MediaTrack\nreturns TRUE if move succeeded",
    "name": "MoveMediaItemToTrack",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      },
      {
        "type": "MediaTrack",
        "name": "desttr"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "returns TRUE if move succeeded"
  },
  {
    "form": "(reaper.MuteAllTracks mute) :: nil",
    "doc": "(reaper.MuteAllTracks mute) :: nil\nmute :: boolean\n",
    "name": "MuteAllTracks",
    "params": [
      {
        "type": "boolean",
        "name": "mute"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.my_getViewport integerr.left integerr.top integerr.right integerr.bot sr.left sr.top sr.right sr.bot wantWorkArea) :: nil",
    "doc": "(reaper.my_getViewport integerr.left integerr.top integerr.right integerr.bot sr.left sr.top sr.right sr.bot wantWorkArea) :: nil\nintegerr.left :: \nintegerr.top :: \nintegerr.right :: \nintegerr.bot :: \nsr.left :: integer\nsr.top :: integer\nsr.right :: integer\nsr.bot :: integer\nwantWorkArea :: boolean\n",
    "name": "my_getViewport",
    "params": [
      {
        "name": "integerr.left"
      },
      {
        "name": "integerr.top"
      },
      {
        "name": "integerr.right"
      },
      {
        "name": "integerr.bot"
      },
      {
        "type": "integer",
        "name": "sr.left"
      },
      {
        "type": "integer",
        "name": "sr.top"
      },
      {
        "type": "integer",
        "name": "sr.right"
      },
      {
        "type": "integer",
        "name": "sr.bot"
      },
      {
        "type": "boolean",
        "name": "wantWorkArea"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.NamedCommandLookup command_name) :: (integer)",
    "doc": "(reaper.NamedCommandLookup command_name) :: (integer)\ncommand_name :: string\nGet the command ID number for named command that was registered by an extension such as \"_SWS_ABOUT\" or \"_113088d11ae641c193a2b7ede3041ad5\" for a ReaScript or a custom action.",
    "name": "NamedCommandLookup",
    "params": [
      {
        "type": "string",
        "name": "command_name"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Get the command ID number for named command that was registered by an extension such as \"_SWS_ABOUT\" or \"_113088d11ae641c193a2b7ede3041ad5\" for a ReaScript or a custom action."
  },
  {
    "form": "(reaper.OnPauseButton ) :: nil",
    "doc": "(reaper.OnPauseButton ) :: nil\ndirect way to simulate pause button hit",
    "name": "OnPauseButton",
    "namespace": "reaper",
    "description": "direct way to simulate pause button hit"
  },
  {
    "form": "(reaper.OnPauseButtonEx proj) :: nil",
    "doc": "(reaper.OnPauseButtonEx proj) :: nil\nproj :: ReaProject\ndirect way to simulate pause button hit",
    "name": "OnPauseButtonEx",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "namespace": "reaper",
    "description": "direct way to simulate pause button hit"
  },
  {
    "form": "(reaper.OnPlayButton ) :: nil",
    "doc": "(reaper.OnPlayButton ) :: nil\ndirect way to simulate play button hit",
    "name": "OnPlayButton",
    "namespace": "reaper",
    "description": "direct way to simulate play button hit"
  },
  {
    "form": "(reaper.OnPlayButtonEx proj) :: nil",
    "doc": "(reaper.OnPlayButtonEx proj) :: nil\nproj :: ReaProject\ndirect way to simulate play button hit",
    "name": "OnPlayButtonEx",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "namespace": "reaper",
    "description": "direct way to simulate play button hit"
  },
  {
    "form": "(reaper.OnStopButton ) :: nil",
    "doc": "(reaper.OnStopButton ) :: nil\ndirect way to simulate stop button hit",
    "name": "OnStopButton",
    "namespace": "reaper",
    "description": "direct way to simulate stop button hit"
  },
  {
    "form": "(reaper.OnStopButtonEx proj) :: nil",
    "doc": "(reaper.OnStopButtonEx proj) :: nil\nproj :: ReaProject\ndirect way to simulate stop button hit",
    "name": "OnStopButtonEx",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "namespace": "reaper",
    "description": "direct way to simulate stop button hit"
  },
  {
    "form": "(reaper.OpenColorThemeFile fn) :: (boolean)",
    "doc": "(reaper.OpenColorThemeFile fn) :: (boolean)\nfn :: string\n",
    "name": "OpenColorThemeFile",
    "params": [
      {
        "type": "string",
        "name": "fn"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.OpenMediaExplorer mediafn play) :: (HWND)",
    "doc": "(reaper.OpenMediaExplorer mediafn play) :: (HWND)\nmediafn :: string\nplay :: boolean\nOpens mediafn in the Media Explorer, play=true will play the file immediately (or toggle playback if mediafn was already open), =false will just select it.",
    "name": "OpenMediaExplorer",
    "params": [
      {
        "type": "string",
        "name": "mediafn"
      },
      {
        "type": "boolean",
        "name": "play"
      }
    ],
    "returns": [
      {
        "type": "HWND"
      }
    ],
    "namespace": "reaper",
    "description": "Opens mediafn in the Media Explorer, play=true will play the file immediately (or toggle playback if mediafn was already open), =false will just select it."
  },
  {
    "form": "(reaper.OscLocalMessageToHost message ?valueIn) :: nil",
    "doc": "(reaper.OscLocalMessageToHost message ?valueIn) :: nil\nmessage :: string\nvalueIn :: number (optional)\nSend an OSC message directly to REAPER. The value argument may be NULL. The message will be matched against the default OSC patterns.",
    "name": "OscLocalMessageToHost",
    "params": [
      {
        "type": "string",
        "name": "message"
      },
      {
        "type": "number",
        "name": "valueIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Send an OSC message directly to REAPER. The value argument may be NULL. The message will be matched against the default OSC patterns."
  },
  {
    "form": "(reaper.parse_timestr buf) :: (number)",
    "doc": "(reaper.parse_timestr buf) :: (number)\nbuf :: string\nParse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See parse_timestr_pos, parse_timestr_len.",
    "name": "parse_timestr",
    "params": [
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See parse_timestr_pos, parse_timestr_len."
  },
  {
    "form": "(reaper.parse_timestr_len buf offset modeoverride) :: (number)",
    "doc": "(reaper.parse_timestr_len buf offset modeoverride) :: (number)\nbuf :: string\noffset :: number\nmodeoverride :: integer\ntime formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f",
    "name": "parse_timestr_len",
    "params": [
      {
        "type": "string",
        "name": "buf"
      },
      {
        "type": "number",
        "name": "offset"
      },
      {
        "type": "integer",
        "name": "modeoverride"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f"
  },
  {
    "form": "(reaper.parse_timestr_pos buf modeoverride) :: (number)",
    "doc": "(reaper.parse_timestr_pos buf modeoverride) :: (number)\nbuf :: string\nmodeoverride :: integer\nParse time string, time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f",
    "name": "parse_timestr_pos",
    "params": [
      {
        "type": "string",
        "name": "buf"
      },
      {
        "type": "integer",
        "name": "modeoverride"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Parse time string, time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f"
  },
  {
    "form": "(reaper.parsepanstr str) :: (number)",
    "doc": "(reaper.parsepanstr str) :: (number)\nstr :: string\n",
    "name": "parsepanstr",
    "params": [
      {
        "type": "string",
        "name": "str"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.PCM_Sink_Enum idx) :: (integer string)",
    "doc": "(reaper.PCM_Sink_Enum idx) :: (integer string)\nidx :: integer\n",
    "name": "PCM_Sink_Enum",
    "params": [
      {
        "type": "integer",
        "name": "idx"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "descstr"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.PCM_Sink_GetExtension data) :: (string)",
    "doc": "(reaper.PCM_Sink_GetExtension data) :: (string)\ndata :: string\n",
    "name": "PCM_Sink_GetExtension",
    "params": [
      {
        "type": "string",
        "name": "data"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.PCM_Sink_ShowConfig cfg hwndParent) :: (HWND)",
    "doc": "(reaper.PCM_Sink_ShowConfig cfg hwndParent) :: (HWND)\ncfg :: string\nhwndParent :: HWND\n",
    "name": "PCM_Sink_ShowConfig",
    "params": [
      {
        "type": "string",
        "name": "cfg"
      },
      {
        "type": "HWND",
        "name": "hwndParent"
      }
    ],
    "returns": [
      {
        "type": "HWND"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.PCM_Source_BuildPeaks src mode) :: (integer)",
    "doc": "(reaper.PCM_Source_BuildPeaks src mode) :: (integer)\nsrc :: PCM_source\nmode :: integer\nCalls and returns PCM_source::PeaksBuild_Begin() if mode=0, PeaksBuild_Run() if mode=1, and PeaksBuild_Finish() if mode=2. Normal use is to call PCM_Source_BuildPeaks(src,0), and if that returns nonzero, call PCM_Source_BuildPeaks(src,1) periodically until it returns zero (it returns the percentage of the file remaining), then call PCM_Source_BuildPeaks(src,2) to finalize. If PCM_Source_BuildPeaks(src,0) returns zero, then no further action is necessary.",
    "name": "PCM_Source_BuildPeaks",
    "params": [
      {
        "type": "PCM_source",
        "name": "src"
      },
      {
        "type": "integer",
        "name": "mode"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Calls and returns PCM_source::PeaksBuild_Begin() if mode=0, PeaksBuild_Run() if mode=1, and PeaksBuild_Finish() if mode=2. Normal use is to call PCM_Source_BuildPeaks(src,0), and if that returns nonzero, call PCM_Source_BuildPeaks(src,1) periodically until it returns zero (it returns the percentage of the file remaining), then call PCM_Source_BuildPeaks(src,2) to finalize. If PCM_Source_BuildPeaks(src,0) returns zero, then no further action is necessary."
  },
  {
    "form": "(reaper.PCM_Source_CreateFromFile filename) :: (PCM_source)",
    "doc": "(reaper.PCM_Source_CreateFromFile filename) :: (PCM_source)\nfilename :: string\nSee PCM_Source_CreateFromFileEx.",
    "name": "PCM_Source_CreateFromFile",
    "params": [
      {
        "type": "string",
        "name": "filename"
      }
    ],
    "returns": [
      {
        "type": "PCM_source"
      }
    ],
    "namespace": "reaper",
    "description": "See PCM_Source_CreateFromFileEx."
  },
  {
    "form": "(reaper.PCM_Source_CreateFromFileEx filename forcenoMidiImp) :: (PCM_source)",
    "doc": "(reaper.PCM_Source_CreateFromFileEx filename forcenoMidiImp) :: (PCM_source)\nfilename :: string\nforcenoMidiImp :: boolean\nCreate a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events.",
    "name": "PCM_Source_CreateFromFileEx",
    "params": [
      {
        "type": "string",
        "name": "filename"
      },
      {
        "type": "boolean",
        "name": "forcenoMidiImp"
      }
    ],
    "returns": [
      {
        "type": "PCM_source"
      }
    ],
    "namespace": "reaper",
    "description": "Create a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events."
  },
  {
    "form": "(reaper.PCM_Source_CreateFromType sourcetype) :: (PCM_source)",
    "doc": "(reaper.PCM_Source_CreateFromType sourcetype) :: (PCM_source)\nsourcetype :: string\nCreate a PCM_source from a \"type\" (use this if you're going to load its state via LoadState/ProjectStateContext).\nValid types include \"WAVE\", \"MIDI\", or whatever plug-ins define as well.",
    "name": "PCM_Source_CreateFromType",
    "params": [
      {
        "type": "string",
        "name": "sourcetype"
      }
    ],
    "returns": [
      {
        "type": "PCM_source"
      }
    ],
    "namespace": "reaper",
    "description": "Create a PCM_source from a \"type\" (use this if you're going to load its state via LoadState/ProjectStateContext).\nValid types include \"WAVE\", \"MIDI\", or whatever plug-ins define as well."
  },
  {
    "form": "(reaper.PCM_Source_Destroy src) :: nil",
    "doc": "(reaper.PCM_Source_Destroy src) :: nil\nsrc :: PCM_source\nDeletes a PCM_source -- be sure that you remove any project reference before deleting a source",
    "name": "PCM_Source_Destroy",
    "params": [
      {
        "type": "PCM_source",
        "name": "src"
      }
    ],
    "namespace": "reaper",
    "description": "Deletes a PCM_source -- be sure that you remove any project reference before deleting a source"
  },
  {
    "form": "(reaper.PCM_Source_GetPeaks src peakrate starttime numchannels numsamplesperchannel want_extra_type buf) :: (integer)",
    "doc": "(reaper.PCM_Source_GetPeaks src peakrate starttime numchannels numsamplesperchannel want_extra_type buf) :: (integer)\nsrc :: PCM_source\npeakrate :: number\nstarttime :: number\nnumchannels :: integer\nnumsamplesperchannel :: integer\nwant_extra_type :: integer\nbuf :: reaper.array\nGets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.",
    "name": "PCM_Source_GetPeaks",
    "params": [
      {
        "type": "PCM_source",
        "name": "src"
      },
      {
        "type": "number",
        "name": "peakrate"
      },
      {
        "type": "number",
        "name": "starttime"
      },
      {
        "type": "integer",
        "name": "numchannels"
      },
      {
        "type": "integer",
        "name": "numsamplesperchannel"
      },
      {
        "type": "integer",
        "name": "want_extra_type"
      },
      {
        "type": "reaper.array",
        "name": "buf"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality."
  },
  {
    "form": "(reaper.PCM_Source_GetSectionInfo src) :: (boolean number number boolean)",
    "doc": "(reaper.PCM_Source_GetSectionInfo src) :: (boolean number number boolean)\nsrc :: PCM_source\nIf a section/reverse block, retrieves offset/len/reverse. return true if success",
    "name": "PCM_Source_GetSectionInfo",
    "params": [
      {
        "type": "PCM_source",
        "name": "src"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "offs"
      },
      {
        "type": "number",
        "name": "len"
      },
      {
        "type": "boolean",
        "name": "rev"
      }
    ],
    "namespace": "reaper",
    "description": "If a section/reverse block, retrieves offset/len/reverse. return true if success"
  },
  {
    "form": "(reaper.PluginWantsAlwaysRunFx amt) :: nil",
    "doc": "(reaper.PluginWantsAlwaysRunFx amt) :: nil\namt :: integer\n",
    "name": "PluginWantsAlwaysRunFx",
    "params": [
      {
        "type": "integer",
        "name": "amt"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.PreventUIRefresh prevent_count) :: nil",
    "doc": "(reaper.PreventUIRefresh prevent_count) :: nil\nprevent_count :: integer\nadds prevent_count to the UI refresh prevention state; always add then remove the same amount, or major disfunction will occur",
    "name": "PreventUIRefresh",
    "params": [
      {
        "type": "integer",
        "name": "prevent_count"
      }
    ],
    "namespace": "reaper",
    "description": "adds prevent_count to the UI refresh prevention state; always add then remove the same amount, or major disfunction will occur"
  },
  {
    "form": "(reaper.PromptForAction session_mode init_id section_id) :: (integer)",
    "doc": "(reaper.PromptForAction session_mode init_id section_id) :: (integer)\nsession_mode :: integer\ninit_id :: integer\nsection_id :: integer\nUses the action list to choose an action. Call with session_mode=1 to create a session (init_id will be the initial action to select, or 0), then poll with session_mode=0, checking return value for user-selected action (will return 0 if no action selected yet, or -1 if the action window is no longer available). When finished, call with session_mode=-1.",
    "name": "PromptForAction",
    "params": [
      {
        "type": "integer",
        "name": "session_mode"
      },
      {
        "type": "integer",
        "name": "init_id"
      },
      {
        "type": "integer",
        "name": "section_id"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Uses the action list to choose an action. Call with session_mode=1 to create a session (init_id will be the initial action to select, or 0), then poll with session_mode=0, checking return value for user-selected action (will return 0 if no action selected yet, or -1 if the action window is no longer available). When finished, call with session_mode=-1."
  },
  {
    "form": "(reaper.ReaScriptError errmsg) :: nil",
    "doc": "(reaper.ReaScriptError errmsg) :: nil\nerrmsg :: string\nCauses REAPER to display the error message after the current ReaScript finishes. If called within a Lua context and errmsg has a ! prefix, script execution will be terminated.",
    "name": "ReaScriptError",
    "params": [
      {
        "type": "string",
        "name": "errmsg"
      }
    ],
    "namespace": "reaper",
    "description": "Causes REAPER to display the error message after the current ReaScript finishes. If called within a Lua context and errmsg has a ! prefix, script execution will be terminated."
  },
  {
    "form": "(reaper.RecursiveCreateDirectory path ignored) :: (integer)",
    "doc": "(reaper.RecursiveCreateDirectory path ignored) :: (integer)\npath :: string\nignored :: integer\nreturns positive value on success, 0 on failure.",
    "name": "RecursiveCreateDirectory",
    "params": [
      {
        "type": "string",
        "name": "path"
      },
      {
        "type": "integer",
        "name": "ignored"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "returns positive value on success, 0 on failure."
  },
  {
    "form": "(reaper.reduce_open_files flags) :: (integer)",
    "doc": "(reaper.reduce_open_files flags) :: (integer)\nflags :: integer\ngarbage-collects extra open files and closes them. if flags has 1 set, this is done incrementally (call this from a regular timer, if desired). if flags has 2 set, files are aggressively closed (they may need to be re-opened very soon). returns number of files closed by this call.",
    "name": "reduce_open_files",
    "params": [
      {
        "type": "integer",
        "name": "flags"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "garbage-collects extra open files and closes them. if flags has 1 set, this is done incrementally (call this from a regular timer, if desired). if flags has 2 set, files are aggressively closed (they may need to be re-opened very soon). returns number of files closed by this call."
  },
  {
    "form": "(reaper.RefreshToolbar command_id) :: nil",
    "doc": "(reaper.RefreshToolbar command_id) :: nil\ncommand_id :: integer\nSee RefreshToolbar2.",
    "name": "RefreshToolbar",
    "params": [
      {
        "type": "integer",
        "name": "command_id"
      }
    ],
    "namespace": "reaper",
    "description": "See RefreshToolbar2."
  },
  {
    "form": "(reaper.RefreshToolbar2 section_id command_id) :: nil",
    "doc": "(reaper.RefreshToolbar2 section_id command_id) :: nil\nsection_id :: integer\ncommand_id :: integer\nRefresh the toolbar button states of a toggle action.",
    "name": "RefreshToolbar2",
    "params": [
      {
        "type": "integer",
        "name": "section_id"
      },
      {
        "type": "integer",
        "name": "command_id"
      }
    ],
    "namespace": "reaper",
    "description": "Refresh the toolbar button states of a toggle action."
  },
  {
    "form": "(reaper.relative_fn in out) :: (string)",
    "doc": "(reaper.relative_fn in out) :: (string)\nin :: string\nout :: string\nMakes a filename \"in\" relative to the current project, if any.",
    "name": "relative_fn",
    "params": [
      {
        "type": "string",
        "name": "in"
      },
      {
        "type": "string",
        "name": "out"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "out"
      }
    ],
    "namespace": "reaper",
    "description": "Makes a filename \"in\" relative to the current project, if any."
  },
  {
    "form": "(reaper.RemoveTrackSend tr category sendidx) :: (boolean)",
    "doc": "(reaper.RemoveTrackSend tr category sendidx) :: (boolean)\ntr :: MediaTrack\ncategory :: integer\nsendidx :: integer\nRemove a send/receive/hardware output, return true on success. category is <0 for receives, 0=sends, >0 for hardware outputs. See CreateTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value, GetTrackNumSends.",
    "name": "RemoveTrackSend",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      },
      {
        "type": "integer",
        "name": "category"
      },
      {
        "type": "integer",
        "name": "sendidx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Remove a send/receive/hardware output, return true on success. category is <0 for receives, 0=sends, >0 for hardware outputs. See CreateTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value, GetTrackNumSends."
  },
  {
    "form": "(reaper.RenderFileSection source_filename target_filename start_percent end_percent playrate) :: (boolean)",
    "doc": "(reaper.RenderFileSection source_filename target_filename start_percent end_percent playrate) :: (boolean)\nsource_filename :: string\ntarget_filename :: string\nstart_percent :: number\nend_percent :: number\nplayrate :: number\nNot available while playing back.",
    "name": "RenderFileSection",
    "params": [
      {
        "type": "string",
        "name": "source_filename"
      },
      {
        "type": "string",
        "name": "target_filename"
      },
      {
        "type": "number",
        "name": "start_percent"
      },
      {
        "type": "number",
        "name": "end_percent"
      },
      {
        "type": "number",
        "name": "playrate"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Not available while playing back."
  },
  {
    "form": "(reaper.ReorderSelectedTracks beforeTrackIdx makePrevFolder) :: (boolean)",
    "doc": "(reaper.ReorderSelectedTracks beforeTrackIdx makePrevFolder) :: (boolean)\nbeforeTrackIdx :: integer\nmakePrevFolder :: integer\nMoves all selected tracks to immediately above track specified by index beforeTrackIdx, returns false if no tracks were selected. makePrevFolder=0 for normal, 1 = as child of track preceding track specified by beforeTrackIdx, 2 = if track preceding track specified by beforeTrackIdx is last track in folder, extend folder",
    "name": "ReorderSelectedTracks",
    "params": [
      {
        "type": "integer",
        "name": "beforeTrackIdx"
      },
      {
        "type": "integer",
        "name": "makePrevFolder"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Moves all selected tracks to immediately above track specified by index beforeTrackIdx, returns false if no tracks were selected. makePrevFolder=0 for normal, 1 = as child of track preceding track specified by beforeTrackIdx, 2 = if track preceding track specified by beforeTrackIdx is last track in folder, extend folder"
  },
  {
    "form": "(reaper.Resample_EnumModes mode) :: (string)",
    "doc": "(reaper.Resample_EnumModes mode) :: (string)\nmode :: integer\n",
    "name": "Resample_EnumModes",
    "params": [
      {
        "type": "integer",
        "name": "mode"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.resolve_fn in out) :: (string)",
    "doc": "(reaper.resolve_fn in out) :: (string)\nin :: string\nout :: string\nSee resolve_fn2.",
    "name": "resolve_fn",
    "params": [
      {
        "type": "string",
        "name": "in"
      },
      {
        "type": "string",
        "name": "out"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "out"
      }
    ],
    "namespace": "reaper",
    "description": "See resolve_fn2."
  },
  {
    "form": "(reaper.resolve_fn2 in out ?checkSubDir) :: (string)",
    "doc": "(reaper.resolve_fn2 in out ?checkSubDir) :: (string)\nin :: string\nout :: string\ncheckSubDir :: string (optional)\nResolves a filename \"in\" by using project settings etc. If no file found, out will be a copy of in.",
    "name": "resolve_fn2",
    "params": [
      {
        "type": "string",
        "name": "in"
      },
      {
        "type": "string",
        "name": "out"
      },
      {
        "type": "string",
        "name": "checkSubDir",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "out"
      }
    ],
    "namespace": "reaper",
    "description": "Resolves a filename \"in\" by using project settings etc. If no file found, out will be a copy of in."
  },
  {
    "form": "(reaper.ReverseNamedCommandLookup command_id) :: (string)",
    "doc": "(reaper.ReverseNamedCommandLookup command_id) :: (string)\ncommand_id :: integer\nGet the named command for the given command ID. The returned string will not start with '_' (e.g. it will return \"SWS_ABOUT\"), it will be NULL if command_id is a native action.",
    "name": "ReverseNamedCommandLookup",
    "params": [
      {
        "type": "integer",
        "name": "command_id"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "Get the named command for the given command ID. The returned string will not start with '_' (e.g. it will return \"SWS_ABOUT\"), it will be NULL if command_id is a native action."
  },
  {
    "form": "(reaper.ScaleFromEnvelopeMode scaling_mode val) :: (number)",
    "doc": "(reaper.ScaleFromEnvelopeMode scaling_mode val) :: (number)\nscaling_mode :: integer\nval :: number\nSee GetEnvelopeScalingMode.",
    "name": "ScaleFromEnvelopeMode",
    "params": [
      {
        "type": "integer",
        "name": "scaling_mode"
      },
      {
        "type": "number",
        "name": "val"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "See GetEnvelopeScalingMode."
  },
  {
    "form": "(reaper.ScaleToEnvelopeMode scaling_mode val) :: (number)",
    "doc": "(reaper.ScaleToEnvelopeMode scaling_mode val) :: (number)\nscaling_mode :: integer\nval :: number\nSee GetEnvelopeScalingMode.",
    "name": "ScaleToEnvelopeMode",
    "params": [
      {
        "type": "integer",
        "name": "scaling_mode"
      },
      {
        "type": "number",
        "name": "val"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "See GetEnvelopeScalingMode."
  },
  {
    "form": "(reaper.SectionFromUniqueID uniqueID) :: (KbdSectionInfo)",
    "doc": "(reaper.SectionFromUniqueID uniqueID) :: (KbdSectionInfo)\nuniqueID :: integer\n",
    "name": "SectionFromUniqueID",
    "params": [
      {
        "type": "integer",
        "name": "uniqueID"
      }
    ],
    "returns": [
      {
        "type": "KbdSectionInfo"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.SelectAllMediaItems proj selected) :: nil",
    "doc": "(reaper.SelectAllMediaItems proj selected) :: nil\nproj :: ReaProject\nselected :: boolean\n",
    "name": "SelectAllMediaItems",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "boolean",
        "name": "selected"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.SelectProjectInstance proj) :: nil",
    "doc": "(reaper.SelectProjectInstance proj) :: nil\nproj :: ReaProject\n",
    "name": "SelectProjectInstance",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.SendMIDIMessageToHardware output msg) :: nil",
    "doc": "(reaper.SendMIDIMessageToHardware output msg) :: nil\noutput :: integer\nmsg :: string\nSends a MIDI message to output device specified by output. Message is sent in immediate mode. Lua example of how to pack the message string:\nsysex = { 0xF0, 0x00, 0xF7 }\nmsg = \"\"\nfor i=1, #sysex do msg = msg .. string.char(sysex[i]) end",
    "name": "SendMIDIMessageToHardware",
    "params": [
      {
        "type": "integer",
        "name": "output"
      },
      {
        "type": "string",
        "name": "msg"
      }
    ],
    "namespace": "reaper",
    "description": "Sends a MIDI message to output device specified by output. Message is sent in immediate mode. Lua example of how to pack the message string:\nsysex = { 0xF0, 0x00, 0xF7 }\nmsg = \"\"\nfor i=1, #sysex do msg = msg .. string.char(sysex[i]) end"
  },
  {
    "form": "(reaper.SetActiveTake take) :: nil",
    "doc": "(reaper.SetActiveTake take) :: nil\ntake :: MediaItem_Take\nset this take active in this media item",
    "name": "SetActiveTake",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "namespace": "reaper",
    "description": "set this take active in this media item"
  },
  {
    "form": "(reaper.SetAutomationMode mode onlySel) :: nil",
    "doc": "(reaper.SetAutomationMode mode onlySel) :: nil\nmode :: integer\nonlySel :: boolean\nsets all or selected tracks to mode.",
    "name": "SetAutomationMode",
    "params": [
      {
        "type": "integer",
        "name": "mode"
      },
      {
        "type": "boolean",
        "name": "onlySel"
      }
    ],
    "namespace": "reaper",
    "description": "sets all or selected tracks to mode."
  },
  {
    "form": "(reaper.SetCurrentBPM __proj bpm wantUndo) :: nil",
    "doc": "(reaper.SetCurrentBPM __proj bpm wantUndo) :: nil\n__proj :: ReaProject\nbpm :: number\nwantUndo :: boolean\nset current BPM in project, set wantUndo=true to add undo point",
    "name": "SetCurrentBPM",
    "params": [
      {
        "type": "ReaProject",
        "name": "__proj"
      },
      {
        "type": "number",
        "name": "bpm"
      },
      {
        "type": "boolean",
        "name": "wantUndo"
      }
    ],
    "namespace": "reaper",
    "description": "set current BPM in project, set wantUndo=true to add undo point"
  },
  {
    "form": "(reaper.SetCursorContext mode envIn) :: nil",
    "doc": "(reaper.SetCursorContext mode envIn) :: nil\nmode :: integer\nenvIn :: TrackEnvelope\nYou must use this to change the focus programmatically. mode=0 to focus track panels, 1 to focus the arrange window, 2 to focus the arrange window and select env (or env==NULL to clear the current track/take envelope selection)",
    "name": "SetCursorContext",
    "params": [
      {
        "type": "integer",
        "name": "mode"
      },
      {
        "type": "TrackEnvelope",
        "name": "envIn"
      }
    ],
    "namespace": "reaper",
    "description": "You must use this to change the focus programmatically. mode=0 to focus track panels, 1 to focus the arrange window, 2 to focus the arrange window and select env (or env==NULL to clear the current track/take envelope selection)"
  },
  {
    "form": "(reaper.SetEditCurPos time moveview seekplay) :: nil",
    "doc": "(reaper.SetEditCurPos time moveview seekplay) :: nil\ntime :: number\nmoveview :: boolean\nseekplay :: boolean\n",
    "name": "SetEditCurPos",
    "params": [
      {
        "type": "number",
        "name": "time"
      },
      {
        "type": "boolean",
        "name": "moveview"
      },
      {
        "type": "boolean",
        "name": "seekplay"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.SetEditCurPos2 proj time moveview seekplay) :: nil",
    "doc": "(reaper.SetEditCurPos2 proj time moveview seekplay) :: nil\nproj :: ReaProject\ntime :: number\nmoveview :: boolean\nseekplay :: boolean\n",
    "name": "SetEditCurPos2",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "number",
        "name": "time"
      },
      {
        "type": "boolean",
        "name": "moveview"
      },
      {
        "type": "boolean",
        "name": "seekplay"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.SetEnvelopePoint envelope ptidx ?timeIn ?valueIn ?shapeIn ?tensionIn ?selectedIn ?noSortIn) :: (boolean)",
    "doc": "(reaper.SetEnvelopePoint envelope ptidx ?timeIn ?valueIn ?shapeIn ?tensionIn ?selectedIn ?noSortIn) :: (boolean)\nenvelope :: TrackEnvelope\nptidx :: integer\ntimeIn :: number (optional)\nvalueIn :: number (optional)\nshapeIn :: integer (optional)\ntensionIn :: number (optional)\nselectedIn :: boolean (optional)\nnoSortIn :: boolean (optional)\nSet attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See SetEnvelopePointEx.",
    "name": "SetEnvelopePoint",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "envelope"
      },
      {
        "type": "integer",
        "name": "ptidx"
      },
      {
        "type": "number",
        "name": "timeIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "valueIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "shapeIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "tensionIn",
        "optional": true
      },
      {
        "type": "boolean",
        "name": "selectedIn",
        "optional": true
      },
      {
        "type": "boolean",
        "name": "noSortIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See SetEnvelopePointEx."
  },
  {
    "form": "(reaper.SetEnvelopePointEx envelope autoitem_idx ptidx ?timeIn ?valueIn ?shapeIn ?tensionIn ?selectedIn ?noSortIn) :: (boolean)",
    "doc": "(reaper.SetEnvelopePointEx envelope autoitem_idx ptidx ?timeIn ?valueIn ?shapeIn ?tensionIn ?selectedIn ?noSortIn) :: (boolean)\nenvelope :: TrackEnvelope\nautoitem_idx :: integer\nptidx :: integer\ntimeIn :: number (optional)\nvalueIn :: number (optional)\nshapeIn :: integer (optional)\ntensionIn :: number (optional)\nselectedIn :: boolean (optional)\nnoSortIn :: boolean (optional)\nSet attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee CountEnvelopePointsEx, GetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.",
    "name": "SetEnvelopePointEx",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "envelope"
      },
      {
        "type": "integer",
        "name": "autoitem_idx"
      },
      {
        "type": "integer",
        "name": "ptidx"
      },
      {
        "type": "number",
        "name": "timeIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "valueIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "shapeIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "tensionIn",
        "optional": true
      },
      {
        "type": "boolean",
        "name": "selectedIn",
        "optional": true
      },
      {
        "type": "boolean",
        "name": "noSortIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee CountEnvelopePointsEx, GetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx."
  },
  {
    "form": "(reaper.SetEnvelopeStateChunk env str isundo) :: (boolean)",
    "doc": "(reaper.SetEnvelopeStateChunk env str isundo) :: (boolean)\nenv :: TrackEnvelope\nstr :: string\nisundo :: boolean\nSets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.",
    "name": "SetEnvelopeStateChunk",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "env"
      },
      {
        "type": "string",
        "name": "str"
      },
      {
        "type": "boolean",
        "name": "isundo"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Sets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint."
  },
  {
    "form": "(reaper.SetExtState section key value persist) :: nil",
    "doc": "(reaper.SetExtState section key value persist) :: nil\nsection :: string\nkey :: string\nvalue :: string\npersist :: boolean\nSet the extended state value for a specific section and key. persist=true means the value should be stored and reloaded the next time REAPER is opened. See GetExtState, DeleteExtState, HasExtState.",
    "name": "SetExtState",
    "params": [
      {
        "type": "string",
        "name": "section"
      },
      {
        "type": "string",
        "name": "key"
      },
      {
        "type": "string",
        "name": "value"
      },
      {
        "type": "boolean",
        "name": "persist"
      }
    ],
    "namespace": "reaper",
    "description": "Set the extended state value for a specific section and key. persist=true means the value should be stored and reloaded the next time REAPER is opened. See GetExtState, DeleteExtState, HasExtState."
  },
  {
    "form": "(reaper.SetGlobalAutomationOverride mode) :: nil",
    "doc": "(reaper.SetGlobalAutomationOverride mode) :: nil\nmode :: integer\nmode: see GetGlobalAutomationOverride",
    "name": "SetGlobalAutomationOverride",
    "params": [
      {
        "type": "integer",
        "name": "mode"
      }
    ],
    "namespace": "reaper",
    "description": "mode: see GetGlobalAutomationOverride"
  },
  {
    "form": "(reaper.SetItemStateChunk item str isundo) :: (boolean)",
    "doc": "(reaper.SetItemStateChunk item str isundo) :: (boolean)\nitem :: MediaItem\nstr :: string\nisundo :: boolean\nSets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.",
    "name": "SetItemStateChunk",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      },
      {
        "type": "string",
        "name": "str"
      },
      {
        "type": "boolean",
        "name": "isundo"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Sets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint."
  },
  {
    "form": "(reaper.SetMasterTrackVisibility flag) :: (integer)",
    "doc": "(reaper.SetMasterTrackVisibility flag) :: (integer)\nflag :: integer\nset &1 to show the master track in the TCP, &2 to HIDE in the mixer. Returns the previous visibility state. See GetMasterTrackVisibility.",
    "name": "SetMasterTrackVisibility",
    "params": [
      {
        "type": "integer",
        "name": "flag"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "set &1 to show the master track in the TCP, &2 to HIDE in the mixer. Returns the previous visibility state. See GetMasterTrackVisibility."
  },
  {
    "form": "(reaper.SetMediaItemInfo_Value item parmname newvalue) :: (boolean)",
    "doc": "(reaper.SetMediaItemInfo_Value item parmname newvalue) :: (boolean)\nitem :: MediaItem\nparmname :: string\nnewvalue :: number\nSet media item numerical-value attributes.\nB_MUTE : bool * : muted (item solo overrides). setting this value will clear C_MUTE_SOLO.\nB_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.\nC_LANEPLAYS : char * : in fixed lane tracks, 0=this item lane does not play, 1=this item lane plays exclusively, 2=this item lane plays and other lanes also play, -1=this item is on a non-visible, non-playing lane on a non-fixed-lane track (read-only)\nC_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.\nB_LOOPSRC : bool * : loop source\nB_ALLTAKESPLAY : bool * : all takes play\nB_UISEL : bool * : selected in arrange view\nC_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1\nC_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1\nC_LOCK : char * : locked, &1=locked\nD_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_POSITION : double * : item position in seconds\nD_LENGTH : double * : item length in seconds\nD_SNAPOFFSET : double * : item snap offset in seconds\nD_FADEINLEN : double * : item manual fadein length in seconds\nD_FADEOUTLEN : double * : item manual fadeout length in seconds\nD_FADEINDIR : double * : item fadein curvature, -1..1\nD_FADEOUTDIR : double * : item fadeout curvature, -1..1\nD_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein\nD_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout\nC_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear\nC_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear\nI_GROUPID : int * : group ID, 0=no group\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nI_CURTAKE : int * : active take number\nIP_ITEMNUMBER : int : item number on this track (read-only, returns the item number directly)\nF_FREEMODE_Y : float * : free item positioning or fixed lane Y-position. 0=top of track, 1.0=bottom of track\nF_FREEMODE_H : float * : free item positioning or fixed lane height. 0.5=half the track height, 1.0=full track height\nI_FIXEDLANE : int * : fixed lane of item (fine to call with setNewValue, but returned value is read-only)\nB_FIXEDLANE_HIDDEN : bool * : true if displaying only one fixed lane and this item is in a different lane (read-only)",
    "name": "SetMediaItemInfo_Value",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      },
      {
        "type": "string",
        "name": "parmname"
      },
      {
        "type": "number",
        "name": "newvalue"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Set media item numerical-value attributes.\nB_MUTE : bool * : muted (item solo overrides). setting this value will clear C_MUTE_SOLO.\nB_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.\nC_LANEPLAYS : char * : in fixed lane tracks, 0=this item lane does not play, 1=this item lane plays exclusively, 2=this item lane plays and other lanes also play, -1=this item is on a non-visible, non-playing lane on a non-fixed-lane track (read-only)\nC_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.\nB_LOOPSRC : bool * : loop source\nB_ALLTAKESPLAY : bool * : all takes play\nB_UISEL : bool * : selected in arrange view\nC_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1\nC_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1\nC_LOCK : char * : locked, &1=locked\nD_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_POSITION : double * : item position in seconds\nD_LENGTH : double * : item length in seconds\nD_SNAPOFFSET : double * : item snap offset in seconds\nD_FADEINLEN : double * : item manual fadein length in seconds\nD_FADEOUTLEN : double * : item manual fadeout length in seconds\nD_FADEINDIR : double * : item fadein curvature, -1..1\nD_FADEOUTDIR : double * : item fadeout curvature, -1..1\nD_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein\nD_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout\nC_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear\nC_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear\nI_GROUPID : int * : group ID, 0=no group\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nI_CURTAKE : int * : active take number\nIP_ITEMNUMBER : int : item number on this track (read-only, returns the item number directly)\nF_FREEMODE_Y : float * : free item positioning or fixed lane Y-position. 0=top of track, 1.0=bottom of track\nF_FREEMODE_H : float * : free item positioning or fixed lane height. 0.5=half the track height, 1.0=full track height\nI_FIXEDLANE : int * : fixed lane of item (fine to call with setNewValue, but returned value is read-only)\nB_FIXEDLANE_HIDDEN : bool * : true if displaying only one fixed lane and this item is in a different lane (read-only)"
  },
  {
    "form": "(reaper.SetMediaItemLength item length refreshUI) :: (boolean)",
    "doc": "(reaper.SetMediaItemLength item length refreshUI) :: (boolean)\nitem :: MediaItem\nlength :: number\nrefreshUI :: boolean\nRedraws the screen only if refreshUI == true.\nSee UpdateArrange().",
    "name": "SetMediaItemLength",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      },
      {
        "type": "number",
        "name": "length"
      },
      {
        "type": "boolean",
        "name": "refreshUI"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Redraws the screen only if refreshUI == true.\nSee UpdateArrange()."
  },
  {
    "form": "(reaper.SetMediaItemPosition item position refreshUI) :: (boolean)",
    "doc": "(reaper.SetMediaItemPosition item position refreshUI) :: (boolean)\nitem :: MediaItem\nposition :: number\nrefreshUI :: boolean\nRedraws the screen only if refreshUI == true.\nSee UpdateArrange().",
    "name": "SetMediaItemPosition",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      },
      {
        "type": "number",
        "name": "position"
      },
      {
        "type": "boolean",
        "name": "refreshUI"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Redraws the screen only if refreshUI == true.\nSee UpdateArrange()."
  },
  {
    "form": "(reaper.SetMediaItemSelected item selected) :: nil",
    "doc": "(reaper.SetMediaItemSelected item selected) :: nil\nitem :: MediaItem\nselected :: boolean\n",
    "name": "SetMediaItemSelected",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      },
      {
        "type": "boolean",
        "name": "selected"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.SetMediaItemTake_Source take source) :: (boolean)",
    "doc": "(reaper.SetMediaItemTake_Source take source) :: (boolean)\ntake :: MediaItem_Take\nsource :: PCM_source\nSet media source of media item take. The old source will not be destroyed, it is the caller's responsibility to retrieve it and destroy it after. If source already exists in any project, it will be duplicated before being set. C/C++ code should not use this and instead use GetSetMediaItemTakeInfo() with P_SOURCE to manage ownership directly.",
    "name": "SetMediaItemTake_Source",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "PCM_source",
        "name": "source"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Set media source of media item take. The old source will not be destroyed, it is the caller's responsibility to retrieve it and destroy it after. If source already exists in any project, it will be duplicated before being set. C/C++ code should not use this and instead use GetSetMediaItemTakeInfo() with P_SOURCE to manage ownership directly."
  },
  {
    "form": "(reaper.SetMediaItemTakeInfo_Value take parmname newvalue) :: (boolean)",
    "doc": "(reaper.SetMediaItemTakeInfo_Value take parmname newvalue) :: (boolean)\ntake :: MediaItem_Take\nparmname :: string\nnewvalue :: number\nSet media item take numerical-value attributes.\nD_STARTOFFS : double * : start offset in source media, in seconds\nD_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped\nD_PAN : double * : take pan, -1..1\nD_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc\nD_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc\nD_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc\nB_PPITCH : bool * : preserve pitch when changing playback rate\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right\nI_PITCHMODE : int * : pitch shifter mode, -1=project default, otherwise high 2 bytes=shifter, low 2 bytes=parameter\nI_STRETCHFLAGS : int * : stretch marker flags (&7 mask for mode override: 0=default, 1=balanced, 2/3/6=tonal, 4=transient, 5=no pre-echo)\nF_STRETCHFADESIZE : float * : stretch marker fade size in seconds (0.0025 default)\nI_RECPASSID : int * : record pass ID\nI_TAKEFX_NCH : int * : number of internal audio channels for per-take FX to use (OK to call with setNewValue, but the returned value is read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nIP_TAKENUMBER : int : take number (read-only, returns the take number directly)",
    "name": "SetMediaItemTakeInfo_Value",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "string",
        "name": "parmname"
      },
      {
        "type": "number",
        "name": "newvalue"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Set media item take numerical-value attributes.\nD_STARTOFFS : double * : start offset in source media, in seconds\nD_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped\nD_PAN : double * : take pan, -1..1\nD_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc\nD_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc\nD_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc\nB_PPITCH : bool * : preserve pitch when changing playback rate\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right\nI_PITCHMODE : int * : pitch shifter mode, -1=project default, otherwise high 2 bytes=shifter, low 2 bytes=parameter\nI_STRETCHFLAGS : int * : stretch marker flags (&7 mask for mode override: 0=default, 1=balanced, 2/3/6=tonal, 4=transient, 5=no pre-echo)\nF_STRETCHFADESIZE : float * : stretch marker fade size in seconds (0.0025 default)\nI_RECPASSID : int * : record pass ID\nI_TAKEFX_NCH : int * : number of internal audio channels for per-take FX to use (OK to call with setNewValue, but the returned value is read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nIP_TAKENUMBER : int : take number (read-only, returns the take number directly)"
  },
  {
    "form": "(reaper.SetMediaTrackInfo_Value tr parmname newvalue) :: (boolean)",
    "doc": "(reaper.SetMediaTrackInfo_Value tr parmname newvalue) :: (boolean)\ntr :: MediaTrack\nparmname :: string\nnewvalue :: number\nSet track numerical-value attributes.\nB_MUTE : bool * : muted\nB_PHASE : bool * : track phase inverted\nB_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)\nIP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)\nI_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place\nB_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is not muted, this track acts soloed\nI_FXEN : int * : fx enabled, 0=bypassed, !0=fx active\nI_RECARM : int * : record armed, 0=not record armed, 1=record armed\nI_RECINPUT : int * : record input, <0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.\nI_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace\nI_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)\nI_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)\nI_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on\nB_AUTO_RECARM : bool * : automatically set record arm when selected (does not immediately affect recarm state, script should set directly if desired)\nI_VUMODE : int * : track vu mode, &1:disabled, &30==0:stereo peaks, &30==2:multichannel peaks, &30==4:stereo RMS, &30==8:combined RMS, &30==12:LUFS-M, &30==16:LUFS-S (readout=max), &30==20:LUFS-S (readout=current), &32:LUFS calculation on channels 1+2 only\nI_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch\nI_NCHAN : int * : number of track channels, 2-128, even numbers only\nI_SELECTED : int * : track selected, 0=unselected, 1=selected\nI_WNDH : int * : current TCP window height in pixels including envelopes (read-only)\nI_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)\nI_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)\nI_MCPX : int * : current MCP X-position in pixels relative to mixer container (read-only)\nI_MCPY : int * : current MCP Y-position in pixels relative to mixer container (read-only)\nI_MCPW : int * : current MCP width in pixels (read-only)\nI_MCPH : int * : current MCP height in pixels (read-only)\nI_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\nI_FOLDERCOMPACT : int * : folder collapsed state (only valid on folders), 0=normal, 1=collapsed, 2=fully collapsed\nI_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)\nI_MIDI_INPUT_CHANMAP : int * : -1 maps to source channel, otherwise 1-16 to map to MIDI channel\nI_MIDI_CTL_CHAN : int * : -1 no link, 0-15 link to MIDI volume/pan on channel, 16 link to MIDI volume/pan on all channels\nI_MIDI_TRACKSEL_FLAG : int * : MIDI editor track list options: &1=expand media items, &2=exclude from list, &4=auto-pruned\nI_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels\nI_SPACER : int * : 1=TCP track spacer above this trackB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)\nD_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_PAN : double * : trim pan of track, -1..1\nD_WIDTH : double * : width of track, -1..1\nD_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6\nD_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6\nI_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan\nD_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc\nI_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper\nP_ENV:<envchunkname or P_ENV:{GUID... : TrackEnvelope * : (read-only) chunkname can be <VOLENV, <PANENV, etc; GUID is the stringified envelope GUID.\nB_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)\nB_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)\nB_MAINSEND : bool * : track sends audio to parent\nC_MAINSEND_OFFS : char * : channel offset of track send to parent\nC_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child track channels, 1=use one channel only)\nI_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)\nI_NUMFIXEDLANES : int * : number of track fixed lanes (fine to call with setNewValue, but returned value is read-only)\nC_LANESCOLLAPSED : char * : fixed lane collapse state (1=lanes collapsed, 2=track displays as non-fixed-lanes but hidden lanes exist)\nC_LANESETTINGS : char * : fixed lane settings (&1=auto-remove empty lanes at bottom, &2=do not auto-comp new recording, &4=newly recorded lanes play exclusively (else add lanes in layers), &8=big lanes (else small lanes), &16=add new recording at bottom (else record into first available lane), &32=hide lane buttons\nC_LANEPLAYS:N : char * :  on fixed lane tracks, 0=lane N does not play, 1=lane N plays exclusively, 2=lane N plays and other lanes also play (fine to call with setNewValue, but returned value is read-only)\nC_ALLLANESPLAY : char * : on fixed lane tracks, 0=no lanes play, 1=all lanes play, 2=some lanes play (fine to call with setNewValue 0 or 1, but returned value is read-only)\nC_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)\nF_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)\nI_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)\nD_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG",
    "name": "SetMediaTrackInfo_Value",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      },
      {
        "type": "string",
        "name": "parmname"
      },
      {
        "type": "number",
        "name": "newvalue"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Set track numerical-value attributes.\nB_MUTE : bool * : muted\nB_PHASE : bool * : track phase inverted\nB_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)\nIP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)\nI_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place\nB_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is not muted, this track acts soloed\nI_FXEN : int * : fx enabled, 0=bypassed, !0=fx active\nI_RECARM : int * : record armed, 0=not record armed, 1=record armed\nI_RECINPUT : int * : record input, <0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.\nI_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace\nI_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)\nI_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)\nI_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on\nB_AUTO_RECARM : bool * : automatically set record arm when selected (does not immediately affect recarm state, script should set directly if desired)\nI_VUMODE : int * : track vu mode, &1:disabled, &30==0:stereo peaks, &30==2:multichannel peaks, &30==4:stereo RMS, &30==8:combined RMS, &30==12:LUFS-M, &30==16:LUFS-S (readout=max), &30==20:LUFS-S (readout=current), &32:LUFS calculation on channels 1+2 only\nI_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch\nI_NCHAN : int * : number of track channels, 2-128, even numbers only\nI_SELECTED : int * : track selected, 0=unselected, 1=selected\nI_WNDH : int * : current TCP window height in pixels including envelopes (read-only)\nI_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)\nI_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)\nI_MCPX : int * : current MCP X-position in pixels relative to mixer container (read-only)\nI_MCPY : int * : current MCP Y-position in pixels relative to mixer container (read-only)\nI_MCPW : int * : current MCP width in pixels (read-only)\nI_MCPH : int * : current MCP height in pixels (read-only)\nI_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\nI_FOLDERCOMPACT : int * : folder collapsed state (only valid on folders), 0=normal, 1=collapsed, 2=fully collapsed\nI_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)\nI_MIDI_INPUT_CHANMAP : int * : -1 maps to source channel, otherwise 1-16 to map to MIDI channel\nI_MIDI_CTL_CHAN : int * : -1 no link, 0-15 link to MIDI volume/pan on channel, 16 link to MIDI volume/pan on all channels\nI_MIDI_TRACKSEL_FLAG : int * : MIDI editor track list options: &1=expand media items, &2=exclude from list, &4=auto-pruned\nI_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels\nI_SPACER : int * : 1=TCP track spacer above this trackB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)\nD_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_PAN : double * : trim pan of track, -1..1\nD_WIDTH : double * : width of track, -1..1\nD_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6\nD_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6\nI_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan\nD_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc\nI_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper\nP_ENV:<envchunkname or P_ENV:{GUID... : TrackEnvelope * : (read-only) chunkname can be <VOLENV, <PANENV, etc; GUID is the stringified envelope GUID.\nB_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)\nB_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)\nB_MAINSEND : bool * : track sends audio to parent\nC_MAINSEND_OFFS : char * : channel offset of track send to parent\nC_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child track channels, 1=use one channel only)\nI_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)\nI_NUMFIXEDLANES : int * : number of track fixed lanes (fine to call with setNewValue, but returned value is read-only)\nC_LANESCOLLAPSED : char * : fixed lane collapse state (1=lanes collapsed, 2=track displays as non-fixed-lanes but hidden lanes exist)\nC_LANESETTINGS : char * : fixed lane settings (&1=auto-remove empty lanes at bottom, &2=do not auto-comp new recording, &4=newly recorded lanes play exclusively (else add lanes in layers), &8=big lanes (else small lanes), &16=add new recording at bottom (else record into first available lane), &32=hide lane buttons\nC_LANEPLAYS:N : char * :  on fixed lane tracks, 0=lane N does not play, 1=lane N plays exclusively, 2=lane N plays and other lanes also play (fine to call with setNewValue, but returned value is read-only)\nC_ALLLANESPLAY : char * : on fixed lane tracks, 0=no lanes play, 1=all lanes play, 2=some lanes play (fine to call with setNewValue 0 or 1, but returned value is read-only)\nC_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)\nF_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)\nI_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)\nD_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG"
  },
  {
    "form": "(reaper.SetMIDIEditorGrid project division) :: nil",
    "doc": "(reaper.SetMIDIEditorGrid project division) :: nil\nproject :: ReaProject\ndivision :: number\nSet the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc.",
    "name": "SetMIDIEditorGrid",
    "params": [
      {
        "type": "ReaProject",
        "name": "project"
      },
      {
        "type": "number",
        "name": "division"
      }
    ],
    "namespace": "reaper",
    "description": "Set the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc."
  },
  {
    "form": "(reaper.SetMixerScroll leftmosttrack) :: (MediaTrack)",
    "doc": "(reaper.SetMixerScroll leftmosttrack) :: (MediaTrack)\nleftmosttrack :: MediaTrack\nScroll the mixer so that leftmosttrack is the leftmost visible track. Returns the leftmost track after scrolling, which may be different from the passed-in track if there are not enough tracks to its right.",
    "name": "SetMixerScroll",
    "params": [
      {
        "type": "MediaTrack",
        "name": "leftmosttrack"
      }
    ],
    "returns": [
      {
        "type": "MediaTrack"
      }
    ],
    "namespace": "reaper",
    "description": "Scroll the mixer so that leftmosttrack is the leftmost visible track. Returns the leftmost track after scrolling, which may be different from the passed-in track if there are not enough tracks to its right."
  },
  {
    "form": "(reaper.SetMouseModifier context modifier_flag action) :: nil",
    "doc": "(reaper.SetMouseModifier context modifier_flag action) :: nil\ncontext :: string\nmodifier_flag :: integer\naction :: string\nSet the mouse modifier assignment for a specific modifier key assignment, in a specific context.\nContext is a string like \"MM_CTX_ITEM\" (see reaper-mouse.ini) or \"Media item left drag\" (unlocalized).\nModifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win.\n(macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)\nFor left-click and double-click contexts, the action can be any built-in command ID number\nor any custom action ID string. Find built-in command IDs in the REAPER actions window\n(enable \"show command IDs\" in the context menu), and find custom action ID strings in reaper-kb.ini.\nThe action string may be a mouse modifier ID (see reaper-mouse.ini) with \" m\" appended to it,\nor (for click/double-click contexts) a command ID with \" c\" appended to it,\nor the text that appears in the mouse modifiers preferences dialog, like \"Move item\" (unlocalized).\nFor example, SetMouseModifier(\"MM_CTX_ITEM\", 0, \"1 m\") and SetMouseModifier(\"Media item left drag\", 0, \"Move item\") are equivalent.\nSetMouseModifier(context, modifier_flag, -1) will reset that mouse modifier to default.\nSetMouseModifier(context, -1, -1) will reset the entire context to default.\nSetMouseModifier(-1, -1, -1) will reset all contexts to default.\nSee GetMouseModifier.",
    "name": "SetMouseModifier",
    "params": [
      {
        "type": "string",
        "name": "context"
      },
      {
        "type": "integer",
        "name": "modifier_flag"
      },
      {
        "type": "string",
        "name": "action"
      }
    ],
    "namespace": "reaper",
    "description": "Set the mouse modifier assignment for a specific modifier key assignment, in a specific context.\nContext is a string like \"MM_CTX_ITEM\" (see reaper-mouse.ini) or \"Media item left drag\" (unlocalized).\nModifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win.\n(macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)\nFor left-click and double-click contexts, the action can be any built-in command ID number\nor any custom action ID string. Find built-in command IDs in the REAPER actions window\n(enable \"show command IDs\" in the context menu), and find custom action ID strings in reaper-kb.ini.\nThe action string may be a mouse modifier ID (see reaper-mouse.ini) with \" m\" appended to it,\nor (for click/double-click contexts) a command ID with \" c\" appended to it,\nor the text that appears in the mouse modifiers preferences dialog, like \"Move item\" (unlocalized).\nFor example, SetMouseModifier(\"MM_CTX_ITEM\", 0, \"1 m\") and SetMouseModifier(\"Media item left drag\", 0, \"Move item\") are equivalent.\nSetMouseModifier(context, modifier_flag, -1) will reset that mouse modifier to default.\nSetMouseModifier(context, -1, -1) will reset the entire context to default.\nSetMouseModifier(-1, -1, -1) will reset all contexts to default.\nSee GetMouseModifier."
  },
  {
    "form": "(reaper.SetOnlyTrackSelected track) :: nil",
    "doc": "(reaper.SetOnlyTrackSelected track) :: nil\ntrack :: MediaTrack\nSet exactly one track selected, deselect all others",
    "name": "SetOnlyTrackSelected",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "namespace": "reaper",
    "description": "Set exactly one track selected, deselect all others"
  },
  {
    "form": "(reaper.SetProjectGrid project division) :: nil",
    "doc": "(reaper.SetProjectGrid project division) :: nil\nproject :: ReaProject\ndivision :: number\nSet the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc.",
    "name": "SetProjectGrid",
    "params": [
      {
        "type": "ReaProject",
        "name": "project"
      },
      {
        "type": "number",
        "name": "division"
      }
    ],
    "namespace": "reaper",
    "description": "Set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc."
  },
  {
    "form": "(reaper.SetProjectMarker markrgnindexnumber isrgn pos rgnend name) :: (boolean)",
    "doc": "(reaper.SetProjectMarker markrgnindexnumber isrgn pos rgnend name) :: (boolean)\nmarkrgnindexnumber :: integer\nisrgn :: boolean\npos :: number\nrgnend :: number\nname :: string\nNote: this function can't clear a marker's name (an empty string will leave the name unchanged), see SetProjectMarker4.",
    "name": "SetProjectMarker",
    "params": [
      {
        "type": "integer",
        "name": "markrgnindexnumber"
      },
      {
        "type": "boolean",
        "name": "isrgn"
      },
      {
        "type": "number",
        "name": "pos"
      },
      {
        "type": "number",
        "name": "rgnend"
      },
      {
        "type": "string",
        "name": "name"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Note: this function can't clear a marker's name (an empty string will leave the name unchanged), see SetProjectMarker4."
  },
  {
    "form": "(reaper.SetProjectMarker2 proj markrgnindexnumber isrgn pos rgnend name) :: (boolean)",
    "doc": "(reaper.SetProjectMarker2 proj markrgnindexnumber isrgn pos rgnend name) :: (boolean)\nproj :: ReaProject\nmarkrgnindexnumber :: integer\nisrgn :: boolean\npos :: number\nrgnend :: number\nname :: string\nNote: this function can't clear a marker's name (an empty string will leave the name unchanged), see SetProjectMarker4.",
    "name": "SetProjectMarker2",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "markrgnindexnumber"
      },
      {
        "type": "boolean",
        "name": "isrgn"
      },
      {
        "type": "number",
        "name": "pos"
      },
      {
        "type": "number",
        "name": "rgnend"
      },
      {
        "type": "string",
        "name": "name"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Note: this function can't clear a marker's name (an empty string will leave the name unchanged), see SetProjectMarker4."
  },
  {
    "form": "(reaper.SetProjectMarker3 proj markrgnindexnumber isrgn pos rgnend name color) :: (boolean)",
    "doc": "(reaper.SetProjectMarker3 proj markrgnindexnumber isrgn pos rgnend name color) :: (boolean)\nproj :: ReaProject\nmarkrgnindexnumber :: integer\nisrgn :: boolean\npos :: number\nrgnend :: number\nname :: string\ncolor :: integer\nNote: this function can't clear a marker's name (an empty string will leave the name unchanged), see SetProjectMarker4.",
    "name": "SetProjectMarker3",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "markrgnindexnumber"
      },
      {
        "type": "boolean",
        "name": "isrgn"
      },
      {
        "type": "number",
        "name": "pos"
      },
      {
        "type": "number",
        "name": "rgnend"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "integer",
        "name": "color"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Note: this function can't clear a marker's name (an empty string will leave the name unchanged), see SetProjectMarker4."
  },
  {
    "form": "(reaper.SetProjectMarker4 proj markrgnindexnumber isrgn pos rgnend name color flags) :: (boolean)",
    "doc": "(reaper.SetProjectMarker4 proj markrgnindexnumber isrgn pos rgnend name color flags) :: (boolean)\nproj :: ReaProject\nmarkrgnindexnumber :: integer\nisrgn :: boolean\npos :: number\nrgnend :: number\nname :: string\ncolor :: integer\nflags :: integer\ncolor should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags&1 to clear name",
    "name": "SetProjectMarker4",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "markrgnindexnumber"
      },
      {
        "type": "boolean",
        "name": "isrgn"
      },
      {
        "type": "number",
        "name": "pos"
      },
      {
        "type": "number",
        "name": "rgnend"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "integer",
        "name": "color"
      },
      {
        "type": "integer",
        "name": "flags"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags&1 to clear name"
  },
  {
    "form": "(reaper.SetProjectMarkerByIndex proj markrgnidx isrgn pos rgnend IDnumber name color) :: (boolean)",
    "doc": "(reaper.SetProjectMarkerByIndex proj markrgnidx isrgn pos rgnend IDnumber name color) :: (boolean)\nproj :: ReaProject\nmarkrgnidx :: integer\nisrgn :: boolean\npos :: number\nrgnend :: number\nIDnumber :: integer\nname :: string\ncolor :: integer\nSee SetProjectMarkerByIndex2.",
    "name": "SetProjectMarkerByIndex",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "markrgnidx"
      },
      {
        "type": "boolean",
        "name": "isrgn"
      },
      {
        "type": "number",
        "name": "pos"
      },
      {
        "type": "number",
        "name": "rgnend"
      },
      {
        "type": "integer",
        "name": "IDnumber"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "integer",
        "name": "color"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "See SetProjectMarkerByIndex2."
  },
  {
    "form": "(reaper.SetProjectMarkerByIndex2 proj markrgnidx isrgn pos rgnend IDnumber name color flags) :: (boolean)",
    "doc": "(reaper.SetProjectMarkerByIndex2 proj markrgnidx isrgn pos rgnend IDnumber name color flags) :: (boolean)\nproj :: ReaProject\nmarkrgnidx :: integer\nisrgn :: boolean\npos :: number\nrgnend :: number\nIDnumber :: integer\nname :: string\ncolor :: integer\nflags :: integer\nDiffers from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker3). Function will fail if attempting to set a duplicate ID number for a region (duplicate ID numbers for markers are OK). , flags&1 to clear name. If flags&2, markers will not be re-sorted, and after making updates, you MUST call SetProjectMarkerByIndex2 with markrgnidx=-1 and flags&2 to force re-sort/UI updates.",
    "name": "SetProjectMarkerByIndex2",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "markrgnidx"
      },
      {
        "type": "boolean",
        "name": "isrgn"
      },
      {
        "type": "number",
        "name": "pos"
      },
      {
        "type": "number",
        "name": "rgnend"
      },
      {
        "type": "integer",
        "name": "IDnumber"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "integer",
        "name": "color"
      },
      {
        "type": "integer",
        "name": "flags"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Differs from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker3). Function will fail if attempting to set a duplicate ID number for a region (duplicate ID numbers for markers are OK). , flags&1 to clear name. If flags&2, markers will not be re-sorted, and after making updates, you MUST call SetProjectMarkerByIndex2 with markrgnidx=-1 and flags&2 to force re-sort/UI updates."
  },
  {
    "form": "(reaper.SetProjExtState proj extname key value) :: (integer)",
    "doc": "(reaper.SetProjExtState proj extname key value) :: (integer)\nproj :: ReaProject\nextname :: string\nkey :: string\nvalue :: string\nSave a key/value pair for a specific extension, to be restored the next time this specific project is loaded. Typically extname will be the name of a reascript or extension section. If key is NULL or \"\", all extended data for that extname will be deleted.  If val is NULL or \"\", the data previously associated with that key will be deleted. Returns the size of the state for this extname. See GetProjExtState, EnumProjExtState.",
    "name": "SetProjExtState",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "string",
        "name": "extname"
      },
      {
        "type": "string",
        "name": "key"
      },
      {
        "type": "string",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Save a key/value pair for a specific extension, to be restored the next time this specific project is loaded. Typically extname will be the name of a reascript or extension section. If key is NULL or \"\", all extended data for that extname will be deleted.  If val is NULL or \"\", the data previously associated with that key will be deleted. Returns the size of the state for this extname. See GetProjExtState, EnumProjExtState."
  },
  {
    "form": "(reaper.SetRegionRenderMatrix proj regionindex track flag) :: nil",
    "doc": "(reaper.SetRegionRenderMatrix proj regionindex track flag) :: nil\nproj :: ReaProject\nregionindex :: integer\ntrack :: MediaTrack\nflag :: integer\nAdd (flag > 0) or remove (flag < 0) a track from this region when using the region render matrix. If adding, flag==2 means force mono, flag==4 means force stereo, flag==N means force N/2 channels.",
    "name": "SetRegionRenderMatrix",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "regionindex"
      },
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "flag"
      }
    ],
    "namespace": "reaper",
    "description": "Add (flag > 0) or remove (flag < 0) a track from this region when using the region render matrix. If adding, flag==2 means force mono, flag==4 means force stereo, flag==N means force N/2 channels."
  },
  {
    "form": "(reaper.SetTakeMarker take idx nameIn ?srcposIn ?colorIn) :: (integer)",
    "doc": "(reaper.SetTakeMarker take idx nameIn ?srcposIn ?colorIn) :: (integer)\ntake :: MediaItem_Take\nidx :: integer\nnameIn :: string\nsrcposIn :: number (optional)\ncolorIn :: integer (optional)\nInserts or updates a take marker. If idx<0, a take marker will be added, otherwise an existing take marker will be updated. Returns the index of the new or updated take marker (which may change if srcPos is updated). See GetNumTakeMarkers, GetTakeMarker, DeleteTakeMarker",
    "name": "SetTakeMarker",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "idx"
      },
      {
        "type": "string",
        "name": "nameIn"
      },
      {
        "type": "number",
        "name": "srcposIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "colorIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Inserts or updates a take marker. If idx<0, a take marker will be added, otherwise an existing take marker will be updated. Returns the index of the new or updated take marker (which may change if srcPos is updated). See GetNumTakeMarkers, GetTakeMarker, DeleteTakeMarker"
  },
  {
    "form": "(reaper.SetTakeStretchMarker take idx pos ?srcposIn) :: (integer)",
    "doc": "(reaper.SetTakeStretchMarker take idx pos ?srcposIn) :: (integer)\ntake :: MediaItem_Take\nidx :: integer\npos :: number\nsrcposIn :: number (optional)\nAdds or updates a stretch marker. If idx<0, stretch marker will be added. If idx>=0, stretch marker will be updated. When adding, if srcposInOptional is omitted, source position will be auto-calculated. When updating a stretch marker, if srcposInOptional is omitted, srcpos will not be modified. Position/srcposition values will be constrained to nearby stretch markers. Returns index of stretch marker, or -1 if did not insert (or marker already existed at time).",
    "name": "SetTakeStretchMarker",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "idx"
      },
      {
        "type": "number",
        "name": "pos"
      },
      {
        "type": "number",
        "name": "srcposIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Adds or updates a stretch marker. If idx<0, stretch marker will be added. If idx>=0, stretch marker will be updated. When adding, if srcposInOptional is omitted, source position will be auto-calculated. When updating a stretch marker, if srcposInOptional is omitted, srcpos will not be modified. Position/srcposition values will be constrained to nearby stretch markers. Returns index of stretch marker, or -1 if did not insert (or marker already existed at time)."
  },
  {
    "form": "(reaper.SetTakeStretchMarkerSlope take idx slope) :: (boolean)",
    "doc": "(reaper.SetTakeStretchMarkerSlope take idx slope) :: (boolean)\ntake :: MediaItem_Take\nidx :: integer\nslope :: number\nSee GetTakeStretchMarkerSlope",
    "name": "SetTakeStretchMarkerSlope",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "idx"
      },
      {
        "type": "number",
        "name": "slope"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "See GetTakeStretchMarkerSlope"
  },
  {
    "form": "(reaper.SetTempoTimeSigMarker proj ptidx timepos measurepos beatpos bpm timesig_num timesig_denom lineartempo) :: (boolean)",
    "doc": "(reaper.SetTempoTimeSigMarker proj ptidx timepos measurepos beatpos bpm timesig_num timesig_denom lineartempo) :: (boolean)\nproj :: ReaProject\nptidx :: integer\ntimepos :: number\nmeasurepos :: integer\nbeatpos :: number\nbpm :: number\ntimesig_num :: integer\ntimesig_denom :: integer\nlineartempo :: boolean\nSet parameters of a tempo/time signature marker. Provide either timepos (with measurepos=-1, beatpos=-1), or measurepos and beatpos (with timepos=-1). If timesig_num and timesig_denom are zero, the previous time signature will be used. ptidx=-1 will insert a new tempo/time signature marker. See CountTempoTimeSigMarkers, GetTempoTimeSigMarker, AddTempoTimeSigMarker.",
    "name": "SetTempoTimeSigMarker",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "ptidx"
      },
      {
        "type": "number",
        "name": "timepos"
      },
      {
        "type": "integer",
        "name": "measurepos"
      },
      {
        "type": "number",
        "name": "beatpos"
      },
      {
        "type": "number",
        "name": "bpm"
      },
      {
        "type": "integer",
        "name": "timesig_num"
      },
      {
        "type": "integer",
        "name": "timesig_denom"
      },
      {
        "type": "boolean",
        "name": "lineartempo"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Set parameters of a tempo/time signature marker. Provide either timepos (with measurepos=-1, beatpos=-1), or measurepos and beatpos (with timepos=-1). If timesig_num and timesig_denom are zero, the previous time signature will be used. ptidx=-1 will insert a new tempo/time signature marker. See CountTempoTimeSigMarkers, GetTempoTimeSigMarker, AddTempoTimeSigMarker."
  },
  {
    "form": "(reaper.SetThemeColor ini_key color flags) :: (integer)",
    "doc": "(reaper.SetThemeColor ini_key color flags) :: (integer)\nini_key :: string\ncolor :: integer\nflags :: integer\nTemporarily updates the theme color to the color specified (or the theme default color if -1 is specified). Returns -1 on failure, otherwise returns the color (or transformed-color). Note that the UI is not updated by this, the caller should call UpdateArrange() etc as necessary. If the low bit of flags is set, any color transformations are bypassed. To read a value see GetThemeColor.\nCurrently valid ini_keys:",
    "name": "SetThemeColor",
    "params": [
      {
        "type": "string",
        "name": "ini_key"
      },
      {
        "type": "integer",
        "name": "color"
      },
      {
        "type": "integer",
        "name": "flags"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Temporarily updates the theme color to the color specified (or the theme default color if -1 is specified). Returns -1 on failure, otherwise returns the color (or transformed-color). Note that the UI is not updated by this, the caller should call UpdateArrange() etc as necessary. If the low bit of flags is set, any color transformations are bypassed. To read a value see GetThemeColor.\nCurrently valid ini_keys:"
  },
  {
    "form": "(reaper.SetToggleCommandState section_id command_id state) :: (boolean)",
    "doc": "(reaper.SetToggleCommandState section_id command_id state) :: (boolean)\nsection_id :: integer\ncommand_id :: integer\nstate :: integer\nUpdates the toggle state of an action, returns true if succeeded. Only ReaScripts can have their toggle states changed programmatically. See RefreshToolbar2.",
    "name": "SetToggleCommandState",
    "params": [
      {
        "type": "integer",
        "name": "section_id"
      },
      {
        "type": "integer",
        "name": "command_id"
      },
      {
        "type": "integer",
        "name": "state"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Updates the toggle state of an action, returns true if succeeded. Only ReaScripts can have their toggle states changed programmatically. See RefreshToolbar2."
  },
  {
    "form": "(reaper.SetTrackAutomationMode tr mode) :: nil",
    "doc": "(reaper.SetTrackAutomationMode tr mode) :: nil\ntr :: MediaTrack\nmode :: integer\n",
    "name": "SetTrackAutomationMode",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      },
      {
        "type": "integer",
        "name": "mode"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.SetTrackColor track color) :: nil",
    "doc": "(reaper.SetTrackColor track color) :: nil\ntrack :: MediaTrack\ncolor :: integer\nSet the custom track color, color is OS dependent (i.e. ColorToNative(r,g,b). To unset the track color, see SetMediaTrackInfo_Value I_CUSTOMCOLOR",
    "name": "SetTrackColor",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "color"
      }
    ],
    "namespace": "reaper",
    "description": "Set the custom track color, color is OS dependent (i.e. ColorToNative(r,g,b). To unset the track color, see SetMediaTrackInfo_Value I_CUSTOMCOLOR"
  },
  {
    "form": "(reaper.SetTrackMIDILyrics track flag str) :: (boolean)",
    "doc": "(reaper.SetTrackMIDILyrics track flag str) :: (boolean)\ntrack :: MediaTrack\nflag :: integer\nstr :: string\nSet all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI items found in range. Flag is unused at present. str is passed in as beat position, tab, text, tab (example with flag=2: \"1.1.2\\tLyric for measure 1 beat 2\\t2.1.1\\tLyric for measure 2 beat 1\t\"). See GetTrackMIDILyrics",
    "name": "SetTrackMIDILyrics",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "flag"
      },
      {
        "type": "string",
        "name": "str"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Set all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI items found in range. Flag is unused at present. str is passed in as beat position, tab, text, tab (example with flag=2: \"1.1.2\\tLyric for measure 1 beat 2\\t2.1.1\\tLyric for measure 2 beat 1\t\"). See GetTrackMIDILyrics"
  },
  {
    "form": "(reaper.SetTrackMIDINoteName track pitch chan name) :: (boolean)",
    "doc": "(reaper.SetTrackMIDINoteName track pitch chan name) :: (boolean)\ntrack :: integer\npitch :: integer\nchan :: integer\nname :: string\nchannel < 0 assigns these note names to all channels.",
    "name": "SetTrackMIDINoteName",
    "params": [
      {
        "type": "integer",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "pitch"
      },
      {
        "type": "integer",
        "name": "chan"
      },
      {
        "type": "string",
        "name": "name"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "channel < 0 assigns these note names to all channels."
  },
  {
    "form": "(reaper.SetTrackMIDINoteNameEx proj track pitch chan name) :: (boolean)",
    "doc": "(reaper.SetTrackMIDINoteNameEx proj track pitch chan name) :: (boolean)\nproj :: ReaProject\ntrack :: MediaTrack\npitch :: integer\nchan :: integer\nname :: string\nchannel < 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc.",
    "name": "SetTrackMIDINoteNameEx",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "pitch"
      },
      {
        "type": "integer",
        "name": "chan"
      },
      {
        "type": "string",
        "name": "name"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "channel < 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc."
  },
  {
    "form": "(reaper.SetTrackSelected track selected) :: nil",
    "doc": "(reaper.SetTrackSelected track selected) :: nil\ntrack :: MediaTrack\nselected :: boolean\n",
    "name": "SetTrackSelected",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "boolean",
        "name": "selected"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.SetTrackSendInfo_Value tr category sendidx parmname newvalue) :: (boolean)",
    "doc": "(reaper.SetTrackSendInfo_Value tr category sendidx parmname newvalue) :: (boolean)\ntr :: MediaTrack\ncategory :: integer\nsendidx :: integer\nparmname :: string\nnewvalue :: number\nSet send/receive/hardware output numerical-value attributes, return true on success.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nparameter names:\nB_MUTE : bool *\nB_PHASE : bool * : true to flip phase\nB_MONO : bool *\nD_VOL : double * : 1.0 = +0dB etc\nD_PAN : double * : -1..+1\nD_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\nI_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\nI_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\nI_SRCCHAN : int * : -1 for no audio send. Low 10 bits specify channel offset, and higher bits specify channel count. (srcchan>>10) == 0 for stereo, 1 for mono, 2 for 4 channel, 3 for 6 channel, etc.\nI_DSTCHAN : int * : low 10 bits are destination index, &1024 set to mix to mono.\nI_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, 31=MIDI send disabled, next 5 bits=dest channel, 0=orig, 1-16=chan. &1024 for faders-send MIDI vol/pan. (>>14)&255 = src bus (0 for all, 1 for normal, 2+). (>>22)&255=destination bus (0 for all, 1 for normal, 2+)\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends.",
    "name": "SetTrackSendInfo_Value",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      },
      {
        "type": "integer",
        "name": "category"
      },
      {
        "type": "integer",
        "name": "sendidx"
      },
      {
        "type": "string",
        "name": "parmname"
      },
      {
        "type": "number",
        "name": "newvalue"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Set send/receive/hardware output numerical-value attributes, return true on success.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nparameter names:\nB_MUTE : bool *\nB_PHASE : bool * : true to flip phase\nB_MONO : bool *\nD_VOL : double * : 1.0 = +0dB etc\nD_PAN : double * : -1..+1\nD_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\nI_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\nI_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\nI_SRCCHAN : int * : -1 for no audio send. Low 10 bits specify channel offset, and higher bits specify channel count. (srcchan>>10) == 0 for stereo, 1 for mono, 2 for 4 channel, 3 for 6 channel, etc.\nI_DSTCHAN : int * : low 10 bits are destination index, &1024 set to mix to mono.\nI_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, 31=MIDI send disabled, next 5 bits=dest channel, 0=orig, 1-16=chan. &1024 for faders-send MIDI vol/pan. (>>14)&255 = src bus (0 for all, 1 for normal, 2+). (>>22)&255=destination bus (0 for all, 1 for normal, 2+)\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends."
  },
  {
    "form": "(reaper.SetTrackSendUIPan track send_idx pan isend) :: (boolean)",
    "doc": "(reaper.SetTrackSendUIPan track send_idx pan isend) :: (boolean)\ntrack :: MediaTrack\nsend_idx :: integer\npan :: number\nisend :: integer\nsend_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.",
    "name": "SetTrackSendUIPan",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "send_idx"
      },
      {
        "type": "number",
        "name": "pan"
      },
      {
        "type": "integer",
        "name": "isend"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak."
  },
  {
    "form": "(reaper.SetTrackSendUIVol track send_idx vol isend) :: (boolean)",
    "doc": "(reaper.SetTrackSendUIVol track send_idx vol isend) :: (boolean)\ntrack :: MediaTrack\nsend_idx :: integer\nvol :: number\nisend :: integer\nsend_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.",
    "name": "SetTrackSendUIVol",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "send_idx"
      },
      {
        "type": "number",
        "name": "vol"
      },
      {
        "type": "integer",
        "name": "isend"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak."
  },
  {
    "form": "(reaper.SetTrackStateChunk track str isundo) :: (boolean)",
    "doc": "(reaper.SetTrackStateChunk track str isundo) :: (boolean)\ntrack :: MediaTrack\nstr :: string\nisundo :: boolean\nSets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.",
    "name": "SetTrackStateChunk",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "string",
        "name": "str"
      },
      {
        "type": "boolean",
        "name": "isundo"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Sets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint."
  },
  {
    "form": "(reaper.SetTrackUIInputMonitor track monitor igngroupflags) :: (integer)",
    "doc": "(reaper.SetTrackUIInputMonitor track monitor igngroupflags) :: (integer)\ntrack :: MediaTrack\nmonitor :: integer\nigngroupflags :: integer\nmonitor: 0=no monitoring, 1=monitoring, 2=auto-monitoring. returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging",
    "name": "SetTrackUIInputMonitor",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "monitor"
      },
      {
        "type": "integer",
        "name": "igngroupflags"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "monitor: 0=no monitoring, 1=monitoring, 2=auto-monitoring. returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging"
  },
  {
    "form": "(reaper.SetTrackUIMute track mute igngroupflags) :: (integer)",
    "doc": "(reaper.SetTrackUIMute track mute igngroupflags) :: (integer)\ntrack :: MediaTrack\nmute :: integer\nigngroupflags :: integer\nmute: <0 toggles, >0 sets mute, 0=unsets mute. returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging",
    "name": "SetTrackUIMute",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "mute"
      },
      {
        "type": "integer",
        "name": "igngroupflags"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "mute: <0 toggles, >0 sets mute, 0=unsets mute. returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging"
  },
  {
    "form": "(reaper.SetTrackUIPan track pan relative done igngroupflags) :: (number)",
    "doc": "(reaper.SetTrackUIPan track pan relative done igngroupflags) :: (number)\ntrack :: MediaTrack\npan :: number\nrelative :: boolean\ndone :: boolean\nigngroupflags :: integer\nigngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging",
    "name": "SetTrackUIPan",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "number",
        "name": "pan"
      },
      {
        "type": "boolean",
        "name": "relative"
      },
      {
        "type": "boolean",
        "name": "done"
      },
      {
        "type": "integer",
        "name": "igngroupflags"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging"
  },
  {
    "form": "(reaper.SetTrackUIPolarity track polarity igngroupflags) :: (integer)",
    "doc": "(reaper.SetTrackUIPolarity track polarity igngroupflags) :: (integer)\ntrack :: MediaTrack\npolarity :: integer\nigngroupflags :: integer\npolarity (AKA phase): <0 toggles, 0=normal, >0=inverted. returns new value or -1 if error.igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging",
    "name": "SetTrackUIPolarity",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "polarity"
      },
      {
        "type": "integer",
        "name": "igngroupflags"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "polarity (AKA phase): <0 toggles, 0=normal, >0=inverted. returns new value or -1 if error.igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging"
  },
  {
    "form": "(reaper.SetTrackUIRecArm track recarm igngroupflags) :: (integer)",
    "doc": "(reaper.SetTrackUIRecArm track recarm igngroupflags) :: (integer)\ntrack :: MediaTrack\nrecarm :: integer\nigngroupflags :: integer\nrecarm: <0 toggles, >0 sets recarm, 0=unsets recarm. returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging",
    "name": "SetTrackUIRecArm",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "recarm"
      },
      {
        "type": "integer",
        "name": "igngroupflags"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "recarm: <0 toggles, >0 sets recarm, 0=unsets recarm. returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging"
  },
  {
    "form": "(reaper.SetTrackUISolo track solo igngroupflags) :: (integer)",
    "doc": "(reaper.SetTrackUISolo track solo igngroupflags) :: (integer)\ntrack :: MediaTrack\nsolo :: integer\nigngroupflags :: integer\nsolo: <0 toggles, 1 sets solo (default mode), 0=unsets solo, 2 sets solo (non-SIP), 4 sets solo (SIP). returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging",
    "name": "SetTrackUISolo",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "solo"
      },
      {
        "type": "integer",
        "name": "igngroupflags"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "solo: <0 toggles, 1 sets solo (default mode), 0=unsets solo, 2 sets solo (non-SIP), 4 sets solo (SIP). returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging"
  },
  {
    "form": "(reaper.SetTrackUIVolume track volume relative done igngroupflags) :: (number)",
    "doc": "(reaper.SetTrackUIVolume track volume relative done igngroupflags) :: (number)\ntrack :: MediaTrack\nvolume :: number\nrelative :: boolean\ndone :: boolean\nigngroupflags :: integer\nigngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging",
    "name": "SetTrackUIVolume",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "number",
        "name": "volume"
      },
      {
        "type": "boolean",
        "name": "relative"
      },
      {
        "type": "boolean",
        "name": "done"
      },
      {
        "type": "integer",
        "name": "igngroupflags"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging"
  },
  {
    "form": "(reaper.SetTrackUIWidth track width relative done igngroupflags) :: (number)",
    "doc": "(reaper.SetTrackUIWidth track width relative done igngroupflags) :: (number)\ntrack :: MediaTrack\nwidth :: number\nrelative :: boolean\ndone :: boolean\nigngroupflags :: integer\nigngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging",
    "name": "SetTrackUIWidth",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "number",
        "name": "width"
      },
      {
        "type": "boolean",
        "name": "relative"
      },
      {
        "type": "boolean",
        "name": "done"
      },
      {
        "type": "integer",
        "name": "igngroupflags"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging"
  },
  {
    "form": "(reaper.ShowActionList section callerWnd) :: nil",
    "doc": "(reaper.ShowActionList section callerWnd) :: nil\nsection :: KbdSectionInfo\ncallerWnd :: HWND\n",
    "name": "ShowActionList",
    "params": [
      {
        "type": "KbdSectionInfo",
        "name": "section"
      },
      {
        "type": "HWND",
        "name": "callerWnd"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ShowConsoleMsg msg) :: nil",
    "doc": "(reaper.ShowConsoleMsg msg) :: nil\nmsg :: string\nShow a message to the user (also useful for debugging). Send \"\\n\" for newline, \"\" to clear the console. Prefix string with \"!SHOW:\" and text will be added to console without opening the window. See ClearConsole",
    "name": "ShowConsoleMsg",
    "params": [
      {
        "type": "string",
        "name": "msg"
      }
    ],
    "namespace": "reaper",
    "description": "Show a message to the user (also useful for debugging). Send \"\\n\" for newline, \"\" to clear the console. Prefix string with \"!SHOW:\" and text will be added to console without opening the window. See ClearConsole"
  },
  {
    "form": "(reaper.ShowMessageBox msg title type) :: (integer)",
    "doc": "(reaper.ShowMessageBox msg title type) :: (integer)\nmsg :: string\ntitle :: string\ntype :: integer\ntype 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO",
    "name": "ShowMessageBox",
    "params": [
      {
        "type": "string",
        "name": "msg"
      },
      {
        "type": "string",
        "name": "title"
      },
      {
        "type": "integer",
        "name": "type"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO"
  },
  {
    "form": "(reaper.ShowPopupMenu name x y hwndParent ctx ctx2 ctx3) :: nil",
    "doc": "(reaper.ShowPopupMenu name x y hwndParent ctx ctx2 ctx3) :: nil\nname :: string\nx :: integer\ny :: integer\nhwndParent :: HWND\nctx :: identifier\nctx2 :: integer\nctx3 :: integer\nshows a context menu, valid names include: track_input, track_panel, track_area, track_routing, item, ruler, envelope, envelope_point, envelope_item. ctxOptional can be a track pointer for track_*, item pointer for item* (but is optional). for envelope_point, ctx2Optional has point index, ctx3Optional has item index (0=main envelope, 1=first AI). for envelope_item, ctx2Optional has AI index (1=first AI)",
    "name": "ShowPopupMenu",
    "params": [
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "integer",
        "name": "x"
      },
      {
        "type": "integer",
        "name": "y"
      },
      {
        "type": "HWND",
        "name": "hwndParent"
      },
      {
        "type": "identifier",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "ctx2"
      },
      {
        "type": "integer",
        "name": "ctx3"
      }
    ],
    "namespace": "reaper",
    "description": "shows a context menu, valid names include: track_input, track_panel, track_area, track_routing, item, ruler, envelope, envelope_point, envelope_item. ctxOptional can be a track pointer for track_*, item pointer for item* (but is optional). for envelope_point, ctx2Optional has point index, ctx3Optional has item index (0=main envelope, 1=first AI). for envelope_item, ctx2Optional has AI index (1=first AI)"
  },
  {
    "form": "(reaper.SLIDER2DB y) :: (number)",
    "doc": "(reaper.SLIDER2DB y) :: (number)\ny :: number\n",
    "name": "SLIDER2DB",
    "params": [
      {
        "type": "number",
        "name": "y"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.SnapToGrid project time_pos) :: (number)",
    "doc": "(reaper.SnapToGrid project time_pos) :: (number)\nproject :: ReaProject\ntime_pos :: number\n",
    "name": "SnapToGrid",
    "params": [
      {
        "type": "ReaProject",
        "name": "project"
      },
      {
        "type": "number",
        "name": "time_pos"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.SoloAllTracks solo) :: nil",
    "doc": "(reaper.SoloAllTracks solo) :: nil\nsolo :: integer\nsolo=2 for SIP",
    "name": "SoloAllTracks",
    "params": [
      {
        "type": "integer",
        "name": "solo"
      }
    ],
    "namespace": "reaper",
    "description": "solo=2 for SIP"
  },
  {
    "form": "(reaper.Splash_GetWnd ) :: (HWND)",
    "doc": "(reaper.Splash_GetWnd ) :: (HWND)\ngets the splash window, in case you want to display a message over it. Returns NULL when the splash window is not displayed.",
    "name": "Splash_GetWnd",
    "returns": [
      {
        "type": "HWND"
      }
    ],
    "namespace": "reaper",
    "description": "gets the splash window, in case you want to display a message over it. Returns NULL when the splash window is not displayed."
  },
  {
    "form": "(reaper.SplitMediaItem item position) :: (MediaItem)",
    "doc": "(reaper.SplitMediaItem item position) :: (MediaItem)\nitem :: MediaItem\nposition :: number\nthe original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)",
    "name": "SplitMediaItem",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      },
      {
        "type": "number",
        "name": "position"
      }
    ],
    "returns": [
      {
        "type": "MediaItem"
      }
    ],
    "namespace": "reaper",
    "description": "the original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)"
  },
  {
    "form": "(reaper.stringToGuid str gGUID) :: (string)",
    "doc": "(reaper.stringToGuid str gGUID) :: (string)\nstr :: string\ngGUID :: string\n",
    "name": "stringToGuid",
    "params": [
      {
        "type": "string",
        "name": "str"
      },
      {
        "type": "string",
        "name": "gGUID"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "gGUID"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.StuffMIDIMessage mode msg1 msg2 msg3) :: nil",
    "doc": "(reaper.StuffMIDIMessage mode msg1 msg2 msg3) :: nil\nmode :: integer\nmsg1 :: integer\nmsg2 :: integer\nmsg3 :: integer\nStuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard queue, or the MIDI-as-control input queue, or sends to a MIDI hardware output. mode=0 for VKB, 1 for control (actions map etc), 2 for VKB-on-current-channel; 16 for external MIDI device 0, 17 for external MIDI device 1, etc; see GetNumMIDIOutputs, GetMIDIOutputName.",
    "name": "StuffMIDIMessage",
    "params": [
      {
        "type": "integer",
        "name": "mode"
      },
      {
        "type": "integer",
        "name": "msg1"
      },
      {
        "type": "integer",
        "name": "msg2"
      },
      {
        "type": "integer",
        "name": "msg3"
      }
    ],
    "namespace": "reaper",
    "description": "Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard queue, or the MIDI-as-control input queue, or sends to a MIDI hardware output. mode=0 for VKB, 1 for control (actions map etc), 2 for VKB-on-current-channel; 16 for external MIDI device 0, 17 for external MIDI device 1, etc; see GetNumMIDIOutputs, GetMIDIOutputName."
  },
  {
    "form": "(reaper.TakeFX_AddByName take fxname instantiate) :: (integer)",
    "doc": "(reaper.TakeFX_AddByName take fxname instantiate) :: (integer)\ntake :: MediaItem_Take\nfxname :: string\ninstantiate :: integer\nAdds or queries the position of a named FX in a take. See TrackFX_AddByName() for information on fxname and instantiate. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_AddByName",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "string",
        "name": "fxname"
      },
      {
        "type": "integer",
        "name": "instantiate"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Adds or queries the position of a named FX in a take. See TrackFX_AddByName() for information on fxname and instantiate. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_CopyToTake src_take src_fx dest_take dest_fx is_move) :: nil",
    "doc": "(reaper.TakeFX_CopyToTake src_take src_fx dest_take dest_fx is_move) :: nil\nsrc_take :: MediaItem_Take\nsrc_fx :: integer\ndest_take :: MediaItem_Take\ndest_fx :: integer\nis_move :: boolean\nCopies (or moves) FX from src_take to dest_take. Can be used with src_take=dest_take to reorder. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_CopyToTake",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "src_take"
      },
      {
        "type": "integer",
        "name": "src_fx"
      },
      {
        "type": "MediaItem_Take",
        "name": "dest_take"
      },
      {
        "type": "integer",
        "name": "dest_fx"
      },
      {
        "type": "boolean",
        "name": "is_move"
      }
    ],
    "namespace": "reaper",
    "description": "Copies (or moves) FX from src_take to dest_take. Can be used with src_take=dest_take to reorder. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_CopyToTrack src_take src_fx dest_track dest_fx is_move) :: nil",
    "doc": "(reaper.TakeFX_CopyToTrack src_take src_fx dest_track dest_fx is_move) :: nil\nsrc_take :: MediaItem_Take\nsrc_fx :: integer\ndest_track :: MediaTrack\ndest_fx :: integer\nis_move :: boolean\nCopies (or moves) FX from src_take to dest_track. dest_fx can have 0x1000000 set to reference input FX. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_CopyToTrack",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "src_take"
      },
      {
        "type": "integer",
        "name": "src_fx"
      },
      {
        "type": "MediaTrack",
        "name": "dest_track"
      },
      {
        "type": "integer",
        "name": "dest_fx"
      },
      {
        "type": "boolean",
        "name": "is_move"
      }
    ],
    "namespace": "reaper",
    "description": "Copies (or moves) FX from src_take to dest_track. dest_fx can have 0x1000000 set to reference input FX. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_Delete take fx) :: (boolean)",
    "doc": "(reaper.TakeFX_Delete take fx) :: (boolean)\ntake :: MediaItem_Take\nfx :: integer\nRemove a FX from take chain (returns true on success) FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_Delete",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Remove a FX from take chain (returns true on success) FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_EndParamEdit take fx param) :: (boolean)",
    "doc": "(reaper.TakeFX_EndParamEdit take fx param) :: (boolean)\ntake :: MediaItem_Take\nfx :: integer\nparam :: integer\nFX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_EndParamEdit",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_FormatParamValue take fx param val) :: (boolean string)",
    "doc": "(reaper.TakeFX_FormatParamValue take fx param val) :: (boolean string)\ntake :: MediaItem_Take\nfx :: integer\nparam :: integer\nval :: number\nNote: only works with FX that support Cockos VST extensions. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_FormatParamValue",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      },
      {
        "type": "number",
        "name": "val"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "Note: only works with FX that support Cockos VST extensions. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_FormatParamValueNormalized take fx param value buf) :: (boolean string)",
    "doc": "(reaper.TakeFX_FormatParamValueNormalized take fx param value buf) :: (boolean string)\ntake :: MediaItem_Take\nfx :: integer\nparam :: integer\nvalue :: number\nbuf :: string\nNote: only works with FX that support Cockos VST extensions. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_FormatParamValueNormalized",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      },
      {
        "type": "number",
        "name": "value"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "Note: only works with FX that support Cockos VST extensions. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_GetChainVisible take) :: (integer)",
    "doc": "(reaper.TakeFX_GetChainVisible take) :: (integer)\ntake :: MediaItem_Take\nreturns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected",
    "name": "TakeFX_GetChainVisible",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected"
  },
  {
    "form": "(reaper.TakeFX_GetCount take) :: (integer)",
    "doc": "(reaper.TakeFX_GetCount take) :: (integer)\ntake :: MediaItem_Take\n",
    "name": "TakeFX_GetCount",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.TakeFX_GetEnabled take fx) :: (boolean)",
    "doc": "(reaper.TakeFX_GetEnabled take fx) :: (boolean)\ntake :: MediaItem_Take\nfx :: integer\nSee TakeFX_SetEnabled FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_GetEnabled",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "See TakeFX_SetEnabled FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_GetEnvelope take fxindex parameterindex create) :: (TrackEnvelope)",
    "doc": "(reaper.TakeFX_GetEnvelope take fxindex parameterindex create) :: (TrackEnvelope)\ntake :: MediaItem_Take\nfxindex :: integer\nparameterindex :: integer\ncreate :: boolean\nReturns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created. If the envelope already exists and is bypassed and create=true, then the envelope will be unbypassed. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_GetEnvelope",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fxindex"
      },
      {
        "type": "integer",
        "name": "parameterindex"
      },
      {
        "type": "boolean",
        "name": "create"
      }
    ],
    "returns": [
      {
        "type": "TrackEnvelope"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created. If the envelope already exists and is bypassed and create=true, then the envelope will be unbypassed. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_GetFloatingWindow take index) :: (HWND)",
    "doc": "(reaper.TakeFX_GetFloatingWindow take index) :: (HWND)\ntake :: MediaItem_Take\nindex :: integer\nreturns HWND of floating window for effect index, if any FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_GetFloatingWindow",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "index"
      }
    ],
    "returns": [
      {
        "type": "HWND"
      }
    ],
    "namespace": "reaper",
    "description": "returns HWND of floating window for effect index, if any FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_GetFormattedParamValue take fx param) :: (boolean string)",
    "doc": "(reaper.TakeFX_GetFormattedParamValue take fx param) :: (boolean string)\ntake :: MediaItem_Take\nfx :: integer\nparam :: integer\nFX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_GetFormattedParamValue",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_GetFXGUID take fx) :: (string)",
    "doc": "(reaper.TakeFX_GetFXGUID take fx) :: (string)\ntake :: MediaItem_Take\nfx :: integer\nFX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_GetFXGUID",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "GUID"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_GetFXName take fx) :: (boolean string)",
    "doc": "(reaper.TakeFX_GetFXName take fx) :: (boolean string)\ntake :: MediaItem_Take\nfx :: integer\nFX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_GetFXName",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_GetIOSize take fx) :: (integer integer integer)",
    "doc": "(reaper.TakeFX_GetIOSize take fx) :: (integer integer integer)\ntake :: MediaItem_Take\nfx :: integer\nGets the number of input/output pins for FX if available, returns plug-in type or -1 on error FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_GetIOSize",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "inputPins"
      },
      {
        "type": "integer",
        "name": "outputPins"
      }
    ],
    "namespace": "reaper",
    "description": "Gets the number of input/output pins for FX if available, returns plug-in type or -1 on error FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_GetNamedConfigParm take fx parmname) :: (boolean string)",
    "doc": "(reaper.TakeFX_GetNamedConfigParm take fx parmname) :: (boolean string)\ntake :: MediaItem_Take\nfx :: integer\nparmname :: string\ngets plug-in specific named configuration value (returns true on success). see TrackFX_GetNamedConfigParm FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_GetNamedConfigParm",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "string",
        "name": "parmname"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "gets plug-in specific named configuration value (returns true on success). see TrackFX_GetNamedConfigParm FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_GetNumParams take fx) :: (integer)",
    "doc": "(reaper.TakeFX_GetNumParams take fx) :: (integer)\ntake :: MediaItem_Take\nfx :: integer\nFX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_GetNumParams",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_GetOffline take fx) :: (boolean)",
    "doc": "(reaper.TakeFX_GetOffline take fx) :: (boolean)\ntake :: MediaItem_Take\nfx :: integer\nSee TakeFX_SetOffline FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_GetOffline",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "See TakeFX_SetOffline FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_GetOpen take fx) :: (boolean)",
    "doc": "(reaper.TakeFX_GetOpen take fx) :: (boolean)\ntake :: MediaItem_Take\nfx :: integer\nReturns true if this FX UI is open in the FX chain window or a floating window. See TakeFX_SetOpen FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_GetOpen",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Returns true if this FX UI is open in the FX chain window or a floating window. See TakeFX_SetOpen FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_GetParam take fx param) :: (number number number)",
    "doc": "(reaper.TakeFX_GetParam take fx param) :: (number number number)\ntake :: MediaItem_Take\nfx :: integer\nparam :: integer\nFX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_GetParam",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "minval"
      },
      {
        "type": "number",
        "name": "maxval"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_GetParameterStepSizes take fx param) :: (boolean number number number boolean)",
    "doc": "(reaper.TakeFX_GetParameterStepSizes take fx param) :: (boolean number number number boolean)\ntake :: MediaItem_Take\nfx :: integer\nparam :: integer\nFX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_GetParameterStepSizes",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "step"
      },
      {
        "type": "number",
        "name": "smallstep"
      },
      {
        "type": "number",
        "name": "largestep"
      },
      {
        "type": "boolean",
        "name": "istoggle"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_GetParamEx take fx param) :: (number number number number)",
    "doc": "(reaper.TakeFX_GetParamEx take fx param) :: (number number number number)\ntake :: MediaItem_Take\nfx :: integer\nparam :: integer\nFX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_GetParamEx",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "minval"
      },
      {
        "type": "number",
        "name": "maxval"
      },
      {
        "type": "number",
        "name": "midval"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_GetParamFromIdent take fx ident_str) :: (integer)",
    "doc": "(reaper.TakeFX_GetParamFromIdent take fx ident_str) :: (integer)\ntake :: MediaItem_Take\nfx :: integer\nident_str :: string\ngets the parameter index from an identifying string (:wet, :bypass, or a string returned from GetParamIdent), or -1 if unknown. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_GetParamFromIdent",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "string",
        "name": "ident_str"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "gets the parameter index from an identifying string (:wet, :bypass, or a string returned from GetParamIdent), or -1 if unknown. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_GetParamIdent take fx param) :: (boolean string)",
    "doc": "(reaper.TakeFX_GetParamIdent take fx param) :: (boolean string)\ntake :: MediaItem_Take\nfx :: integer\nparam :: integer\ngets an identifying string for the parameter FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_GetParamIdent",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "gets an identifying string for the parameter FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_GetParamName take fx param) :: (boolean string)",
    "doc": "(reaper.TakeFX_GetParamName take fx param) :: (boolean string)\ntake :: MediaItem_Take\nfx :: integer\nparam :: integer\nFX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_GetParamName",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_GetParamNormalized take fx param) :: (number)",
    "doc": "(reaper.TakeFX_GetParamNormalized take fx param) :: (number)\ntake :: MediaItem_Take\nfx :: integer\nparam :: integer\nFX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_GetParamNormalized",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_GetPinMappings take fx isoutput pin) :: (integer integer)",
    "doc": "(reaper.TakeFX_GetPinMappings take fx isoutput pin) :: (integer integer)\ntake :: MediaItem_Take\nfx :: integer\nisoutput :: integer\npin :: integer\ngets the effective channel mapping bitmask for a particular pin. high32Out will be set to the high 32 bits. Add 0x1000000 to pin index in order to access the second 64 bits of mappings independent of the first 64 bits. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_GetPinMappings",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "isoutput"
      },
      {
        "type": "integer",
        "name": "pin"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "high32"
      }
    ],
    "namespace": "reaper",
    "description": "gets the effective channel mapping bitmask for a particular pin. high32Out will be set to the high 32 bits. Add 0x1000000 to pin index in order to access the second 64 bits of mappings independent of the first 64 bits. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_GetPreset take fx) :: (boolean string)",
    "doc": "(reaper.TakeFX_GetPreset take fx) :: (boolean string)\ntake :: MediaItem_Take\nfx :: integer\nGet the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). See TakeFX_SetPreset. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_GetPreset",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "presetname"
      }
    ],
    "namespace": "reaper",
    "description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). See TakeFX_SetPreset. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_GetPresetIndex take fx) :: (integer integer)",
    "doc": "(reaper.TakeFX_GetPresetIndex take fx) :: (integer integer)\ntake :: MediaItem_Take\nfx :: integer\nReturns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TakeFX_SetPresetByIndex FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_GetPresetIndex",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "numberOfPresets"
      }
    ],
    "namespace": "reaper",
    "description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TakeFX_SetPresetByIndex FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_GetUserPresetFilename take fx) :: (string)",
    "doc": "(reaper.TakeFX_GetUserPresetFilename take fx) :: (string)\ntake :: MediaItem_Take\nfx :: integer\nFX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_GetUserPresetFilename",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "fn"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_NavigatePresets take fx presetmove) :: (boolean)",
    "doc": "(reaper.TakeFX_NavigatePresets take fx presetmove) :: (boolean)\ntake :: MediaItem_Take\nfx :: integer\npresetmove :: integer\npresetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_NavigatePresets",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "presetmove"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_SetEnabled take fx enabled) :: nil",
    "doc": "(reaper.TakeFX_SetEnabled take fx enabled) :: nil\ntake :: MediaItem_Take\nfx :: integer\nenabled :: boolean\nSee TakeFX_GetEnabled FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_SetEnabled",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "boolean",
        "name": "enabled"
      }
    ],
    "namespace": "reaper",
    "description": "See TakeFX_GetEnabled FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_SetNamedConfigParm take fx parmname value) :: (boolean)",
    "doc": "(reaper.TakeFX_SetNamedConfigParm take fx parmname value) :: (boolean)\ntake :: MediaItem_Take\nfx :: integer\nparmname :: string\nvalue :: string\ngets plug-in specific named configuration value (returns true on success). see TrackFX_SetNamedConfigParm FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_SetNamedConfigParm",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "string",
        "name": "parmname"
      },
      {
        "type": "string",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "gets plug-in specific named configuration value (returns true on success). see TrackFX_SetNamedConfigParm FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_SetOffline take fx offline) :: nil",
    "doc": "(reaper.TakeFX_SetOffline take fx offline) :: nil\ntake :: MediaItem_Take\nfx :: integer\noffline :: boolean\nSee TakeFX_GetOffline FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_SetOffline",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "boolean",
        "name": "offline"
      }
    ],
    "namespace": "reaper",
    "description": "See TakeFX_GetOffline FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_SetOpen take fx open) :: nil",
    "doc": "(reaper.TakeFX_SetOpen take fx open) :: nil\ntake :: MediaItem_Take\nfx :: integer\nopen :: boolean\nOpen this FX UI. See TakeFX_GetOpen FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_SetOpen",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "boolean",
        "name": "open"
      }
    ],
    "namespace": "reaper",
    "description": "Open this FX UI. See TakeFX_GetOpen FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_SetParam take fx param val) :: (boolean)",
    "doc": "(reaper.TakeFX_SetParam take fx param val) :: (boolean)\ntake :: MediaItem_Take\nfx :: integer\nparam :: integer\nval :: number\nFX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_SetParam",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      },
      {
        "type": "number",
        "name": "val"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_SetParamNormalized take fx param value) :: (boolean)",
    "doc": "(reaper.TakeFX_SetParamNormalized take fx param value) :: (boolean)\ntake :: MediaItem_Take\nfx :: integer\nparam :: integer\nvalue :: number\nFX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_SetParamNormalized",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      },
      {
        "type": "number",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_SetPinMappings take fx isoutput pin low32bits hi32bits) :: (boolean)",
    "doc": "(reaper.TakeFX_SetPinMappings take fx isoutput pin low32bits hi32bits) :: (boolean)\ntake :: MediaItem_Take\nfx :: integer\nisoutput :: integer\npin :: integer\nlow32bits :: integer\nhi32bits :: integer\nsets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability). Add 0x1000000 to pin index in order to access the second 64 bits of mappings independent of the first 64 bits. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_SetPinMappings",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "isoutput"
      },
      {
        "type": "integer",
        "name": "pin"
      },
      {
        "type": "integer",
        "name": "low32bits"
      },
      {
        "type": "integer",
        "name": "hi32bits"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability). Add 0x1000000 to pin index in order to access the second 64 bits of mappings independent of the first 64 bits. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_SetPreset take fx presetname) :: (boolean)",
    "doc": "(reaper.TakeFX_SetPreset take fx presetname) :: (boolean)\ntake :: MediaItem_Take\nfx :: integer\npresetname :: string\nActivate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TakeFX_GetPreset. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_SetPreset",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "string",
        "name": "presetname"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TakeFX_GetPreset. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_SetPresetByIndex take fx idx) :: (boolean)",
    "doc": "(reaper.TakeFX_SetPresetByIndex take fx idx) :: (boolean)\ntake :: MediaItem_Take\nfx :: integer\nidx :: integer\nSets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TakeFX_GetPresetIndex. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_SetPresetByIndex",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "idx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TakeFX_GetPresetIndex. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeFX_Show take index showFlag) :: nil",
    "doc": "(reaper.TakeFX_Show take index showFlag) :: nil\ntake :: MediaItem_Take\nindex :: integer\nshowFlag :: integer\nshowflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid) FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TakeFX_Show",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "integer",
        "name": "index"
      },
      {
        "type": "integer",
        "name": "showFlag"
      }
    ],
    "namespace": "reaper",
    "description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid) FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TakeIsMIDI take) :: (boolean)",
    "doc": "(reaper.TakeIsMIDI take) :: (boolean)\ntake :: MediaItem_Take\nReturns true if the active take contains MIDI.",
    "name": "TakeIsMIDI",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Returns true if the active take contains MIDI."
  },
  {
    "form": "(reaper.ThemeLayout_GetLayout section idx) :: (boolean string)",
    "doc": "(reaper.ThemeLayout_GetLayout section idx) :: (boolean string)\nsection :: string\nidx :: integer\nGets theme layout information. section can be 'global' for global layout override, 'seclist' to enumerate a list of layout sections, otherwise a layout section such as 'mcp', 'tcp', 'trans', etc. idx can be -1 to query the current value, -2 to get the description of the section (if not global), -3 will return the current context DPI-scaling (256=normal, 512=retina, etc), or 0..x. returns false if failed.",
    "name": "ThemeLayout_GetLayout",
    "params": [
      {
        "type": "string",
        "name": "section"
      },
      {
        "type": "integer",
        "name": "idx"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "name"
      }
    ],
    "namespace": "reaper",
    "description": "Gets theme layout information. section can be 'global' for global layout override, 'seclist' to enumerate a list of layout sections, otherwise a layout section such as 'mcp', 'tcp', 'trans', etc. idx can be -1 to query the current value, -2 to get the description of the section (if not global), -3 will return the current context DPI-scaling (256=normal, 512=retina, etc), or 0..x. returns false if failed."
  },
  {
    "form": "(reaper.ThemeLayout_GetParameter wp) :: (string string integer integer integer integer)",
    "doc": "(reaper.ThemeLayout_GetParameter wp) :: (string string integer integer integer integer)\nwp :: integer\nreturns theme layout parameter. return value is cfg-name, or nil/empty if out of range.",
    "name": "ThemeLayout_GetParameter",
    "params": [
      {
        "type": "integer",
        "name": "wp"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "desc",
        "optional": true
      },
      {
        "type": "integer",
        "name": "value",
        "optional": true
      },
      {
        "type": "integer",
        "name": "defValue",
        "optional": true
      },
      {
        "type": "integer",
        "name": "minValue",
        "optional": true
      },
      {
        "type": "integer",
        "name": "maxValue",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "returns theme layout parameter. return value is cfg-name, or nil/empty if out of range."
  },
  {
    "form": "(reaper.ThemeLayout_RefreshAll ) :: nil",
    "doc": "(reaper.ThemeLayout_RefreshAll ) :: nil\nRefreshes all layouts",
    "name": "ThemeLayout_RefreshAll",
    "namespace": "reaper",
    "description": "Refreshes all layouts"
  },
  {
    "form": "(reaper.ThemeLayout_SetLayout section layout) :: (boolean)",
    "doc": "(reaper.ThemeLayout_SetLayout section layout) :: (boolean)\nsection :: string\nlayout :: string\nSets theme layout override for a particular section -- section can be 'global' or 'mcp' etc. If setting global layout, prefix a ! to the layout string to clear any per-layout overrides. Returns false if failed.",
    "name": "ThemeLayout_SetLayout",
    "params": [
      {
        "type": "string",
        "name": "section"
      },
      {
        "type": "string",
        "name": "layout"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Sets theme layout override for a particular section -- section can be 'global' or 'mcp' etc. If setting global layout, prefix a ! to the layout string to clear any per-layout overrides. Returns false if failed."
  },
  {
    "form": "(reaper.ThemeLayout_SetParameter wp value persist) :: (boolean)",
    "doc": "(reaper.ThemeLayout_SetParameter wp value persist) :: (boolean)\nwp :: integer\nvalue :: integer\npersist :: boolean\nsets theme layout parameter to value. persist=true in order to have change loaded on next theme load. note that the caller should update layouts via ??? to make changes visible.",
    "name": "ThemeLayout_SetParameter",
    "params": [
      {
        "type": "integer",
        "name": "wp"
      },
      {
        "type": "integer",
        "name": "value"
      },
      {
        "type": "boolean",
        "name": "persist"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "sets theme layout parameter to value. persist=true in order to have change loaded on next theme load. note that the caller should update layouts via ??? to make changes visible."
  },
  {
    "form": "(reaper.time_precise ) :: (number)",
    "doc": "(reaper.time_precise ) :: (number)\nGets a precise system timestamp in seconds",
    "name": "time_precise",
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Gets a precise system timestamp in seconds"
  },
  {
    "form": "(reaper.TimeMap2_beatsToTime proj tpos ?measuresIn) :: (number)",
    "doc": "(reaper.TimeMap2_beatsToTime proj tpos ?measuresIn) :: (number)\nproj :: ReaProject\ntpos :: number\nmeasuresIn :: integer (optional)\nconvert a beat position (or optionally a beats+measures if measures is non-NULL) to time.",
    "name": "TimeMap2_beatsToTime",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "number",
        "name": "tpos"
      },
      {
        "type": "integer",
        "name": "measuresIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "convert a beat position (or optionally a beats+measures if measures is non-NULL) to time."
  },
  {
    "form": "(reaper.TimeMap2_GetDividedBpmAtTime proj time) :: (number)",
    "doc": "(reaper.TimeMap2_GetDividedBpmAtTime proj time) :: (number)\nproj :: ReaProject\ntime :: number\nget the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)",
    "name": "TimeMap2_GetDividedBpmAtTime",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "number",
        "name": "time"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)"
  },
  {
    "form": "(reaper.TimeMap2_GetNextChangeTime proj time) :: (number)",
    "doc": "(reaper.TimeMap2_GetNextChangeTime proj time) :: (number)\nproj :: ReaProject\ntime :: number\nwhen does the next time map (tempo or time sig) change occur",
    "name": "TimeMap2_GetNextChangeTime",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "number",
        "name": "time"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "when does the next time map (tempo or time sig) change occur"
  },
  {
    "form": "(reaper.TimeMap2_QNToTime proj qn) :: (number)",
    "doc": "(reaper.TimeMap2_QNToTime proj qn) :: (number)\nproj :: ReaProject\nqn :: number\nconverts project QN position to time.",
    "name": "TimeMap2_QNToTime",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "number",
        "name": "qn"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "converts project QN position to time."
  },
  {
    "form": "(reaper.TimeMap2_timeToBeats proj tpos) :: (number integer integer number integer)",
    "doc": "(reaper.TimeMap2_timeToBeats proj tpos) :: (number integer integer number integer)\nproj :: ReaProject\ntpos :: number\nconvert a time into beats.\nif measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.\nif cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)\nif fullbeats is non-NULL, and measures is non-NULL, fullbeats will get the full beat count (same value returned if measures is NULL).\nif cdenom is non-NULL, will be set to the current time signature denominator.",
    "name": "TimeMap2_timeToBeats",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "number",
        "name": "tpos"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "measures",
        "optional": true
      },
      {
        "type": "integer",
        "name": "cml",
        "optional": true
      },
      {
        "type": "number",
        "name": "fullbeats",
        "optional": true
      },
      {
        "type": "integer",
        "name": "cdenom",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "convert a time into beats.\nif measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.\nif cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)\nif fullbeats is non-NULL, and measures is non-NULL, fullbeats will get the full beat count (same value returned if measures is NULL).\nif cdenom is non-NULL, will be set to the current time signature denominator."
  },
  {
    "form": "(reaper.TimeMap2_timeToQN proj tpos) :: (number)",
    "doc": "(reaper.TimeMap2_timeToQN proj tpos) :: (number)\nproj :: ReaProject\ntpos :: number\nconverts project time position to QN position.",
    "name": "TimeMap2_timeToQN",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "number",
        "name": "tpos"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "converts project time position to QN position."
  },
  {
    "form": "(reaper.TimeMap_curFrameRate proj) :: (number boolean)",
    "doc": "(reaper.TimeMap_curFrameRate proj) :: (number boolean)\nproj :: ReaProject\nGets project framerate, and optionally whether it is drop-frame timecode",
    "name": "TimeMap_curFrameRate",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "dropFrame"
      }
    ],
    "namespace": "reaper",
    "description": "Gets project framerate, and optionally whether it is drop-frame timecode"
  },
  {
    "form": "(reaper.TimeMap_GetDividedBpmAtTime time) :: (number)",
    "doc": "(reaper.TimeMap_GetDividedBpmAtTime time) :: (number)\ntime :: number\nget the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)",
    "name": "TimeMap_GetDividedBpmAtTime",
    "params": [
      {
        "type": "number",
        "name": "time"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)"
  },
  {
    "form": "(reaper.TimeMap_GetMeasureInfo proj measure) :: (number number number integer integer number)",
    "doc": "(reaper.TimeMap_GetMeasureInfo proj measure) :: (number number number integer integer number)\nproj :: ReaProject\nmeasure :: integer\nGet the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start.",
    "name": "TimeMap_GetMeasureInfo",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "measure"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "qn_start"
      },
      {
        "type": "number",
        "name": "qn_end"
      },
      {
        "type": "integer",
        "name": "timesig_num"
      },
      {
        "type": "integer",
        "name": "timesig_denom"
      },
      {
        "type": "number",
        "name": "tempo"
      }
    ],
    "namespace": "reaper",
    "description": "Get the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start."
  },
  {
    "form": "(reaper.TimeMap_GetMetronomePattern proj time pattern) :: (integer string)",
    "doc": "(reaper.TimeMap_GetMetronomePattern proj time pattern) :: (integer string)\nproj :: ReaProject\ntime :: number\npattern :: string\nFills in a string representing the active metronome pattern. For example, in a 7/8 measure divided 3+4, the pattern might be \"1221222\". The length of the string is the time signature numerator, and the function returns the time signature denominator.",
    "name": "TimeMap_GetMetronomePattern",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "number",
        "name": "time"
      },
      {
        "type": "string",
        "name": "pattern"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "pattern"
      }
    ],
    "namespace": "reaper",
    "description": "Fills in a string representing the active metronome pattern. For example, in a 7/8 measure divided 3+4, the pattern might be \"1221222\". The length of the string is the time signature numerator, and the function returns the time signature denominator."
  },
  {
    "form": "(reaper.TimeMap_GetTimeSigAtTime proj time) :: (integer integer number)",
    "doc": "(reaper.TimeMap_GetTimeSigAtTime proj time) :: (integer integer number)\nproj :: ReaProject\ntime :: number\nget the effective time signature and tempo",
    "name": "TimeMap_GetTimeSigAtTime",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "number",
        "name": "time"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "timesig_num"
      },
      {
        "type": "integer",
        "name": "timesig_denom"
      },
      {
        "type": "number",
        "name": "tempo"
      }
    ],
    "namespace": "reaper",
    "description": "get the effective time signature and tempo"
  },
  {
    "form": "(reaper.TimeMap_QNToMeasures proj qn) :: (integer number number)",
    "doc": "(reaper.TimeMap_QNToMeasures proj qn) :: (integer number number)\nproj :: ReaProject\nqn :: number\nFind which measure the given QN position falls in.",
    "name": "TimeMap_QNToMeasures",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "number",
        "name": "qn"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "qnMeasureStart",
        "optional": true
      },
      {
        "type": "number",
        "name": "qnMeasureEnd",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Find which measure the given QN position falls in."
  },
  {
    "form": "(reaper.TimeMap_QNToTime qn) :: (number)",
    "doc": "(reaper.TimeMap_QNToTime qn) :: (number)\nqn :: number\nconverts project QN position to time.",
    "name": "TimeMap_QNToTime",
    "params": [
      {
        "type": "number",
        "name": "qn"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "converts project QN position to time."
  },
  {
    "form": "(reaper.TimeMap_QNToTime_abs proj qn) :: (number)",
    "doc": "(reaper.TimeMap_QNToTime_abs proj qn) :: (number)\nproj :: ReaProject\nqn :: number\nConverts project quarter note count (QN) to time. QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_QNToTime",
    "name": "TimeMap_QNToTime_abs",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "number",
        "name": "qn"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Converts project quarter note count (QN) to time. QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_QNToTime"
  },
  {
    "form": "(reaper.TimeMap_timeToQN tpos) :: (number)",
    "doc": "(reaper.TimeMap_timeToQN tpos) :: (number)\ntpos :: number\nconverts project QN position to time.",
    "name": "TimeMap_timeToQN",
    "params": [
      {
        "type": "number",
        "name": "tpos"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "converts project QN position to time."
  },
  {
    "form": "(reaper.TimeMap_timeToQN_abs proj tpos) :: (number)",
    "doc": "(reaper.TimeMap_timeToQN_abs proj tpos) :: (number)\nproj :: ReaProject\ntpos :: number\nConverts project time position to quarter note count (QN). QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_timeToQN",
    "name": "TimeMap_timeToQN_abs",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "number",
        "name": "tpos"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Converts project time position to quarter note count (QN). QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_timeToQN"
  },
  {
    "form": "(reaper.ToggleTrackSendUIMute track send_idx) :: (boolean)",
    "doc": "(reaper.ToggleTrackSendUIMute track send_idx) :: (boolean)\ntrack :: MediaTrack\nsend_idx :: integer\nsend_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends.",
    "name": "ToggleTrackSendUIMute",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "send_idx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends."
  },
  {
    "form": "(reaper.Track_GetPeakHoldDB track channel clear) :: (number)",
    "doc": "(reaper.Track_GetPeakHoldDB track channel clear) :: (number)\ntrack :: MediaTrack\nchannel :: integer\nclear :: boolean\nReturns meter hold state, in dB*0.01 (0 = +0dB, -0.01 = -1dB, 0.02 = +2dB, etc). If clear is set, clears the meter hold. If channel==1024 or channel==1025, returns loudness values if this is the master track or this track's VU meters are set to display loudness.",
    "name": "Track_GetPeakHoldDB",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "channel"
      },
      {
        "type": "boolean",
        "name": "clear"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Returns meter hold state, in dB*0.01 (0 = +0dB, -0.01 = -1dB, 0.02 = +2dB, etc). If clear is set, clears the meter hold. If channel==1024 or channel==1025, returns loudness values if this is the master track or this track's VU meters are set to display loudness."
  },
  {
    "form": "(reaper.Track_GetPeakInfo track channel) :: (number)",
    "doc": "(reaper.Track_GetPeakInfo track channel) :: (number)\ntrack :: MediaTrack\nchannel :: integer\nReturns peak meter value (1.0=+0dB, 0.0=-inf) for channel. If channel==1024 or channel==1025, returns loudness values if this is the master track or this track's VU meters are set to display loudness.",
    "name": "Track_GetPeakInfo",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "channel"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Returns peak meter value (1.0=+0dB, 0.0=-inf) for channel. If channel==1024 or channel==1025, returns loudness values if this is the master track or this track's VU meters are set to display loudness."
  },
  {
    "form": "(reaper.TrackCtl_SetToolTip fmt xpos ypos topmost) :: nil",
    "doc": "(reaper.TrackCtl_SetToolTip fmt xpos ypos topmost) :: nil\nfmt :: string\nxpos :: integer\nypos :: integer\ntopmost :: boolean\ndisplays tooltip at location, or removes if empty string",
    "name": "TrackCtl_SetToolTip",
    "params": [
      {
        "type": "string",
        "name": "fmt"
      },
      {
        "type": "integer",
        "name": "xpos"
      },
      {
        "type": "integer",
        "name": "ypos"
      },
      {
        "type": "boolean",
        "name": "topmost"
      }
    ],
    "namespace": "reaper",
    "description": "displays tooltip at location, or removes if empty string"
  },
  {
    "form": "(reaper.TrackFX_AddByName track fxname recFX instantiate) :: (integer)",
    "doc": "(reaper.TrackFX_AddByName track fxname recFX instantiate) :: (integer)\ntrack :: MediaTrack\nfxname :: string\nrecFX :: boolean\ninstantiate :: integer\nAdds or queries the position of a named FX from the track FX chain (recFX=false) or record input FX/monitoring FX (recFX=true, monitoring FX are on master track). Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found. If instantiate is <= -1000, it is used for the insertion position (-1000 is first item in chain, -1001 is second, etc). fxname can have prefix to specify type: VST3:,VST2:,VST:,AU:,JS:, or DX:, or FXADD: which adds selected items from the currently-open FX browser, FXADD:2 to limit to 2 FX added, or FXADD:2e to only succeed if exactly 2 FX are selected. Returns -1 on failure or the new position in chain on success. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_AddByName",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "string",
        "name": "fxname"
      },
      {
        "type": "boolean",
        "name": "recFX"
      },
      {
        "type": "integer",
        "name": "instantiate"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Adds or queries the position of a named FX from the track FX chain (recFX=false) or record input FX/monitoring FX (recFX=true, monitoring FX are on master track). Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found. If instantiate is <= -1000, it is used for the insertion position (-1000 is first item in chain, -1001 is second, etc). fxname can have prefix to specify type: VST3:,VST2:,VST:,AU:,JS:, or DX:, or FXADD: which adds selected items from the currently-open FX browser, FXADD:2 to limit to 2 FX added, or FXADD:2e to only succeed if exactly 2 FX are selected. Returns -1 on failure or the new position in chain on success. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_CopyToTake src_track src_fx dest_take dest_fx is_move) :: nil",
    "doc": "(reaper.TrackFX_CopyToTake src_track src_fx dest_take dest_fx is_move) :: nil\nsrc_track :: MediaTrack\nsrc_fx :: integer\ndest_take :: MediaItem_Take\ndest_fx :: integer\nis_move :: boolean\nCopies (or moves) FX from src_track to dest_take. src_fx can have 0x1000000 set to reference input FX. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_CopyToTake",
    "params": [
      {
        "type": "MediaTrack",
        "name": "src_track"
      },
      {
        "type": "integer",
        "name": "src_fx"
      },
      {
        "type": "MediaItem_Take",
        "name": "dest_take"
      },
      {
        "type": "integer",
        "name": "dest_fx"
      },
      {
        "type": "boolean",
        "name": "is_move"
      }
    ],
    "namespace": "reaper",
    "description": "Copies (or moves) FX from src_track to dest_take. src_fx can have 0x1000000 set to reference input FX. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_CopyToTrack src_track src_fx dest_track dest_fx is_move) :: nil",
    "doc": "(reaper.TrackFX_CopyToTrack src_track src_fx dest_track dest_fx is_move) :: nil\nsrc_track :: MediaTrack\nsrc_fx :: integer\ndest_track :: MediaTrack\ndest_fx :: integer\nis_move :: boolean\nCopies (or moves) FX from src_track to dest_track. Can be used with src_track=dest_track to reorder, FX indices have 0x1000000 set to reference input FX. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_CopyToTrack",
    "params": [
      {
        "type": "MediaTrack",
        "name": "src_track"
      },
      {
        "type": "integer",
        "name": "src_fx"
      },
      {
        "type": "MediaTrack",
        "name": "dest_track"
      },
      {
        "type": "integer",
        "name": "dest_fx"
      },
      {
        "type": "boolean",
        "name": "is_move"
      }
    ],
    "namespace": "reaper",
    "description": "Copies (or moves) FX from src_track to dest_track. Can be used with src_track=dest_track to reorder, FX indices have 0x1000000 set to reference input FX. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_Delete track fx) :: (boolean)",
    "doc": "(reaper.TrackFX_Delete track fx) :: (boolean)\ntrack :: MediaTrack\nfx :: integer\nRemove a FX from track chain (returns true on success) FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_Delete",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Remove a FX from track chain (returns true on success) FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_EndParamEdit track fx param) :: (boolean)",
    "doc": "(reaper.TrackFX_EndParamEdit track fx param) :: (boolean)\ntrack :: MediaTrack\nfx :: integer\nparam :: integer\nFX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_EndParamEdit",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_FormatParamValue track fx param val) :: (boolean string)",
    "doc": "(reaper.TrackFX_FormatParamValue track fx param val) :: (boolean string)\ntrack :: MediaTrack\nfx :: integer\nparam :: integer\nval :: number\nNote: only works with FX that support Cockos VST extensions. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_FormatParamValue",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      },
      {
        "type": "number",
        "name": "val"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "Note: only works with FX that support Cockos VST extensions. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_FormatParamValueNormalized track fx param value buf) :: (boolean string)",
    "doc": "(reaper.TrackFX_FormatParamValueNormalized track fx param value buf) :: (boolean string)\ntrack :: MediaTrack\nfx :: integer\nparam :: integer\nvalue :: number\nbuf :: string\nNote: only works with FX that support Cockos VST extensions. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_FormatParamValueNormalized",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      },
      {
        "type": "number",
        "name": "value"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "Note: only works with FX that support Cockos VST extensions. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_GetByName track fxname instantiate) :: (integer)",
    "doc": "(reaper.TrackFX_GetByName track fxname instantiate) :: (integer)\ntrack :: MediaTrack\nfxname :: string\ninstantiate :: boolean\nGet the index of the first track FX insert that matches fxname. If the FX is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetEQ. Deprecated in favor of TrackFX_AddByName.",
    "name": "TrackFX_GetByName",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "string",
        "name": "fxname"
      },
      {
        "type": "boolean",
        "name": "instantiate"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Get the index of the first track FX insert that matches fxname. If the FX is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetEQ. Deprecated in favor of TrackFX_AddByName."
  },
  {
    "form": "(reaper.TrackFX_GetChainVisible track) :: (integer)",
    "doc": "(reaper.TrackFX_GetChainVisible track) :: (integer)\ntrack :: MediaTrack\nreturns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected",
    "name": "TrackFX_GetChainVisible",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected"
  },
  {
    "form": "(reaper.TrackFX_GetCount track) :: (integer)",
    "doc": "(reaper.TrackFX_GetCount track) :: (integer)\ntrack :: MediaTrack\n",
    "name": "TrackFX_GetCount",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.TrackFX_GetEnabled track fx) :: (boolean)",
    "doc": "(reaper.TrackFX_GetEnabled track fx) :: (boolean)\ntrack :: MediaTrack\nfx :: integer\nSee TrackFX_SetEnabled FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_GetEnabled",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "See TrackFX_SetEnabled FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_GetEQ track instantiate) :: (integer)",
    "doc": "(reaper.TrackFX_GetEQ track instantiate) :: (integer)\ntrack :: MediaTrack\ninstantiate :: boolean\nGet the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetByName.",
    "name": "TrackFX_GetEQ",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "boolean",
        "name": "instantiate"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Get the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetByName."
  },
  {
    "form": "(reaper.TrackFX_GetEQBandEnabled track fxidx bandtype bandidx) :: (boolean)",
    "doc": "(reaper.TrackFX_GetEQBandEnabled track fxidx bandtype bandidx) :: (boolean)\ntrack :: MediaTrack\nfxidx :: integer\nbandtype :: integer\nbandidx :: integer\nReturns true if the EQ band is enabled.\nReturns false if the band is disabled, or if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_SetEQBandEnabled. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_GetEQBandEnabled",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fxidx"
      },
      {
        "type": "integer",
        "name": "bandtype"
      },
      {
        "type": "integer",
        "name": "bandidx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Returns true if the EQ band is enabled.\nReturns false if the band is disabled, or if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_SetEQBandEnabled. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_GetEQParam track fxidx paramidx) :: (boolean integer integer integer number)",
    "doc": "(reaper.TrackFX_GetEQParam track fxidx paramidx) :: (boolean integer integer integer number)\ntrack :: MediaTrack\nfxidx :: integer\nparamidx :: integer\nReturns false if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\nSee TrackFX_GetEQ, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_GetEQParam",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fxidx"
      },
      {
        "type": "integer",
        "name": "paramidx"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "bandtype"
      },
      {
        "type": "integer",
        "name": "bandidx"
      },
      {
        "type": "integer",
        "name": "paramtype"
      },
      {
        "type": "number",
        "name": "normval"
      }
    ],
    "namespace": "reaper",
    "description": "Returns false if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\nSee TrackFX_GetEQ, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_GetFloatingWindow track index) :: (HWND)",
    "doc": "(reaper.TrackFX_GetFloatingWindow track index) :: (HWND)\ntrack :: MediaTrack\nindex :: integer\nreturns HWND of floating window for effect index, if any FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_GetFloatingWindow",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "index"
      }
    ],
    "returns": [
      {
        "type": "HWND"
      }
    ],
    "namespace": "reaper",
    "description": "returns HWND of floating window for effect index, if any FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_GetFormattedParamValue track fx param) :: (boolean string)",
    "doc": "(reaper.TrackFX_GetFormattedParamValue track fx param) :: (boolean string)\ntrack :: MediaTrack\nfx :: integer\nparam :: integer\nFX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_GetFormattedParamValue",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_GetFXGUID track fx) :: (string)",
    "doc": "(reaper.TrackFX_GetFXGUID track fx) :: (string)\ntrack :: MediaTrack\nfx :: integer\nFX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_GetFXGUID",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "GUID"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_GetFXName track fx) :: (boolean string)",
    "doc": "(reaper.TrackFX_GetFXName track fx) :: (boolean string)\ntrack :: MediaTrack\nfx :: integer\nFX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_GetFXName",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_GetInstrument track) :: (integer)",
    "doc": "(reaper.TrackFX_GetInstrument track) :: (integer)\ntrack :: MediaTrack\nGet the index of the first track FX insert that is a virtual instrument, or -1 if none. See TrackFX_GetEQ, TrackFX_GetByName.",
    "name": "TrackFX_GetInstrument",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Get the index of the first track FX insert that is a virtual instrument, or -1 if none. See TrackFX_GetEQ, TrackFX_GetByName."
  },
  {
    "form": "(reaper.TrackFX_GetIOSize track fx) :: (integer integer integer)",
    "doc": "(reaper.TrackFX_GetIOSize track fx) :: (integer integer integer)\ntrack :: MediaTrack\nfx :: integer\nGets the number of input/output pins for FX if available, returns plug-in type or -1 on error FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_GetIOSize",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "inputPins"
      },
      {
        "type": "integer",
        "name": "outputPins"
      }
    ],
    "namespace": "reaper",
    "description": "Gets the number of input/output pins for FX if available, returns plug-in type or -1 on error FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_GetNamedConfigParm track fx parmname) :: (boolean string)",
    "doc": "(reaper.TrackFX_GetNamedConfigParm track fx parmname) :: (boolean string)\ntrack :: MediaTrack\nfx :: integer\nparmname :: string\ngets plug-in specific named configuration value (returns true on success). \nSupported values for read:\npdc : PDC latency\nin_pin_X : name of input pin X\nout_pin_X : name of output pin X\nfx_type : type string\nfx_ident : type-specific identifier\nfx_name : name of FX (also supported as original_name)\nGainReduction_dB : [ReaComp + other supported compressors]\nparent_container : FX ID of parent container, if any (v7.06+)\ncontainer_count : [Container] number of FX in container\ncontainer_item.X : FX ID of item in container (first item is container_item.0) (v7.06+)\nparam.X.container_map.hint_id : unique ID of mapping (preserved if mapping order changes)\nparam.X.container_map.delete : read this value in order to remove the mapping for this parameter\ncontainer_map.add : read from this value to add a new container parameter mapping -- will return new parameter index (accessed via param.X.container_map.*)\ncontainer_map.add.FXID.PARMIDX : read from this value to add/get container parameter mapping for FXID/PARMIDX -- will return the parameter index (accessed via param.X.container_map.*). FXID can be a full address (must be a child of the container) or a 0-based sub-index (v7.06+).\ncontainer_map.get.FXID.PARMIDX : read from this value to get container parameter mapping for FXID/PARMIDX -- will return the parameter index (accessed via param.X.container_map.*). FXID can be a full address (must be a child of the container) or a 0-based sub-index (v7.06+).\nchain_pdc_actual : returns the actual chain latency in samples, only valid after playback has commenced, may be rounded up to block size.\nchain_pdc_reporting : returns the reported chain latency, always valid, not rounded to block size.\nSupported values for read/write:\nvst_chunk[_program] : base64-encoded VST-specific chunk.\nclap_chunk : base64-encoded CLAP-specific chunk.\nparam.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state\nparam.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo,x2,y2] : parameter modulation ACS state\nparam.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*\nparam.X.mod.[active,baseline,visible] : parameter module global settings\nparam.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set\nparam.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)\nparam.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX only, &8=LFO retrigger, &16=visible FX only\nparam.X.container_map.fx_index : index of FX contained in container\nparam.X.container_map.fx_parm : parameter index of parameter of FX contained in container\nparam.X.container_map.aliased_name : name of parameter (if user-renamed, otherwise fails)\nBANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]\nTHRESHOLD, CEILING, TRUEPEAK : [ReaLimit]\nNUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]\nITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE\nFILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE\nMODE, RSMODE : [RS5k] general mode, resample mode\nVIDEO_CODE : [video processor] code\nforce_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence\nparallel : 0, 1 or 2 - 1=process plug-in in parallel with previous, 2=process plug-in parallel and merge MIDI\ninstance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)\nchain_sel : selected/visible FX in chain\nrenamed_name : renamed FX instance name (empty string = not renamed)\ncontainer_nch : number of internal channels for container\ncontainer_nch_in : number of input pins for container\ncontainer_nch_out : number of output pints for container\ncontainer_nch_feedback : number of internal feedback channels enabled in container\nfocused : reading returns 1 if focused. Writing a positive value to this sets the FX UI as \"last focused.\"\nlast_touched : reading returns two integers, one indicates whether FX is the last-touched FX, the second indicates which parameter was last touched. Writing a negative value ensures this plug-in is not set as last touched, otherwise the FX is set \"last touched,\" and last touched parameter index is set to the value in the string (if valid).\n FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_GetNamedConfigParm",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "string",
        "name": "parmname"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "gets plug-in specific named configuration value (returns true on success). \nSupported values for read:\npdc : PDC latency\nin_pin_X : name of input pin X\nout_pin_X : name of output pin X\nfx_type : type string\nfx_ident : type-specific identifier\nfx_name : name of FX (also supported as original_name)\nGainReduction_dB : [ReaComp + other supported compressors]\nparent_container : FX ID of parent container, if any (v7.06+)\ncontainer_count : [Container] number of FX in container\ncontainer_item.X : FX ID of item in container (first item is container_item.0) (v7.06+)\nparam.X.container_map.hint_id : unique ID of mapping (preserved if mapping order changes)\nparam.X.container_map.delete : read this value in order to remove the mapping for this parameter\ncontainer_map.add : read from this value to add a new container parameter mapping -- will return new parameter index (accessed via param.X.container_map.*)\ncontainer_map.add.FXID.PARMIDX : read from this value to add/get container parameter mapping for FXID/PARMIDX -- will return the parameter index (accessed via param.X.container_map.*). FXID can be a full address (must be a child of the container) or a 0-based sub-index (v7.06+).\ncontainer_map.get.FXID.PARMIDX : read from this value to get container parameter mapping for FXID/PARMIDX -- will return the parameter index (accessed via param.X.container_map.*). FXID can be a full address (must be a child of the container) or a 0-based sub-index (v7.06+).\nchain_pdc_actual : returns the actual chain latency in samples, only valid after playback has commenced, may be rounded up to block size.\nchain_pdc_reporting : returns the reported chain latency, always valid, not rounded to block size.\nSupported values for read/write:\nvst_chunk[_program] : base64-encoded VST-specific chunk.\nclap_chunk : base64-encoded CLAP-specific chunk.\nparam.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state\nparam.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo,x2,y2] : parameter modulation ACS state\nparam.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*\nparam.X.mod.[active,baseline,visible] : parameter module global settings\nparam.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set\nparam.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)\nparam.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX only, &8=LFO retrigger, &16=visible FX only\nparam.X.container_map.fx_index : index of FX contained in container\nparam.X.container_map.fx_parm : parameter index of parameter of FX contained in container\nparam.X.container_map.aliased_name : name of parameter (if user-renamed, otherwise fails)\nBANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]\nTHRESHOLD, CEILING, TRUEPEAK : [ReaLimit]\nNUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]\nITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE\nFILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE\nMODE, RSMODE : [RS5k] general mode, resample mode\nVIDEO_CODE : [video processor] code\nforce_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence\nparallel : 0, 1 or 2 - 1=process plug-in in parallel with previous, 2=process plug-in parallel and merge MIDI\ninstance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)\nchain_sel : selected/visible FX in chain\nrenamed_name : renamed FX instance name (empty string = not renamed)\ncontainer_nch : number of internal channels for container\ncontainer_nch_in : number of input pins for container\ncontainer_nch_out : number of output pints for container\ncontainer_nch_feedback : number of internal feedback channels enabled in container\nfocused : reading returns 1 if focused. Writing a positive value to this sets the FX UI as \"last focused.\"\nlast_touched : reading returns two integers, one indicates whether FX is the last-touched FX, the second indicates which parameter was last touched. Writing a negative value ensures this plug-in is not set as last touched, otherwise the FX is set \"last touched,\" and last touched parameter index is set to the value in the string (if valid).\n FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_GetNumParams track fx) :: (integer)",
    "doc": "(reaper.TrackFX_GetNumParams track fx) :: (integer)\ntrack :: MediaTrack\nfx :: integer\nFX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_GetNumParams",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_GetOffline track fx) :: (boolean)",
    "doc": "(reaper.TrackFX_GetOffline track fx) :: (boolean)\ntrack :: MediaTrack\nfx :: integer\nSee TrackFX_SetOffline FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_GetOffline",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "See TrackFX_SetOffline FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_GetOpen track fx) :: (boolean)",
    "doc": "(reaper.TrackFX_GetOpen track fx) :: (boolean)\ntrack :: MediaTrack\nfx :: integer\nReturns true if this FX UI is open in the FX chain window or a floating window. See TrackFX_SetOpen FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_GetOpen",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Returns true if this FX UI is open in the FX chain window or a floating window. See TrackFX_SetOpen FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_GetParam track fx param) :: (number number number)",
    "doc": "(reaper.TrackFX_GetParam track fx param) :: (number number number)\ntrack :: MediaTrack\nfx :: integer\nparam :: integer\nFX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_GetParam",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "minval"
      },
      {
        "type": "number",
        "name": "maxval"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_GetParameterStepSizes track fx param) :: (boolean number number number boolean)",
    "doc": "(reaper.TrackFX_GetParameterStepSizes track fx param) :: (boolean number number number boolean)\ntrack :: MediaTrack\nfx :: integer\nparam :: integer\nFX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_GetParameterStepSizes",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "step"
      },
      {
        "type": "number",
        "name": "smallstep"
      },
      {
        "type": "number",
        "name": "largestep"
      },
      {
        "type": "boolean",
        "name": "istoggle"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_GetParamEx track fx param) :: (number number number number)",
    "doc": "(reaper.TrackFX_GetParamEx track fx param) :: (number number number number)\ntrack :: MediaTrack\nfx :: integer\nparam :: integer\nFX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_GetParamEx",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "minval"
      },
      {
        "type": "number",
        "name": "maxval"
      },
      {
        "type": "number",
        "name": "midval"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_GetParamFromIdent track fx ident_str) :: (integer)",
    "doc": "(reaper.TrackFX_GetParamFromIdent track fx ident_str) :: (integer)\ntrack :: MediaTrack\nfx :: integer\nident_str :: string\ngets the parameter index from an identifying string (:wet, :bypass, :delta, or a string returned from GetParamIdent), or -1 if unknown. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_GetParamFromIdent",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "string",
        "name": "ident_str"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "gets the parameter index from an identifying string (:wet, :bypass, :delta, or a string returned from GetParamIdent), or -1 if unknown. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_GetParamIdent track fx param) :: (boolean string)",
    "doc": "(reaper.TrackFX_GetParamIdent track fx param) :: (boolean string)\ntrack :: MediaTrack\nfx :: integer\nparam :: integer\ngets an identifying string for the parameter FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_GetParamIdent",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "gets an identifying string for the parameter FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_GetParamName track fx param) :: (boolean string)",
    "doc": "(reaper.TrackFX_GetParamName track fx param) :: (boolean string)\ntrack :: MediaTrack\nfx :: integer\nparam :: integer\nFX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_GetParamName",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_GetParamNormalized track fx param) :: (number)",
    "doc": "(reaper.TrackFX_GetParamNormalized track fx param) :: (number)\ntrack :: MediaTrack\nfx :: integer\nparam :: integer\nFX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_GetParamNormalized",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_GetPinMappings tr fx isoutput pin) :: (integer integer)",
    "doc": "(reaper.TrackFX_GetPinMappings tr fx isoutput pin) :: (integer integer)\ntr :: MediaTrack\nfx :: integer\nisoutput :: integer\npin :: integer\ngets the effective channel mapping bitmask for a particular pin. high32Out will be set to the high 32 bits. Add 0x1000000 to pin index in order to access the second 64 bits of mappings independent of the first 64 bits. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_GetPinMappings",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "isoutput"
      },
      {
        "type": "integer",
        "name": "pin"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "high32"
      }
    ],
    "namespace": "reaper",
    "description": "gets the effective channel mapping bitmask for a particular pin. high32Out will be set to the high 32 bits. Add 0x1000000 to pin index in order to access the second 64 bits of mappings independent of the first 64 bits. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_GetPreset track fx) :: (boolean string)",
    "doc": "(reaper.TrackFX_GetPreset track fx) :: (boolean string)\ntrack :: MediaTrack\nfx :: integer\nGet the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). See TrackFX_SetPreset. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_GetPreset",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "presetname"
      }
    ],
    "namespace": "reaper",
    "description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). See TrackFX_SetPreset. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_GetPresetIndex track fx) :: (integer integer)",
    "doc": "(reaper.TrackFX_GetPresetIndex track fx) :: (integer integer)\ntrack :: MediaTrack\nfx :: integer\nReturns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TrackFX_SetPresetByIndex FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_GetPresetIndex",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "numberOfPresets"
      }
    ],
    "namespace": "reaper",
    "description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TrackFX_SetPresetByIndex FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_GetRecChainVisible track) :: (integer)",
    "doc": "(reaper.TrackFX_GetRecChainVisible track) :: (integer)\ntrack :: MediaTrack\nreturns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected",
    "name": "TrackFX_GetRecChainVisible",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "returns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected"
  },
  {
    "form": "(reaper.TrackFX_GetRecCount track) :: (integer)",
    "doc": "(reaper.TrackFX_GetRecCount track) :: (integer)\ntrack :: MediaTrack\nreturns count of record input FX. To access record input FX, use a FX indices [0x1000000..0x1000000+n). On the master track, this accesses monitoring FX rather than record input FX.",
    "name": "TrackFX_GetRecCount",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "returns count of record input FX. To access record input FX, use a FX indices [0x1000000..0x1000000+n). On the master track, this accesses monitoring FX rather than record input FX."
  },
  {
    "form": "(reaper.TrackFX_GetUserPresetFilename track fx) :: (string)",
    "doc": "(reaper.TrackFX_GetUserPresetFilename track fx) :: (string)\ntrack :: MediaTrack\nfx :: integer\nFX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_GetUserPresetFilename",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "fn"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_NavigatePresets track fx presetmove) :: (boolean)",
    "doc": "(reaper.TrackFX_NavigatePresets track fx presetmove) :: (boolean)\ntrack :: MediaTrack\nfx :: integer\npresetmove :: integer\npresetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_NavigatePresets",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "presetmove"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_SetEnabled track fx enabled) :: nil",
    "doc": "(reaper.TrackFX_SetEnabled track fx enabled) :: nil\ntrack :: MediaTrack\nfx :: integer\nenabled :: boolean\nSee TrackFX_GetEnabled FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_SetEnabled",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "boolean",
        "name": "enabled"
      }
    ],
    "namespace": "reaper",
    "description": "See TrackFX_GetEnabled FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_SetEQBandEnabled track fxidx bandtype bandidx enable) :: (boolean)",
    "doc": "(reaper.TrackFX_SetEQBandEnabled track fxidx bandtype bandidx enable) :: (boolean)\ntrack :: MediaTrack\nfxidx :: integer\nbandtype :: integer\nbandidx :: integer\nenable :: boolean\nEnable or disable a ReaEQ band.\nReturns false if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_SetEQBandEnabled",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fxidx"
      },
      {
        "type": "integer",
        "name": "bandtype"
      },
      {
        "type": "integer",
        "name": "bandidx"
      },
      {
        "type": "boolean",
        "name": "enable"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Enable or disable a ReaEQ band.\nReturns false if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_SetEQParam track fxidx bandtype bandidx paramtype val isnorm) :: (boolean)",
    "doc": "(reaper.TrackFX_SetEQParam track fxidx bandtype bandidx paramtype val isnorm) :: (boolean)\ntrack :: MediaTrack\nfxidx :: integer\nbandtype :: integer\nbandidx :: integer\nparamtype :: integer\nval :: number\nisnorm :: boolean\nReturns false if track/fxidx is not ReaEQ. Targets a band matching bandtype.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_SetEQParam",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fxidx"
      },
      {
        "type": "integer",
        "name": "bandtype"
      },
      {
        "type": "integer",
        "name": "bandidx"
      },
      {
        "type": "integer",
        "name": "paramtype"
      },
      {
        "type": "number",
        "name": "val"
      },
      {
        "type": "boolean",
        "name": "isnorm"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Returns false if track/fxidx is not ReaEQ. Targets a band matching bandtype.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_SetNamedConfigParm track fx parmname value) :: (boolean)",
    "doc": "(reaper.TrackFX_SetNamedConfigParm track fx parmname value) :: (boolean)\ntrack :: MediaTrack\nfx :: integer\nparmname :: string\nvalue :: string\nsets plug-in specific named configuration value (returns true on success).\nSupport values for write:\nvst_chunk[_program] : base64-encoded VST-specific chunk.\nclap_chunk : base64-encoded CLAP-specific chunk.\nparam.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state\nparam.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo,x2,y2] : parameter modulation ACS state\nparam.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*\nparam.X.mod.[active,baseline,visible] : parameter module global settings\nparam.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set\nparam.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)\nparam.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX only, &8=LFO retrigger, &16=visible FX only\nparam.X.container_map.fx_index : index of FX contained in container\nparam.X.container_map.fx_parm : parameter index of parameter of FX contained in container\nparam.X.container_map.aliased_name : name of parameter (if user-renamed, otherwise fails)\nBANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]\nTHRESHOLD, CEILING, TRUEPEAK : [ReaLimit]\nNUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]\nITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE\nFILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE\nMODE, RSMODE : [RS5k] general mode, resample mode\nVIDEO_CODE : [video processor] code\nforce_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence\nparallel : 0, 1 or 2 - 1=process plug-in in parallel with previous, 2=process plug-in parallel and merge MIDI\ninstance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)\nchain_sel : selected/visible FX in chain\nrenamed_name : renamed FX instance name (empty string = not renamed)\ncontainer_nch : number of internal channels for container\ncontainer_nch_in : number of input pins for container\ncontainer_nch_out : number of output pints for container\ncontainer_nch_feedback : number of internal feedback channels enabled in container\nfocused : reading returns 1 if focused. Writing a positive value to this sets the FX UI as \"last focused.\"\nlast_touched : reading returns two integers, one indicates whether FX is the last-touched FX, the second indicates which parameter was last touched. Writing a negative value ensures this plug-in is not set as last touched, otherwise the FX is set \"last touched,\" and last touched parameter index is set to the value in the string (if valid).\n FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_SetNamedConfigParm",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "string",
        "name": "parmname"
      },
      {
        "type": "string",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "sets plug-in specific named configuration value (returns true on success).\nSupport values for write:\nvst_chunk[_program] : base64-encoded VST-specific chunk.\nclap_chunk : base64-encoded CLAP-specific chunk.\nparam.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state\nparam.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo,x2,y2] : parameter modulation ACS state\nparam.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*\nparam.X.mod.[active,baseline,visible] : parameter module global settings\nparam.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set\nparam.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)\nparam.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX only, &8=LFO retrigger, &16=visible FX only\nparam.X.container_map.fx_index : index of FX contained in container\nparam.X.container_map.fx_parm : parameter index of parameter of FX contained in container\nparam.X.container_map.aliased_name : name of parameter (if user-renamed, otherwise fails)\nBANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]\nTHRESHOLD, CEILING, TRUEPEAK : [ReaLimit]\nNUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]\nITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE\nFILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE\nMODE, RSMODE : [RS5k] general mode, resample mode\nVIDEO_CODE : [video processor] code\nforce_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence\nparallel : 0, 1 or 2 - 1=process plug-in in parallel with previous, 2=process plug-in parallel and merge MIDI\ninstance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)\nchain_sel : selected/visible FX in chain\nrenamed_name : renamed FX instance name (empty string = not renamed)\ncontainer_nch : number of internal channels for container\ncontainer_nch_in : number of input pins for container\ncontainer_nch_out : number of output pints for container\ncontainer_nch_feedback : number of internal feedback channels enabled in container\nfocused : reading returns 1 if focused. Writing a positive value to this sets the FX UI as \"last focused.\"\nlast_touched : reading returns two integers, one indicates whether FX is the last-touched FX, the second indicates which parameter was last touched. Writing a negative value ensures this plug-in is not set as last touched, otherwise the FX is set \"last touched,\" and last touched parameter index is set to the value in the string (if valid).\n FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_SetOffline track fx offline) :: nil",
    "doc": "(reaper.TrackFX_SetOffline track fx offline) :: nil\ntrack :: MediaTrack\nfx :: integer\noffline :: boolean\nSee TrackFX_GetOffline FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_SetOffline",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "boolean",
        "name": "offline"
      }
    ],
    "namespace": "reaper",
    "description": "See TrackFX_GetOffline FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_SetOpen track fx open) :: nil",
    "doc": "(reaper.TrackFX_SetOpen track fx open) :: nil\ntrack :: MediaTrack\nfx :: integer\nopen :: boolean\nOpen this FX UI. See TrackFX_GetOpen FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_SetOpen",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "boolean",
        "name": "open"
      }
    ],
    "namespace": "reaper",
    "description": "Open this FX UI. See TrackFX_GetOpen FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_SetParam track fx param val) :: (boolean)",
    "doc": "(reaper.TrackFX_SetParam track fx param val) :: (boolean)\ntrack :: MediaTrack\nfx :: integer\nparam :: integer\nval :: number\nFX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_SetParam",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      },
      {
        "type": "number",
        "name": "val"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_SetParamNormalized track fx param value) :: (boolean)",
    "doc": "(reaper.TrackFX_SetParamNormalized track fx param value) :: (boolean)\ntrack :: MediaTrack\nfx :: integer\nparam :: integer\nvalue :: number\nFX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_SetParamNormalized",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      },
      {
        "type": "number",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_SetPinMappings tr fx isoutput pin low32bits hi32bits) :: (boolean)",
    "doc": "(reaper.TrackFX_SetPinMappings tr fx isoutput pin low32bits hi32bits) :: (boolean)\ntr :: MediaTrack\nfx :: integer\nisoutput :: integer\npin :: integer\nlow32bits :: integer\nhi32bits :: integer\nsets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability). Add 0x1000000 to pin index in order to access the second 64 bits of mappings independent of the first 64 bits. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_SetPinMappings",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "isoutput"
      },
      {
        "type": "integer",
        "name": "pin"
      },
      {
        "type": "integer",
        "name": "low32bits"
      },
      {
        "type": "integer",
        "name": "hi32bits"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability). Add 0x1000000 to pin index in order to access the second 64 bits of mappings independent of the first 64 bits. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_SetPreset track fx presetname) :: (boolean)",
    "doc": "(reaper.TrackFX_SetPreset track fx presetname) :: (boolean)\ntrack :: MediaTrack\nfx :: integer\npresetname :: string\nActivate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TrackFX_GetPreset. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_SetPreset",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "string",
        "name": "presetname"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TrackFX_GetPreset. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_SetPresetByIndex track fx idx) :: (boolean)",
    "doc": "(reaper.TrackFX_SetPresetByIndex track fx idx) :: (boolean)\ntrack :: MediaTrack\nfx :: integer\nidx :: integer\nSets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TrackFX_GetPresetIndex. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_SetPresetByIndex",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "idx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TrackFX_GetPresetIndex. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackFX_Show track index showFlag) :: nil",
    "doc": "(reaper.TrackFX_Show track index showFlag) :: nil\ntrack :: MediaTrack\nindex :: integer\nshowFlag :: integer\nshowflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid) FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X.",
    "name": "TrackFX_Show",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "index"
      },
      {
        "type": "integer",
        "name": "showFlag"
      }
    ],
    "namespace": "reaper",
    "description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid) FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic. In REAPER v7.06+, you can use the much more convenient method to navigate hierarchies, see TrackFX_GetNamedConfigParm with parent_container and container_item.X."
  },
  {
    "form": "(reaper.TrackList_AdjustWindows isMinor) :: nil",
    "doc": "(reaper.TrackList_AdjustWindows isMinor) :: nil\nisMinor :: boolean\n",
    "name": "TrackList_AdjustWindows",
    "params": [
      {
        "type": "boolean",
        "name": "isMinor"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.TrackList_UpdateAllExternalSurfaces ) :: nil",
    "doc": "(reaper.TrackList_UpdateAllExternalSurfaces ) :: nil\n",
    "name": "TrackList_UpdateAllExternalSurfaces",
    "namespace": "reaper"
  },
  {
    "form": "(reaper.Undo_BeginBlock ) :: nil",
    "doc": "(reaper.Undo_BeginBlock ) :: nil\ncall to start a new block",
    "name": "Undo_BeginBlock",
    "namespace": "reaper",
    "description": "call to start a new block"
  },
  {
    "form": "(reaper.Undo_BeginBlock2 proj) :: nil",
    "doc": "(reaper.Undo_BeginBlock2 proj) :: nil\nproj :: ReaProject\ncall to start a new block",
    "name": "Undo_BeginBlock2",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "namespace": "reaper",
    "description": "call to start a new block"
  },
  {
    "form": "(reaper.Undo_CanRedo2 proj) :: (string)",
    "doc": "(reaper.Undo_CanRedo2 proj) :: (string)\nproj :: ReaProject\nreturns string of next action,if able,NULL if not",
    "name": "Undo_CanRedo2",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "returns string of next action,if able,NULL if not"
  },
  {
    "form": "(reaper.Undo_CanUndo2 proj) :: (string)",
    "doc": "(reaper.Undo_CanUndo2 proj) :: (string)\nproj :: ReaProject\nreturns string of last action,if able,NULL if not",
    "name": "Undo_CanUndo2",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "returns string of last action,if able,NULL if not"
  },
  {
    "form": "(reaper.Undo_DoRedo2 proj) :: (integer)",
    "doc": "(reaper.Undo_DoRedo2 proj) :: (integer)\nproj :: ReaProject\nnonzero if success",
    "name": "Undo_DoRedo2",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "nonzero if success"
  },
  {
    "form": "(reaper.Undo_DoUndo2 proj) :: (integer)",
    "doc": "(reaper.Undo_DoUndo2 proj) :: (integer)\nproj :: ReaProject\nnonzero if success",
    "name": "Undo_DoUndo2",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "nonzero if success"
  },
  {
    "form": "(reaper.Undo_EndBlock descchange extraflags) :: nil",
    "doc": "(reaper.Undo_EndBlock descchange extraflags) :: nil\ndescchange :: string\nextraflags :: integer\ncall to end the block,with extra flags if any,and a description",
    "name": "Undo_EndBlock",
    "params": [
      {
        "type": "string",
        "name": "descchange"
      },
      {
        "type": "integer",
        "name": "extraflags"
      }
    ],
    "namespace": "reaper",
    "description": "call to end the block,with extra flags if any,and a description"
  },
  {
    "form": "(reaper.Undo_EndBlock2 proj descchange extraflags) :: nil",
    "doc": "(reaper.Undo_EndBlock2 proj descchange extraflags) :: nil\nproj :: ReaProject\ndescchange :: string\nextraflags :: integer\ncall to end the block,with extra flags if any,and a description",
    "name": "Undo_EndBlock2",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "string",
        "name": "descchange"
      },
      {
        "type": "integer",
        "name": "extraflags"
      }
    ],
    "namespace": "reaper",
    "description": "call to end the block,with extra flags if any,and a description"
  },
  {
    "form": "(reaper.Undo_OnStateChange descchange) :: nil",
    "doc": "(reaper.Undo_OnStateChange descchange) :: nil\ndescchange :: string\nlimited state change to items",
    "name": "Undo_OnStateChange",
    "params": [
      {
        "type": "string",
        "name": "descchange"
      }
    ],
    "namespace": "reaper",
    "description": "limited state change to items"
  },
  {
    "form": "(reaper.Undo_OnStateChange2 proj descchange) :: nil",
    "doc": "(reaper.Undo_OnStateChange2 proj descchange) :: nil\nproj :: ReaProject\ndescchange :: string\nlimited state change to items",
    "name": "Undo_OnStateChange2",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "string",
        "name": "descchange"
      }
    ],
    "namespace": "reaper",
    "description": "limited state change to items"
  },
  {
    "form": "(reaper.Undo_OnStateChange_Item proj name item) :: nil",
    "doc": "(reaper.Undo_OnStateChange_Item proj name item) :: nil\nproj :: ReaProject\nname :: string\nitem :: MediaItem\n",
    "name": "Undo_OnStateChange_Item",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "MediaItem",
        "name": "item"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.Undo_OnStateChangeEx descchange whichStates trackparm) :: nil",
    "doc": "(reaper.Undo_OnStateChangeEx descchange whichStates trackparm) :: nil\ndescchange :: string\nwhichStates :: integer\ntrackparm :: integer\ntrackparm=-1 by default,or if updating one fx chain,you can specify track index",
    "name": "Undo_OnStateChangeEx",
    "params": [
      {
        "type": "string",
        "name": "descchange"
      },
      {
        "type": "integer",
        "name": "whichStates"
      },
      {
        "type": "integer",
        "name": "trackparm"
      }
    ],
    "namespace": "reaper",
    "description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index"
  },
  {
    "form": "(reaper.Undo_OnStateChangeEx2 proj descchange whichStates trackparm) :: nil",
    "doc": "(reaper.Undo_OnStateChangeEx2 proj descchange whichStates trackparm) :: nil\nproj :: ReaProject\ndescchange :: string\nwhichStates :: integer\ntrackparm :: integer\ntrackparm=-1 by default,or if updating one fx chain,you can specify track index",
    "name": "Undo_OnStateChangeEx2",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "string",
        "name": "descchange"
      },
      {
        "type": "integer",
        "name": "whichStates"
      },
      {
        "type": "integer",
        "name": "trackparm"
      }
    ],
    "namespace": "reaper",
    "description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index"
  },
  {
    "form": "(reaper.UpdateArrange ) :: nil",
    "doc": "(reaper.UpdateArrange ) :: nil\nRedraw the arrange view",
    "name": "UpdateArrange",
    "namespace": "reaper",
    "description": "Redraw the arrange view"
  },
  {
    "form": "(reaper.UpdateItemInProject item) :: nil",
    "doc": "(reaper.UpdateItemInProject item) :: nil\nitem :: MediaItem\n",
    "name": "UpdateItemInProject",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.UpdateItemLanes proj) :: (boolean)",
    "doc": "(reaper.UpdateItemLanes proj) :: (boolean)\nproj :: ReaProject\nRecalculate lane arrangement for fixed lane tracks, including auto-removing empty lanes at the bottom of the track",
    "name": "UpdateItemLanes",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Recalculate lane arrangement for fixed lane tracks, including auto-removing empty lanes at the bottom of the track"
  },
  {
    "form": "(reaper.UpdateTimeline ) :: nil",
    "doc": "(reaper.UpdateTimeline ) :: nil\nRedraw the arrange view and ruler",
    "name": "UpdateTimeline",
    "namespace": "reaper",
    "description": "Redraw the arrange view and ruler"
  },
  {
    "form": "(reaper.ValidatePtr pointer ctypename) :: (boolean)",
    "doc": "(reaper.ValidatePtr pointer ctypename) :: (boolean)\npointer :: identifier\nctypename :: string\nsee ValidatePtr2",
    "name": "ValidatePtr",
    "params": [
      {
        "type": "identifier",
        "name": "pointer"
      },
      {
        "type": "string",
        "name": "ctypename"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "see ValidatePtr2"
  },
  {
    "form": "(reaper.ValidatePtr2 proj pointer ctypename) :: (boolean)",
    "doc": "(reaper.ValidatePtr2 proj pointer ctypename) :: (boolean)\nproj :: ReaProject\npointer :: identifier\nctypename :: string\nReturn true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). Supported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*.",
    "name": "ValidatePtr2",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "identifier",
        "name": "pointer"
      },
      {
        "type": "string",
        "name": "ctypename"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Return true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). Supported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*."
  },
  {
    "form": "(reaper.ViewPrefs page pageByName) :: nil",
    "doc": "(reaper.ViewPrefs page pageByName) :: nil\npage :: integer\npageByName :: string\nOpens the prefs to a page, use pageByName if page is 0.",
    "name": "ViewPrefs",
    "params": [
      {
        "type": "integer",
        "name": "page"
      },
      {
        "type": "string",
        "name": "pageByName"
      }
    ],
    "namespace": "reaper",
    "description": "Opens the prefs to a page, use pageByName if page is 0."
  },
  {
    "form": "(reaper.BR_EnvAlloc envelope takeEnvelopesUseProjectTime) :: (BR_Envelope)",
    "doc": "(reaper.BR_EnvAlloc envelope takeEnvelopesUseProjectTime) :: (BR_Envelope)\nenvelope :: TrackEnvelope\ntakeEnvelopesUseProjectTime :: boolean\n[BR] Allocate envelope object from track or take envelope pointer. Always call BR_EnvFree when done to release the object and commit changes if needed.\n takeEnvelopesUseProjectTime: take envelope points' positions are counted from take position, not project start time. If you want to work with project time instead, pass this as true.\nFor further manipulation see BR_EnvCountPoints, BR_EnvDeletePoint, BR_EnvFind, BR_EnvFindNext, BR_EnvFindPrevious, BR_EnvGetParentTake, BR_EnvGetParentTrack, BR_EnvGetPoint, BR_EnvGetProperties, BR_EnvSetPoint, BR_EnvSetProperties, BR_EnvValueAtPos.",
    "name": "BR_EnvAlloc",
    "params": [
      {
        "type": "TrackEnvelope",
        "name": "envelope"
      },
      {
        "type": "boolean",
        "name": "takeEnvelopesUseProjectTime"
      }
    ],
    "returns": [
      {
        "type": "BR_Envelope"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Allocate envelope object from track or take envelope pointer. Always call BR_EnvFree when done to release the object and commit changes if needed.\n takeEnvelopesUseProjectTime: take envelope points' positions are counted from take position, not project start time. If you want to work with project time instead, pass this as true.\nFor further manipulation see BR_EnvCountPoints, BR_EnvDeletePoint, BR_EnvFind, BR_EnvFindNext, BR_EnvFindPrevious, BR_EnvGetParentTake, BR_EnvGetParentTrack, BR_EnvGetPoint, BR_EnvGetProperties, BR_EnvSetPoint, BR_EnvSetProperties, BR_EnvValueAtPos."
  },
  {
    "form": "(reaper.BR_EnvCountPoints envelope) :: (integer)",
    "doc": "(reaper.BR_EnvCountPoints envelope) :: (integer)\nenvelope :: BR_Envelope\n[BR] Count envelope points in the envelope object allocated with BR_EnvAlloc.",
    "name": "BR_EnvCountPoints",
    "params": [
      {
        "type": "BR_Envelope",
        "name": "envelope"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Count envelope points in the envelope object allocated with BR_EnvAlloc."
  },
  {
    "form": "(reaper.BR_EnvDeletePoint envelope id) :: (boolean)",
    "doc": "(reaper.BR_EnvDeletePoint envelope id) :: (boolean)\nenvelope :: BR_Envelope\nid :: integer\n[BR] Delete envelope point by index (zero-based) in the envelope object allocated with BR_EnvAlloc. Returns true on success.",
    "name": "BR_EnvDeletePoint",
    "params": [
      {
        "type": "BR_Envelope",
        "name": "envelope"
      },
      {
        "type": "integer",
        "name": "id"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Delete envelope point by index (zero-based) in the envelope object allocated with BR_EnvAlloc. Returns true on success."
  },
  {
    "form": "(reaper.BR_EnvFind envelope position delta) :: (integer)",
    "doc": "(reaper.BR_EnvFind envelope position delta) :: (integer)\nenvelope :: BR_Envelope\nposition :: number\ndelta :: number\n[BR] Find envelope point at time position in the envelope object allocated with BR_EnvAlloc. Pass delta > 0 to search surrounding range - in that case the closest point to position within delta will be searched for. Returns envelope point id (zero-based) on success or -1 on failure.",
    "name": "BR_EnvFind",
    "params": [
      {
        "type": "BR_Envelope",
        "name": "envelope"
      },
      {
        "type": "number",
        "name": "position"
      },
      {
        "type": "number",
        "name": "delta"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Find envelope point at time position in the envelope object allocated with BR_EnvAlloc. Pass delta > 0 to search surrounding range - in that case the closest point to position within delta will be searched for. Returns envelope point id (zero-based) on success or -1 on failure."
  },
  {
    "form": "(reaper.BR_EnvFindNext envelope position) :: (integer)",
    "doc": "(reaper.BR_EnvFindNext envelope position) :: (integer)\nenvelope :: BR_Envelope\nposition :: number\n[BR] Find next envelope point after time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure.",
    "name": "BR_EnvFindNext",
    "params": [
      {
        "type": "BR_Envelope",
        "name": "envelope"
      },
      {
        "type": "number",
        "name": "position"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Find next envelope point after time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure."
  },
  {
    "form": "(reaper.BR_EnvFindPrevious envelope position) :: (integer)",
    "doc": "(reaper.BR_EnvFindPrevious envelope position) :: (integer)\nenvelope :: BR_Envelope\nposition :: number\n[BR] Find previous envelope point before time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure.",
    "name": "BR_EnvFindPrevious",
    "params": [
      {
        "type": "BR_Envelope",
        "name": "envelope"
      },
      {
        "type": "number",
        "name": "position"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Find previous envelope point before time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure."
  },
  {
    "form": "(reaper.BR_EnvFree envelope commit) :: (boolean)",
    "doc": "(reaper.BR_EnvFree envelope commit) :: (boolean)\nenvelope :: BR_Envelope\ncommit :: boolean\n[BR] Free envelope object allocated with BR_EnvAlloc and commit changes if needed. Returns true if changes were committed successfully. Note that when envelope object wasn't modified nothing will get committed even if commit = true - in that case function returns false.",
    "name": "BR_EnvFree",
    "params": [
      {
        "type": "BR_Envelope",
        "name": "envelope"
      },
      {
        "type": "boolean",
        "name": "commit"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Free envelope object allocated with BR_EnvAlloc and commit changes if needed. Returns true if changes were committed successfully. Note that when envelope object wasn't modified nothing will get committed even if commit = true - in that case function returns false."
  },
  {
    "form": "(reaper.BR_EnvGetParentTake envelope) :: (MediaItem_Take)",
    "doc": "(reaper.BR_EnvGetParentTake envelope) :: (MediaItem_Take)\nenvelope :: BR_Envelope\n[BR] If envelope object allocated with BR_EnvAlloc is take envelope, returns parent media item take, otherwise NULL.",
    "name": "BR_EnvGetParentTake",
    "params": [
      {
        "type": "BR_Envelope",
        "name": "envelope"
      }
    ],
    "returns": [
      {
        "type": "MediaItem_Take"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] If envelope object allocated with BR_EnvAlloc is take envelope, returns parent media item take, otherwise NULL."
  },
  {
    "form": "(reaper.BR_EnvGetParentTrack envelope) :: (MediaTrack)",
    "doc": "(reaper.BR_EnvGetParentTrack envelope) :: (MediaTrack)\nenvelope :: BR_Envelope\n[BR] Get parent track of envelope object allocated with BR_EnvAlloc. If take envelope, returns NULL.",
    "name": "BR_EnvGetParentTrack",
    "params": [
      {
        "type": "BR_Envelope",
        "name": "envelope"
      }
    ],
    "returns": [
      {
        "type": "MediaTrack"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get parent track of envelope object allocated with BR_EnvAlloc. If take envelope, returns NULL."
  },
  {
    "form": "(reaper.BR_EnvGetPoint envelope id) :: (boolean number number integer boolean number)",
    "doc": "(reaper.BR_EnvGetPoint envelope id) :: (boolean number number integer boolean number)\nenvelope :: BR_Envelope\nid :: integer\n[BR] Get envelope point by id (zero-based) from the envelope object allocated with BR_EnvAlloc. Returns true on success.",
    "name": "BR_EnvGetPoint",
    "params": [
      {
        "type": "BR_Envelope",
        "name": "envelope"
      },
      {
        "type": "integer",
        "name": "id"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "position"
      },
      {
        "type": "number",
        "name": "value"
      },
      {
        "type": "integer",
        "name": "shape"
      },
      {
        "type": "boolean",
        "name": "selected"
      },
      {
        "type": "number",
        "name": "bezier"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get envelope point by id (zero-based) from the envelope object allocated with BR_EnvAlloc. Returns true on success."
  },
  {
    "form": "(reaper.BR_EnvGetProperties envelope) :: (boolean boolean boolean boolean integer integer number number number integer boolean integer)",
    "doc": "(reaper.BR_EnvGetProperties envelope) :: (boolean boolean boolean boolean integer integer number number number integer boolean integer)\nenvelope :: BR_Envelope\n[BR] Get envelope properties for the envelope object allocated with BR_EnvAlloc.\nactive: true if envelope is active\nvisible: true if envelope is visible\narmed: true if envelope is armed\ninLane: true if envelope has it's own envelope lane\nlaneHeight: envelope lane override height. 0 for none, otherwise size in pixels\ndefaultShape: default point shape: 0->Linear, 1->Square, 2->Slow start/end, 3->Fast start, 4->Fast end, 5->Bezier\nminValue: minimum envelope value\nmaxValue: maximum envelope value\ntype: envelope type: 0->Volume, 1->Volume (Pre-FX), 2->Pan, 3->Pan (Pre-FX), 4->Width, 5->Width (Pre-FX), 6->Mute, 7->Pitch, 8->Playrate, 9->Tempo map, 10->Parameter\nfaderScaling: true if envelope uses fader scaling\nautomationItemsOptions: -1->project default, &1=0->don't attach to underl. env., &1->attach to underl. env. on right side,  &2->attach to underl. env. on both sides, &4: bypass underl. env.",
    "name": "BR_EnvGetProperties",
    "params": [
      {
        "type": "BR_Envelope",
        "name": "envelope"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "active"
      },
      {
        "type": "boolean",
        "name": "visible"
      },
      {
        "type": "boolean",
        "name": "armed"
      },
      {
        "type": "boolean",
        "name": "inLane"
      },
      {
        "type": "integer",
        "name": "laneHeight"
      },
      {
        "type": "integer",
        "name": "defaultShape"
      },
      {
        "type": "number",
        "name": "minValue"
      },
      {
        "type": "number",
        "name": "maxValue"
      },
      {
        "type": "number",
        "name": "centerValue"
      },
      {
        "type": "integer",
        "name": "type"
      },
      {
        "type": "boolean",
        "name": "faderScaling"
      },
      {
        "type": "integer",
        "name": "automationItemsOptions",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get envelope properties for the envelope object allocated with BR_EnvAlloc.\nactive: true if envelope is active\nvisible: true if envelope is visible\narmed: true if envelope is armed\ninLane: true if envelope has it's own envelope lane\nlaneHeight: envelope lane override height. 0 for none, otherwise size in pixels\ndefaultShape: default point shape: 0->Linear, 1->Square, 2->Slow start/end, 3->Fast start, 4->Fast end, 5->Bezier\nminValue: minimum envelope value\nmaxValue: maximum envelope value\ntype: envelope type: 0->Volume, 1->Volume (Pre-FX), 2->Pan, 3->Pan (Pre-FX), 4->Width, 5->Width (Pre-FX), 6->Mute, 7->Pitch, 8->Playrate, 9->Tempo map, 10->Parameter\nfaderScaling: true if envelope uses fader scaling\nautomationItemsOptions: -1->project default, &1=0->don't attach to underl. env., &1->attach to underl. env. on right side,  &2->attach to underl. env. on both sides, &4: bypass underl. env."
  },
  {
    "form": "(reaper.BR_EnvSetPoint envelope id position value shape selected bezier) :: (boolean)",
    "doc": "(reaper.BR_EnvSetPoint envelope id position value shape selected bezier) :: (boolean)\nenvelope :: BR_Envelope\nid :: integer\nposition :: number\nvalue :: number\nshape :: integer\nselected :: boolean\nbezier :: number\n[BR] Set envelope point by id (zero-based) in the envelope object allocated with BR_EnvAlloc. To create point instead, pass id = -1. Note that if new point is inserted or existing point's time position is changed, points won't automatically get sorted. To do that, see BR_EnvSortPoints.\nReturns true on success.",
    "name": "BR_EnvSetPoint",
    "params": [
      {
        "type": "BR_Envelope",
        "name": "envelope"
      },
      {
        "type": "integer",
        "name": "id"
      },
      {
        "type": "number",
        "name": "position"
      },
      {
        "type": "number",
        "name": "value"
      },
      {
        "type": "integer",
        "name": "shape"
      },
      {
        "type": "boolean",
        "name": "selected"
      },
      {
        "type": "number",
        "name": "bezier"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Set envelope point by id (zero-based) in the envelope object allocated with BR_EnvAlloc. To create point instead, pass id = -1. Note that if new point is inserted or existing point's time position is changed, points won't automatically get sorted. To do that, see BR_EnvSortPoints.\nReturns true on success."
  },
  {
    "form": "(reaper.BR_EnvSetProperties envelope active visible armed inLane laneHeight defaultShape faderScaling ?automationItemsOptionsIn) :: nil",
    "doc": "(reaper.BR_EnvSetProperties envelope active visible armed inLane laneHeight defaultShape faderScaling ?automationItemsOptionsIn) :: nil\nenvelope :: BR_Envelope\nactive :: boolean\nvisible :: boolean\narmed :: boolean\ninLane :: boolean\nlaneHeight :: integer\ndefaultShape :: integer\nfaderScaling :: boolean\nautomationItemsOptionsIn :: integer (optional)\n[BR] Set envelope properties for the envelope object allocated with BR_EnvAlloc. For parameter description see BR_EnvGetProperties.\nSetting automationItemsOptions requires REAPER 5.979+.",
    "name": "BR_EnvSetProperties",
    "params": [
      {
        "type": "BR_Envelope",
        "name": "envelope"
      },
      {
        "type": "boolean",
        "name": "active"
      },
      {
        "type": "boolean",
        "name": "visible"
      },
      {
        "type": "boolean",
        "name": "armed"
      },
      {
        "type": "boolean",
        "name": "inLane"
      },
      {
        "type": "integer",
        "name": "laneHeight"
      },
      {
        "type": "integer",
        "name": "defaultShape"
      },
      {
        "type": "boolean",
        "name": "faderScaling"
      },
      {
        "type": "integer",
        "name": "automationItemsOptionsIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Set envelope properties for the envelope object allocated with BR_EnvAlloc. For parameter description see BR_EnvGetProperties.\nSetting automationItemsOptions requires REAPER 5.979+."
  },
  {
    "form": "(reaper.BR_EnvSortPoints envelope) :: nil",
    "doc": "(reaper.BR_EnvSortPoints envelope) :: nil\nenvelope :: BR_Envelope\n[BR] Sort envelope points by position. The only reason to call this is if sorted points are explicitly needed after editing them with BR_EnvSetPoint. Note that you do not have to call this before doing BR_EnvFree since it does handle unsorted points too.",
    "name": "BR_EnvSortPoints",
    "params": [
      {
        "type": "BR_Envelope",
        "name": "envelope"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Sort envelope points by position. The only reason to call this is if sorted points are explicitly needed after editing them with BR_EnvSetPoint. Note that you do not have to call this before doing BR_EnvFree since it does handle unsorted points too."
  },
  {
    "form": "(reaper.BR_EnvValueAtPos envelope position) :: (number)",
    "doc": "(reaper.BR_EnvValueAtPos envelope position) :: (number)\nenvelope :: BR_Envelope\nposition :: number\n[BR] Get envelope value at time position for the envelope object allocated with BR_EnvAlloc.",
    "name": "BR_EnvValueAtPos",
    "params": [
      {
        "type": "BR_Envelope",
        "name": "envelope"
      },
      {
        "type": "number",
        "name": "position"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get envelope value at time position for the envelope object allocated with BR_EnvAlloc."
  },
  {
    "form": "(reaper.BR_GetArrangeView proj) :: (number number)",
    "doc": "(reaper.BR_GetArrangeView proj) :: (number number)\nproj :: ReaProject\n[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Get start and end time position of arrange view. To set arrange view instead, see BR_SetArrangeView.",
    "name": "BR_GetArrangeView",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "startTime"
      },
      {
        "type": "number",
        "name": "endTime"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Get start and end time position of arrange view. To set arrange view instead, see BR_SetArrangeView."
  },
  {
    "form": "(reaper.BR_GetClosestGridDivision position) :: (number)",
    "doc": "(reaper.BR_GetClosestGridDivision position) :: (number)\nposition :: number\n[BR] Get closest grid division to position. Note that this functions is different from SnapToGrid in two regards. SnapToGrid() needs snap enabled to work and this one works always. Secondly, grid divisions are different from grid lines because some grid lines may be hidden due to zoom level - this function ignores grid line visibility and always searches for the closest grid division at given position. For more grid division functions, see BR_GetNextGridDivision and BR_GetPrevGridDivision.",
    "name": "BR_GetClosestGridDivision",
    "params": [
      {
        "type": "number",
        "name": "position"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get closest grid division to position. Note that this functions is different from SnapToGrid in two regards. SnapToGrid() needs snap enabled to work and this one works always. Secondly, grid divisions are different from grid lines because some grid lines may be hidden due to zoom level - this function ignores grid line visibility and always searches for the closest grid division at given position. For more grid division functions, see BR_GetNextGridDivision and BR_GetPrevGridDivision."
  },
  {
    "form": "(reaper.BR_GetCurrentTheme ) :: (string string)",
    "doc": "(reaper.BR_GetCurrentTheme ) :: (string string)\n[BR] Get current theme information. themePathOut is set to full theme path and themeNameOut is set to theme name excluding any path info and extension",
    "name": "BR_GetCurrentTheme",
    "returns": [
      {
        "type": "string",
        "name": "themePath"
      },
      {
        "type": "string",
        "name": "themeName"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get current theme information. themePathOut is set to full theme path and themeNameOut is set to theme name excluding any path info and extension"
  },
  {
    "form": "(reaper.BR_GetMediaItemByGUID proj guidStringIn) :: (MediaItem)",
    "doc": "(reaper.BR_GetMediaItemByGUID proj guidStringIn) :: (MediaItem)\nproj :: ReaProject\nguidStringIn :: string\n[BR] Get media item from GUID string. Note that the GUID must be enclosed in braces {}. To get item's GUID as a string, see BR_GetMediaItemGUID.",
    "name": "BR_GetMediaItemByGUID",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "string",
        "name": "guidStringIn"
      }
    ],
    "returns": [
      {
        "type": "MediaItem"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get media item from GUID string. Note that the GUID must be enclosed in braces {}. To get item's GUID as a string, see BR_GetMediaItemGUID."
  },
  {
    "form": "(reaper.BR_GetMediaItemGUID item) :: (string)",
    "doc": "(reaper.BR_GetMediaItemGUID item) :: (string)\nitem :: MediaItem\n[BR] Get media item GUID as a string (guidStringOut_sz should be at least 64). To get media item back from GUID string, see BR_GetMediaItemByGUID.",
    "name": "BR_GetMediaItemGUID",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "guidString"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get media item GUID as a string (guidStringOut_sz should be at least 64). To get media item back from GUID string, see BR_GetMediaItemByGUID."
  },
  {
    "form": "(reaper.BR_GetMediaItemImageResource item) :: (boolean string integer)",
    "doc": "(reaper.BR_GetMediaItemImageResource item) :: (boolean string integer)\nitem :: MediaItem\n[BR] Get currently loaded image resource and its flags for a given item. Returns false if there is no image resource set. To set image resource, see BR_SetMediaItemImageResource.",
    "name": "BR_GetMediaItemImageResource",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "image"
      },
      {
        "type": "integer",
        "name": "imageFlags"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get currently loaded image resource and its flags for a given item. Returns false if there is no image resource set. To set image resource, see BR_SetMediaItemImageResource."
  },
  {
    "form": "(reaper.BR_GetMediaItemTakeGUID take) :: (string)",
    "doc": "(reaper.BR_GetMediaItemTakeGUID take) :: (string)\ntake :: MediaItem_Take\n[BR] Get media item take GUID as a string (guidStringOut_sz should be at least 64). To get take from GUID string, see SNM_GetMediaItemTakeByGUID.",
    "name": "BR_GetMediaItemTakeGUID",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "guidString"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get media item take GUID as a string (guidStringOut_sz should be at least 64). To get take from GUID string, see SNM_GetMediaItemTakeByGUID."
  },
  {
    "form": "(reaper.BR_GetMediaSourceProperties take) :: (boolean boolean number number number boolean)",
    "doc": "(reaper.BR_GetMediaSourceProperties take) :: (boolean boolean number number number boolean)\ntake :: MediaItem_Take\n[BR] Get take media source properties as they appear in . Returns false if take can't have them (MIDI items etc.).\nTo set source properties, see BR_SetMediaSourceProperties.",
    "name": "BR_GetMediaSourceProperties",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "section"
      },
      {
        "type": "number",
        "name": "start"
      },
      {
        "type": "number",
        "name": "length"
      },
      {
        "type": "number",
        "name": "fade"
      },
      {
        "type": "boolean",
        "name": "reverse"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get take media source properties as they appear in . Returns false if take can't have them (MIDI items etc.).\nTo set source properties, see BR_SetMediaSourceProperties."
  },
  {
    "form": "(reaper.BR_GetMediaTrackByGUID proj guidStringIn) :: (MediaTrack)",
    "doc": "(reaper.BR_GetMediaTrackByGUID proj guidStringIn) :: (MediaTrack)\nproj :: ReaProject\nguidStringIn :: string\n[BR] Get media track from GUID string. Note that the GUID must be enclosed in braces {}. To get track's GUID as a string, see GetSetMediaTrackInfo_String.",
    "name": "BR_GetMediaTrackByGUID",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "string",
        "name": "guidStringIn"
      }
    ],
    "returns": [
      {
        "type": "MediaTrack"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get media track from GUID string. Note that the GUID must be enclosed in braces {}. To get track's GUID as a string, see GetSetMediaTrackInfo_String."
  },
  {
    "form": "(reaper.BR_GetMediaTrackFreezeCount track) :: (integer)",
    "doc": "(reaper.BR_GetMediaTrackFreezeCount track) :: (integer)\ntrack :: MediaTrack\n[BR] Get media track freeze count (if track isn't frozen at all, returns 0).",
    "name": "BR_GetMediaTrackFreezeCount",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get media track freeze count (if track isn't frozen at all, returns 0)."
  },
  {
    "form": "(reaper.BR_GetMediaTrackGUID track) :: (string)",
    "doc": "(reaper.BR_GetMediaTrackGUID track) :: (string)\ntrack :: MediaTrack\n[BR] Deprecated, see GetSetMediaTrackInfo_String (v5.95+). Get media track GUID as a string (guidStringOut_sz should be at least 64). To get media track back from GUID string, see BR_GetMediaTrackByGUID.",
    "name": "BR_GetMediaTrackGUID",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "guidString"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Deprecated, see GetSetMediaTrackInfo_String (v5.95+). Get media track GUID as a string (guidStringOut_sz should be at least 64). To get media track back from GUID string, see BR_GetMediaTrackByGUID."
  },
  {
    "form": "(reaper.BR_GetMediaTrackLayouts track) :: (string string)",
    "doc": "(reaper.BR_GetMediaTrackLayouts track) :: (string string)\ntrack :: MediaTrack\n[BR] Deprecated, see GetSetMediaTrackInfo (REAPER v5.02+). Get media track layouts for MCP and TCP. Empty string (\"\") means that layout is set to the default layout. To set media track layouts, see BR_SetMediaTrackLayouts.",
    "name": "BR_GetMediaTrackLayouts",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "mcpLayoutName"
      },
      {
        "type": "string",
        "name": "tcpLayoutName"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Deprecated, see GetSetMediaTrackInfo (REAPER v5.02+). Get media track layouts for MCP and TCP. Empty string (\"\") means that layout is set to the default layout. To set media track layouts, see BR_SetMediaTrackLayouts."
  },
  {
    "form": "(reaper.BR_GetMediaTrackSendInfo_Envelope track category sendidx envelopeType) :: (TrackEnvelope)",
    "doc": "(reaper.BR_GetMediaTrackSendInfo_Envelope track category sendidx envelopeType) :: (TrackEnvelope)\ntrack :: MediaTrack\ncategory :: integer\nsendidx :: integer\nenvelopeType :: integer\n[BR] Get track envelope for send/receive/hardware output.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)\nenvelopeType determines which envelope is returned (0=volume, 1=pan, 2=mute)\nNote: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Track.",
    "name": "BR_GetMediaTrackSendInfo_Envelope",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "category"
      },
      {
        "type": "integer",
        "name": "sendidx"
      },
      {
        "type": "integer",
        "name": "envelopeType"
      }
    ],
    "returns": [
      {
        "type": "TrackEnvelope"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get track envelope for send/receive/hardware output.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)\nenvelopeType determines which envelope is returned (0=volume, 1=pan, 2=mute)\nNote: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Track."
  },
  {
    "form": "(reaper.BR_GetMediaTrackSendInfo_Track track category sendidx trackType) :: (MediaTrack)",
    "doc": "(reaper.BR_GetMediaTrackSendInfo_Track track category sendidx trackType) :: (MediaTrack)\ntrack :: MediaTrack\ncategory :: integer\nsendidx :: integer\ntrackType :: integer\n[BR] Get source or destination media track for send/receive.\ncategory is <0 for receives, 0=sends\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives)\ntrackType determines which track is returned (0=source track, 1=destination track)\nNote: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Envelope.",
    "name": "BR_GetMediaTrackSendInfo_Track",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "category"
      },
      {
        "type": "integer",
        "name": "sendidx"
      },
      {
        "type": "integer",
        "name": "trackType"
      }
    ],
    "returns": [
      {
        "type": "MediaTrack"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get source or destination media track for send/receive.\ncategory is <0 for receives, 0=sends\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives)\ntrackType determines which track is returned (0=source track, 1=destination track)\nNote: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Envelope."
  },
  {
    "form": "(reaper.BR_GetMidiSourceLenPPQ take) :: (number)",
    "doc": "(reaper.BR_GetMidiSourceLenPPQ take) :: (number)\ntake :: MediaItem_Take\n[BR] Get MIDI take source length in PPQ. In case the take isn't MIDI, return value will be -1.",
    "name": "BR_GetMidiSourceLenPPQ",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get MIDI take source length in PPQ. In case the take isn't MIDI, return value will be -1."
  },
  {
    "form": "(reaper.BR_GetMidiTakePoolGUID take) :: (boolean string)",
    "doc": "(reaper.BR_GetMidiTakePoolGUID take) :: (boolean string)\ntake :: MediaItem_Take\n[BR] Get MIDI take pool GUID as a string (guidStringOut_sz should be at least 64). Returns true if take is pooled.",
    "name": "BR_GetMidiTakePoolGUID",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "guidString"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get MIDI take pool GUID as a string (guidStringOut_sz should be at least 64). Returns true if take is pooled."
  },
  {
    "form": "(reaper.BR_GetMidiTakeTempoInfo take) :: (boolean boolean number integer integer)",
    "doc": "(reaper.BR_GetMidiTakeTempoInfo take) :: (boolean boolean number integer integer)\ntake :: MediaItem_Take\n[BR] Get \"ignore project tempo\" information for MIDI take. Returns true if take can ignore project tempo (no matter if it's actually ignored), otherwise false.",
    "name": "BR_GetMidiTakeTempoInfo",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "ignoreProjTempo"
      },
      {
        "type": "number",
        "name": "bpm"
      },
      {
        "type": "integer",
        "name": "num"
      },
      {
        "type": "integer",
        "name": "den"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get \"ignore project tempo\" information for MIDI take. Returns true if take can ignore project tempo (no matter if it's actually ignored), otherwise false."
  },
  {
    "form": "(reaper.BR_GetMouseCursorContext ) :: (string string string)",
    "doc": "(reaper.BR_GetMouseCursorContext ) :: (string string string)\n[BR] Get mouse cursor context. Each parameter returns information in a form of string as specified in the table below.\nTo get more info on stuff that was found under mouse cursor see BR_GetMouseCursorContext_Envelope, BR_GetMouseCursorContext_Item, BR_GetMouseCursorContext_MIDI, BR_GetMouseCursorContext_Position, BR_GetMouseCursorContext_Take, BR_GetMouseCursorContext_Track",
    "name": "BR_GetMouseCursorContext",
    "returns": [
      {
        "type": "string",
        "name": "window"
      },
      {
        "type": "string",
        "name": "segment"
      },
      {
        "type": "string",
        "name": "details"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get mouse cursor context. Each parameter returns information in a form of string as specified in the table below.\nTo get more info on stuff that was found under mouse cursor see BR_GetMouseCursorContext_Envelope, BR_GetMouseCursorContext_Item, BR_GetMouseCursorContext_MIDI, BR_GetMouseCursorContext_Position, BR_GetMouseCursorContext_Take, BR_GetMouseCursorContext_Track"
  },
  {
    "form": "(reaper.BR_GetMouseCursorContext_Envelope ) :: (TrackEnvelope boolean)",
    "doc": "(reaper.BR_GetMouseCursorContext_Envelope ) :: (TrackEnvelope boolean)\n[BR] Returns envelope that was captured with the last call to BR_GetMouseCursorContext. In case the envelope belongs to take, takeEnvelope will be true.",
    "name": "BR_GetMouseCursorContext_Envelope",
    "returns": [
      {
        "type": "TrackEnvelope",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "takeEnvelope"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Returns envelope that was captured with the last call to BR_GetMouseCursorContext. In case the envelope belongs to take, takeEnvelope will be true."
  },
  {
    "form": "(reaper.BR_GetMouseCursorContext_Item ) :: (MediaItem)",
    "doc": "(reaper.BR_GetMouseCursorContext_Item ) :: (MediaItem)\n[BR] Returns item under mouse cursor that was captured with the last call to BR_GetMouseCursorContext. Note that the function will return item even if mouse cursor is over some other track lane element like stretch marker or envelope. This enables for easier identification of items when you want to ignore elements within the item.",
    "name": "BR_GetMouseCursorContext_Item",
    "returns": [
      {
        "type": "MediaItem"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Returns item under mouse cursor that was captured with the last call to BR_GetMouseCursorContext. Note that the function will return item even if mouse cursor is over some other track lane element like stretch marker or envelope. This enables for easier identification of items when you want to ignore elements within the item."
  },
  {
    "form": "(reaper.BR_GetMouseCursorContext_MIDI ) :: (identifier boolean integer integer integer integer)",
    "doc": "(reaper.BR_GetMouseCursorContext_MIDI ) :: (identifier boolean integer integer integer integer)\n[BR] Returns midi editor under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.\ninlineEditor: if mouse was captured in inline MIDI editor, this will be true (consequentially, returned MIDI editor will be NULL)\nnoteRow: note row or piano key under mouse cursor (0-127)\nccLane: CC lane under mouse cursor (CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events)\nccLaneVal: value in CC lane under mouse cursor (0-127 or 0-16383)\nccLaneId: lane position, counting from the top (0 based)\nNote: due to API limitations, if mouse is over inline MIDI editor with some note rows hidden, noteRow will be -1",
    "name": "BR_GetMouseCursorContext_MIDI",
    "returns": [
      {
        "type": "identifier",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "inlineEditor"
      },
      {
        "type": "integer",
        "name": "noteRow"
      },
      {
        "type": "integer",
        "name": "ccLane"
      },
      {
        "type": "integer",
        "name": "ccLaneVal"
      },
      {
        "type": "integer",
        "name": "ccLaneId"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Returns midi editor under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.\ninlineEditor: if mouse was captured in inline MIDI editor, this will be true (consequentially, returned MIDI editor will be NULL)\nnoteRow: note row or piano key under mouse cursor (0-127)\nccLane: CC lane under mouse cursor (CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events)\nccLaneVal: value in CC lane under mouse cursor (0-127 or 0-16383)\nccLaneId: lane position, counting from the top (0 based)\nNote: due to API limitations, if mouse is over inline MIDI editor with some note rows hidden, noteRow will be -1"
  },
  {
    "form": "(reaper.BR_GetMouseCursorContext_Position ) :: (number)",
    "doc": "(reaper.BR_GetMouseCursorContext_Position ) :: (number)\n[BR] Returns project time position in arrange/ruler/midi editor that was captured with the last call to BR_GetMouseCursorContext.",
    "name": "BR_GetMouseCursorContext_Position",
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Returns project time position in arrange/ruler/midi editor that was captured with the last call to BR_GetMouseCursorContext."
  },
  {
    "form": "(reaper.BR_GetMouseCursorContext_StretchMarker ) :: (integer)",
    "doc": "(reaper.BR_GetMouseCursorContext_StretchMarker ) :: (integer)\n[BR] Returns id of a stretch marker under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.",
    "name": "BR_GetMouseCursorContext_StretchMarker",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Returns id of a stretch marker under mouse cursor that was captured with the last call to BR_GetMouseCursorContext."
  },
  {
    "form": "(reaper.BR_GetMouseCursorContext_Take ) :: (MediaItem_Take)",
    "doc": "(reaper.BR_GetMouseCursorContext_Take ) :: (MediaItem_Take)\n[BR] Returns take under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.",
    "name": "BR_GetMouseCursorContext_Take",
    "returns": [
      {
        "type": "MediaItem_Take"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Returns take under mouse cursor that was captured with the last call to BR_GetMouseCursorContext."
  },
  {
    "form": "(reaper.BR_GetMouseCursorContext_Track ) :: (MediaTrack)",
    "doc": "(reaper.BR_GetMouseCursorContext_Track ) :: (MediaTrack)\n[BR] Returns track under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.",
    "name": "BR_GetMouseCursorContext_Track",
    "returns": [
      {
        "type": "MediaTrack"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Returns track under mouse cursor that was captured with the last call to BR_GetMouseCursorContext."
  },
  {
    "form": "(reaper.BR_GetNextGridDivision position) :: (number)",
    "doc": "(reaper.BR_GetNextGridDivision position) :: (number)\nposition :: number\n[BR] Get next grid division after the time position. For more grid divisions function, see BR_GetClosestGridDivision and BR_GetPrevGridDivision.",
    "name": "BR_GetNextGridDivision",
    "params": [
      {
        "type": "number",
        "name": "position"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get next grid division after the time position. For more grid divisions function, see BR_GetClosestGridDivision and BR_GetPrevGridDivision."
  },
  {
    "form": "(reaper.BR_GetPrevGridDivision position) :: (number)",
    "doc": "(reaper.BR_GetPrevGridDivision position) :: (number)\nposition :: number\n[BR] Get previous grid division before the time position. For more grid division functions, see BR_GetClosestGridDivision and BR_GetNextGridDivision.",
    "name": "BR_GetPrevGridDivision",
    "params": [
      {
        "type": "number",
        "name": "position"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get previous grid division before the time position. For more grid division functions, see BR_GetClosestGridDivision and BR_GetNextGridDivision."
  },
  {
    "form": "(reaper.BR_GetSetTrackSendInfo track category sendidx parmname setNewValue newValue) :: (number)",
    "doc": "(reaper.BR_GetSetTrackSendInfo track category sendidx parmname setNewValue newValue) :: (number)\ntrack :: MediaTrack\ncategory :: integer\nsendidx :: integer\nparmname :: string\nsetNewValue :: boolean\nnewValue :: number\n[BR] Get or set send attributes.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)\nTo set attribute, pass setNewValue as true\nList of possible parameters:\nB_MUTE : send mute state (1.0 if muted, otherwise 0.0)\nB_PHASE : send phase state (1.0 if phase is inverted, otherwise 0.0)\nB_MONO : send mono state (1.0 if send is set to mono, otherwise 0.0)\nD_VOL : send volume (1.0=+0dB etc...)\nD_PAN : send pan (-1.0=100%L, 0=center, 1.0=100%R)\nD_PANLAW : send pan law (1.0=+0.0db, 0.5=-6dB, -1.0=project default etc...)\nI_SENDMODE : send mode (0=post-fader, 1=pre-fx, 2=post-fx(deprecated), 3=post-fx)\nI_SRCCHAN : audio source starting channel index or -1 if audio send is disabled (&1024=mono...note that in that case, when reading index, you should do (index XOR 1024) to get starting channel index)\nI_DSTCHAN : audio destination starting channel index (&1024=mono (and in case of hardware output &512=rearoute)...note that in that case, when reading index, you should do (index XOR (1024 OR 512)) to get starting channel index)\nI_MIDI_SRCCHAN : source MIDI channel, -1 if MIDI send is disabled (0=all, 1-16)\nI_MIDI_DSTCHAN : destination MIDI channel, -1 if MIDI send is disabled (0=original, 1-16)\nI_MIDI_SRCBUS : source MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)\nI_MIDI_DSTBUS : receive MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)\nI_MIDI_LINK_VOLPAN : link volume/pan controls to MIDI\nNote: To get or set other send attributes, see BR_GetMediaTrackSendInfo_Envelope and BR_GetMediaTrackSendInfo_Track.",
    "name": "BR_GetSetTrackSendInfo",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "category"
      },
      {
        "type": "integer",
        "name": "sendidx"
      },
      {
        "type": "string",
        "name": "parmname"
      },
      {
        "type": "boolean",
        "name": "setNewValue"
      },
      {
        "type": "number",
        "name": "newValue"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get or set send attributes.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)\nTo set attribute, pass setNewValue as true\nList of possible parameters:\nB_MUTE : send mute state (1.0 if muted, otherwise 0.0)\nB_PHASE : send phase state (1.0 if phase is inverted, otherwise 0.0)\nB_MONO : send mono state (1.0 if send is set to mono, otherwise 0.0)\nD_VOL : send volume (1.0=+0dB etc...)\nD_PAN : send pan (-1.0=100%L, 0=center, 1.0=100%R)\nD_PANLAW : send pan law (1.0=+0.0db, 0.5=-6dB, -1.0=project default etc...)\nI_SENDMODE : send mode (0=post-fader, 1=pre-fx, 2=post-fx(deprecated), 3=post-fx)\nI_SRCCHAN : audio source starting channel index or -1 if audio send is disabled (&1024=mono...note that in that case, when reading index, you should do (index XOR 1024) to get starting channel index)\nI_DSTCHAN : audio destination starting channel index (&1024=mono (and in case of hardware output &512=rearoute)...note that in that case, when reading index, you should do (index XOR (1024 OR 512)) to get starting channel index)\nI_MIDI_SRCCHAN : source MIDI channel, -1 if MIDI send is disabled (0=all, 1-16)\nI_MIDI_DSTCHAN : destination MIDI channel, -1 if MIDI send is disabled (0=original, 1-16)\nI_MIDI_SRCBUS : source MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)\nI_MIDI_DSTBUS : receive MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)\nI_MIDI_LINK_VOLPAN : link volume/pan controls to MIDI\nNote: To get or set other send attributes, see BR_GetMediaTrackSendInfo_Envelope and BR_GetMediaTrackSendInfo_Track."
  },
  {
    "form": "(reaper.BR_GetTakeFXCount take) :: (integer)",
    "doc": "(reaper.BR_GetTakeFXCount take) :: (integer)\ntake :: MediaItem_Take\n[BR] Returns FX count for supplied take",
    "name": "BR_GetTakeFXCount",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Returns FX count for supplied take"
  },
  {
    "form": "(reaper.BR_IsMidiOpenInInlineEditor take) :: (boolean)",
    "doc": "(reaper.BR_IsMidiOpenInInlineEditor take) :: (boolean)\ntake :: MediaItem_Take\n[SWS] Check if take has MIDI inline editor open and returns true or false.",
    "name": "BR_IsMidiOpenInInlineEditor",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[SWS] Check if take has MIDI inline editor open and returns true or false."
  },
  {
    "form": "(reaper.BR_IsTakeMidi take) :: (boolean boolean)",
    "doc": "(reaper.BR_IsTakeMidi take) :: (boolean boolean)\ntake :: MediaItem_Take\n[BR] Check if take is MIDI take, in case MIDI take is in-project MIDI source data, inProjectMidiOut will be true, otherwise false.",
    "name": "BR_IsTakeMidi",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "inProjectMidi"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Check if take is MIDI take, in case MIDI take is in-project MIDI source data, inProjectMidiOut will be true, otherwise false."
  },
  {
    "form": "(reaper.BR_ItemAtMouseCursor ) :: (MediaItem number)",
    "doc": "(reaper.BR_ItemAtMouseCursor ) :: (MediaItem number)\n[BR] Get media item under mouse cursor. Position is mouse cursor position in arrange.",
    "name": "BR_ItemAtMouseCursor",
    "returns": [
      {
        "type": "MediaItem",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "position"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get media item under mouse cursor. Position is mouse cursor position in arrange."
  },
  {
    "form": "(reaper.BR_MIDI_CCLaneRemove midiEditor laneId) :: (boolean)",
    "doc": "(reaper.BR_MIDI_CCLaneRemove midiEditor laneId) :: (boolean)\nmidiEditor :: identifier\nlaneId :: integer\n[BR] Remove CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success",
    "name": "BR_MIDI_CCLaneRemove",
    "params": [
      {
        "type": "identifier",
        "name": "midiEditor"
      },
      {
        "type": "integer",
        "name": "laneId"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Remove CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success"
  },
  {
    "form": "(reaper.BR_MIDI_CCLaneReplace midiEditor laneId newCC) :: (boolean)",
    "doc": "(reaper.BR_MIDI_CCLaneReplace midiEditor laneId newCC) :: (boolean)\nmidiEditor :: identifier\nlaneId :: integer\nnewCC :: integer\n[BR] Replace CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success.\nValid CC lanes: CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207",
    "name": "BR_MIDI_CCLaneReplace",
    "params": [
      {
        "type": "identifier",
        "name": "midiEditor"
      },
      {
        "type": "integer",
        "name": "laneId"
      },
      {
        "type": "integer",
        "name": "newCC"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Replace CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success.\nValid CC lanes: CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207"
  },
  {
    "form": "(reaper.BR_PositionAtMouseCursor checkRuler) :: (number)",
    "doc": "(reaper.BR_PositionAtMouseCursor checkRuler) :: (number)\ncheckRuler :: boolean\n[BR] Get position at mouse cursor. To check ruler along with arrange, pass checkRuler=true. Returns -1 if cursor is not over arrange/ruler.",
    "name": "BR_PositionAtMouseCursor",
    "params": [
      {
        "type": "boolean",
        "name": "checkRuler"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get position at mouse cursor. To check ruler along with arrange, pass checkRuler=true. Returns -1 if cursor is not over arrange/ruler."
  },
  {
    "form": "(reaper.BR_SetArrangeView proj startTime endTime) :: nil",
    "doc": "(reaper.BR_SetArrangeView proj startTime endTime) :: nil\nproj :: ReaProject\nstartTime :: number\nendTime :: number\n[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Set start and end time position of arrange view. To get arrange view instead, see BR_GetArrangeView.",
    "name": "BR_SetArrangeView",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "number",
        "name": "startTime"
      },
      {
        "type": "number",
        "name": "endTime"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Set start and end time position of arrange view. To get arrange view instead, see BR_GetArrangeView."
  },
  {
    "form": "(reaper.BR_SetItemEdges item startTime endTime) :: (boolean)",
    "doc": "(reaper.BR_SetItemEdges item startTime endTime) :: (boolean)\nitem :: MediaItem\nstartTime :: number\nendTime :: number\n[BR] Set item start and end edges' position - returns true in case of any changes",
    "name": "BR_SetItemEdges",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      },
      {
        "type": "number",
        "name": "startTime"
      },
      {
        "type": "number",
        "name": "endTime"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Set item start and end edges' position - returns true in case of any changes"
  },
  {
    "form": "(reaper.BR_SetMediaItemImageResource item imageIn imageFlags) :: nil",
    "doc": "(reaper.BR_SetMediaItemImageResource item imageIn imageFlags) :: nil\nitem :: MediaItem\nimageIn :: string\nimageFlags :: integer\n[BR] Set image resource and its flags for a given item. To clear current image resource, pass imageIn as \"\".\nimageFlags: &1=0: don't display image, &1: center / tile, &3: stretch, &5: full height (REAPER 5.974+).\nTo get image resource, see BR_GetMediaItemImageResource.",
    "name": "BR_SetMediaItemImageResource",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      },
      {
        "type": "string",
        "name": "imageIn"
      },
      {
        "type": "integer",
        "name": "imageFlags"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Set image resource and its flags for a given item. To clear current image resource, pass imageIn as \"\".\nimageFlags: &1=0: don't display image, &1: center / tile, &3: stretch, &5: full height (REAPER 5.974+).\nTo get image resource, see BR_GetMediaItemImageResource."
  },
  {
    "form": "(reaper.BR_SetMediaSourceProperties take section start length fade reverse) :: (boolean)",
    "doc": "(reaper.BR_SetMediaSourceProperties take section start length fade reverse) :: (boolean)\ntake :: MediaItem_Take\nsection :: boolean\nstart :: number\nlength :: number\nfade :: number\nreverse :: boolean\n[BR] Set take media source properties. Returns false if take can't have them (MIDI items etc.). Section parameters have to be valid only when passing section=true.\nTo get source properties, see BR_GetMediaSourceProperties.",
    "name": "BR_SetMediaSourceProperties",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "boolean",
        "name": "section"
      },
      {
        "type": "number",
        "name": "start"
      },
      {
        "type": "number",
        "name": "length"
      },
      {
        "type": "number",
        "name": "fade"
      },
      {
        "type": "boolean",
        "name": "reverse"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Set take media source properties. Returns false if take can't have them (MIDI items etc.). Section parameters have to be valid only when passing section=true.\nTo get source properties, see BR_GetMediaSourceProperties."
  },
  {
    "form": "(reaper.BR_SetMediaTrackLayouts track mcpLayoutNameIn tcpLayoutNameIn) :: (boolean)",
    "doc": "(reaper.BR_SetMediaTrackLayouts track mcpLayoutNameIn tcpLayoutNameIn) :: (boolean)\ntrack :: MediaTrack\nmcpLayoutNameIn :: string\ntcpLayoutNameIn :: string\n[BR] Deprecated, see GetSetMediaTrackInfo (REAPER v5.02+). Set media track layouts for MCP and TCP. To set default layout, pass empty string (\"\") as layout name. In case layouts were successfully set, returns true (if layouts are already set to supplied layout names, it will return false since no changes were made).\nTo get media track layouts, see BR_GetMediaTrackLayouts.",
    "name": "BR_SetMediaTrackLayouts",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "string",
        "name": "mcpLayoutNameIn"
      },
      {
        "type": "string",
        "name": "tcpLayoutNameIn"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Deprecated, see GetSetMediaTrackInfo (REAPER v5.02+). Set media track layouts for MCP and TCP. To set default layout, pass empty string (\"\") as layout name. In case layouts were successfully set, returns true (if layouts are already set to supplied layout names, it will return false since no changes were made).\nTo get media track layouts, see BR_GetMediaTrackLayouts."
  },
  {
    "form": "(reaper.BR_SetMidiTakeTempoInfo take ignoreProjTempo bpm num den) :: (boolean)",
    "doc": "(reaper.BR_SetMidiTakeTempoInfo take ignoreProjTempo bpm num den) :: (boolean)\ntake :: MediaItem_Take\nignoreProjTempo :: boolean\nbpm :: number\nnum :: integer\nden :: integer\n[BR] Set \"ignore project tempo\" information for MIDI take. Returns true in case the take was successfully updated.",
    "name": "BR_SetMidiTakeTempoInfo",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "boolean",
        "name": "ignoreProjTempo"
      },
      {
        "type": "number",
        "name": "bpm"
      },
      {
        "type": "integer",
        "name": "num"
      },
      {
        "type": "integer",
        "name": "den"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Set \"ignore project tempo\" information for MIDI take. Returns true in case the take was successfully updated."
  },
  {
    "form": "(reaper.BR_SetTakeSourceFromFile take filenameIn inProjectData) :: (boolean)",
    "doc": "(reaper.BR_SetTakeSourceFromFile take filenameIn inProjectData) :: (boolean)\ntake :: MediaItem_Take\nfilenameIn :: string\ninProjectData :: boolean\n[BR] Set new take source from file. To import MIDI file as in-project source data pass inProjectData=true. Returns false if failed.\nAny take source properties from the previous source will be lost - to preserve them, see BR_SetTakeSourceFromFile2.\nNote: To set source from existing take, see SNM_GetSetSourceState2.",
    "name": "BR_SetTakeSourceFromFile",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "string",
        "name": "filenameIn"
      },
      {
        "type": "boolean",
        "name": "inProjectData"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Set new take source from file. To import MIDI file as in-project source data pass inProjectData=true. Returns false if failed.\nAny take source properties from the previous source will be lost - to preserve them, see BR_SetTakeSourceFromFile2.\nNote: To set source from existing take, see SNM_GetSetSourceState2."
  },
  {
    "form": "(reaper.BR_SetTakeSourceFromFile2 take filenameIn inProjectData keepSourceProperties) :: (boolean)",
    "doc": "(reaper.BR_SetTakeSourceFromFile2 take filenameIn inProjectData keepSourceProperties) :: (boolean)\ntake :: MediaItem_Take\nfilenameIn :: string\ninProjectData :: boolean\nkeepSourceProperties :: boolean\n[BR] Differs from BR_SetTakeSourceFromFile only that it can also preserve existing take media source properties.",
    "name": "BR_SetTakeSourceFromFile2",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "string",
        "name": "filenameIn"
      },
      {
        "type": "boolean",
        "name": "inProjectData"
      },
      {
        "type": "boolean",
        "name": "keepSourceProperties"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Differs from BR_SetTakeSourceFromFile only that it can also preserve existing take media source properties."
  },
  {
    "form": "(reaper.BR_TakeAtMouseCursor ) :: (MediaItem_Take number)",
    "doc": "(reaper.BR_TakeAtMouseCursor ) :: (MediaItem_Take number)\n[BR] Get take under mouse cursor. Position is mouse cursor position in arrange.",
    "name": "BR_TakeAtMouseCursor",
    "returns": [
      {
        "type": "MediaItem_Take",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "position"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get take under mouse cursor. Position is mouse cursor position in arrange."
  },
  {
    "form": "(reaper.BR_TrackAtMouseCursor ) :: (MediaTrack integer number)",
    "doc": "(reaper.BR_TrackAtMouseCursor ) :: (MediaTrack integer number)\n[BR] Get track under mouse cursor.\nContext signifies where the track was found: 0 = TCP, 1 = MCP, 2 = Arrange.\nPosition will hold mouse cursor position in arrange if applicable.",
    "name": "BR_TrackAtMouseCursor",
    "returns": [
      {
        "type": "MediaTrack",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "context"
      },
      {
        "type": "number",
        "name": "position"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get track under mouse cursor.\nContext signifies where the track was found: 0 = TCP, 1 = MCP, 2 = Arrange.\nPosition will hold mouse cursor position in arrange if applicable."
  },
  {
    "form": "(reaper.BR_TrackFX_GetFXModuleName track fx) :: (boolean string)",
    "doc": "(reaper.BR_TrackFX_GetFXModuleName track fx) :: (boolean string)\ntrack :: MediaTrack\nfx :: integer\n[BR] Get the exact name (like effect.dll, effect.vst3, etc...) of an FX.",
    "name": "BR_TrackFX_GetFXModuleName",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "fx"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "name"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get the exact name (like effect.dll, effect.vst3, etc...) of an FX."
  },
  {
    "form": "(reaper.BR_Win32_CB_FindString comboBoxHwnd startId string) :: (integer)",
    "doc": "(reaper.BR_Win32_CB_FindString comboBoxHwnd startId string) :: (integer)\ncomboBoxHwnd :: identifier\nstartId :: integer\nstring :: string\n[BR] Equivalent to win32 API ComboBox_FindString().",
    "name": "BR_Win32_CB_FindString",
    "params": [
      {
        "type": "identifier",
        "name": "comboBoxHwnd"
      },
      {
        "type": "integer",
        "name": "startId"
      },
      {
        "type": "string",
        "name": "string"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API ComboBox_FindString()."
  },
  {
    "form": "(reaper.BR_Win32_CB_FindStringExact comboBoxHwnd startId string) :: (integer)",
    "doc": "(reaper.BR_Win32_CB_FindStringExact comboBoxHwnd startId string) :: (integer)\ncomboBoxHwnd :: identifier\nstartId :: integer\nstring :: string\n[BR] Equivalent to win32 API ComboBox_FindStringExact().",
    "name": "BR_Win32_CB_FindStringExact",
    "params": [
      {
        "type": "identifier",
        "name": "comboBoxHwnd"
      },
      {
        "type": "integer",
        "name": "startId"
      },
      {
        "type": "string",
        "name": "string"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API ComboBox_FindStringExact()."
  },
  {
    "form": "(reaper.BR_Win32_ClientToScreen hwnd xIn yIn) :: (integer integer)",
    "doc": "(reaper.BR_Win32_ClientToScreen hwnd xIn yIn) :: (integer integer)\nhwnd :: identifier\nxIn :: integer\nyIn :: integer\n[BR] Equivalent to win32 API ClientToScreen().",
    "name": "BR_Win32_ClientToScreen",
    "params": [
      {
        "type": "identifier",
        "name": "hwnd"
      },
      {
        "type": "integer",
        "name": "xIn"
      },
      {
        "type": "integer",
        "name": "yIn"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "x"
      },
      {
        "type": "integer",
        "name": "y"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API ClientToScreen()."
  },
  {
    "form": "(reaper.BR_Win32_FindWindowEx hwndParent hwndChildAfter className windowName searchClass searchName) :: (identifier)",
    "doc": "(reaper.BR_Win32_FindWindowEx hwndParent hwndChildAfter className windowName searchClass searchName) :: (identifier)\nhwndParent :: string\nhwndChildAfter :: string\nclassName :: string\nwindowName :: string\nsearchClass :: boolean\nsearchName :: boolean\n[BR] Equivalent to win32 API FindWindowEx(). Since ReaScript doesn't allow passing NULL (None in Python, nil in Lua etc...) parameters, to search by supplied class or name set searchClass and searchName accordingly. HWND parameters should be passed as either \"0\" to signify NULL or as string obtained from BR_Win32_HwndToString.",
    "name": "BR_Win32_FindWindowEx",
    "params": [
      {
        "type": "string",
        "name": "hwndParent"
      },
      {
        "type": "string",
        "name": "hwndChildAfter"
      },
      {
        "type": "string",
        "name": "className"
      },
      {
        "type": "string",
        "name": "windowName"
      },
      {
        "type": "boolean",
        "name": "searchClass"
      },
      {
        "type": "boolean",
        "name": "searchName"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API FindWindowEx(). Since ReaScript doesn't allow passing NULL (None in Python, nil in Lua etc...) parameters, to search by supplied class or name set searchClass and searchName accordingly. HWND parameters should be passed as either \"0\" to signify NULL or as string obtained from BR_Win32_HwndToString."
  },
  {
    "form": "(reaper.BR_Win32_GET_X_LPARAM lParam) :: (integer)",
    "doc": "(reaper.BR_Win32_GET_X_LPARAM lParam) :: (integer)\nlParam :: integer\n[BR] Equivalent to win32 API GET_X_LPARAM().",
    "name": "BR_Win32_GET_X_LPARAM",
    "params": [
      {
        "type": "integer",
        "name": "lParam"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API GET_X_LPARAM()."
  },
  {
    "form": "(reaper.BR_Win32_GET_Y_LPARAM lParam) :: (integer)",
    "doc": "(reaper.BR_Win32_GET_Y_LPARAM lParam) :: (integer)\nlParam :: integer\n[BR] Equivalent to win32 API GET_Y_LPARAM().",
    "name": "BR_Win32_GET_Y_LPARAM",
    "params": [
      {
        "type": "integer",
        "name": "lParam"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API GET_Y_LPARAM()."
  },
  {
    "form": "(reaper.BR_Win32_GetConstant constantName) :: (integer)",
    "doc": "(reaper.BR_Win32_GetConstant constantName) :: (integer)\nconstantName :: string\n[BR] Returns various constants needed for BR_Win32 functions.\nSupported constants are:\nCB_ERR, CB_GETCOUNT, CB_GETCURSEL, CB_SETCURSEL\nEM_SETSEL\nGW_CHILD, GW_HWNDFIRST, GW_HWNDLAST, GW_HWNDNEXT, GW_HWNDPREV, GW_OWNER\nGWL_STYLE\nSW_HIDE, SW_MAXIMIZE, SW_SHOW, SW_SHOWMINIMIZED, SW_SHOWNA, SW_SHOWNOACTIVATE, SW_SHOWNORMAL\nSWP_FRAMECHANGED, SWP_FRAMECHANGED, SWP_NOMOVE, SWP_NOOWNERZORDER, SWP_NOSIZE, SWP_NOZORDER\nVK_DOWN, VK_UP\nWM_CLOSE, WM_KEYDOWN\nWS_MAXIMIZE, WS_OVERLAPPEDWINDOW",
    "name": "BR_Win32_GetConstant",
    "params": [
      {
        "type": "string",
        "name": "constantName"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Returns various constants needed for BR_Win32 functions.\nSupported constants are:\nCB_ERR, CB_GETCOUNT, CB_GETCURSEL, CB_SETCURSEL\nEM_SETSEL\nGW_CHILD, GW_HWNDFIRST, GW_HWNDLAST, GW_HWNDNEXT, GW_HWNDPREV, GW_OWNER\nGWL_STYLE\nSW_HIDE, SW_MAXIMIZE, SW_SHOW, SW_SHOWMINIMIZED, SW_SHOWNA, SW_SHOWNOACTIVATE, SW_SHOWNORMAL\nSWP_FRAMECHANGED, SWP_FRAMECHANGED, SWP_NOMOVE, SWP_NOOWNERZORDER, SWP_NOSIZE, SWP_NOZORDER\nVK_DOWN, VK_UP\nWM_CLOSE, WM_KEYDOWN\nWS_MAXIMIZE, WS_OVERLAPPEDWINDOW"
  },
  {
    "form": "(reaper.BR_Win32_GetCursorPos ) :: (boolean integer integer)",
    "doc": "(reaper.BR_Win32_GetCursorPos ) :: (boolean integer integer)\n[BR] Equivalent to win32 API GetCursorPos().",
    "name": "BR_Win32_GetCursorPos",
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "x"
      },
      {
        "type": "integer",
        "name": "y"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API GetCursorPos()."
  },
  {
    "form": "(reaper.BR_Win32_GetFocus ) :: (identifier)",
    "doc": "(reaper.BR_Win32_GetFocus ) :: (identifier)\n[BR] Equivalent to win32 API GetFocus().",
    "name": "BR_Win32_GetFocus",
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API GetFocus()."
  },
  {
    "form": "(reaper.BR_Win32_GetForegroundWindow ) :: (identifier)",
    "doc": "(reaper.BR_Win32_GetForegroundWindow ) :: (identifier)\n[BR] Equivalent to win32 API GetForegroundWindow().",
    "name": "BR_Win32_GetForegroundWindow",
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API GetForegroundWindow()."
  },
  {
    "form": "(reaper.BR_Win32_GetMainHwnd ) :: (identifier)",
    "doc": "(reaper.BR_Win32_GetMainHwnd ) :: (identifier)\n[BR] Alternative to GetMainHwnd. REAPER seems to have problems with extensions using HWND type for exported functions so all BR_Win32 functions use void* instead of HWND type",
    "name": "BR_Win32_GetMainHwnd",
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Alternative to GetMainHwnd. REAPER seems to have problems with extensions using HWND type for exported functions so all BR_Win32 functions use void* instead of HWND type"
  },
  {
    "form": "(reaper.BR_Win32_GetMixerHwnd ) :: (identifier boolean)",
    "doc": "(reaper.BR_Win32_GetMixerHwnd ) :: (identifier boolean)\n[BR] Get mixer window HWND. isDockedOut will be set to true if mixer is docked",
    "name": "BR_Win32_GetMixerHwnd",
    "returns": [
      {
        "type": "identifier",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "isDocked"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get mixer window HWND. isDockedOut will be set to true if mixer is docked"
  },
  {
    "form": "(reaper.BR_Win32_GetMonitorRectFromRect workingAreaOnly leftIn topIn rightIn bottomIn) :: (integer integer integer integer)",
    "doc": "(reaper.BR_Win32_GetMonitorRectFromRect workingAreaOnly leftIn topIn rightIn bottomIn) :: (integer integer integer integer)\nworkingAreaOnly :: boolean\nleftIn :: integer\ntopIn :: integer\nrightIn :: integer\nbottomIn :: integer\n[BR] Get coordinates for screen which is nearest to supplied coordinates. Pass workingAreaOnly as true to get screen coordinates excluding taskbar (or menu bar on OSX).",
    "name": "BR_Win32_GetMonitorRectFromRect",
    "params": [
      {
        "type": "boolean",
        "name": "workingAreaOnly"
      },
      {
        "type": "integer",
        "name": "leftIn"
      },
      {
        "type": "integer",
        "name": "topIn"
      },
      {
        "type": "integer",
        "name": "rightIn"
      },
      {
        "type": "integer",
        "name": "bottomIn"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "left"
      },
      {
        "type": "integer",
        "name": "top"
      },
      {
        "type": "integer",
        "name": "right"
      },
      {
        "type": "integer",
        "name": "bottom"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Get coordinates for screen which is nearest to supplied coordinates. Pass workingAreaOnly as true to get screen coordinates excluding taskbar (or menu bar on OSX)."
  },
  {
    "form": "(reaper.BR_Win32_GetParent hwnd) :: (identifier)",
    "doc": "(reaper.BR_Win32_GetParent hwnd) :: (identifier)\nhwnd :: identifier\n[BR] Equivalent to win32 API GetParent().",
    "name": "BR_Win32_GetParent",
    "params": [
      {
        "type": "identifier",
        "name": "hwnd"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API GetParent()."
  },
  {
    "form": "(reaper.BR_Win32_GetPrivateProfileString sectionName keyName defaultString filePath) :: (integer string)",
    "doc": "(reaper.BR_Win32_GetPrivateProfileString sectionName keyName defaultString filePath) :: (integer string)\nsectionName :: string\nkeyName :: string\ndefaultString :: string\nfilePath :: string\n[BR] Equivalent to win32 API GetPrivateProfileString(). For example, you can use this to get values from REAPER.ini",
    "name": "BR_Win32_GetPrivateProfileString",
    "params": [
      {
        "type": "string",
        "name": "sectionName"
      },
      {
        "type": "string",
        "name": "keyName"
      },
      {
        "type": "string",
        "name": "defaultString"
      },
      {
        "type": "string",
        "name": "filePath"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "string"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API GetPrivateProfileString(). For example, you can use this to get values from REAPER.ini"
  },
  {
    "form": "(reaper.BR_Win32_GetWindow hwnd cmd) :: (identifier)",
    "doc": "(reaper.BR_Win32_GetWindow hwnd cmd) :: (identifier)\nhwnd :: identifier\ncmd :: integer\n[BR] Equivalent to win32 API GetWindow().",
    "name": "BR_Win32_GetWindow",
    "params": [
      {
        "type": "identifier",
        "name": "hwnd"
      },
      {
        "type": "integer",
        "name": "cmd"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API GetWindow()."
  },
  {
    "form": "(reaper.BR_Win32_GetWindowLong hwnd index) :: (integer)",
    "doc": "(reaper.BR_Win32_GetWindowLong hwnd index) :: (integer)\nhwnd :: identifier\nindex :: integer\n[BR] Equivalent to win32 API GetWindowLong().",
    "name": "BR_Win32_GetWindowLong",
    "params": [
      {
        "type": "identifier",
        "name": "hwnd"
      },
      {
        "type": "integer",
        "name": "index"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API GetWindowLong()."
  },
  {
    "form": "(reaper.BR_Win32_GetWindowRect hwnd) :: (boolean integer integer integer integer)",
    "doc": "(reaper.BR_Win32_GetWindowRect hwnd) :: (boolean integer integer integer integer)\nhwnd :: identifier\n[BR] Equivalent to win32 API GetWindowRect().",
    "name": "BR_Win32_GetWindowRect",
    "params": [
      {
        "type": "identifier",
        "name": "hwnd"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "left"
      },
      {
        "type": "integer",
        "name": "top"
      },
      {
        "type": "integer",
        "name": "right"
      },
      {
        "type": "integer",
        "name": "bottom"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API GetWindowRect()."
  },
  {
    "form": "(reaper.BR_Win32_GetWindowText hwnd) :: (integer string)",
    "doc": "(reaper.BR_Win32_GetWindowText hwnd) :: (integer string)\nhwnd :: identifier\n[BR] Equivalent to win32 API GetWindowText().",
    "name": "BR_Win32_GetWindowText",
    "params": [
      {
        "type": "identifier",
        "name": "hwnd"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "text"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API GetWindowText()."
  },
  {
    "form": "(reaper.BR_Win32_HIBYTE value) :: (integer)",
    "doc": "(reaper.BR_Win32_HIBYTE value) :: (integer)\nvalue :: integer\n[BR] Equivalent to win32 API HIBYTE().",
    "name": "BR_Win32_HIBYTE",
    "params": [
      {
        "type": "integer",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API HIBYTE()."
  },
  {
    "form": "(reaper.BR_Win32_HIWORD value) :: (integer)",
    "doc": "(reaper.BR_Win32_HIWORD value) :: (integer)\nvalue :: integer\n[BR] Equivalent to win32 API HIWORD().",
    "name": "BR_Win32_HIWORD",
    "params": [
      {
        "type": "integer",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API HIWORD()."
  },
  {
    "form": "(reaper.BR_Win32_HwndToString hwnd) :: (string)",
    "doc": "(reaper.BR_Win32_HwndToString hwnd) :: (string)\nhwnd :: identifier\n[BR] Convert HWND to string. To convert string back to HWND, see BR_Win32_StringToHwnd.",
    "name": "BR_Win32_HwndToString",
    "params": [
      {
        "type": "identifier",
        "name": "hwnd"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "string"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Convert HWND to string. To convert string back to HWND, see BR_Win32_StringToHwnd."
  },
  {
    "form": "(reaper.BR_Win32_IsWindow hwnd) :: (boolean)",
    "doc": "(reaper.BR_Win32_IsWindow hwnd) :: (boolean)\nhwnd :: identifier\n[BR] Equivalent to win32 API IsWindow().",
    "name": "BR_Win32_IsWindow",
    "params": [
      {
        "type": "identifier",
        "name": "hwnd"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API IsWindow()."
  },
  {
    "form": "(reaper.BR_Win32_IsWindowVisible hwnd) :: (boolean)",
    "doc": "(reaper.BR_Win32_IsWindowVisible hwnd) :: (boolean)\nhwnd :: identifier\n[BR] Equivalent to win32 API IsWindowVisible().",
    "name": "BR_Win32_IsWindowVisible",
    "params": [
      {
        "type": "identifier",
        "name": "hwnd"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API IsWindowVisible()."
  },
  {
    "form": "(reaper.BR_Win32_LOBYTE value) :: (integer)",
    "doc": "(reaper.BR_Win32_LOBYTE value) :: (integer)\nvalue :: integer\n[BR] Equivalent to win32 API LOBYTE().",
    "name": "BR_Win32_LOBYTE",
    "params": [
      {
        "type": "integer",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API LOBYTE()."
  },
  {
    "form": "(reaper.BR_Win32_LOWORD value) :: (integer)",
    "doc": "(reaper.BR_Win32_LOWORD value) :: (integer)\nvalue :: integer\n[BR] Equivalent to win32 API LOWORD().",
    "name": "BR_Win32_LOWORD",
    "params": [
      {
        "type": "integer",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API LOWORD()."
  },
  {
    "form": "(reaper.BR_Win32_MAKELONG low high) :: (integer)",
    "doc": "(reaper.BR_Win32_MAKELONG low high) :: (integer)\nlow :: integer\nhigh :: integer\n[BR] Equivalent to win32 API MAKELONG().",
    "name": "BR_Win32_MAKELONG",
    "params": [
      {
        "type": "integer",
        "name": "low"
      },
      {
        "type": "integer",
        "name": "high"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API MAKELONG()."
  },
  {
    "form": "(reaper.BR_Win32_MAKELPARAM low high) :: (integer)",
    "doc": "(reaper.BR_Win32_MAKELPARAM low high) :: (integer)\nlow :: integer\nhigh :: integer\n[BR] Equivalent to win32 API MAKELPARAM().",
    "name": "BR_Win32_MAKELPARAM",
    "params": [
      {
        "type": "integer",
        "name": "low"
      },
      {
        "type": "integer",
        "name": "high"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API MAKELPARAM()."
  },
  {
    "form": "(reaper.BR_Win32_MAKELRESULT low high) :: (integer)",
    "doc": "(reaper.BR_Win32_MAKELRESULT low high) :: (integer)\nlow :: integer\nhigh :: integer\n[BR] Equivalent to win32 API MAKELRESULT().",
    "name": "BR_Win32_MAKELRESULT",
    "params": [
      {
        "type": "integer",
        "name": "low"
      },
      {
        "type": "integer",
        "name": "high"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API MAKELRESULT()."
  },
  {
    "form": "(reaper.BR_Win32_MAKEWORD low high) :: (integer)",
    "doc": "(reaper.BR_Win32_MAKEWORD low high) :: (integer)\nlow :: integer\nhigh :: integer\n[BR] Equivalent to win32 API MAKEWORD().",
    "name": "BR_Win32_MAKEWORD",
    "params": [
      {
        "type": "integer",
        "name": "low"
      },
      {
        "type": "integer",
        "name": "high"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API MAKEWORD()."
  },
  {
    "form": "(reaper.BR_Win32_MAKEWPARAM low high) :: (integer)",
    "doc": "(reaper.BR_Win32_MAKEWPARAM low high) :: (integer)\nlow :: integer\nhigh :: integer\n[BR] Equivalent to win32 API MAKEWPARAM().",
    "name": "BR_Win32_MAKEWPARAM",
    "params": [
      {
        "type": "integer",
        "name": "low"
      },
      {
        "type": "integer",
        "name": "high"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API MAKEWPARAM()."
  },
  {
    "form": "(reaper.BR_Win32_MIDIEditor_GetActive ) :: (identifier)",
    "doc": "(reaper.BR_Win32_MIDIEditor_GetActive ) :: (identifier)\n[BR] Alternative to MIDIEditor_GetActive. REAPER seems to have problems with extensions using HWND type for exported functions so all BR_Win32 functions use void* instead of HWND type.",
    "name": "BR_Win32_MIDIEditor_GetActive",
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Alternative to MIDIEditor_GetActive. REAPER seems to have problems with extensions using HWND type for exported functions so all BR_Win32 functions use void* instead of HWND type."
  },
  {
    "form": "(reaper.BR_Win32_ScreenToClient hwnd xIn yIn) :: (integer integer)",
    "doc": "(reaper.BR_Win32_ScreenToClient hwnd xIn yIn) :: (integer integer)\nhwnd :: identifier\nxIn :: integer\nyIn :: integer\n[BR] Equivalent to win32 API ClientToScreen().",
    "name": "BR_Win32_ScreenToClient",
    "params": [
      {
        "type": "identifier",
        "name": "hwnd"
      },
      {
        "type": "integer",
        "name": "xIn"
      },
      {
        "type": "integer",
        "name": "yIn"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "x"
      },
      {
        "type": "integer",
        "name": "y"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API ClientToScreen()."
  },
  {
    "form": "(reaper.BR_Win32_SendMessage hwnd msg lParam wParam) :: (integer)",
    "doc": "(reaper.BR_Win32_SendMessage hwnd msg lParam wParam) :: (integer)\nhwnd :: identifier\nmsg :: integer\nlParam :: integer\nwParam :: integer\n[BR] Equivalent to win32 API SendMessage().",
    "name": "BR_Win32_SendMessage",
    "params": [
      {
        "type": "identifier",
        "name": "hwnd"
      },
      {
        "type": "integer",
        "name": "msg"
      },
      {
        "type": "integer",
        "name": "lParam"
      },
      {
        "type": "integer",
        "name": "wParam"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API SendMessage()."
  },
  {
    "form": "(reaper.BR_Win32_SetFocus hwnd) :: (identifier)",
    "doc": "(reaper.BR_Win32_SetFocus hwnd) :: (identifier)\nhwnd :: identifier\n[BR] Equivalent to win32 API SetFocus().",
    "name": "BR_Win32_SetFocus",
    "params": [
      {
        "type": "identifier",
        "name": "hwnd"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API SetFocus()."
  },
  {
    "form": "(reaper.BR_Win32_SetForegroundWindow hwnd) :: (integer)",
    "doc": "(reaper.BR_Win32_SetForegroundWindow hwnd) :: (integer)\nhwnd :: identifier\n[BR] Equivalent to win32 API SetForegroundWindow().",
    "name": "BR_Win32_SetForegroundWindow",
    "params": [
      {
        "type": "identifier",
        "name": "hwnd"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API SetForegroundWindow()."
  },
  {
    "form": "(reaper.BR_Win32_SetWindowLong hwnd index newLong) :: (integer)",
    "doc": "(reaper.BR_Win32_SetWindowLong hwnd index newLong) :: (integer)\nhwnd :: identifier\nindex :: integer\nnewLong :: integer\n[BR] Equivalent to win32 API SetWindowLong().",
    "name": "BR_Win32_SetWindowLong",
    "params": [
      {
        "type": "identifier",
        "name": "hwnd"
      },
      {
        "type": "integer",
        "name": "index"
      },
      {
        "type": "integer",
        "name": "newLong"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API SetWindowLong()."
  },
  {
    "form": "(reaper.BR_Win32_SetWindowPos hwnd hwndInsertAfter x y width height flags) :: (boolean)",
    "doc": "(reaper.BR_Win32_SetWindowPos hwnd hwndInsertAfter x y width height flags) :: (boolean)\nhwnd :: identifier\nhwndInsertAfter :: string\nx :: integer\ny :: integer\nwidth :: integer\nheight :: integer\nflags :: integer\n[BR] Equivalent to win32 API SetWindowPos().\nhwndInsertAfter may be a string: \"HWND_BOTTOM\", \"HWND_NOTOPMOST\", \"HWND_TOP\", \"HWND_TOPMOST\" or a string obtained with BR_Win32_HwndToString.",
    "name": "BR_Win32_SetWindowPos",
    "params": [
      {
        "type": "identifier",
        "name": "hwnd"
      },
      {
        "type": "string",
        "name": "hwndInsertAfter"
      },
      {
        "type": "integer",
        "name": "x"
      },
      {
        "type": "integer",
        "name": "y"
      },
      {
        "type": "integer",
        "name": "width"
      },
      {
        "type": "integer",
        "name": "height"
      },
      {
        "type": "integer",
        "name": "flags"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API SetWindowPos().\nhwndInsertAfter may be a string: \"HWND_BOTTOM\", \"HWND_NOTOPMOST\", \"HWND_TOP\", \"HWND_TOPMOST\" or a string obtained with BR_Win32_HwndToString."
  },
  {
    "form": "(reaper.BR_Win32_ShellExecute operation file parameters directory showFlags) :: (integer)",
    "doc": "(reaper.BR_Win32_ShellExecute operation file parameters directory showFlags) :: (integer)\noperation :: string\nfile :: string\nparameters :: string\ndirectory :: string\nshowFlags :: integer\n[BR] Equivalent to win32 API ShellExecute() with HWND set to main window",
    "name": "BR_Win32_ShellExecute",
    "params": [
      {
        "type": "string",
        "name": "operation"
      },
      {
        "type": "string",
        "name": "file"
      },
      {
        "type": "string",
        "name": "parameters"
      },
      {
        "type": "string",
        "name": "directory"
      },
      {
        "type": "integer",
        "name": "showFlags"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API ShellExecute() with HWND set to main window"
  },
  {
    "form": "(reaper.BR_Win32_ShowWindow hwnd cmdShow) :: (boolean)",
    "doc": "(reaper.BR_Win32_ShowWindow hwnd cmdShow) :: (boolean)\nhwnd :: identifier\ncmdShow :: integer\n[BR] Equivalent to win32 API ShowWindow().",
    "name": "BR_Win32_ShowWindow",
    "params": [
      {
        "type": "identifier",
        "name": "hwnd"
      },
      {
        "type": "integer",
        "name": "cmdShow"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API ShowWindow()."
  },
  {
    "form": "(reaper.BR_Win32_StringToHwnd string) :: (identifier)",
    "doc": "(reaper.BR_Win32_StringToHwnd string) :: (identifier)\nstring :: string\n[BR] Convert string to HWND. To convert HWND back to string, see BR_Win32_HwndToString.",
    "name": "BR_Win32_StringToHwnd",
    "params": [
      {
        "type": "string",
        "name": "string"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Convert string to HWND. To convert HWND back to string, see BR_Win32_HwndToString."
  },
  {
    "form": "(reaper.BR_Win32_WindowFromPoint x y) :: (identifier)",
    "doc": "(reaper.BR_Win32_WindowFromPoint x y) :: (identifier)\nx :: integer\ny :: integer\n[BR] Equivalent to win32 API WindowFromPoint().",
    "name": "BR_Win32_WindowFromPoint",
    "params": [
      {
        "type": "integer",
        "name": "x"
      },
      {
        "type": "integer",
        "name": "y"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API WindowFromPoint()."
  },
  {
    "form": "(reaper.BR_Win32_WritePrivateProfileString sectionName keyName value filePath) :: (boolean)",
    "doc": "(reaper.BR_Win32_WritePrivateProfileString sectionName keyName value filePath) :: (boolean)\nsectionName :: string\nkeyName :: string\nvalue :: string\nfilePath :: string\n[BR] Equivalent to win32 API WritePrivateProfileString(). For example, you can use this to write to REAPER.ini",
    "name": "BR_Win32_WritePrivateProfileString",
    "params": [
      {
        "type": "string",
        "name": "sectionName"
      },
      {
        "type": "string",
        "name": "keyName"
      },
      {
        "type": "string",
        "name": "value"
      },
      {
        "type": "string",
        "name": "filePath"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[BR] Equivalent to win32 API WritePrivateProfileString(). For example, you can use this to write to REAPER.ini"
  },
  {
    "form": "(reaper.Blink_GetBeatAtTime time quantum) :: (number)",
    "doc": "(reaper.Blink_GetBeatAtTime time quantum) :: (number)\ntime :: number\nquantum :: number\nGet session beat value corresponding to given time for given quantum.",
    "name": "Blink_GetBeatAtTime",
    "params": [
      {
        "type": "number",
        "name": "time"
      },
      {
        "type": "number",
        "name": "quantum"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Get session beat value corresponding to given time for given quantum."
  },
  {
    "form": "(reaper.Blink_GetClockNow ) :: (number)",
    "doc": "(reaper.Blink_GetClockNow ) :: (number)\nClock used by Blink.",
    "name": "Blink_GetClockNow",
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Clock used by Blink."
  },
  {
    "form": "(reaper.Blink_GetEnabled ) :: (boolean)",
    "doc": "(reaper.Blink_GetEnabled ) :: (boolean)\nIs Blink currently enabled?",
    "name": "Blink_GetEnabled",
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Is Blink currently enabled?"
  },
  {
    "form": "(reaper.Blink_GetMaster ) :: (boolean)",
    "doc": "(reaper.Blink_GetMaster ) :: (boolean)\nIs Blink Master?",
    "name": "Blink_GetMaster",
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Is Blink Master?"
  },
  {
    "form": "(reaper.Blink_GetNumPeers ) :: (integer)",
    "doc": "(reaper.Blink_GetNumPeers ) :: (integer)\nHow many peers are currently connected in Link session?",
    "name": "Blink_GetNumPeers",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "How many peers are currently connected in Link session?"
  },
  {
    "form": "(reaper.Blink_GetPhaseAtTime time quantum) :: (number)",
    "doc": "(reaper.Blink_GetPhaseAtTime time quantum) :: (number)\ntime :: number\nquantum :: number\nGet session phase at given time for given quantum.",
    "name": "Blink_GetPhaseAtTime",
    "params": [
      {
        "type": "number",
        "name": "time"
      },
      {
        "type": "number",
        "name": "quantum"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Get session phase at given time for given quantum."
  },
  {
    "form": "(reaper.Blink_GetPlaying ) :: (boolean)",
    "doc": "(reaper.Blink_GetPlaying ) :: (boolean)\nIs transport playing?",
    "name": "Blink_GetPlaying",
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Is transport playing?"
  },
  {
    "form": "(reaper.Blink_GetPuppet ) :: (boolean)",
    "doc": "(reaper.Blink_GetPuppet ) :: (boolean)\nIs Blink Puppet?",
    "name": "Blink_GetPuppet",
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Is Blink Puppet?"
  },
  {
    "form": "(reaper.Blink_GetQuantum ) :: (number)",
    "doc": "(reaper.Blink_GetQuantum ) :: (number)\nGet quantum.",
    "name": "Blink_GetQuantum",
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Get quantum."
  },
  {
    "form": "(reaper.Blink_GetStartStopSyncEnabled ) :: (boolean)",
    "doc": "(reaper.Blink_GetStartStopSyncEnabled ) :: (boolean)\nIs start/stop synchronization enabled?",
    "name": "Blink_GetStartStopSyncEnabled",
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Is start/stop synchronization enabled?"
  },
  {
    "form": "(reaper.Blink_GetTempo ) :: (number)",
    "doc": "(reaper.Blink_GetTempo ) :: (number)\nTempo of timeline, in quarter note Beats Per Minute.",
    "name": "Blink_GetTempo",
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Tempo of timeline, in quarter note Beats Per Minute."
  },
  {
    "form": "(reaper.Blink_GetTimeAtBeat beat quantum) :: (number)",
    "doc": "(reaper.Blink_GetTimeAtBeat beat quantum) :: (number)\nbeat :: number\nquantum :: number\nGet time at which given beat occurs for given quantum.",
    "name": "Blink_GetTimeAtBeat",
    "params": [
      {
        "type": "number",
        "name": "beat"
      },
      {
        "type": "number",
        "name": "quantum"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Get time at which given beat occurs for given quantum."
  },
  {
    "form": "(reaper.Blink_GetTimeForPlaying ) :: (number)",
    "doc": "(reaper.Blink_GetTimeForPlaying ) :: (number)\nGet time at which transport start/stop occurs.",
    "name": "Blink_GetTimeForPlaying",
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Get time at which transport start/stop occurs."
  },
  {
    "form": "(reaper.Blink_GetVersion ) :: (number)",
    "doc": "(reaper.Blink_GetVersion ) :: (number)\nGet Blink version.",
    "name": "Blink_GetVersion",
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Get Blink version."
  },
  {
    "form": "(reaper.Blink_SetBeatAtStartPlayingTimeRequest beat quantum) :: nil",
    "doc": "(reaper.Blink_SetBeatAtStartPlayingTimeRequest beat quantum) :: nil\nbeat :: number\nquantum :: number\nConvenience function to attempt to map given beat to time when transport is starting to play in context of given quantum. This function evaluates to a no-op if GetPlaying() equals false.",
    "name": "Blink_SetBeatAtStartPlayingTimeRequest",
    "params": [
      {
        "type": "number",
        "name": "beat"
      },
      {
        "type": "number",
        "name": "quantum"
      }
    ],
    "namespace": "reaper",
    "description": "Convenience function to attempt to map given beat to time when transport is starting to play in context of given quantum. This function evaluates to a no-op if GetPlaying() equals false."
  },
  {
    "form": "(reaper.Blink_SetBeatAtTimeForce bpm time quantum) :: nil",
    "doc": "(reaper.Blink_SetBeatAtTimeForce bpm time quantum) :: nil\nbpm :: number\ntime :: number\nquantum :: number\nRudely re-map beat/time relationship for all peers in Link session.",
    "name": "Blink_SetBeatAtTimeForce",
    "params": [
      {
        "type": "number",
        "name": "bpm"
      },
      {
        "type": "number",
        "name": "time"
      },
      {
        "type": "number",
        "name": "quantum"
      }
    ],
    "namespace": "reaper",
    "description": "Rudely re-map beat/time relationship for all peers in Link session."
  },
  {
    "form": "(reaper.Blink_SetBeatAtTimeRequest bpm time quantum) :: nil",
    "doc": "(reaper.Blink_SetBeatAtTimeRequest bpm time quantum) :: nil\nbpm :: number\ntime :: number\nquantum :: number\nAttempt to map given beat to given time in context of given quantum.",
    "name": "Blink_SetBeatAtTimeRequest",
    "params": [
      {
        "type": "number",
        "name": "bpm"
      },
      {
        "type": "number",
        "name": "time"
      },
      {
        "type": "number",
        "name": "quantum"
      }
    ],
    "namespace": "reaper",
    "description": "Attempt to map given beat to given time in context of given quantum."
  },
  {
    "form": "(reaper.Blink_SetCaptureTransportCommands enable) :: nil",
    "doc": "(reaper.Blink_SetCaptureTransportCommands enable) :: nil\nenable :: boolean\nCaptures REAPER Transport commands and 'Tempo: Increase/Decrease current project tempo by 01 BPM' commands and broadcasts them into Link session. When used with Master or Puppet mode enabled, provides better integration between REAPER and Link session transport and tempos.",
    "name": "Blink_SetCaptureTransportCommands",
    "params": [
      {
        "type": "boolean",
        "name": "enable"
      }
    ],
    "namespace": "reaper",
    "description": "Captures REAPER Transport commands and 'Tempo: Increase/Decrease current project tempo by 01 BPM' commands and broadcasts them into Link session. When used with Master or Puppet mode enabled, provides better integration between REAPER and Link session transport and tempos."
  },
  {
    "form": "(reaper.Blink_SetEnabled enable) :: nil",
    "doc": "(reaper.Blink_SetEnabled enable) :: nil\nenable :: boolean\nEnable/disable Blink. In Blink methods transport, tempo and timeline refer to Link session, not local REAPER instance.",
    "name": "Blink_SetEnabled",
    "params": [
      {
        "type": "boolean",
        "name": "enable"
      }
    ],
    "namespace": "reaper",
    "description": "Enable/disable Blink. In Blink methods transport, tempo and timeline refer to Link session, not local REAPER instance."
  },
  {
    "form": "(reaper.Blink_SetMaster enable) :: nil",
    "doc": "(reaper.Blink_SetMaster enable) :: nil\nenable :: boolean\nSet Blink as Master. Puppet needs to be enabled first. Same as Puppet, but possible beat offset is broadcast to Link session, effectively forcing local REAPER timeline on peers. Only one, if any, Blink should be Master in Link session.",
    "name": "Blink_SetMaster",
    "params": [
      {
        "type": "boolean",
        "name": "enable"
      }
    ],
    "namespace": "reaper",
    "description": "Set Blink as Master. Puppet needs to be enabled first. Same as Puppet, but possible beat offset is broadcast to Link session, effectively forcing local REAPER timeline on peers. Only one, if any, Blink should be Master in Link session."
  },
  {
    "form": "(reaper.Blink_SetPlaying playing time) :: nil",
    "doc": "(reaper.Blink_SetPlaying playing time) :: nil\nplaying :: boolean\ntime :: number\nSet if transport should be playing or stopped, taking effect at given time.",
    "name": "Blink_SetPlaying",
    "params": [
      {
        "type": "boolean",
        "name": "playing"
      },
      {
        "type": "number",
        "name": "time"
      }
    ],
    "namespace": "reaper",
    "description": "Set if transport should be playing or stopped, taking effect at given time."
  },
  {
    "form": "(reaper.Blink_SetPlayingAndBeatAtTimeRequest playing time beat quantum) :: nil",
    "doc": "(reaper.Blink_SetPlayingAndBeatAtTimeRequest playing time beat quantum) :: nil\nplaying :: boolean\ntime :: number\nbeat :: number\nquantum :: number\nConvenience function to start or stop transport at given time and attempt to map given beat to this time in context of given quantum.",
    "name": "Blink_SetPlayingAndBeatAtTimeRequest",
    "params": [
      {
        "type": "boolean",
        "name": "playing"
      },
      {
        "type": "number",
        "name": "time"
      },
      {
        "type": "number",
        "name": "beat"
      },
      {
        "type": "number",
        "name": "quantum"
      }
    ],
    "namespace": "reaper",
    "description": "Convenience function to start or stop transport at given time and attempt to map given beat to this time in context of given quantum."
  },
  {
    "form": "(reaper.Blink_SetPuppet enable) :: nil",
    "doc": "(reaper.Blink_SetPuppet enable) :: nil\nenable :: boolean\nSet Blink as Puppet. When enabled, Blink attempts to synchronize local REAPER tempo to Link session tempo by adjusting current active tempo/time signature marker, or broadcasts local REAPER tempo changes into Link session, and attempts to correct possible offset by adjusting REAPER playrate. Based on cumulative single beat phase since Link session transport start, regardless of quantum.",
    "name": "Blink_SetPuppet",
    "params": [
      {
        "type": "boolean",
        "name": "enable"
      }
    ],
    "namespace": "reaper",
    "description": "Set Blink as Puppet. When enabled, Blink attempts to synchronize local REAPER tempo to Link session tempo by adjusting current active tempo/time signature marker, or broadcasts local REAPER tempo changes into Link session, and attempts to correct possible offset by adjusting REAPER playrate. Based on cumulative single beat phase since Link session transport start, regardless of quantum."
  },
  {
    "form": "(reaper.Blink_SetQuantum quantum) :: nil",
    "doc": "(reaper.Blink_SetQuantum quantum) :: nil\nquantum :: number\nSet quantum. Usually this is set to length of one measure/bar in quarter notes.",
    "name": "Blink_SetQuantum",
    "params": [
      {
        "type": "number",
        "name": "quantum"
      }
    ],
    "namespace": "reaper",
    "description": "Set quantum. Usually this is set to length of one measure/bar in quarter notes."
  },
  {
    "form": "(reaper.Blink_SetStartStopSyncEnabled enable) :: nil",
    "doc": "(reaper.Blink_SetStartStopSyncEnabled enable) :: nil\nenable :: boolean\nEnable start/stop synchronization.",
    "name": "Blink_SetStartStopSyncEnabled",
    "params": [
      {
        "type": "boolean",
        "name": "enable"
      }
    ],
    "namespace": "reaper",
    "description": "Enable start/stop synchronization."
  },
  {
    "form": "(reaper.Blink_SetTempo bpm) :: nil",
    "doc": "(reaper.Blink_SetTempo bpm) :: nil\nbpm :: number\nSet timeline tempo to given bpm value.",
    "name": "Blink_SetTempo",
    "params": [
      {
        "type": "number",
        "name": "bpm"
      }
    ],
    "namespace": "reaper",
    "description": "Set timeline tempo to given bpm value."
  },
  {
    "form": "(reaper.Blink_SetTempoAtTime bpm time) :: nil",
    "doc": "(reaper.Blink_SetTempoAtTime bpm time) :: nil\nbpm :: number\ntime :: number\nSet tempo to given bpm value, taking effect at given time.",
    "name": "Blink_SetTempoAtTime",
    "params": [
      {
        "type": "number",
        "name": "bpm"
      },
      {
        "type": "number",
        "name": "time"
      }
    ],
    "namespace": "reaper",
    "description": "Set tempo to given bpm value, taking effect at given time."
  },
  {
    "form": "(reaper.Blink_StartStop ) :: nil",
    "doc": "(reaper.Blink_StartStop ) :: nil\nTransport start/stop.",
    "name": "Blink_StartStop",
    "namespace": "reaper",
    "description": "Transport start/stop."
  },
  {
    "form": "(reaper.CF_EnumMediaSourceCues src index) :: (integer number number boolean string)",
    "doc": "(reaper.CF_EnumMediaSourceCues src index) :: (integer number number boolean string)\nsrc :: PCM_source\nindex :: integer\nEnumerate the source's media cues. Returns the next index or 0 when finished.",
    "name": "CF_EnumMediaSourceCues",
    "params": [
      {
        "type": "PCM_source",
        "name": "src"
      },
      {
        "type": "integer",
        "name": "index"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "time"
      },
      {
        "type": "number",
        "name": "endTime"
      },
      {
        "type": "boolean",
        "name": "isRegion"
      },
      {
        "type": "string",
        "name": "name"
      }
    ],
    "namespace": "reaper",
    "description": "Enumerate the source's media cues. Returns the next index or 0 when finished."
  },
  {
    "form": "(reaper.CF_EnumSelectedFX hwnd index) :: (integer)",
    "doc": "(reaper.CF_EnumSelectedFX hwnd index) :: (integer)\nhwnd :: FxChain\nindex :: integer\nReturn the index of the next selected effect in the given FX chain. Start index should be -1. Returns -1 if there are no more selected effects.",
    "name": "CF_EnumSelectedFX",
    "params": [
      {
        "type": "FxChain",
        "name": "hwnd"
      },
      {
        "type": "integer",
        "name": "index"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Return the index of the next selected effect in the given FX chain. Start index should be -1. Returns -1 if there are no more selected effects."
  },
  {
    "form": "(reaper.CF_EnumerateActions section index) :: (integer string)",
    "doc": "(reaper.CF_EnumerateActions section index) :: (integer string)\nsection :: integer\nindex :: integer\nWrapper for the unexposed kbd_enumerateActions API function.\nMain=0, Main (alt recording)=100, MIDI Editor=32060, MIDI Event List Editor=32061, MIDI Inline Editor=32062, Media Explorer=32063",
    "name": "CF_EnumerateActions",
    "params": [
      {
        "type": "integer",
        "name": "section"
      },
      {
        "type": "integer",
        "name": "index"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "name"
      }
    ],
    "namespace": "reaper",
    "description": "Wrapper for the unexposed kbd_enumerateActions API function.\nMain=0, Main (alt recording)=100, MIDI Editor=32060, MIDI Event List Editor=32061, MIDI Inline Editor=32062, Media Explorer=32063"
  },
  {
    "form": "(reaper.CF_ExportMediaSource src fn) :: (boolean)",
    "doc": "(reaper.CF_ExportMediaSource src fn) :: (boolean)\nsrc :: PCM_source\nfn :: string\nExport the source to the given file (MIDI only).",
    "name": "CF_ExportMediaSource",
    "params": [
      {
        "type": "PCM_source",
        "name": "src"
      },
      {
        "type": "string",
        "name": "fn"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Export the source to the given file (MIDI only)."
  },
  {
    "form": "(reaper.CF_GetClipboard ) :: (string)",
    "doc": "(reaper.CF_GetClipboard ) :: (string)\nRead the contents of the system clipboard.",
    "name": "CF_GetClipboard",
    "returns": [
      {
        "type": "string",
        "name": "text"
      }
    ],
    "namespace": "reaper",
    "description": "Read the contents of the system clipboard."
  },
  {
    "form": "(reaper.CF_GetClipboardBig output) :: (string)",
    "doc": "(reaper.CF_GetClipboardBig output) :: (string)\noutput :: WDL_FastString\n[DEPRECATED: Use CF_GetClipboard] Read the contents of the system clipboard. See SNM_CreateFastString and SNM_DeleteFastString.",
    "name": "CF_GetClipboardBig",
    "params": [
      {
        "type": "WDL_FastString",
        "name": "output"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "[DEPRECATED: Use CF_GetClipboard] Read the contents of the system clipboard. See SNM_CreateFastString and SNM_DeleteFastString."
  },
  {
    "form": "(reaper.CF_GetCommandText section command) :: (string)",
    "doc": "(reaper.CF_GetCommandText section command) :: (string)\nsection :: integer\ncommand :: integer\nWrapper for the unexposed kbd_getTextFromCmd API function. See CF_EnumerateActions for common section IDs.",
    "name": "CF_GetCommandText",
    "params": [
      {
        "type": "integer",
        "name": "section"
      },
      {
        "type": "integer",
        "name": "command"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "Wrapper for the unexposed kbd_getTextFromCmd API function. See CF_EnumerateActions for common section IDs."
  },
  {
    "form": "(reaper.CF_GetFocusedFXChain ) :: (FxChain)",
    "doc": "(reaper.CF_GetFocusedFXChain ) :: (FxChain)\nReturn a handle to the currently focused FX chain window.",
    "name": "CF_GetFocusedFXChain",
    "returns": [
      {
        "type": "FxChain"
      }
    ],
    "namespace": "reaper",
    "description": "Return a handle to the currently focused FX chain window."
  },
  {
    "form": "(reaper.CF_GetMediaSourceBitDepth src) :: (integer)",
    "doc": "(reaper.CF_GetMediaSourceBitDepth src) :: (integer)\nsrc :: PCM_source\nReturns the bit depth if available (0 otherwise).",
    "name": "CF_GetMediaSourceBitDepth",
    "params": [
      {
        "type": "PCM_source",
        "name": "src"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the bit depth if available (0 otherwise)."
  },
  {
    "form": "(reaper.CF_GetMediaSourceMetadata src name out) :: (boolean string)",
    "doc": "(reaper.CF_GetMediaSourceMetadata src name out) :: (boolean string)\nsrc :: PCM_source\nname :: string\nout :: string\nGet the value of the given metadata field (eg. DESC, ORIG, ORIGREF, DATE, TIME, UMI, CODINGHISTORY for BWF).",
    "name": "CF_GetMediaSourceMetadata",
    "params": [
      {
        "type": "PCM_source",
        "name": "src"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "string",
        "name": "out"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "out"
      }
    ],
    "namespace": "reaper",
    "description": "Get the value of the given metadata field (eg. DESC, ORIG, ORIGREF, DATE, TIME, UMI, CODINGHISTORY for BWF)."
  },
  {
    "form": "(reaper.CF_GetMediaSourceOnline src) :: (boolean)",
    "doc": "(reaper.CF_GetMediaSourceOnline src) :: (boolean)\nsrc :: PCM_source\nReturns the online/offline status of the given source.",
    "name": "CF_GetMediaSourceOnline",
    "params": [
      {
        "type": "PCM_source",
        "name": "src"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the online/offline status of the given source."
  },
  {
    "form": "(reaper.CF_GetMediaSourceRPP src) :: (boolean string)",
    "doc": "(reaper.CF_GetMediaSourceRPP src) :: (boolean string)\nsrc :: PCM_source\nGet the project associated with this source (BWF, subproject...).",
    "name": "CF_GetMediaSourceRPP",
    "params": [
      {
        "type": "PCM_source",
        "name": "src"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "fn"
      }
    ],
    "namespace": "reaper",
    "description": "Get the project associated with this source (BWF, subproject...)."
  },
  {
    "form": "(reaper.CF_GetSWSVersion ) :: (string)",
    "doc": "(reaper.CF_GetSWSVersion ) :: (string)\nReturn the current SWS version number.",
    "name": "CF_GetSWSVersion",
    "returns": [
      {
        "type": "string",
        "name": "version"
      }
    ],
    "namespace": "reaper",
    "description": "Return the current SWS version number."
  },
  {
    "form": "(reaper.CF_GetTakeFXChain take) :: (FxChain)",
    "doc": "(reaper.CF_GetTakeFXChain take) :: (FxChain)\ntake :: MediaItem_Take\nReturn a handle to the given take FX chain window. HACK: This temporarily renames the take in order to disambiguate the take FX chain window from similarily named takes.",
    "name": "CF_GetTakeFXChain",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "FxChain"
      }
    ],
    "namespace": "reaper",
    "description": "Return a handle to the given take FX chain window. HACK: This temporarily renames the take in order to disambiguate the take FX chain window from similarily named takes."
  },
  {
    "form": "(reaper.CF_GetTrackFXChain track) :: (FxChain)",
    "doc": "(reaper.CF_GetTrackFXChain track) :: (FxChain)\ntrack :: MediaTrack\nReturn a handle to the given track FX chain window.",
    "name": "CF_GetTrackFXChain",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "FxChain"
      }
    ],
    "namespace": "reaper",
    "description": "Return a handle to the given track FX chain window."
  },
  {
    "form": "(reaper.CF_LocateInExplorer file) :: (boolean)",
    "doc": "(reaper.CF_LocateInExplorer file) :: (boolean)\nfile :: string\nSelect the given file in explorer/finder.",
    "name": "CF_LocateInExplorer",
    "params": [
      {
        "type": "string",
        "name": "file"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Select the given file in explorer/finder."
  },
  {
    "form": "(reaper.CF_SelectTrackFX track index) :: (boolean)",
    "doc": "(reaper.CF_SelectTrackFX track index) :: (boolean)\ntrack :: MediaTrack\nindex :: integer\nSet which track effect is active in the track's FX chain. The FX chain window does not have to be open.",
    "name": "CF_SelectTrackFX",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "integer",
        "name": "index"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Set which track effect is active in the track's FX chain. The FX chain window does not have to be open."
  },
  {
    "form": "(reaper.CF_SetClipboard str) :: nil",
    "doc": "(reaper.CF_SetClipboard str) :: nil\nstr :: string\nWrite the given string into the system clipboard.",
    "name": "CF_SetClipboard",
    "params": [
      {
        "type": "string",
        "name": "str"
      }
    ],
    "namespace": "reaper",
    "description": "Write the given string into the system clipboard."
  },
  {
    "form": "(reaper.CF_SetMediaSourceOnline src set) :: nil",
    "doc": "(reaper.CF_SetMediaSourceOnline src set) :: nil\nsrc :: PCM_source\nset :: boolean\nSet the online/offline status of the given source (closes files when set=false).",
    "name": "CF_SetMediaSourceOnline",
    "params": [
      {
        "type": "PCM_source",
        "name": "src"
      },
      {
        "type": "boolean",
        "name": "set"
      }
    ],
    "namespace": "reaper",
    "description": "Set the online/offline status of the given source (closes files when set=false)."
  },
  {
    "form": "(reaper.CF_ShellExecute file) :: (boolean)",
    "doc": "(reaper.CF_ShellExecute file) :: (boolean)\nfile :: string\nOpen the given file or URL in the default application. See also CF_LocateInExplorer.",
    "name": "CF_ShellExecute",
    "params": [
      {
        "type": "string",
        "name": "file"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Open the given file or URL in the default application. See also CF_LocateInExplorer."
  },
  {
    "form": "(reaper.FNG_AddMidiNote midiTake) :: (RprMidiNote)",
    "doc": "(reaper.FNG_AddMidiNote midiTake) :: (RprMidiNote)\nmidiTake :: RprMidiTake\n[FNG] Add MIDI note to MIDI take",
    "name": "FNG_AddMidiNote",
    "params": [
      {
        "type": "RprMidiTake",
        "name": "midiTake"
      }
    ],
    "returns": [
      {
        "type": "RprMidiNote"
      }
    ],
    "namespace": "reaper",
    "description": "[FNG] Add MIDI note to MIDI take"
  },
  {
    "form": "(reaper.FNG_AllocMidiTake take) :: (RprMidiTake)",
    "doc": "(reaper.FNG_AllocMidiTake take) :: (RprMidiTake)\ntake :: MediaItem_Take\n[FNG] Allocate a RprMidiTake from a take pointer. Returns a NULL pointer if the take is not an in-project MIDI take",
    "name": "FNG_AllocMidiTake",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "RprMidiTake"
      }
    ],
    "namespace": "reaper",
    "description": "[FNG] Allocate a RprMidiTake from a take pointer. Returns a NULL pointer if the take is not an in-project MIDI take"
  },
  {
    "form": "(reaper.FNG_CountMidiNotes midiTake) :: (integer)",
    "doc": "(reaper.FNG_CountMidiNotes midiTake) :: (integer)\nmidiTake :: RprMidiTake\n[FNG] Count of how many MIDI notes are in the MIDI take",
    "name": "FNG_CountMidiNotes",
    "params": [
      {
        "type": "RprMidiTake",
        "name": "midiTake"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[FNG] Count of how many MIDI notes are in the MIDI take"
  },
  {
    "form": "(reaper.FNG_FreeMidiTake midiTake) :: nil",
    "doc": "(reaper.FNG_FreeMidiTake midiTake) :: nil\nmidiTake :: RprMidiTake\n[FNG] Commit changes to MIDI take and free allocated memory",
    "name": "FNG_FreeMidiTake",
    "params": [
      {
        "type": "RprMidiTake",
        "name": "midiTake"
      }
    ],
    "namespace": "reaper",
    "description": "[FNG] Commit changes to MIDI take and free allocated memory"
  },
  {
    "form": "(reaper.FNG_GetMidiNote midiTake index) :: (RprMidiNote)",
    "doc": "(reaper.FNG_GetMidiNote midiTake index) :: (RprMidiNote)\nmidiTake :: RprMidiTake\nindex :: integer\n[FNG] Get a MIDI note from a MIDI take at specified index",
    "name": "FNG_GetMidiNote",
    "params": [
      {
        "type": "RprMidiTake",
        "name": "midiTake"
      },
      {
        "type": "integer",
        "name": "index"
      }
    ],
    "returns": [
      {
        "type": "RprMidiNote"
      }
    ],
    "namespace": "reaper",
    "description": "[FNG] Get a MIDI note from a MIDI take at specified index"
  },
  {
    "form": "(reaper.FNG_GetMidiNoteIntProperty midiNote property) :: (integer)",
    "doc": "(reaper.FNG_GetMidiNoteIntProperty midiNote property) :: (integer)\nmidiNote :: RprMidiNote\nproperty :: string\n[FNG] Get MIDI note property",
    "name": "FNG_GetMidiNoteIntProperty",
    "params": [
      {
        "type": "RprMidiNote",
        "name": "midiNote"
      },
      {
        "type": "string",
        "name": "property"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[FNG] Get MIDI note property"
  },
  {
    "form": "(reaper.FNG_SetMidiNoteIntProperty midiNote property value) :: nil",
    "doc": "(reaper.FNG_SetMidiNoteIntProperty midiNote property value) :: nil\nmidiNote :: RprMidiNote\nproperty :: string\nvalue :: integer\n[FNG] Set MIDI note property",
    "name": "FNG_SetMidiNoteIntProperty",
    "params": [
      {
        "type": "RprMidiNote",
        "name": "midiNote"
      },
      {
        "type": "string",
        "name": "property"
      },
      {
        "type": "integer",
        "name": "value"
      }
    ],
    "namespace": "reaper",
    "description": "[FNG] Set MIDI note property"
  },
  {
    "form": "(reaper.Fab_Clear ?idStringIn) :: (boolean)",
    "doc": "(reaper.Fab_Clear ?idStringIn) :: (boolean)\nidStringIn :: string (optional)\nClears ReaFab control map, optionally based on matching idString. Returns true on success.",
    "name": "Fab_Clear",
    "params": [
      {
        "type": "string",
        "name": "idStringIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Clears ReaFab control map, optionally based on matching idString. Returns true on success."
  },
  {
    "form": "(reaper.Fab_Do command val) :: (boolean)",
    "doc": "(reaper.Fab_Do command val) :: (boolean)\ncommand :: integer\nval :: integer\nRuns ReaFab actions/commands. First parameter (command) is ReaFab command number, e.g. 3 for 3rd encoder rotation. Second parameter (val) is MIDI CC Relative value. Value 1 is increment of 1, 127 is decrement of 1. 2 is inc 2, 126 is dec 2 and so on. For button press (commands 9-32) a value of 127 is recommended.",
    "name": "Fab_Do",
    "params": [
      {
        "type": "integer",
        "name": "command"
      },
      {
        "type": "integer",
        "name": "val"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Runs ReaFab actions/commands. First parameter (command) is ReaFab command number, e.g. 3 for 3rd encoder rotation. Second parameter (val) is MIDI CC Relative value. Value 1 is increment of 1, 127 is decrement of 1. 2 is inc 2, 126 is dec 2 and so on. For button press (commands 9-32) a value of 127 is recommended."
  },
  {
    "form": "(reaper.Fab_Dump ) :: nil",
    "doc": "(reaper.Fab_Dump ) :: nil\nDumps current control mapping into .lua file under ResourcePath/Scripts/reafab_dump-timestamp.lua",
    "name": "Fab_Dump",
    "namespace": "reaper",
    "description": "Dumps current control mapping into .lua file under ResourcePath/Scripts/reafab_dump-timestamp.lua"
  },
  {
    "form": "(reaper.Fab_Get command) :: (boolean integer integer)",
    "doc": "(reaper.Fab_Get command) :: (boolean integer integer)\ncommand :: integer\nReturns target FX and parameter index for given ReaFab command in context of selected track and ReaFab FX index. Valid command range 1 ... 24. Returns false if no such command mapping is found. Returns param index -1 for ReaFab internal band change command.",
    "name": "Fab_Get",
    "params": [
      {
        "type": "integer",
        "name": "command"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "fx"
      },
      {
        "type": "integer",
        "name": "param"
      }
    ],
    "namespace": "reaper",
    "description": "Returns target FX and parameter index for given ReaFab command in context of selected track and ReaFab FX index. Valid command range 1 ... 24. Returns false if no such command mapping is found. Returns param index -1 for ReaFab internal band change command."
  },
  {
    "form": "(reaper.Fab_Map fxId command paramId control ?bandsIn ?stepIn ?accelIn ?minvalIn ?maxvalIn) :: (boolean)",
    "doc": "(reaper.Fab_Map fxId command paramId control ?bandsIn ?stepIn ?accelIn ?minvalIn ?maxvalIn) :: (boolean)\nfxId :: string\ncommand :: integer\nparamId :: string\ncontrol :: integer\nbandsIn :: integer (optional)\nstepIn :: number (optional)\naccelIn :: number (optional)\nminvalIn :: number (optional)\nmaxvalIn :: number (optional)\nCreates control mapping for ReaFab command.\nfxId e.g. \"ReaComp\".\ncommand 1-8 for encoders, 9-24 for buttons.\nparamId e.g. \"Ratio\".\ncontrol 1 = direct, 2 = band selector, 3 = cycle, 4 = invert, 5 = force toggle, 6 = force range, 7 = 5 and 6, 8 = force continuous.\nbands define, if target fx has multiple identical target bands. In this case, paramId must include 00 placeholder, e.g. \"Band 00 Gain\".\nstep overrides built-in default step of ~0.001 for continuous parameters.\naccel overrides built-in default control acceleration step of 1.0.\nminval & maxval override default detected target param value range.\nPrefixing paramId with \"-\" reverses direction; useful for creating separate next/previous mappings for bands or list type value navigation.",
    "name": "Fab_Map",
    "params": [
      {
        "type": "string",
        "name": "fxId"
      },
      {
        "type": "integer",
        "name": "command"
      },
      {
        "type": "string",
        "name": "paramId"
      },
      {
        "type": "integer",
        "name": "control"
      },
      {
        "type": "integer",
        "name": "bandsIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "stepIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "accelIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "minvalIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "maxvalIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Creates control mapping for ReaFab command.\nfxId e.g. \"ReaComp\".\ncommand 1-8 for encoders, 9-24 for buttons.\nparamId e.g. \"Ratio\".\ncontrol 1 = direct, 2 = band selector, 3 = cycle, 4 = invert, 5 = force toggle, 6 = force range, 7 = 5 and 6, 8 = force continuous.\nbands define, if target fx has multiple identical target bands. In this case, paramId must include 00 placeholder, e.g. \"Band 00 Gain\".\nstep overrides built-in default step of ~0.001 for continuous parameters.\naccel overrides built-in default control acceleration step of 1.0.\nminval & maxval override default detected target param value range.\nPrefixing paramId with \"-\" reverses direction; useful for creating separate next/previous mappings for bands or list type value navigation."
  },
  {
    "form": "(reaper.ImGui_AcceptDragDropPayload ctx type payload ?flagsIn) :: (boolean string)",
    "doc": "(reaper.ImGui_AcceptDragDropPayload ctx type payload ?flagsIn) :: (boolean string)\nctx :: ImGui_Context\ntype :: string\npayload :: string\nflagsIn :: integer (optional)\nAccept contents of a given type. If DragDropFlags_AcceptBeforeDelivery is set\nyou can peek into the payload before the mouse button is released.",
    "name": "ImGui_AcceptDragDropPayload",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "type"
      },
      {
        "type": "string",
        "name": "payload"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "payload"
      }
    ],
    "namespace": "reaper",
    "description": "Accept contents of a given type. If DragDropFlags_AcceptBeforeDelivery is set\nyou can peek into the payload before the mouse button is released."
  },
  {
    "form": "(reaper.ImGui_AcceptDragDropPayloadFiles ctx count ?flagsIn) :: (boolean integer)",
    "doc": "(reaper.ImGui_AcceptDragDropPayloadFiles ctx count ?flagsIn) :: (boolean integer)\nctx :: ImGui_Context\ncount :: integer\nflagsIn :: integer (optional)\nAccept a list of dropped files. See AcceptDragDropPayload and GetDragDropPayloadFile.",
    "name": "ImGui_AcceptDragDropPayloadFiles",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "count"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "count"
      }
    ],
    "namespace": "reaper",
    "description": "Accept a list of dropped files. See AcceptDragDropPayload and GetDragDropPayloadFile."
  },
  {
    "form": "(reaper.ImGui_AcceptDragDropPayloadRGB ctx rgb ?flagsIn) :: (boolean integer)",
    "doc": "(reaper.ImGui_AcceptDragDropPayloadRGB ctx rgb ?flagsIn) :: (boolean integer)\nctx :: ImGui_Context\nrgb :: integer\nflagsIn :: integer (optional)\nAccept a RGB color. See AcceptDragDropPayload.",
    "name": "ImGui_AcceptDragDropPayloadRGB",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "rgb"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "rgb"
      }
    ],
    "namespace": "reaper",
    "description": "Accept a RGB color. See AcceptDragDropPayload."
  },
  {
    "form": "(reaper.ImGui_AcceptDragDropPayloadRGBA ctx rgba ?flagsIn) :: (boolean integer)",
    "doc": "(reaper.ImGui_AcceptDragDropPayloadRGBA ctx rgba ?flagsIn) :: (boolean integer)\nctx :: ImGui_Context\nrgba :: integer\nflagsIn :: integer (optional)\nAccept a RGBA color. See AcceptDragDropPayload.",
    "name": "ImGui_AcceptDragDropPayloadRGBA",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "rgba"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "rgba"
      }
    ],
    "namespace": "reaper",
    "description": "Accept a RGBA color. See AcceptDragDropPayload."
  },
  {
    "form": "(reaper.ImGui_AlignTextToFramePadding ctx) :: nil",
    "doc": "(reaper.ImGui_AlignTextToFramePadding ctx) :: nil\nctx :: ImGui_Context\nVertically align upcoming text baseline to StyleVar_FramePadding.y so that it\nwill align properly to regularly framed items (call if you have text on a line\nbefore a framed item).",
    "name": "ImGui_AlignTextToFramePadding",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Vertically align upcoming text baseline to StyleVar_FramePadding.y so that it\nwill align properly to regularly framed items (call if you have text on a line\nbefore a framed item)."
  },
  {
    "form": "(reaper.ImGui_ArrowButton ctx str_id dir) :: (boolean)",
    "doc": "(reaper.ImGui_ArrowButton ctx str_id dir) :: (boolean)\nctx :: ImGui_Context\nstr_id :: string\ndir :: integer\nSquare button with an arrow shape. 'dir' is one of the Dir_* values",
    "name": "ImGui_ArrowButton",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "str_id"
      },
      {
        "type": "integer",
        "name": "dir"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Square button with an arrow shape. 'dir' is one of the Dir_* values"
  },
  {
    "form": "(reaper.ImGui_Attach ctx obj) :: nil",
    "doc": "(reaper.ImGui_Attach ctx obj) :: nil\nctx :: ImGui_Context\nobj :: ImGui_Resource\nLink the object's lifetime to the given context.\nObjects can be draw list splitters, fonts, images, list clippers, etc.\nCall Detach to let the object be garbage-collected after unuse again.\nList clipper objects may only be attached to the context they were created for.\nFonts are (currently) a special case: they must be attached to the context\nbefore usage. Furthermore, fonts may only be attached or detached immediately\nafter the context is created or before any other function calls modifying the\ncontext per defer cycle. See \"limitations\" in the font API documentation.",
    "name": "ImGui_Attach",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "ImGui_Resource",
        "name": "obj"
      }
    ],
    "namespace": "reaper",
    "description": "Link the object's lifetime to the given context.\nObjects can be draw list splitters, fonts, images, list clippers, etc.\nCall Detach to let the object be garbage-collected after unuse again.\nList clipper objects may only be attached to the context they were created for.\nFonts are (currently) a special case: they must be attached to the context\nbefore usage. Furthermore, fonts may only be attached or detached immediately\nafter the context is created or before any other function calls modifying the\ncontext per defer cycle. See \"limitations\" in the font API documentation."
  },
  {
    "form": "(reaper.ImGui_Begin ctx name ?p_open ?flagsIn) :: (boolean boolean)",
    "doc": "(reaper.ImGui_Begin ctx name ?p_open ?flagsIn) :: (boolean boolean)\nctx :: ImGui_Context\nname :: string\np_open :: boolean (optional)\nflagsIn :: integer (optional)\nPush window to the stack and start appending to it.\n- Passing true to 'p_open' shows a window-closing widget in the upper-right\n  corner of the window, which clicking will set the boolean to false when returned.\n- You may append multiple times to the same window during the same frame by\n  calling Begin()/End() pairs multiple times. Some information such as 'flags'\n  or 'p_open' will only be considered by the first call to Begin().\n- Begin() return false to indicate the window is collapsed or fully clipped,\n  so you may early out and omit submitting anything to the window.",
    "name": "ImGui_Begin",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "boolean",
        "name": "p_open",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "p_open",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Push window to the stack and start appending to it.\n- Passing true to 'p_open' shows a window-closing widget in the upper-right\n  corner of the window, which clicking will set the boolean to false when returned.\n- You may append multiple times to the same window during the same frame by\n  calling Begin()/End() pairs multiple times. Some information such as 'flags'\n  or 'p_open' will only be considered by the first call to Begin().\n- Begin() return false to indicate the window is collapsed or fully clipped,\n  so you may early out and omit submitting anything to the window."
  },
  {
    "form": "(reaper.ImGui_BeginChild ctx str_id ?size_wIn ?size_hIn ?borderIn ?flagsIn) :: (boolean)",
    "doc": "(reaper.ImGui_BeginChild ctx str_id ?size_wIn ?size_hIn ?borderIn ?flagsIn) :: (boolean)\nctx :: ImGui_Context\nstr_id :: string\nsize_wIn :: number (optional)\nsize_hIn :: number (optional)\nborderIn :: boolean (optional)\nflagsIn :: integer (optional)\nFor each independent axis of 'size':\n- \\> 0.0: fixed size\n- = 0.0: use remaining host window size\n- < 0.0: use remaining window size minus abs(size)\n(Each axis can use a different mode, e.g. size = 0x400.)\nReturns false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting anything to the window.",
    "name": "ImGui_BeginChild",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "str_id"
      },
      {
        "type": "number",
        "name": "size_wIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "size_hIn",
        "optional": true
      },
      {
        "type": "boolean",
        "name": "borderIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "For each independent axis of 'size':\n- \\> 0.0: fixed size\n- = 0.0: use remaining host window size\n- < 0.0: use remaining window size minus abs(size)\n(Each axis can use a different mode, e.g. size = 0x400.)\nReturns false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting anything to the window."
  },
  {
    "form": "(reaper.ImGui_BeginChildFrame ctx str_id size_w size_h ?flagsIn) :: (boolean)",
    "doc": "(reaper.ImGui_BeginChildFrame ctx str_id size_w size_h ?flagsIn) :: (boolean)\nctx :: ImGui_Context\nstr_id :: string\nsize_w :: number\nsize_h :: number\nflagsIn :: integer (optional)\nHelper to create a child window / scrolling region that looks like a normal\nwidget frame. See BeginChild.",
    "name": "ImGui_BeginChildFrame",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "str_id"
      },
      {
        "type": "number",
        "name": "size_w"
      },
      {
        "type": "number",
        "name": "size_h"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Helper to create a child window / scrolling region that looks like a normal\nwidget frame. See BeginChild."
  },
  {
    "form": "(reaper.ImGui_BeginCombo ctx label preview_value ?flagsIn) :: (boolean)",
    "doc": "(reaper.ImGui_BeginCombo ctx label preview_value ?flagsIn) :: (boolean)\nctx :: ImGui_Context\nlabel :: string\npreview_value :: string\nflagsIn :: integer (optional)\nThe BeginCombo/EndCombo API allows you to manage your contents and selection\nstate however you want it, by creating e.g. Selectable items.",
    "name": "ImGui_BeginCombo",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "string",
        "name": "preview_value"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "The BeginCombo/EndCombo API allows you to manage your contents and selection\nstate however you want it, by creating e.g. Selectable items."
  },
  {
    "form": "(reaper.ImGui_BeginDisabled ctx ?disabledIn) :: nil",
    "doc": "(reaper.ImGui_BeginDisabled ctx ?disabledIn) :: nil\nctx :: ImGui_Context\ndisabledIn :: boolean (optional)\nDisable all user interactions and dim items visuals\n(applying StyleVar_DisabledAlpha over current colors).\nBeginDisabled(false) essentially does nothing useful but is provided to\nfacilitate use of boolean expressions.\nIf you can avoid calling BeginDisabled(false)/EndDisabled() best to avoid it.",
    "name": "ImGui_BeginDisabled",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "boolean",
        "name": "disabledIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Disable all user interactions and dim items visuals\n(applying StyleVar_DisabledAlpha over current colors).\nBeginDisabled(false) essentially does nothing useful but is provided to\nfacilitate use of boolean expressions.\nIf you can avoid calling BeginDisabled(false)/EndDisabled() best to avoid it."
  },
  {
    "form": "(reaper.ImGui_BeginDragDropSource ctx ?flagsIn) :: (boolean)",
    "doc": "(reaper.ImGui_BeginDragDropSource ctx ?flagsIn) :: (boolean)\nctx :: ImGui_Context\nflagsIn :: integer (optional)\nCall after submitting an item which may be dragged. when this return true,\nyou can call SetDragDropPayload() + EndDragDropSource()\nIf you stop calling BeginDragDropSource() the payload is preserved however\nit won't have a preview tooltip (we currently display a fallback \"...\" tooltip\nas replacement).",
    "name": "ImGui_BeginDragDropSource",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Call after submitting an item which may be dragged. when this return true,\nyou can call SetDragDropPayload() + EndDragDropSource()\nIf you stop calling BeginDragDropSource() the payload is preserved however\nit won't have a preview tooltip (we currently display a fallback \"...\" tooltip\nas replacement)."
  },
  {
    "form": "(reaper.ImGui_BeginDragDropTarget ctx) :: (boolean)",
    "doc": "(reaper.ImGui_BeginDragDropTarget ctx) :: (boolean)\nctx :: ImGui_Context\nCall after submitting an item that may receive a payload.\nIf this returns true, you can call AcceptDragDropPayload + EndDragDropTarget.",
    "name": "ImGui_BeginDragDropTarget",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Call after submitting an item that may receive a payload.\nIf this returns true, you can call AcceptDragDropPayload + EndDragDropTarget."
  },
  {
    "form": "(reaper.ImGui_BeginGroup ctx) :: nil",
    "doc": "(reaper.ImGui_BeginGroup ctx) :: nil\nctx :: ImGui_Context\nLock horizontal starting position. See EndGroup.",
    "name": "ImGui_BeginGroup",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Lock horizontal starting position. See EndGroup."
  },
  {
    "form": "(reaper.ImGui_BeginListBox ctx label ?size_wIn ?size_hIn) :: (boolean)",
    "doc": "(reaper.ImGui_BeginListBox ctx label ?size_wIn ?size_hIn) :: (boolean)\nctx :: ImGui_Context\nlabel :: string\nsize_wIn :: number (optional)\nsize_hIn :: number (optional)\nOpen a framed scrolling region. This is essentially a thin wrapper to using\nBeginChild/EndChild with some stylistic changes.\nThe BeginListBox/EndListBox API allows you to manage your contents and selection\nstate however you want it, by creating e.g. Selectable or any items.\n- Choose frame width:\n  - width  > 0.0: custom\n  - width  < 0.0 or -FLT_MIN: right-align\n  - width  = 0.0 (default): use current ItemWidth\n- Choose frame height:\n  - height > 0.0: custom\n  - height < 0.0 or -FLT_MIN: bottom-align\n  - height = 0.0 (default): arbitrary default height which can fit ~7 items\nSee EndListBox.",
    "name": "ImGui_BeginListBox",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "number",
        "name": "size_wIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "size_hIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Open a framed scrolling region. This is essentially a thin wrapper to using\nBeginChild/EndChild with some stylistic changes.\nThe BeginListBox/EndListBox API allows you to manage your contents and selection\nstate however you want it, by creating e.g. Selectable or any items.\n- Choose frame width:\n  - width  > 0.0: custom\n  - width  < 0.0 or -FLT_MIN: right-align\n  - width  = 0.0 (default): use current ItemWidth\n- Choose frame height:\n  - height > 0.0: custom\n  - height < 0.0 or -FLT_MIN: bottom-align\n  - height = 0.0 (default): arbitrary default height which can fit ~7 items\nSee EndListBox."
  },
  {
    "form": "(reaper.ImGui_BeginMenu ctx label ?enabledIn) :: (boolean)",
    "doc": "(reaper.ImGui_BeginMenu ctx label ?enabledIn) :: (boolean)\nctx :: ImGui_Context\nlabel :: string\nenabledIn :: boolean (optional)\nCreate a sub-menu entry. only call EndMenu if this returns true!",
    "name": "ImGui_BeginMenu",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "boolean",
        "name": "enabledIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Create a sub-menu entry. only call EndMenu if this returns true!"
  },
  {
    "form": "(reaper.ImGui_BeginMenuBar ctx) :: (boolean)",
    "doc": "(reaper.ImGui_BeginMenuBar ctx) :: (boolean)\nctx :: ImGui_Context\nAppend to menu-bar of current window (requires WindowFlags_MenuBar flag set\non parent window). See EndMenuBar.",
    "name": "ImGui_BeginMenuBar",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Append to menu-bar of current window (requires WindowFlags_MenuBar flag set\non parent window). See EndMenuBar."
  },
  {
    "form": "(reaper.ImGui_BeginPopup ctx str_id ?flagsIn) :: (boolean)",
    "doc": "(reaper.ImGui_BeginPopup ctx str_id ?flagsIn) :: (boolean)\nctx :: ImGui_Context\nstr_id :: string\nflagsIn :: integer (optional)\nQuery popup state, if open start appending into the window. Call EndPopup\nafterwards. WindowFlags* are forwarded to the window.\nReturn true if the popup is open, and you can start outputting to it.",
    "name": "ImGui_BeginPopup",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "str_id"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Query popup state, if open start appending into the window. Call EndPopup\nafterwards. WindowFlags* are forwarded to the window.\nReturn true if the popup is open, and you can start outputting to it."
  },
  {
    "form": "(reaper.ImGui_BeginPopupContextItem ctx ?str_idIn ?popup_flagsIn) :: (boolean)",
    "doc": "(reaper.ImGui_BeginPopupContextItem ctx ?str_idIn ?popup_flagsIn) :: (boolean)\nctx :: ImGui_Context\nstr_idIn :: string (optional)\npopup_flagsIn :: integer (optional)\nThis is a helper to handle the simplest case of associating one named popup\nto one given widget. You can pass a nil str_id to use the identifier of the last\nitem. This is essentially the same as calling OpenPopupOnItemClick + BeginPopup\nbut written to avoid computing the ID twice because BeginPopupContext*\nfunctions may be called very frequently.\nIf you want to use that on a non-interactive item such as Text you need to pass\nin an explicit ID here.",
    "name": "ImGui_BeginPopupContextItem",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "str_idIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "popup_flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "This is a helper to handle the simplest case of associating one named popup\nto one given widget. You can pass a nil str_id to use the identifier of the last\nitem. This is essentially the same as calling OpenPopupOnItemClick + BeginPopup\nbut written to avoid computing the ID twice because BeginPopupContext*\nfunctions may be called very frequently.\nIf you want to use that on a non-interactive item such as Text you need to pass\nin an explicit ID here."
  },
  {
    "form": "(reaper.ImGui_BeginPopupContextWindow ctx ?str_idIn ?popup_flagsIn) :: (boolean)",
    "doc": "(reaper.ImGui_BeginPopupContextWindow ctx ?str_idIn ?popup_flagsIn) :: (boolean)\nctx :: ImGui_Context\nstr_idIn :: string (optional)\npopup_flagsIn :: integer (optional)\nOpen+begin popup when clicked on current window.",
    "name": "ImGui_BeginPopupContextWindow",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "str_idIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "popup_flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Open+begin popup when clicked on current window."
  },
  {
    "form": "(reaper.ImGui_BeginPopupModal ctx name ?p_open ?flagsIn) :: (boolean boolean)",
    "doc": "(reaper.ImGui_BeginPopupModal ctx name ?p_open ?flagsIn) :: (boolean boolean)\nctx :: ImGui_Context\nname :: string\np_open :: boolean (optional)\nflagsIn :: integer (optional)\nBlock every interaction behind the window, cannot be closed by user, add a\ndimming background, has a title bar. Return true if the modal is open, and you\ncan start outputting to it. See BeginPopup.",
    "name": "ImGui_BeginPopupModal",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "boolean",
        "name": "p_open",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "p_open",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Block every interaction behind the window, cannot be closed by user, add a\ndimming background, has a title bar. Return true if the modal is open, and you\ncan start outputting to it. See BeginPopup."
  },
  {
    "form": "(reaper.ImGui_BeginTabBar ctx str_id ?flagsIn) :: (boolean)",
    "doc": "(reaper.ImGui_BeginTabBar ctx str_id ?flagsIn) :: (boolean)\nctx :: ImGui_Context\nstr_id :: string\nflagsIn :: integer (optional)\nCreate and append into a TabBar.",
    "name": "ImGui_BeginTabBar",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "str_id"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Create and append into a TabBar."
  },
  {
    "form": "(reaper.ImGui_BeginTabItem ctx label ?p_open ?flagsIn) :: (boolean boolean)",
    "doc": "(reaper.ImGui_BeginTabItem ctx label ?p_open ?flagsIn) :: (boolean boolean)\nctx :: ImGui_Context\nlabel :: string\np_open :: boolean (optional)\nflagsIn :: integer (optional)\nCreate a Tab. Returns true if the Tab is selected.\nSet 'p_open' to true to enable the close button.",
    "name": "ImGui_BeginTabItem",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "boolean",
        "name": "p_open",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "p_open",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Create a Tab. Returns true if the Tab is selected.\nSet 'p_open' to true to enable the close button."
  },
  {
    "form": "(reaper.ImGui_BeginTable ctx str_id column ?flagsIn ?outer_size_wIn ?outer_size_hIn ?inner_widthIn) :: (boolean)",
    "doc": "(reaper.ImGui_BeginTable ctx str_id column ?flagsIn ?outer_size_wIn ?outer_size_hIn ?inner_widthIn) :: (boolean)\nctx :: ImGui_Context\nstr_id :: string\ncolumn :: integer\nflagsIn :: integer (optional)\nouter_size_wIn :: number (optional)\nouter_size_hIn :: number (optional)\ninner_widthIn :: number (optional)\n",
    "name": "ImGui_BeginTable",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "str_id"
      },
      {
        "type": "integer",
        "name": "column"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "outer_size_wIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "outer_size_hIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "inner_widthIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_BeginTooltip ctx) :: (boolean)",
    "doc": "(reaper.ImGui_BeginTooltip ctx) :: (boolean)\nctx :: ImGui_Context\nBegin/append a tooltip window.\nTo create full-featured tooltip (with any kind of items).",
    "name": "ImGui_BeginTooltip",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Begin/append a tooltip window.\nTo create full-featured tooltip (with any kind of items)."
  },
  {
    "form": "(reaper.ImGui_Bullet ctx) :: nil",
    "doc": "(reaper.ImGui_Bullet ctx) :: nil\nctx :: ImGui_Context\nDraw a small circle + keep the cursor on the same line.\nAdvance cursor x position by GetTreeNodeToLabelSpacing,\nsame distance that TreeNode uses.",
    "name": "ImGui_Bullet",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Draw a small circle + keep the cursor on the same line.\nAdvance cursor x position by GetTreeNodeToLabelSpacing,\nsame distance that TreeNode uses."
  },
  {
    "form": "(reaper.ImGui_BulletText ctx text) :: nil",
    "doc": "(reaper.ImGui_BulletText ctx text) :: nil\nctx :: ImGui_Context\ntext :: string\nShortcut for Bullet + Text.",
    "name": "ImGui_BulletText",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "text"
      }
    ],
    "namespace": "reaper",
    "description": "Shortcut for Bullet + Text."
  },
  {
    "form": "(reaper.ImGui_Button ctx label ?size_wIn ?size_hIn) :: (boolean)",
    "doc": "(reaper.ImGui_Button ctx label ?size_wIn ?size_hIn) :: (boolean)\nctx :: ImGui_Context\nlabel :: string\nsize_wIn :: number (optional)\nsize_hIn :: number (optional)\n",
    "name": "ImGui_Button",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "number",
        "name": "size_wIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "size_hIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_ButtonFlags_MouseButtonLeft ) :: (integer)",
    "doc": "(reaper.ImGui_ButtonFlags_MouseButtonLeft ) :: (integer)\nReact on left mouse button (default).",
    "name": "ImGui_ButtonFlags_MouseButtonLeft",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "React on left mouse button (default)."
  },
  {
    "form": "(reaper.ImGui_ButtonFlags_MouseButtonMiddle ) :: (integer)",
    "doc": "(reaper.ImGui_ButtonFlags_MouseButtonMiddle ) :: (integer)\nReact on center mouse button.",
    "name": "ImGui_ButtonFlags_MouseButtonMiddle",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "React on center mouse button."
  },
  {
    "form": "(reaper.ImGui_ButtonFlags_MouseButtonRight ) :: (integer)",
    "doc": "(reaper.ImGui_ButtonFlags_MouseButtonRight ) :: (integer)\nReact on right mouse button.",
    "name": "ImGui_ButtonFlags_MouseButtonRight",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "React on right mouse button."
  },
  {
    "form": "(reaper.ImGui_ButtonFlags_None ) :: (integer)",
    "doc": "(reaper.ImGui_ButtonFlags_None ) :: (integer)\n",
    "name": "ImGui_ButtonFlags_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_CalcItemWidth ctx) :: (number)",
    "doc": "(reaper.ImGui_CalcItemWidth ctx) :: (number)\nctx :: ImGui_Context\nWidth of item given pushed settings and current cursor position.\nNOT necessarily the width of last item unlike most 'Item' functions.",
    "name": "ImGui_CalcItemWidth",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Width of item given pushed settings and current cursor position.\nNOT necessarily the width of last item unlike most 'Item' functions."
  },
  {
    "form": "(reaper.ImGui_CalcTextSize ctx text w h ?hide_text_after_double_hashIn ?wrap_widthIn) :: (number number)",
    "doc": "(reaper.ImGui_CalcTextSize ctx text w h ?hide_text_after_double_hashIn ?wrap_widthIn) :: (number number)\nctx :: ImGui_Context\ntext :: string\nw :: number\nh :: number\nhide_text_after_double_hashIn :: boolean (optional)\nwrap_widthIn :: number (optional)\n",
    "name": "ImGui_CalcTextSize",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "text"
      },
      {
        "type": "number",
        "name": "w"
      },
      {
        "type": "number",
        "name": "h"
      },
      {
        "type": "boolean",
        "name": "hide_text_after_double_hashIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "wrap_widthIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "w"
      },
      {
        "type": "number",
        "name": "h"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Checkbox ctx label v) :: (boolean boolean)",
    "doc": "(reaper.ImGui_Checkbox ctx label v) :: (boolean boolean)\nctx :: ImGui_Context\nlabel :: string\nv :: boolean\n",
    "name": "ImGui_Checkbox",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "boolean",
        "name": "v"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "v"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_CheckboxFlags ctx label flags flags_value) :: (boolean integer)",
    "doc": "(reaper.ImGui_CheckboxFlags ctx label flags flags_value) :: (boolean integer)\nctx :: ImGui_Context\nlabel :: string\nflags :: integer\nflags_value :: integer\n",
    "name": "ImGui_CheckboxFlags",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "flags"
      },
      {
        "type": "integer",
        "name": "flags_value"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "flags"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_CloseCurrentPopup ctx) :: nil",
    "doc": "(reaper.ImGui_CloseCurrentPopup ctx) :: nil\nctx :: ImGui_Context\nManually close the popup we have begin-ed into.\nUse inside the BeginPopup/EndPopup scope to close manually.\nCloseCurrentPopup() is called by default by Selectable/MenuItem when activated.",
    "name": "ImGui_CloseCurrentPopup",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Manually close the popup we have begin-ed into.\nUse inside the BeginPopup/EndPopup scope to close manually.\nCloseCurrentPopup() is called by default by Selectable/MenuItem when activated."
  },
  {
    "form": "(reaper.ImGui_Col_Border ) :: (integer)",
    "doc": "(reaper.ImGui_Col_Border ) :: (integer)\n",
    "name": "ImGui_Col_Border",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_BorderShadow ) :: (integer)",
    "doc": "(reaper.ImGui_Col_BorderShadow ) :: (integer)\n",
    "name": "ImGui_Col_BorderShadow",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_Button ) :: (integer)",
    "doc": "(reaper.ImGui_Col_Button ) :: (integer)\n",
    "name": "ImGui_Col_Button",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_ButtonActive ) :: (integer)",
    "doc": "(reaper.ImGui_Col_ButtonActive ) :: (integer)\n",
    "name": "ImGui_Col_ButtonActive",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_ButtonHovered ) :: (integer)",
    "doc": "(reaper.ImGui_Col_ButtonHovered ) :: (integer)\n",
    "name": "ImGui_Col_ButtonHovered",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_CheckMark ) :: (integer)",
    "doc": "(reaper.ImGui_Col_CheckMark ) :: (integer)\n",
    "name": "ImGui_Col_CheckMark",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_ChildBg ) :: (integer)",
    "doc": "(reaper.ImGui_Col_ChildBg ) :: (integer)\nBackground of child windows.",
    "name": "ImGui_Col_ChildBg",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Background of child windows."
  },
  {
    "form": "(reaper.ImGui_Col_DockingEmptyBg ) :: (integer)",
    "doc": "(reaper.ImGui_Col_DockingEmptyBg ) :: (integer)\nBackground color for empty node (e.g. CentralNode with no window docked into it).",
    "name": "ImGui_Col_DockingEmptyBg",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Background color for empty node (e.g. CentralNode with no window docked into it)."
  },
  {
    "form": "(reaper.ImGui_Col_DockingPreview ) :: (integer)",
    "doc": "(reaper.ImGui_Col_DockingPreview ) :: (integer)\nPreview overlay color when about to docking something.",
    "name": "ImGui_Col_DockingPreview",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Preview overlay color when about to docking something."
  },
  {
    "form": "(reaper.ImGui_Col_DragDropTarget ) :: (integer)",
    "doc": "(reaper.ImGui_Col_DragDropTarget ) :: (integer)\nRectangle highlighting a drop target",
    "name": "ImGui_Col_DragDropTarget",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Rectangle highlighting a drop target"
  },
  {
    "form": "(reaper.ImGui_Col_FrameBg ) :: (integer)",
    "doc": "(reaper.ImGui_Col_FrameBg ) :: (integer)\nBackground of checkbox, radio button, plot, slider, text input.",
    "name": "ImGui_Col_FrameBg",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Background of checkbox, radio button, plot, slider, text input."
  },
  {
    "form": "(reaper.ImGui_Col_FrameBgActive ) :: (integer)",
    "doc": "(reaper.ImGui_Col_FrameBgActive ) :: (integer)\n",
    "name": "ImGui_Col_FrameBgActive",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_FrameBgHovered ) :: (integer)",
    "doc": "(reaper.ImGui_Col_FrameBgHovered ) :: (integer)\n",
    "name": "ImGui_Col_FrameBgHovered",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_Header ) :: (integer)",
    "doc": "(reaper.ImGui_Col_Header ) :: (integer)\nHeader* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem.",
    "name": "ImGui_Col_Header",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem."
  },
  {
    "form": "(reaper.ImGui_Col_HeaderActive ) :: (integer)",
    "doc": "(reaper.ImGui_Col_HeaderActive ) :: (integer)\n",
    "name": "ImGui_Col_HeaderActive",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_HeaderHovered ) :: (integer)",
    "doc": "(reaper.ImGui_Col_HeaderHovered ) :: (integer)\n",
    "name": "ImGui_Col_HeaderHovered",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_MenuBarBg ) :: (integer)",
    "doc": "(reaper.ImGui_Col_MenuBarBg ) :: (integer)\n",
    "name": "ImGui_Col_MenuBarBg",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_ModalWindowDimBg ) :: (integer)",
    "doc": "(reaper.ImGui_Col_ModalWindowDimBg ) :: (integer)\nDarken/colorize entire screen behind a modal window, when one is active.",
    "name": "ImGui_Col_ModalWindowDimBg",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Darken/colorize entire screen behind a modal window, when one is active."
  },
  {
    "form": "(reaper.ImGui_Col_NavHighlight ) :: (integer)",
    "doc": "(reaper.ImGui_Col_NavHighlight ) :: (integer)\nGamepad/keyboard: current highlighted item.",
    "name": "ImGui_Col_NavHighlight",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Gamepad/keyboard: current highlighted item."
  },
  {
    "form": "(reaper.ImGui_Col_NavWindowingDimBg ) :: (integer)",
    "doc": "(reaper.ImGui_Col_NavWindowingDimBg ) :: (integer)\nDarken/colorize entire screen behind the CTRL+TAB window list, when active.",
    "name": "ImGui_Col_NavWindowingDimBg",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Darken/colorize entire screen behind the CTRL+TAB window list, when active."
  },
  {
    "form": "(reaper.ImGui_Col_NavWindowingHighlight ) :: (integer)",
    "doc": "(reaper.ImGui_Col_NavWindowingHighlight ) :: (integer)\nHighlight window when using CTRL+TAB.",
    "name": "ImGui_Col_NavWindowingHighlight",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Highlight window when using CTRL+TAB."
  },
  {
    "form": "(reaper.ImGui_Col_PlotHistogram ) :: (integer)",
    "doc": "(reaper.ImGui_Col_PlotHistogram ) :: (integer)\n",
    "name": "ImGui_Col_PlotHistogram",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_PlotHistogramHovered ) :: (integer)",
    "doc": "(reaper.ImGui_Col_PlotHistogramHovered ) :: (integer)\n",
    "name": "ImGui_Col_PlotHistogramHovered",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_PlotLines ) :: (integer)",
    "doc": "(reaper.ImGui_Col_PlotLines ) :: (integer)\n",
    "name": "ImGui_Col_PlotLines",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_PlotLinesHovered ) :: (integer)",
    "doc": "(reaper.ImGui_Col_PlotLinesHovered ) :: (integer)\n",
    "name": "ImGui_Col_PlotLinesHovered",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_PopupBg ) :: (integer)",
    "doc": "(reaper.ImGui_Col_PopupBg ) :: (integer)\nBackground of popups, menus, tooltips windows.",
    "name": "ImGui_Col_PopupBg",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Background of popups, menus, tooltips windows."
  },
  {
    "form": "(reaper.ImGui_Col_ResizeGrip ) :: (integer)",
    "doc": "(reaper.ImGui_Col_ResizeGrip ) :: (integer)\nResize grip in lower-right and lower-left corners of windows.",
    "name": "ImGui_Col_ResizeGrip",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Resize grip in lower-right and lower-left corners of windows."
  },
  {
    "form": "(reaper.ImGui_Col_ResizeGripActive ) :: (integer)",
    "doc": "(reaper.ImGui_Col_ResizeGripActive ) :: (integer)\n",
    "name": "ImGui_Col_ResizeGripActive",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_ResizeGripHovered ) :: (integer)",
    "doc": "(reaper.ImGui_Col_ResizeGripHovered ) :: (integer)\n",
    "name": "ImGui_Col_ResizeGripHovered",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_ScrollbarBg ) :: (integer)",
    "doc": "(reaper.ImGui_Col_ScrollbarBg ) :: (integer)\n",
    "name": "ImGui_Col_ScrollbarBg",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_ScrollbarGrab ) :: (integer)",
    "doc": "(reaper.ImGui_Col_ScrollbarGrab ) :: (integer)\n",
    "name": "ImGui_Col_ScrollbarGrab",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_ScrollbarGrabActive ) :: (integer)",
    "doc": "(reaper.ImGui_Col_ScrollbarGrabActive ) :: (integer)\n",
    "name": "ImGui_Col_ScrollbarGrabActive",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_ScrollbarGrabHovered ) :: (integer)",
    "doc": "(reaper.ImGui_Col_ScrollbarGrabHovered ) :: (integer)\n",
    "name": "ImGui_Col_ScrollbarGrabHovered",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_Separator ) :: (integer)",
    "doc": "(reaper.ImGui_Col_Separator ) :: (integer)\n",
    "name": "ImGui_Col_Separator",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_SeparatorActive ) :: (integer)",
    "doc": "(reaper.ImGui_Col_SeparatorActive ) :: (integer)\n",
    "name": "ImGui_Col_SeparatorActive",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_SeparatorHovered ) :: (integer)",
    "doc": "(reaper.ImGui_Col_SeparatorHovered ) :: (integer)\n",
    "name": "ImGui_Col_SeparatorHovered",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_SliderGrab ) :: (integer)",
    "doc": "(reaper.ImGui_Col_SliderGrab ) :: (integer)\n",
    "name": "ImGui_Col_SliderGrab",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_SliderGrabActive ) :: (integer)",
    "doc": "(reaper.ImGui_Col_SliderGrabActive ) :: (integer)\n",
    "name": "ImGui_Col_SliderGrabActive",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_Tab ) :: (integer)",
    "doc": "(reaper.ImGui_Col_Tab ) :: (integer)\nTabItem in a TabBar",
    "name": "ImGui_Col_Tab",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "TabItem in a TabBar"
  },
  {
    "form": "(reaper.ImGui_Col_TabActive ) :: (integer)",
    "doc": "(reaper.ImGui_Col_TabActive ) :: (integer)\n",
    "name": "ImGui_Col_TabActive",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_TabHovered ) :: (integer)",
    "doc": "(reaper.ImGui_Col_TabHovered ) :: (integer)\n",
    "name": "ImGui_Col_TabHovered",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_TabUnfocused ) :: (integer)",
    "doc": "(reaper.ImGui_Col_TabUnfocused ) :: (integer)\n",
    "name": "ImGui_Col_TabUnfocused",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_TabUnfocusedActive ) :: (integer)",
    "doc": "(reaper.ImGui_Col_TabUnfocusedActive ) :: (integer)\n",
    "name": "ImGui_Col_TabUnfocusedActive",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_TableBorderLight ) :: (integer)",
    "doc": "(reaper.ImGui_Col_TableBorderLight ) :: (integer)\nTable inner borders (prefer using Alpha=1.0 here).",
    "name": "ImGui_Col_TableBorderLight",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Table inner borders (prefer using Alpha=1.0 here)."
  },
  {
    "form": "(reaper.ImGui_Col_TableBorderStrong ) :: (integer)",
    "doc": "(reaper.ImGui_Col_TableBorderStrong ) :: (integer)\nTable outer and header borders (prefer using Alpha=1.0 here).",
    "name": "ImGui_Col_TableBorderStrong",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Table outer and header borders (prefer using Alpha=1.0 here)."
  },
  {
    "form": "(reaper.ImGui_Col_TableHeaderBg ) :: (integer)",
    "doc": "(reaper.ImGui_Col_TableHeaderBg ) :: (integer)\nTable header background.",
    "name": "ImGui_Col_TableHeaderBg",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Table header background."
  },
  {
    "form": "(reaper.ImGui_Col_TableRowBg ) :: (integer)",
    "doc": "(reaper.ImGui_Col_TableRowBg ) :: (integer)\nTable row background (even rows).",
    "name": "ImGui_Col_TableRowBg",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Table row background (even rows)."
  },
  {
    "form": "(reaper.ImGui_Col_TableRowBgAlt ) :: (integer)",
    "doc": "(reaper.ImGui_Col_TableRowBgAlt ) :: (integer)\nTable row background (odd rows).",
    "name": "ImGui_Col_TableRowBgAlt",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Table row background (odd rows)."
  },
  {
    "form": "(reaper.ImGui_Col_Text ) :: (integer)",
    "doc": "(reaper.ImGui_Col_Text ) :: (integer)\n",
    "name": "ImGui_Col_Text",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_TextDisabled ) :: (integer)",
    "doc": "(reaper.ImGui_Col_TextDisabled ) :: (integer)\n",
    "name": "ImGui_Col_TextDisabled",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_TextSelectedBg ) :: (integer)",
    "doc": "(reaper.ImGui_Col_TextSelectedBg ) :: (integer)\n",
    "name": "ImGui_Col_TextSelectedBg",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_TitleBg ) :: (integer)",
    "doc": "(reaper.ImGui_Col_TitleBg ) :: (integer)\n",
    "name": "ImGui_Col_TitleBg",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_TitleBgActive ) :: (integer)",
    "doc": "(reaper.ImGui_Col_TitleBgActive ) :: (integer)\n",
    "name": "ImGui_Col_TitleBgActive",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_TitleBgCollapsed ) :: (integer)",
    "doc": "(reaper.ImGui_Col_TitleBgCollapsed ) :: (integer)\n",
    "name": "ImGui_Col_TitleBgCollapsed",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Col_WindowBg ) :: (integer)",
    "doc": "(reaper.ImGui_Col_WindowBg ) :: (integer)\nBackground of normal windows. See also WindowFlags_NoBackground.",
    "name": "ImGui_Col_WindowBg",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Background of normal windows. See also WindowFlags_NoBackground."
  },
  {
    "form": "(reaper.ImGui_CollapsingHeader ctx label p_visible ?flagsIn) :: (boolean boolean)",
    "doc": "(reaper.ImGui_CollapsingHeader ctx label p_visible ?flagsIn) :: (boolean boolean)\nctx :: ImGui_Context\nlabel :: string\np_visible :: boolean\nflagsIn :: integer (optional)\nReturns true when opened but do not indent nor push into the ID stack\n(because of the TreeNodeFlags_NoTreePushOnOpen flag).\nThis is basically the same as calling TreeNode(label, TreeNodeFlags_CollapsingHeader).\nYou can remove the _NoTreePushOnOpen flag if you want behavior closer to normal\nTreeNode.\nWhen 'visible' is provided: if 'true' display an additional small close button\non upper right of the header which will set the bool to false when clicked,\nif 'false' don't display the header.",
    "name": "ImGui_CollapsingHeader",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "boolean",
        "name": "p_visible"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "p_visible"
      }
    ],
    "namespace": "reaper",
    "description": "Returns true when opened but do not indent nor push into the ID stack\n(because of the TreeNodeFlags_NoTreePushOnOpen flag).\nThis is basically the same as calling TreeNode(label, TreeNodeFlags_CollapsingHeader).\nYou can remove the _NoTreePushOnOpen flag if you want behavior closer to normal\nTreeNode.\nWhen 'visible' is provided: if 'true' display an additional small close button\non upper right of the header which will set the bool to false when clicked,\nif 'false' don't display the header."
  },
  {
    "form": "(reaper.ImGui_ColorButton ctx desc_id col_rgba ?flagsIn ?size_wIn ?size_hIn) :: (boolean)",
    "doc": "(reaper.ImGui_ColorButton ctx desc_id col_rgba ?flagsIn ?size_wIn ?size_hIn) :: (boolean)\nctx :: ImGui_Context\ndesc_id :: string\ncol_rgba :: integer\nflagsIn :: integer (optional)\nsize_wIn :: number (optional)\nsize_hIn :: number (optional)\nDisplay a color square/button, hover for details, return true when pressed.\nColor is in 0xRRGGBBAA or, if ColorEditFlags_NoAlpha is set, 0xRRGGBB.",
    "name": "ImGui_ColorButton",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "desc_id"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "size_wIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "size_hIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Display a color square/button, hover for details, return true when pressed.\nColor is in 0xRRGGBBAA or, if ColorEditFlags_NoAlpha is set, 0xRRGGBB."
  },
  {
    "form": "(reaper.ImGui_ColorConvertDouble4ToU32 r g b a) :: (integer)",
    "doc": "(reaper.ImGui_ColorConvertDouble4ToU32 r g b a) :: (integer)\nr :: number\ng :: number\nb :: number\na :: number\nPack 0..1 RGBA values into a 32-bit integer (0xRRGGBBAA).",
    "name": "ImGui_ColorConvertDouble4ToU32",
    "params": [
      {
        "type": "number",
        "name": "r"
      },
      {
        "type": "number",
        "name": "g"
      },
      {
        "type": "number",
        "name": "b"
      },
      {
        "type": "number",
        "name": "a"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Pack 0..1 RGBA values into a 32-bit integer (0xRRGGBBAA)."
  },
  {
    "form": "(reaper.ImGui_ColorConvertHSVtoRGB h s v) :: (number number number)",
    "doc": "(reaper.ImGui_ColorConvertHSVtoRGB h s v) :: (number number number)\nh :: number\ns :: number\nv :: number\nConvert HSV values (0..1) into RGB (0..1).",
    "name": "ImGui_ColorConvertHSVtoRGB",
    "params": [
      {
        "type": "number",
        "name": "h"
      },
      {
        "type": "number",
        "name": "s"
      },
      {
        "type": "number",
        "name": "v"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "r"
      },
      {
        "type": "number",
        "name": "g"
      },
      {
        "type": "number",
        "name": "b"
      }
    ],
    "namespace": "reaper",
    "description": "Convert HSV values (0..1) into RGB (0..1)."
  },
  {
    "form": "(reaper.ImGui_ColorConvertNative rgb) :: (integer)",
    "doc": "(reaper.ImGui_ColorConvertNative rgb) :: (integer)\nrgb :: integer\nConvert a native color coming from REAPER or 0xRRGGBB to native.\nThis swaps the red and blue channels on Windows.",
    "name": "ImGui_ColorConvertNative",
    "params": [
      {
        "type": "integer",
        "name": "rgb"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Convert a native color coming from REAPER or 0xRRGGBB to native.\nThis swaps the red and blue channels on Windows."
  },
  {
    "form": "(reaper.ImGui_ColorConvertRGBtoHSV r g b) :: (number number number)",
    "doc": "(reaper.ImGui_ColorConvertRGBtoHSV r g b) :: (number number number)\nr :: number\ng :: number\nb :: number\nConvert RGB values (0..1) into HSV (0..1).",
    "name": "ImGui_ColorConvertRGBtoHSV",
    "params": [
      {
        "type": "number",
        "name": "r"
      },
      {
        "type": "number",
        "name": "g"
      },
      {
        "type": "number",
        "name": "b"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "h"
      },
      {
        "type": "number",
        "name": "s"
      },
      {
        "type": "number",
        "name": "v"
      }
    ],
    "namespace": "reaper",
    "description": "Convert RGB values (0..1) into HSV (0..1)."
  },
  {
    "form": "(reaper.ImGui_ColorConvertU32ToDouble4 rgba) :: (number number number number)",
    "doc": "(reaper.ImGui_ColorConvertU32ToDouble4 rgba) :: (number number number number)\nrgba :: integer\nUnpack a 32-bit integer (0xRRGGBBAA) into separate RGBA values (0..1).",
    "name": "ImGui_ColorConvertU32ToDouble4",
    "params": [
      {
        "type": "integer",
        "name": "rgba"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "r"
      },
      {
        "type": "number",
        "name": "g"
      },
      {
        "type": "number",
        "name": "b"
      },
      {
        "type": "number",
        "name": "a"
      }
    ],
    "namespace": "reaper",
    "description": "Unpack a 32-bit integer (0xRRGGBBAA) into separate RGBA values (0..1)."
  },
  {
    "form": "(reaper.ImGui_ColorEdit3 ctx label col_rgb ?flagsIn) :: (boolean integer)",
    "doc": "(reaper.ImGui_ColorEdit3 ctx label col_rgb ?flagsIn) :: (boolean integer)\nctx :: ImGui_Context\nlabel :: string\ncol_rgb :: integer\nflagsIn :: integer (optional)\nColor is in 0xXXRRGGBB. XX is ignored and will not be modified.",
    "name": "ImGui_ColorEdit3",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "col_rgb"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "col_rgb"
      }
    ],
    "namespace": "reaper",
    "description": "Color is in 0xXXRRGGBB. XX is ignored and will not be modified."
  },
  {
    "form": "(reaper.ImGui_ColorEdit4 ctx label col_rgba ?flagsIn) :: (boolean integer)",
    "doc": "(reaper.ImGui_ColorEdit4 ctx label col_rgba ?flagsIn) :: (boolean integer)\nctx :: ImGui_Context\nlabel :: string\ncol_rgba :: integer\nflagsIn :: integer (optional)\nColor is in 0xRRGGBBAA or, if ColorEditFlags_NoAlpha is set, 0xXXRRGGBB\n(XX is ignored and will not be modified).",
    "name": "ImGui_ColorEdit4",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      }
    ],
    "namespace": "reaper",
    "description": "Color is in 0xRRGGBBAA or, if ColorEditFlags_NoAlpha is set, 0xXXRRGGBB\n(XX is ignored and will not be modified)."
  },
  {
    "form": "(reaper.ImGui_ColorEditFlags_AlphaBar ) :: (integer)",
    "doc": "(reaper.ImGui_ColorEditFlags_AlphaBar ) :: (integer)\nColorEdit, ColorPicker: show vertical alpha bar/gradient in picker.",
    "name": "ImGui_ColorEditFlags_AlphaBar",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker."
  },
  {
    "form": "(reaper.ImGui_ColorEditFlags_AlphaPreview ) :: (integer)",
    "doc": "(reaper.ImGui_ColorEditFlags_AlphaPreview ) :: (integer)\nColorEdit, ColorPicker, ColorButton: display preview as a transparent color\n   over a checkerboard, instead of opaque.",
    "name": "ImGui_ColorEditFlags_AlphaPreview",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "ColorEdit, ColorPicker, ColorButton: display preview as a transparent color\n   over a checkerboard, instead of opaque."
  },
  {
    "form": "(reaper.ImGui_ColorEditFlags_AlphaPreviewHalf ) :: (integer)",
    "doc": "(reaper.ImGui_ColorEditFlags_AlphaPreviewHalf ) :: (integer)\nColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard,\n   instead of opaque.",
    "name": "ImGui_ColorEditFlags_AlphaPreviewHalf",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard,\n   instead of opaque."
  },
  {
    "form": "(reaper.ImGui_ColorEditFlags_DisplayHSV ) :: (integer)",
    "doc": "(reaper.ImGui_ColorEditFlags_DisplayHSV ) :: (integer)\nColorEdit: override _display_ type to HSV. ColorPicker:\n   select any combination using one or more of RGB/HSV/Hex.",
    "name": "ImGui_ColorEditFlags_DisplayHSV",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "ColorEdit: override _display_ type to HSV. ColorPicker:\n   select any combination using one or more of RGB/HSV/Hex."
  },
  {
    "form": "(reaper.ImGui_ColorEditFlags_DisplayHex ) :: (integer)",
    "doc": "(reaper.ImGui_ColorEditFlags_DisplayHex ) :: (integer)\nColorEdit: override _display_ type to Hex. ColorPicker:\n   select any combination using one or more of RGB/HSV/Hex.",
    "name": "ImGui_ColorEditFlags_DisplayHex",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "ColorEdit: override _display_ type to Hex. ColorPicker:\n   select any combination using one or more of RGB/HSV/Hex."
  },
  {
    "form": "(reaper.ImGui_ColorEditFlags_DisplayRGB ) :: (integer)",
    "doc": "(reaper.ImGui_ColorEditFlags_DisplayRGB ) :: (integer)\nColorEdit: override _display_ type to RGB. ColorPicker:\n   select any combination using one or more of RGB/HSV/Hex.",
    "name": "ImGui_ColorEditFlags_DisplayRGB",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "ColorEdit: override _display_ type to RGB. ColorPicker:\n   select any combination using one or more of RGB/HSV/Hex."
  },
  {
    "form": "(reaper.ImGui_ColorEditFlags_Float ) :: (integer)",
    "doc": "(reaper.ImGui_ColorEditFlags_Float ) :: (integer)\nColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0..1.0\n   floats instead of 0..255 integers. No round-trip of value via integers.",
    "name": "ImGui_ColorEditFlags_Float",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0..1.0\n   floats instead of 0..255 integers. No round-trip of value via integers."
  },
  {
    "form": "(reaper.ImGui_ColorEditFlags_InputHSV ) :: (integer)",
    "doc": "(reaper.ImGui_ColorEditFlags_InputHSV ) :: (integer)\nColorEdit, ColorPicker: input and output data in HSV format.",
    "name": "ImGui_ColorEditFlags_InputHSV",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "ColorEdit, ColorPicker: input and output data in HSV format."
  },
  {
    "form": "(reaper.ImGui_ColorEditFlags_InputRGB ) :: (integer)",
    "doc": "(reaper.ImGui_ColorEditFlags_InputRGB ) :: (integer)\nColorEdit, ColorPicker: input and output data in RGB format.",
    "name": "ImGui_ColorEditFlags_InputRGB",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "ColorEdit, ColorPicker: input and output data in RGB format."
  },
  {
    "form": "(reaper.ImGui_ColorEditFlags_NoAlpha ) :: (integer)",
    "doc": "(reaper.ImGui_ColorEditFlags_NoAlpha ) :: (integer)\nColorEdit, ColorPicker, ColorButton: ignore Alpha component\n  (will only read 3 components from the input pointer).",
    "name": "ImGui_ColorEditFlags_NoAlpha",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "ColorEdit, ColorPicker, ColorButton: ignore Alpha component\n  (will only read 3 components from the input pointer)."
  },
  {
    "form": "(reaper.ImGui_ColorEditFlags_NoBorder ) :: (integer)",
    "doc": "(reaper.ImGui_ColorEditFlags_NoBorder ) :: (integer)\nColorButton: disable border (which is enforced by default).",
    "name": "ImGui_ColorEditFlags_NoBorder",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "ColorButton: disable border (which is enforced by default)."
  },
  {
    "form": "(reaper.ImGui_ColorEditFlags_NoDragDrop ) :: (integer)",
    "doc": "(reaper.ImGui_ColorEditFlags_NoDragDrop ) :: (integer)\nColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.",
    "name": "ImGui_ColorEditFlags_NoDragDrop",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source."
  },
  {
    "form": "(reaper.ImGui_ColorEditFlags_NoInputs ) :: (integer)",
    "doc": "(reaper.ImGui_ColorEditFlags_NoInputs ) :: (integer)\nColorEdit, ColorPicker: disable inputs sliders/text widgets\n   (e.g. to show only the small preview color square).",
    "name": "ImGui_ColorEditFlags_NoInputs",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "ColorEdit, ColorPicker: disable inputs sliders/text widgets\n   (e.g. to show only the small preview color square)."
  },
  {
    "form": "(reaper.ImGui_ColorEditFlags_NoLabel ) :: (integer)",
    "doc": "(reaper.ImGui_ColorEditFlags_NoLabel ) :: (integer)\nColorEdit, ColorPicker: disable display of inline text label\n   (the label is still forwarded to the tooltip and picker).",
    "name": "ImGui_ColorEditFlags_NoLabel",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "ColorEdit, ColorPicker: disable display of inline text label\n   (the label is still forwarded to the tooltip and picker)."
  },
  {
    "form": "(reaper.ImGui_ColorEditFlags_NoOptions ) :: (integer)",
    "doc": "(reaper.ImGui_ColorEditFlags_NoOptions ) :: (integer)\nColorEdit: disable toggling options menu when right-clicking on inputs/small preview.",
    "name": "ImGui_ColorEditFlags_NoOptions",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "ColorEdit: disable toggling options menu when right-clicking on inputs/small preview."
  },
  {
    "form": "(reaper.ImGui_ColorEditFlags_NoPicker ) :: (integer)",
    "doc": "(reaper.ImGui_ColorEditFlags_NoPicker ) :: (integer)\nColorEdit: disable picker when clicking on color square.",
    "name": "ImGui_ColorEditFlags_NoPicker",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "ColorEdit: disable picker when clicking on color square."
  },
  {
    "form": "(reaper.ImGui_ColorEditFlags_NoSidePreview ) :: (integer)",
    "doc": "(reaper.ImGui_ColorEditFlags_NoSidePreview ) :: (integer)\nColorPicker: disable bigger color preview on right side of the picker,\n   use small color square preview instead.",
    "name": "ImGui_ColorEditFlags_NoSidePreview",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "ColorPicker: disable bigger color preview on right side of the picker,\n   use small color square preview instead."
  },
  {
    "form": "(reaper.ImGui_ColorEditFlags_NoSmallPreview ) :: (integer)",
    "doc": "(reaper.ImGui_ColorEditFlags_NoSmallPreview ) :: (integer)\nColorEdit, ColorPicker: disable color square preview next to the inputs.\n   (e.g. to show only the inputs).",
    "name": "ImGui_ColorEditFlags_NoSmallPreview",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "ColorEdit, ColorPicker: disable color square preview next to the inputs.\n   (e.g. to show only the inputs)."
  },
  {
    "form": "(reaper.ImGui_ColorEditFlags_NoTooltip ) :: (integer)",
    "doc": "(reaper.ImGui_ColorEditFlags_NoTooltip ) :: (integer)\nColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.",
    "name": "ImGui_ColorEditFlags_NoTooltip",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview."
  },
  {
    "form": "(reaper.ImGui_ColorEditFlags_None ) :: (integer)",
    "doc": "(reaper.ImGui_ColorEditFlags_None ) :: (integer)\n",
    "name": "ImGui_ColorEditFlags_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_ColorEditFlags_PickerHueBar ) :: (integer)",
    "doc": "(reaper.ImGui_ColorEditFlags_PickerHueBar ) :: (integer)\nColorPicker: bar for Hue, rectangle for Sat/Value.",
    "name": "ImGui_ColorEditFlags_PickerHueBar",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "ColorPicker: bar for Hue, rectangle for Sat/Value."
  },
  {
    "form": "(reaper.ImGui_ColorEditFlags_PickerHueWheel ) :: (integer)",
    "doc": "(reaper.ImGui_ColorEditFlags_PickerHueWheel ) :: (integer)\nColorPicker: wheel for Hue, triangle for Sat/Value.",
    "name": "ImGui_ColorEditFlags_PickerHueWheel",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "ColorPicker: wheel for Hue, triangle for Sat/Value."
  },
  {
    "form": "(reaper.ImGui_ColorEditFlags_Uint8 ) :: (integer)",
    "doc": "(reaper.ImGui_ColorEditFlags_Uint8 ) :: (integer)\nColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.",
    "name": "ImGui_ColorEditFlags_Uint8",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255."
  },
  {
    "form": "(reaper.ImGui_ColorPicker3 ctx label col_rgb ?flagsIn) :: (boolean integer)",
    "doc": "(reaper.ImGui_ColorPicker3 ctx label col_rgb ?flagsIn) :: (boolean integer)\nctx :: ImGui_Context\nlabel :: string\ncol_rgb :: integer\nflagsIn :: integer (optional)\nColor is in 0xXXRRGGBB. XX is ignored and will not be modified.",
    "name": "ImGui_ColorPicker3",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "col_rgb"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "col_rgb"
      }
    ],
    "namespace": "reaper",
    "description": "Color is in 0xXXRRGGBB. XX is ignored and will not be modified."
  },
  {
    "form": "(reaper.ImGui_ColorPicker4 ctx label col_rgba ?flagsIn ?ref_colIn) :: (boolean integer)",
    "doc": "(reaper.ImGui_ColorPicker4 ctx label col_rgba ?flagsIn ?ref_colIn) :: (boolean integer)\nctx :: ImGui_Context\nlabel :: string\ncol_rgba :: integer\nflagsIn :: integer (optional)\nref_colIn :: integer (optional)\n",
    "name": "ImGui_ColorPicker4",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "ref_colIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Combo ctx label current_item items ?popup_max_height_in_itemsIn) :: (boolean integer)",
    "doc": "(reaper.ImGui_Combo ctx label current_item items ?popup_max_height_in_itemsIn) :: (boolean integer)\nctx :: ImGui_Context\nlabel :: string\ncurrent_item :: integer\nitems :: string\npopup_max_height_in_itemsIn :: integer (optional)\nHelper over BeginCombo/EndCombo for convenience purpose. Each item must be\nnull-terminated (requires REAPER v6.44 or newer for EEL and Lua).",
    "name": "ImGui_Combo",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "current_item"
      },
      {
        "type": "string",
        "name": "items"
      },
      {
        "type": "integer",
        "name": "popup_max_height_in_itemsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "current_item"
      }
    ],
    "namespace": "reaper",
    "description": "Helper over BeginCombo/EndCombo for convenience purpose. Each item must be\nnull-terminated (requires REAPER v6.44 or newer for EEL and Lua)."
  },
  {
    "form": "(reaper.ImGui_ComboFlags_HeightLarge ) :: (integer)",
    "doc": "(reaper.ImGui_ComboFlags_HeightLarge ) :: (integer)\nMax ~20 items visible.",
    "name": "ImGui_ComboFlags_HeightLarge",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Max ~20 items visible."
  },
  {
    "form": "(reaper.ImGui_ComboFlags_HeightLargest ) :: (integer)",
    "doc": "(reaper.ImGui_ComboFlags_HeightLargest ) :: (integer)\nAs many fitting items as possible.",
    "name": "ImGui_ComboFlags_HeightLargest",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "As many fitting items as possible."
  },
  {
    "form": "(reaper.ImGui_ComboFlags_HeightRegular ) :: (integer)",
    "doc": "(reaper.ImGui_ComboFlags_HeightRegular ) :: (integer)\nMax ~8 items visible (default).",
    "name": "ImGui_ComboFlags_HeightRegular",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Max ~8 items visible (default)."
  },
  {
    "form": "(reaper.ImGui_ComboFlags_HeightSmall ) :: (integer)",
    "doc": "(reaper.ImGui_ComboFlags_HeightSmall ) :: (integer)\nMax ~4 items visible. Tip: If you want your combo popup to be a specific size\nyou can use SetNextWindowSizeConstraints prior to calling BeginCombo.",
    "name": "ImGui_ComboFlags_HeightSmall",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Max ~4 items visible. Tip: If you want your combo popup to be a specific size\nyou can use SetNextWindowSizeConstraints prior to calling BeginCombo."
  },
  {
    "form": "(reaper.ImGui_ComboFlags_NoArrowButton ) :: (integer)",
    "doc": "(reaper.ImGui_ComboFlags_NoArrowButton ) :: (integer)\nDisplay on the preview box without the square arrow button.",
    "name": "ImGui_ComboFlags_NoArrowButton",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Display on the preview box without the square arrow button."
  },
  {
    "form": "(reaper.ImGui_ComboFlags_NoPreview ) :: (integer)",
    "doc": "(reaper.ImGui_ComboFlags_NoPreview ) :: (integer)\nDisplay only a square arrow button.",
    "name": "ImGui_ComboFlags_NoPreview",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Display only a square arrow button."
  },
  {
    "form": "(reaper.ImGui_ComboFlags_None ) :: (integer)",
    "doc": "(reaper.ImGui_ComboFlags_None ) :: (integer)\n",
    "name": "ImGui_ComboFlags_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_ComboFlags_PopupAlignLeft ) :: (integer)",
    "doc": "(reaper.ImGui_ComboFlags_PopupAlignLeft ) :: (integer)\nAlign the popup toward the left by default.",
    "name": "ImGui_ComboFlags_PopupAlignLeft",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Align the popup toward the left by default."
  },
  {
    "form": "(reaper.ImGui_Cond_Always ) :: (integer)",
    "doc": "(reaper.ImGui_Cond_Always ) :: (integer)\nNo condition (always set the variable).",
    "name": "ImGui_Cond_Always",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "No condition (always set the variable)."
  },
  {
    "form": "(reaper.ImGui_Cond_Appearing ) :: (integer)",
    "doc": "(reaper.ImGui_Cond_Appearing ) :: (integer)\nSet the variable if the object/window is appearing after being\n   hidden/inactive (or the first time).",
    "name": "ImGui_Cond_Appearing",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Set the variable if the object/window is appearing after being\n   hidden/inactive (or the first time)."
  },
  {
    "form": "(reaper.ImGui_Cond_FirstUseEver ) :: (integer)",
    "doc": "(reaper.ImGui_Cond_FirstUseEver ) :: (integer)\nSet the variable if the object/window has no persistently saved data\n   (no entry in .ini file).",
    "name": "ImGui_Cond_FirstUseEver",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Set the variable if the object/window has no persistently saved data\n   (no entry in .ini file)."
  },
  {
    "form": "(reaper.ImGui_Cond_Once ) :: (integer)",
    "doc": "(reaper.ImGui_Cond_Once ) :: (integer)\nSet the variable once per runtime session (only the first call will succeed).",
    "name": "ImGui_Cond_Once",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Set the variable once per runtime session (only the first call will succeed)."
  },
  {
    "form": "(reaper.ImGui_ConfigFlags_DockingEnable ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigFlags_DockingEnable ) :: (integer)\n[BETA] Enable docking functionality.",
    "name": "ImGui_ConfigFlags_DockingEnable",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[BETA] Enable docking functionality."
  },
  {
    "form": "(reaper.ImGui_ConfigFlags_NavEnableKeyboard ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigFlags_NavEnableKeyboard ) :: (integer)\nMaster keyboard navigation enable flag.\nEnable full Tabbing + directional arrows + space/enter to activate.",
    "name": "ImGui_ConfigFlags_NavEnableKeyboard",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Master keyboard navigation enable flag.\nEnable full Tabbing + directional arrows + space/enter to activate."
  },
  {
    "form": "(reaper.ImGui_ConfigFlags_NavEnableSetMousePos ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigFlags_NavEnableSetMousePos ) :: (integer)\nInstruct navigation to move the mouse cursor.",
    "name": "ImGui_ConfigFlags_NavEnableSetMousePos",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Instruct navigation to move the mouse cursor."
  },
  {
    "form": "(reaper.ImGui_ConfigFlags_NavNoCaptureKeyboard ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigFlags_NavNoCaptureKeyboard ) :: (integer)\nInstruct navigation to not capture global keyboard input when\n   ConfigFlags_NavEnableKeyboard is set (see SetNextFrameWantCaptureKeyboard).",
    "name": "ImGui_ConfigFlags_NavNoCaptureKeyboard",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Instruct navigation to not capture global keyboard input when\n   ConfigFlags_NavEnableKeyboard is set (see SetNextFrameWantCaptureKeyboard)."
  },
  {
    "form": "(reaper.ImGui_ConfigFlags_NoMouse ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigFlags_NoMouse ) :: (integer)\nInstruct imgui to ignore mouse position/buttons.",
    "name": "ImGui_ConfigFlags_NoMouse",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Instruct imgui to ignore mouse position/buttons."
  },
  {
    "form": "(reaper.ImGui_ConfigFlags_NoMouseCursorChange ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigFlags_NoMouseCursorChange ) :: (integer)\nInstruct backend to not alter mouse cursor shape and visibility.",
    "name": "ImGui_ConfigFlags_NoMouseCursorChange",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Instruct backend to not alter mouse cursor shape and visibility."
  },
  {
    "form": "(reaper.ImGui_ConfigFlags_NoSavedSettings ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigFlags_NoSavedSettings ) :: (integer)\nDisable state restoration and persistence for the whole context.",
    "name": "ImGui_ConfigFlags_NoSavedSettings",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable state restoration and persistence for the whole context."
  },
  {
    "form": "(reaper.ImGui_ConfigFlags_None ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigFlags_None ) :: (integer)\n",
    "name": "ImGui_ConfigFlags_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_ConfigVar_DebugBeginReturnValueLoop ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigVar_DebugBeginReturnValueLoop ) :: (integer)\nSome calls to Begin()/BeginChild() will return false.\nWill cycle through window depths then repeat. Suggested use: add\n\"SetConfigVar(ConfigVar_DebugBeginReturnValueLoop(), GetKeyMods() == Mod_Shift\"\nin your main loop then occasionally press SHIFT.\nWindows should be flickering while running.",
    "name": "ImGui_ConfigVar_DebugBeginReturnValueLoop",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Some calls to Begin()/BeginChild() will return false.\nWill cycle through window depths then repeat. Suggested use: add\n\"SetConfigVar(ConfigVar_DebugBeginReturnValueLoop(), GetKeyMods() == Mod_Shift\"\nin your main loop then occasionally press SHIFT.\nWindows should be flickering while running."
  },
  {
    "form": "(reaper.ImGui_ConfigVar_DebugBeginReturnValueOnce ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigVar_DebugBeginReturnValueOnce ) :: (integer)\nFirst-time calls to Begin()/BeginChild() will return false.\n**Needs to be set at context startup time** if you don't want to miss windows.",
    "name": "ImGui_ConfigVar_DebugBeginReturnValueOnce",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "First-time calls to Begin()/BeginChild() will return false.\n**Needs to be set at context startup time** if you don't want to miss windows."
  },
  {
    "form": "(reaper.ImGui_ConfigVar_DockingNoSplit ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigVar_DockingNoSplit ) :: (integer)\nSimplified docking mode: disable window splitting, so docking is limited to\n   merging multiple windows together into tab-bars.",
    "name": "ImGui_ConfigVar_DockingNoSplit",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Simplified docking mode: disable window splitting, so docking is limited to\n   merging multiple windows together into tab-bars."
  },
  {
    "form": "(reaper.ImGui_ConfigVar_DockingTransparentPayload ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigVar_DockingTransparentPayload ) :: (integer)\nMake window or viewport transparent when docking and only display docking\n   boxes on the target viewport.",
    "name": "ImGui_ConfigVar_DockingTransparentPayload",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Make window or viewport transparent when docking and only display docking\n   boxes on the target viewport."
  },
  {
    "form": "(reaper.ImGui_ConfigVar_DockingWithShift ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigVar_DockingWithShift ) :: (integer)\nEnable docking with holding Shift key\n   (reduce visual noise, allows dropping in wider space",
    "name": "ImGui_ConfigVar_DockingWithShift",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Enable docking with holding Shift key\n   (reduce visual noise, allows dropping in wider space"
  },
  {
    "form": "(reaper.ImGui_ConfigVar_DragClickToInputText ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigVar_DragClickToInputText ) :: (integer)\nEnable turning Drag* widgets into text input with a simple mouse\n   click-release (without moving). Not desirable on devices without a keyboard.",
    "name": "ImGui_ConfigVar_DragClickToInputText",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Enable turning Drag* widgets into text input with a simple mouse\n   click-release (without moving). Not desirable on devices without a keyboard."
  },
  {
    "form": "(reaper.ImGui_ConfigVar_Flags ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigVar_Flags ) :: (integer)\nConfigFlags_*",
    "name": "ImGui_ConfigVar_Flags",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "ConfigFlags_*"
  },
  {
    "form": "(reaper.ImGui_ConfigVar_HoverDelayNormal ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigVar_HoverDelayNormal ) :: (integer)\nDelay on hovering before IsItemHovered(HoveredFlags_DelayNormal) returns true.",
    "name": "ImGui_ConfigVar_HoverDelayNormal",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Delay on hovering before IsItemHovered(HoveredFlags_DelayNormal) returns true."
  },
  {
    "form": "(reaper.ImGui_ConfigVar_HoverDelayShort ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigVar_HoverDelayShort ) :: (integer)\nDelay on hovering before IsItemHovered(HoveredFlags_DelayShort) returns true.",
    "name": "ImGui_ConfigVar_HoverDelayShort",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Delay on hovering before IsItemHovered(HoveredFlags_DelayShort) returns true."
  },
  {
    "form": "(reaper.ImGui_ConfigVar_InputTextCursorBlink ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigVar_InputTextCursorBlink ) :: (integer)\nEnable blinking cursor (optional as some users consider it to be distracting).",
    "name": "ImGui_ConfigVar_InputTextCursorBlink",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Enable blinking cursor (optional as some users consider it to be distracting)."
  },
  {
    "form": "(reaper.ImGui_ConfigVar_InputTextEnterKeepActive ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigVar_InputTextEnterKeepActive ) :: (integer)\nPressing Enter will keep item active and select contents (single-line only).",
    "name": "ImGui_ConfigVar_InputTextEnterKeepActive",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Pressing Enter will keep item active and select contents (single-line only)."
  },
  {
    "form": "(reaper.ImGui_ConfigVar_InputTrickleEventQueue ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigVar_InputTrickleEventQueue ) :: (integer)\nEnable input queue trickling: some types of events submitted during the same\n   frame (e.g. button down + up) will be spread over multiple frames, improving\n   interactions with low framerates.",
    "name": "ImGui_ConfigVar_InputTrickleEventQueue",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Enable input queue trickling: some types of events submitted during the same\n   frame (e.g. button down + up) will be spread over multiple frames, improving\n   interactions with low framerates."
  },
  {
    "form": "(reaper.ImGui_ConfigVar_KeyRepeatDelay ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigVar_KeyRepeatDelay ) :: (integer)\nWhen holding a key/button, time before it starts repeating, in seconds\n   (for buttons in Repeat mode, etc.).",
    "name": "ImGui_ConfigVar_KeyRepeatDelay",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "When holding a key/button, time before it starts repeating, in seconds\n   (for buttons in Repeat mode, etc.)."
  },
  {
    "form": "(reaper.ImGui_ConfigVar_KeyRepeatRate ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigVar_KeyRepeatRate ) :: (integer)\nWhen holding a key/button, rate at which it repeats, in seconds.",
    "name": "ImGui_ConfigVar_KeyRepeatRate",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "When holding a key/button, rate at which it repeats, in seconds."
  },
  {
    "form": "(reaper.ImGui_ConfigVar_MacOSXBehaviors ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigVar_MacOSXBehaviors ) :: (integer)\nOS X style: Text editing cursor movement using Alt instead of Ctrl, Shortcuts\n   using Cmd/Super instead of Ctrl, Line/Text Start and End using Cmd+Arrows\n   instead of Home/End, Double click selects by word instead of selecting whole\n   text, Multi-selection in lists uses Cmd/Super instead of Ctrl.",
    "name": "ImGui_ConfigVar_MacOSXBehaviors",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "OS X style: Text editing cursor movement using Alt instead of Ctrl, Shortcuts\n   using Cmd/Super instead of Ctrl, Line/Text Start and End using Cmd+Arrows\n   instead of Home/End, Double click selects by word instead of selecting whole\n   text, Multi-selection in lists uses Cmd/Super instead of Ctrl."
  },
  {
    "form": "(reaper.ImGui_ConfigVar_MouseDoubleClickMaxDist ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigVar_MouseDoubleClickMaxDist ) :: (integer)\nDistance threshold to stay in to validate a double-click, in pixels.",
    "name": "ImGui_ConfigVar_MouseDoubleClickMaxDist",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Distance threshold to stay in to validate a double-click, in pixels."
  },
  {
    "form": "(reaper.ImGui_ConfigVar_MouseDoubleClickTime ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigVar_MouseDoubleClickTime ) :: (integer)\nTime for a double-click, in seconds.",
    "name": "ImGui_ConfigVar_MouseDoubleClickTime",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Time for a double-click, in seconds."
  },
  {
    "form": "(reaper.ImGui_ConfigVar_MouseDragThreshold ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigVar_MouseDragThreshold ) :: (integer)\nDistance threshold before considering we are dragging.",
    "name": "ImGui_ConfigVar_MouseDragThreshold",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Distance threshold before considering we are dragging."
  },
  {
    "form": "(reaper.ImGui_ConfigVar_ViewportsNoDecoration ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigVar_ViewportsNoDecoration ) :: (integer)\nDisable default OS window decoration. Enabling decoration can create\n   subsequent issues at OS levels (e.g. minimum window size).",
    "name": "ImGui_ConfigVar_ViewportsNoDecoration",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable default OS window decoration. Enabling decoration can create\n   subsequent issues at OS levels (e.g. minimum window size)."
  },
  {
    "form": "(reaper.ImGui_ConfigVar_WindowsMoveFromTitleBarOnly ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigVar_WindowsMoveFromTitleBarOnly ) :: (integer)\nEnable allowing to move windows only when clicking on their title bar.\n   Does not apply to windows without a title bar.",
    "name": "ImGui_ConfigVar_WindowsMoveFromTitleBarOnly",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Enable allowing to move windows only when clicking on their title bar.\n   Does not apply to windows without a title bar."
  },
  {
    "form": "(reaper.ImGui_ConfigVar_WindowsResizeFromEdges ) :: (integer)",
    "doc": "(reaper.ImGui_ConfigVar_WindowsResizeFromEdges ) :: (integer)\nEnable resizing of windows from their edges and from the lower-left corner.",
    "name": "ImGui_ConfigVar_WindowsResizeFromEdges",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Enable resizing of windows from their edges and from the lower-left corner."
  },
  {
    "form": "(reaper.ImGui_CreateContext label ?config_flagsIn) :: (ImGui_Context)",
    "doc": "(reaper.ImGui_CreateContext label ?config_flagsIn) :: (ImGui_Context)\nlabel :: string\nconfig_flagsIn :: integer (optional)\nCreate a new ReaImGui context.\nThe context will remain valid as long as it is used in each defer cycle.\nThe label is used for the tab text when windows are docked in REAPER\nand also as a unique identifier for storing settings.",
    "name": "ImGui_CreateContext",
    "params": [
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "config_flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "ImGui_Context"
      }
    ],
    "namespace": "reaper",
    "description": "Create a new ReaImGui context.\nThe context will remain valid as long as it is used in each defer cycle.\nThe label is used for the tab text when windows are docked in REAPER\nand also as a unique identifier for storing settings."
  },
  {
    "form": "(reaper.ImGui_CreateDrawListSplitter draw_list) :: (ImGui_DrawListSplitter)",
    "doc": "(reaper.ImGui_CreateDrawListSplitter draw_list) :: (ImGui_DrawListSplitter)\ndraw_list :: ImGui_DrawList\n",
    "name": "ImGui_CreateDrawListSplitter",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      }
    ],
    "returns": [
      {
        "type": "ImGui_DrawListSplitter"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_CreateFont family_or_file size ?flagsIn) :: (ImGui_Font)",
    "doc": "(reaper.ImGui_CreateFont family_or_file size ?flagsIn) :: (ImGui_Font)\nfamily_or_file :: string\nsize :: integer\nflagsIn :: integer (optional)\nLoad a font matching a font family name or from a font file.\nThe font will remain valid while it's attached to a context. See Attach.\nThe family name can be an installed font or one of the generic fonts:\nsans-serif, serif, monospace, cursive, fantasy.\nIf 'family_or_file' specifies a path to a font file (contains a / or \\):\n- The first byte of 'flags' is used as the font index within the file\n- The font styles in 'flags' are simulated by the font renderer",
    "name": "ImGui_CreateFont",
    "params": [
      {
        "type": "string",
        "name": "family_or_file"
      },
      {
        "type": "integer",
        "name": "size"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "ImGui_Font"
      }
    ],
    "namespace": "reaper",
    "description": "Load a font matching a font family name or from a font file.\nThe font will remain valid while it's attached to a context. See Attach.\nThe family name can be an installed font or one of the generic fonts:\nsans-serif, serif, monospace, cursive, fantasy.\nIf 'family_or_file' specifies a path to a font file (contains a / or \\):\n- The first byte of 'flags' is used as the font index within the file\n- The font styles in 'flags' are simulated by the font renderer"
  },
  {
    "form": "(reaper.ImGui_CreateFunctionFromEEL code) :: (ImGui_Function)",
    "doc": "(reaper.ImGui_CreateFunctionFromEEL code) :: (ImGui_Function)\ncode :: string\nCompile an EEL program.\nStandard EEL [math](https://www.reaper.fm/sdk/js/basiccode.php#js_basicfunc)\nand [string](https://www.reaper.fm/sdk/js/strings.php#js_string_funcs)\nfunctions are available in addition to callback-specific functions\n(see InputTextCallback_*).",
    "name": "ImGui_CreateFunctionFromEEL",
    "params": [
      {
        "type": "string",
        "name": "code"
      }
    ],
    "returns": [
      {
        "type": "ImGui_Function"
      }
    ],
    "namespace": "reaper",
    "description": "Compile an EEL program.\nStandard EEL [math](https://www.reaper.fm/sdk/js/basiccode.php#js_basicfunc)\nand [string](https://www.reaper.fm/sdk/js/strings.php#js_string_funcs)\nfunctions are available in addition to callback-specific functions\n(see InputTextCallback_*)."
  },
  {
    "form": "(reaper.ImGui_CreateImage file ?flagsIn) :: (ImGui_Image)",
    "doc": "(reaper.ImGui_CreateImage file ?flagsIn) :: (ImGui_Image)\nfile :: string\nflagsIn :: integer (optional)\nThe returned object is valid as long as it is used in each defer cycle\nunless attached to a context (see Attach).\n('flags' currently unused and reserved for future expansion)",
    "name": "ImGui_CreateImage",
    "params": [
      {
        "type": "string",
        "name": "file"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "ImGui_Image"
      }
    ],
    "namespace": "reaper",
    "description": "The returned object is valid as long as it is used in each defer cycle\nunless attached to a context (see Attach).\n('flags' currently unused and reserved for future expansion)"
  },
  {
    "form": "(reaper.ImGui_CreateImageFromMem data) :: (ImGui_Image)",
    "doc": "(reaper.ImGui_CreateImageFromMem data) :: (ImGui_Image)\ndata :: string\nRequires REAPER v6.44 or newer for EEL and Lua. Load from a file using\nCreateImage or explicitely specify data_sz if supporting older versions.",
    "name": "ImGui_CreateImageFromMem",
    "params": [
      {
        "type": "string",
        "name": "data"
      }
    ],
    "returns": [
      {
        "type": "ImGui_Image"
      }
    ],
    "namespace": "reaper",
    "description": "Requires REAPER v6.44 or newer for EEL and Lua. Load from a file using\nCreateImage or explicitely specify data_sz if supporting older versions."
  },
  {
    "form": "(reaper.ImGui_CreateImageSet ) :: (ImGui_ImageSet)",
    "doc": "(reaper.ImGui_CreateImageSet ) :: (ImGui_ImageSet)\n",
    "name": "ImGui_CreateImageSet",
    "returns": [
      {
        "type": "ImGui_ImageSet"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_CreateListClipper ctx) :: (ImGui_ListClipper)",
    "doc": "(reaper.ImGui_CreateListClipper ctx) :: (ImGui_ListClipper)\nctx :: ImGui_Context\nThe returned clipper object is only valid for the given context and is valid\nas long as it is used in each defer cycle unless attached (see Attach).",
    "name": "ImGui_CreateListClipper",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "ImGui_ListClipper"
      }
    ],
    "namespace": "reaper",
    "description": "The returned clipper object is only valid for the given context and is valid\nas long as it is used in each defer cycle unless attached (see Attach)."
  },
  {
    "form": "(reaper.ImGui_CreateTextFilter ?default_filterIn) :: (ImGui_TextFilter)",
    "doc": "(reaper.ImGui_CreateTextFilter ?default_filterIn) :: (ImGui_TextFilter)\ndefault_filterIn :: string (optional)\nValid while used every frame unless attached to a context (see Attach).",
    "name": "ImGui_CreateTextFilter",
    "params": [
      {
        "type": "string",
        "name": "default_filterIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "ImGui_TextFilter"
      }
    ],
    "namespace": "reaper",
    "description": "Valid while used every frame unless attached to a context (see Attach)."
  },
  {
    "form": "(reaper.ImGui_DebugTextEncoding ctx text) :: nil",
    "doc": "(reaper.ImGui_DebugTextEncoding ctx text) :: nil\nctx :: ImGui_Context\ntext :: string\nHelper tool to diagnose between text encoding issues and font loading issues.\nPass your UTF-8 string and verify that there are correct.",
    "name": "ImGui_DebugTextEncoding",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "text"
      }
    ],
    "namespace": "reaper",
    "description": "Helper tool to diagnose between text encoding issues and font loading issues.\nPass your UTF-8 string and verify that there are correct."
  },
  {
    "form": "(reaper.ImGui_DestroyContext ctx) :: nil",
    "doc": "(reaper.ImGui_DestroyContext ctx) :: nil\nctx :: ImGui_Context\nFree the resources used by a context.\nCalling this function is usually not required as all ReaImGui objects are\nautomatically garbage-collected when unused.",
    "name": "ImGui_DestroyContext",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Free the resources used by a context.\nCalling this function is usually not required as all ReaImGui objects are\nautomatically garbage-collected when unused."
  },
  {
    "form": "(reaper.ImGui_Detach ctx obj) :: nil",
    "doc": "(reaper.ImGui_Detach ctx obj) :: nil\nctx :: ImGui_Context\nobj :: ImGui_Resource\nUnlink the object's lifetime. Unattached objects are automatically destroyed\nwhen left unused. You may check whether an object has been destroyed using\nValidatePtr.",
    "name": "ImGui_Detach",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "ImGui_Resource",
        "name": "obj"
      }
    ],
    "namespace": "reaper",
    "description": "Unlink the object's lifetime. Unattached objects are automatically destroyed\nwhen left unused. You may check whether an object has been destroyed using\nValidatePtr."
  },
  {
    "form": "(reaper.ImGui_Dir_Down ) :: (integer)",
    "doc": "(reaper.ImGui_Dir_Down ) :: (integer)\n",
    "name": "ImGui_Dir_Down",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Dir_Left ) :: (integer)",
    "doc": "(reaper.ImGui_Dir_Left ) :: (integer)\n",
    "name": "ImGui_Dir_Left",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Dir_None ) :: (integer)",
    "doc": "(reaper.ImGui_Dir_None ) :: (integer)\n",
    "name": "ImGui_Dir_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Dir_Right ) :: (integer)",
    "doc": "(reaper.ImGui_Dir_Right ) :: (integer)\n",
    "name": "ImGui_Dir_Right",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Dir_Up ) :: (integer)",
    "doc": "(reaper.ImGui_Dir_Up ) :: (integer)\n",
    "name": "ImGui_Dir_Up",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DragDouble ctx label v ?v_speedIn ?v_minIn ?v_maxIn ?formatIn ?flagsIn) :: (boolean number)",
    "doc": "(reaper.ImGui_DragDouble ctx label v ?v_speedIn ?v_minIn ?v_maxIn ?formatIn ?flagsIn) :: (boolean number)\nctx :: ImGui_Context\nlabel :: string\nv :: number\nv_speedIn :: number (optional)\nv_minIn :: number (optional)\nv_maxIn :: number (optional)\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_DragDouble",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "number",
        "name": "v"
      },
      {
        "type": "number",
        "name": "v_speedIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "v_minIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "v_maxIn",
        "optional": true
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "v"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DragDouble2 ctx label v1 v2 ?v_speedIn ?v_minIn ?v_maxIn ?formatIn ?flagsIn) :: (boolean number number)",
    "doc": "(reaper.ImGui_DragDouble2 ctx label v1 v2 ?v_speedIn ?v_minIn ?v_maxIn ?formatIn ?flagsIn) :: (boolean number number)\nctx :: ImGui_Context\nlabel :: string\nv1 :: number\nv2 :: number\nv_speedIn :: number (optional)\nv_minIn :: number (optional)\nv_maxIn :: number (optional)\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_DragDouble2",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "number",
        "name": "v1"
      },
      {
        "type": "number",
        "name": "v2"
      },
      {
        "type": "number",
        "name": "v_speedIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "v_minIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "v_maxIn",
        "optional": true
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "v1"
      },
      {
        "type": "number",
        "name": "v2"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DragDouble3 ctx label v1 v2 v3 ?v_speedIn ?v_minIn ?v_maxIn ?formatIn ?flagsIn) :: (boolean number number number)",
    "doc": "(reaper.ImGui_DragDouble3 ctx label v1 v2 v3 ?v_speedIn ?v_minIn ?v_maxIn ?formatIn ?flagsIn) :: (boolean number number number)\nctx :: ImGui_Context\nlabel :: string\nv1 :: number\nv2 :: number\nv3 :: number\nv_speedIn :: number (optional)\nv_minIn :: number (optional)\nv_maxIn :: number (optional)\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_DragDouble3",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "number",
        "name": "v1"
      },
      {
        "type": "number",
        "name": "v2"
      },
      {
        "type": "number",
        "name": "v3"
      },
      {
        "type": "number",
        "name": "v_speedIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "v_minIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "v_maxIn",
        "optional": true
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "v1"
      },
      {
        "type": "number",
        "name": "v2"
      },
      {
        "type": "number",
        "name": "v3"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DragDouble4 ctx label v1 v2 v3 v4 ?v_speedIn ?v_minIn ?v_maxIn ?formatIn ?flagsIn) :: (boolean number number number number)",
    "doc": "(reaper.ImGui_DragDouble4 ctx label v1 v2 v3 v4 ?v_speedIn ?v_minIn ?v_maxIn ?formatIn ?flagsIn) :: (boolean number number number number)\nctx :: ImGui_Context\nlabel :: string\nv1 :: number\nv2 :: number\nv3 :: number\nv4 :: number\nv_speedIn :: number (optional)\nv_minIn :: number (optional)\nv_maxIn :: number (optional)\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_DragDouble4",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "number",
        "name": "v1"
      },
      {
        "type": "number",
        "name": "v2"
      },
      {
        "type": "number",
        "name": "v3"
      },
      {
        "type": "number",
        "name": "v4"
      },
      {
        "type": "number",
        "name": "v_speedIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "v_minIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "v_maxIn",
        "optional": true
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "v1"
      },
      {
        "type": "number",
        "name": "v2"
      },
      {
        "type": "number",
        "name": "v3"
      },
      {
        "type": "number",
        "name": "v4"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DragDoubleN ctx label values ?speedIn ?minIn ?maxIn ?formatIn ?flagsIn) :: (boolean)",
    "doc": "(reaper.ImGui_DragDoubleN ctx label values ?speedIn ?minIn ?maxIn ?formatIn ?flagsIn) :: (boolean)\nctx :: ImGui_Context\nlabel :: string\nvalues :: reaper_array\nspeedIn :: number (optional)\nminIn :: number (optional)\nmaxIn :: number (optional)\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_DragDoubleN",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "reaper_array",
        "name": "values"
      },
      {
        "type": "number",
        "name": "speedIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "minIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "maxIn",
        "optional": true
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DragDropFlags_AcceptBeforeDelivery ) :: (integer)",
    "doc": "(reaper.ImGui_DragDropFlags_AcceptBeforeDelivery ) :: (integer)\nAcceptDragDropPayload will returns true even before the mouse button is\n   released. You can then check GetDragDropPayload/is_delivery to test if the\n   payload needs to be delivered.",
    "name": "ImGui_DragDropFlags_AcceptBeforeDelivery",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "AcceptDragDropPayload will returns true even before the mouse button is\n   released. You can then check GetDragDropPayload/is_delivery to test if the\n   payload needs to be delivered."
  },
  {
    "form": "(reaper.ImGui_DragDropFlags_AcceptNoDrawDefaultRect ) :: (integer)",
    "doc": "(reaper.ImGui_DragDropFlags_AcceptNoDrawDefaultRect ) :: (integer)\nDo not draw the default highlight rectangle when hovering over target.",
    "name": "ImGui_DragDropFlags_AcceptNoDrawDefaultRect",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Do not draw the default highlight rectangle when hovering over target."
  },
  {
    "form": "(reaper.ImGui_DragDropFlags_AcceptNoPreviewTooltip ) :: (integer)",
    "doc": "(reaper.ImGui_DragDropFlags_AcceptNoPreviewTooltip ) :: (integer)\nRequest hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.",
    "name": "ImGui_DragDropFlags_AcceptNoPreviewTooltip",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site."
  },
  {
    "form": "(reaper.ImGui_DragDropFlags_AcceptPeekOnly ) :: (integer)",
    "doc": "(reaper.ImGui_DragDropFlags_AcceptPeekOnly ) :: (integer)\nFor peeking ahead and inspecting the payload before delivery.\n   Equivalent to DragDropFlags_AcceptBeforeDelivery |\n   DragDropFlags_AcceptNoDrawDefaultRect.",
    "name": "ImGui_DragDropFlags_AcceptPeekOnly",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "For peeking ahead and inspecting the payload before delivery.\n   Equivalent to DragDropFlags_AcceptBeforeDelivery |\n   DragDropFlags_AcceptNoDrawDefaultRect."
  },
  {
    "form": "(reaper.ImGui_DragDropFlags_None ) :: (integer)",
    "doc": "(reaper.ImGui_DragDropFlags_None ) :: (integer)\n",
    "name": "ImGui_DragDropFlags_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DragDropFlags_SourceAllowNullID ) :: (integer)",
    "doc": "(reaper.ImGui_DragDropFlags_SourceAllowNullID ) :: (integer)\nAllow items such as Text, Image that have no unique identifier to be used as\n   drag source, by manufacturing a temporary identifier based on their\n   window-relative position. This is extremely unusual within the dear imgui\n   ecosystem and so we made it explicit.",
    "name": "ImGui_DragDropFlags_SourceAllowNullID",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Allow items such as Text, Image that have no unique identifier to be used as\n   drag source, by manufacturing a temporary identifier based on their\n   window-relative position. This is extremely unusual within the dear imgui\n   ecosystem and so we made it explicit."
  },
  {
    "form": "(reaper.ImGui_DragDropFlags_SourceAutoExpirePayload ) :: (integer)",
    "doc": "(reaper.ImGui_DragDropFlags_SourceAutoExpirePayload ) :: (integer)\nAutomatically expire the payload if the source cease to be submitted\n   (otherwise payloads are persisting while being dragged).",
    "name": "ImGui_DragDropFlags_SourceAutoExpirePayload",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Automatically expire the payload if the source cease to be submitted\n   (otherwise payloads are persisting while being dragged)."
  },
  {
    "form": "(reaper.ImGui_DragDropFlags_SourceExtern ) :: (integer)",
    "doc": "(reaper.ImGui_DragDropFlags_SourceExtern ) :: (integer)\nExternal source (from outside of dear imgui), won't attempt to read current\n   item/window info. Will always return true.\n   Only one Extern source can be active simultaneously.",
    "name": "ImGui_DragDropFlags_SourceExtern",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "External source (from outside of dear imgui), won't attempt to read current\n   item/window info. Will always return true.\n   Only one Extern source can be active simultaneously."
  },
  {
    "form": "(reaper.ImGui_DragDropFlags_SourceNoDisableHover ) :: (integer)",
    "doc": "(reaper.ImGui_DragDropFlags_SourceNoDisableHover ) :: (integer)\nBy default, when dragging we clear data so that IsItemHovered will return\n   false, to avoid subsequent user code submitting tooltips. This flag disables\n   this behavior so you can still call IsItemHovered on the source item.",
    "name": "ImGui_DragDropFlags_SourceNoDisableHover",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "By default, when dragging we clear data so that IsItemHovered will return\n   false, to avoid subsequent user code submitting tooltips. This flag disables\n   this behavior so you can still call IsItemHovered on the source item."
  },
  {
    "form": "(reaper.ImGui_DragDropFlags_SourceNoHoldToOpenOthers ) :: (integer)",
    "doc": "(reaper.ImGui_DragDropFlags_SourceNoHoldToOpenOthers ) :: (integer)\nDisable the behavior that allows to open tree nodes and collapsing header by\n   holding over them while dragging a source item.",
    "name": "ImGui_DragDropFlags_SourceNoHoldToOpenOthers",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable the behavior that allows to open tree nodes and collapsing header by\n   holding over them while dragging a source item."
  },
  {
    "form": "(reaper.ImGui_DragDropFlags_SourceNoPreviewTooltip ) :: (integer)",
    "doc": "(reaper.ImGui_DragDropFlags_SourceNoPreviewTooltip ) :: (integer)\nBy default, a successful call to BeginDragDropSource opens a tooltip so you\n   can display a preview or description of the source contents.\n   This flag disables this behavior.",
    "name": "ImGui_DragDropFlags_SourceNoPreviewTooltip",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "By default, a successful call to BeginDragDropSource opens a tooltip so you\n   can display a preview or description of the source contents.\n   This flag disables this behavior."
  },
  {
    "form": "(reaper.ImGui_DragFloatRange2 ctx label v_current_min v_current_max ?v_speedIn ?v_minIn ?v_maxIn ?formatIn ?format_maxIn ?flagsIn) :: (boolean number number)",
    "doc": "(reaper.ImGui_DragFloatRange2 ctx label v_current_min v_current_max ?v_speedIn ?v_minIn ?v_maxIn ?formatIn ?format_maxIn ?flagsIn) :: (boolean number number)\nctx :: ImGui_Context\nlabel :: string\nv_current_min :: number\nv_current_max :: number\nv_speedIn :: number (optional)\nv_minIn :: number (optional)\nv_maxIn :: number (optional)\nformatIn :: string (optional)\nformat_maxIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_DragFloatRange2",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "number",
        "name": "v_current_min"
      },
      {
        "type": "number",
        "name": "v_current_max"
      },
      {
        "type": "number",
        "name": "v_speedIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "v_minIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "v_maxIn",
        "optional": true
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "string",
        "name": "format_maxIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "v_current_min"
      },
      {
        "type": "number",
        "name": "v_current_max"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DragInt ctx label v ?v_speedIn ?v_minIn ?v_maxIn ?formatIn ?flagsIn) :: (boolean integer)",
    "doc": "(reaper.ImGui_DragInt ctx label v ?v_speedIn ?v_minIn ?v_maxIn ?formatIn ?flagsIn) :: (boolean integer)\nctx :: ImGui_Context\nlabel :: string\nv :: integer\nv_speedIn :: number (optional)\nv_minIn :: integer (optional)\nv_maxIn :: integer (optional)\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_DragInt",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "v"
      },
      {
        "type": "number",
        "name": "v_speedIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "v_minIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "v_maxIn",
        "optional": true
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "v"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DragInt2 ctx label v1 v2 ?v_speedIn ?v_minIn ?v_maxIn ?formatIn ?flagsIn) :: (boolean integer integer)",
    "doc": "(reaper.ImGui_DragInt2 ctx label v1 v2 ?v_speedIn ?v_minIn ?v_maxIn ?formatIn ?flagsIn) :: (boolean integer integer)\nctx :: ImGui_Context\nlabel :: string\nv1 :: integer\nv2 :: integer\nv_speedIn :: number (optional)\nv_minIn :: integer (optional)\nv_maxIn :: integer (optional)\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_DragInt2",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "v1"
      },
      {
        "type": "integer",
        "name": "v2"
      },
      {
        "type": "number",
        "name": "v_speedIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "v_minIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "v_maxIn",
        "optional": true
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "v1"
      },
      {
        "type": "integer",
        "name": "v2"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DragInt3 ctx label v1 v2 v3 ?v_speedIn ?v_minIn ?v_maxIn ?formatIn ?flagsIn) :: (boolean integer integer integer)",
    "doc": "(reaper.ImGui_DragInt3 ctx label v1 v2 v3 ?v_speedIn ?v_minIn ?v_maxIn ?formatIn ?flagsIn) :: (boolean integer integer integer)\nctx :: ImGui_Context\nlabel :: string\nv1 :: integer\nv2 :: integer\nv3 :: integer\nv_speedIn :: number (optional)\nv_minIn :: integer (optional)\nv_maxIn :: integer (optional)\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_DragInt3",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "v1"
      },
      {
        "type": "integer",
        "name": "v2"
      },
      {
        "type": "integer",
        "name": "v3"
      },
      {
        "type": "number",
        "name": "v_speedIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "v_minIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "v_maxIn",
        "optional": true
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "v1"
      },
      {
        "type": "integer",
        "name": "v2"
      },
      {
        "type": "integer",
        "name": "v3"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DragInt4 ctx label v1 v2 v3 v4 ?v_speedIn ?v_minIn ?v_maxIn ?formatIn ?flagsIn) :: (boolean integer integer integer integer)",
    "doc": "(reaper.ImGui_DragInt4 ctx label v1 v2 v3 v4 ?v_speedIn ?v_minIn ?v_maxIn ?formatIn ?flagsIn) :: (boolean integer integer integer integer)\nctx :: ImGui_Context\nlabel :: string\nv1 :: integer\nv2 :: integer\nv3 :: integer\nv4 :: integer\nv_speedIn :: number (optional)\nv_minIn :: integer (optional)\nv_maxIn :: integer (optional)\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_DragInt4",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "v1"
      },
      {
        "type": "integer",
        "name": "v2"
      },
      {
        "type": "integer",
        "name": "v3"
      },
      {
        "type": "integer",
        "name": "v4"
      },
      {
        "type": "number",
        "name": "v_speedIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "v_minIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "v_maxIn",
        "optional": true
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "v1"
      },
      {
        "type": "integer",
        "name": "v2"
      },
      {
        "type": "integer",
        "name": "v3"
      },
      {
        "type": "integer",
        "name": "v4"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DragIntRange2 ctx label v_current_min v_current_max ?v_speedIn ?v_minIn ?v_maxIn ?formatIn ?format_maxIn ?flagsIn) :: (boolean integer integer)",
    "doc": "(reaper.ImGui_DragIntRange2 ctx label v_current_min v_current_max ?v_speedIn ?v_minIn ?v_maxIn ?formatIn ?format_maxIn ?flagsIn) :: (boolean integer integer)\nctx :: ImGui_Context\nlabel :: string\nv_current_min :: integer\nv_current_max :: integer\nv_speedIn :: number (optional)\nv_minIn :: integer (optional)\nv_maxIn :: integer (optional)\nformatIn :: string (optional)\nformat_maxIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_DragIntRange2",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "v_current_min"
      },
      {
        "type": "integer",
        "name": "v_current_max"
      },
      {
        "type": "number",
        "name": "v_speedIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "v_minIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "v_maxIn",
        "optional": true
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "string",
        "name": "format_maxIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "v_current_min"
      },
      {
        "type": "integer",
        "name": "v_current_max"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawFlags_Closed ) :: (integer)",
    "doc": "(reaper.ImGui_DrawFlags_Closed ) :: (integer)\nDrawList_PathStroke, DrawList_AddPolyline: specify that shape should be\n   closed (Important: this is always == 1 for legacy reason).",
    "name": "ImGui_DrawFlags_Closed",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "DrawList_PathStroke, DrawList_AddPolyline: specify that shape should be\n   closed (Important: this is always == 1 for legacy reason)."
  },
  {
    "form": "(reaper.ImGui_DrawFlags_None ) :: (integer)",
    "doc": "(reaper.ImGui_DrawFlags_None ) :: (integer)\n",
    "name": "ImGui_DrawFlags_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawFlags_RoundCornersAll ) :: (integer)",
    "doc": "(reaper.ImGui_DrawFlags_RoundCornersAll ) :: (integer)\n",
    "name": "ImGui_DrawFlags_RoundCornersAll",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawFlags_RoundCornersBottom ) :: (integer)",
    "doc": "(reaper.ImGui_DrawFlags_RoundCornersBottom ) :: (integer)\n",
    "name": "ImGui_DrawFlags_RoundCornersBottom",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawFlags_RoundCornersBottomLeft ) :: (integer)",
    "doc": "(reaper.ImGui_DrawFlags_RoundCornersBottomLeft ) :: (integer)\nDrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding\n   bottom-left corner only (when rounding > 0.0, we default to all corners).",
    "name": "ImGui_DrawFlags_RoundCornersBottomLeft",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding\n   bottom-left corner only (when rounding > 0.0, we default to all corners)."
  },
  {
    "form": "(reaper.ImGui_DrawFlags_RoundCornersBottomRight ) :: (integer)",
    "doc": "(reaper.ImGui_DrawFlags_RoundCornersBottomRight ) :: (integer)\nDrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding\n   bottom-right corner only (when rounding > 0.0, we default to all corners).",
    "name": "ImGui_DrawFlags_RoundCornersBottomRight",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding\n   bottom-right corner only (when rounding > 0.0, we default to all corners)."
  },
  {
    "form": "(reaper.ImGui_DrawFlags_RoundCornersLeft ) :: (integer)",
    "doc": "(reaper.ImGui_DrawFlags_RoundCornersLeft ) :: (integer)\n",
    "name": "ImGui_DrawFlags_RoundCornersLeft",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawFlags_RoundCornersNone ) :: (integer)",
    "doc": "(reaper.ImGui_DrawFlags_RoundCornersNone ) :: (integer)\nDrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: disable rounding\n   on all corners (when rounding > 0.0). This is NOT zero, NOT an implicit flag!.",
    "name": "ImGui_DrawFlags_RoundCornersNone",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: disable rounding\n   on all corners (when rounding > 0.0). This is NOT zero, NOT an implicit flag!."
  },
  {
    "form": "(reaper.ImGui_DrawFlags_RoundCornersRight ) :: (integer)",
    "doc": "(reaper.ImGui_DrawFlags_RoundCornersRight ) :: (integer)\n",
    "name": "ImGui_DrawFlags_RoundCornersRight",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawFlags_RoundCornersTop ) :: (integer)",
    "doc": "(reaper.ImGui_DrawFlags_RoundCornersTop ) :: (integer)\n",
    "name": "ImGui_DrawFlags_RoundCornersTop",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawFlags_RoundCornersTopLeft ) :: (integer)",
    "doc": "(reaper.ImGui_DrawFlags_RoundCornersTopLeft ) :: (integer)\nDrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding\n   top-left corner only (when rounding > 0.0, we default to all corners).",
    "name": "ImGui_DrawFlags_RoundCornersTopLeft",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding\n   top-left corner only (when rounding > 0.0, we default to all corners)."
  },
  {
    "form": "(reaper.ImGui_DrawFlags_RoundCornersTopRight ) :: (integer)",
    "doc": "(reaper.ImGui_DrawFlags_RoundCornersTopRight ) :: (integer)\nDrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding\n   top-right corner only (when rounding > 0.0, we default to all corners).",
    "name": "ImGui_DrawFlags_RoundCornersTopRight",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding\n   top-right corner only (when rounding > 0.0, we default to all corners)."
  },
  {
    "form": "(reaper.ImGui_DrawListSplitter_Clear splitter) :: nil",
    "doc": "(reaper.ImGui_DrawListSplitter_Clear splitter) :: nil\nsplitter :: ImGui_DrawListSplitter\n",
    "name": "ImGui_DrawListSplitter_Clear",
    "params": [
      {
        "type": "ImGui_DrawListSplitter",
        "name": "splitter"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawListSplitter_Merge splitter) :: nil",
    "doc": "(reaper.ImGui_DrawListSplitter_Merge splitter) :: nil\nsplitter :: ImGui_DrawListSplitter\n",
    "name": "ImGui_DrawListSplitter_Merge",
    "params": [
      {
        "type": "ImGui_DrawListSplitter",
        "name": "splitter"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawListSplitter_SetCurrentChannel splitter channel_idx) :: nil",
    "doc": "(reaper.ImGui_DrawListSplitter_SetCurrentChannel splitter channel_idx) :: nil\nsplitter :: ImGui_DrawListSplitter\nchannel_idx :: integer\n",
    "name": "ImGui_DrawListSplitter_SetCurrentChannel",
    "params": [
      {
        "type": "ImGui_DrawListSplitter",
        "name": "splitter"
      },
      {
        "type": "integer",
        "name": "channel_idx"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawListSplitter_Split splitter count) :: nil",
    "doc": "(reaper.ImGui_DrawListSplitter_Split splitter count) :: nil\nsplitter :: ImGui_DrawListSplitter\ncount :: integer\n",
    "name": "ImGui_DrawListSplitter_Split",
    "params": [
      {
        "type": "ImGui_DrawListSplitter",
        "name": "splitter"
      },
      {
        "type": "integer",
        "name": "count"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawList_AddBezierCubic draw_list p1_x p1_y p2_x p2_y p3_x p3_y p4_x p4_y col_rgba thickness ?num_segmentsIn) :: nil",
    "doc": "(reaper.ImGui_DrawList_AddBezierCubic draw_list p1_x p1_y p2_x p2_y p3_x p3_y p4_x p4_y col_rgba thickness ?num_segmentsIn) :: nil\ndraw_list :: ImGui_DrawList\np1_x :: number\np1_y :: number\np2_x :: number\np2_y :: number\np3_x :: number\np3_y :: number\np4_x :: number\np4_y :: number\ncol_rgba :: integer\nthickness :: number\nnum_segmentsIn :: integer (optional)\nCubic Bezier (4 control points)",
    "name": "ImGui_DrawList_AddBezierCubic",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "number",
        "name": "p1_x"
      },
      {
        "type": "number",
        "name": "p1_y"
      },
      {
        "type": "number",
        "name": "p2_x"
      },
      {
        "type": "number",
        "name": "p2_y"
      },
      {
        "type": "number",
        "name": "p3_x"
      },
      {
        "type": "number",
        "name": "p3_y"
      },
      {
        "type": "number",
        "name": "p4_x"
      },
      {
        "type": "number",
        "name": "p4_y"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      },
      {
        "type": "number",
        "name": "thickness"
      },
      {
        "type": "integer",
        "name": "num_segmentsIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Cubic Bezier (4 control points)"
  },
  {
    "form": "(reaper.ImGui_DrawList_AddBezierQuadratic draw_list p1_x p1_y p2_x p2_y p3_x p3_y col_rgba thickness ?num_segmentsIn) :: nil",
    "doc": "(reaper.ImGui_DrawList_AddBezierQuadratic draw_list p1_x p1_y p2_x p2_y p3_x p3_y col_rgba thickness ?num_segmentsIn) :: nil\ndraw_list :: ImGui_DrawList\np1_x :: number\np1_y :: number\np2_x :: number\np2_y :: number\np3_x :: number\np3_y :: number\ncol_rgba :: integer\nthickness :: number\nnum_segmentsIn :: integer (optional)\nQuadratic Bezier (3 control points)",
    "name": "ImGui_DrawList_AddBezierQuadratic",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "number",
        "name": "p1_x"
      },
      {
        "type": "number",
        "name": "p1_y"
      },
      {
        "type": "number",
        "name": "p2_x"
      },
      {
        "type": "number",
        "name": "p2_y"
      },
      {
        "type": "number",
        "name": "p3_x"
      },
      {
        "type": "number",
        "name": "p3_y"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      },
      {
        "type": "number",
        "name": "thickness"
      },
      {
        "type": "integer",
        "name": "num_segmentsIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Quadratic Bezier (3 control points)"
  },
  {
    "form": "(reaper.ImGui_DrawList_AddCircle draw_list center_x center_y radius col_rgba ?num_segmentsIn ?thicknessIn) :: nil",
    "doc": "(reaper.ImGui_DrawList_AddCircle draw_list center_x center_y radius col_rgba ?num_segmentsIn ?thicknessIn) :: nil\ndraw_list :: ImGui_DrawList\ncenter_x :: number\ncenter_y :: number\nradius :: number\ncol_rgba :: integer\nnum_segmentsIn :: integer (optional)\nthicknessIn :: number (optional)\nUse \"num_segments == 0\" to automatically calculate tessellation (preferred).",
    "name": "ImGui_DrawList_AddCircle",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "number",
        "name": "center_x"
      },
      {
        "type": "number",
        "name": "center_y"
      },
      {
        "type": "number",
        "name": "radius"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      },
      {
        "type": "integer",
        "name": "num_segmentsIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "thicknessIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Use \"num_segments == 0\" to automatically calculate tessellation (preferred)."
  },
  {
    "form": "(reaper.ImGui_DrawList_AddCircleFilled draw_list center_x center_y radius col_rgba ?num_segmentsIn) :: nil",
    "doc": "(reaper.ImGui_DrawList_AddCircleFilled draw_list center_x center_y radius col_rgba ?num_segmentsIn) :: nil\ndraw_list :: ImGui_DrawList\ncenter_x :: number\ncenter_y :: number\nradius :: number\ncol_rgba :: integer\nnum_segmentsIn :: integer (optional)\nUse \"num_segments == 0\" to automatically calculate tessellation (preferred).",
    "name": "ImGui_DrawList_AddCircleFilled",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "number",
        "name": "center_x"
      },
      {
        "type": "number",
        "name": "center_y"
      },
      {
        "type": "number",
        "name": "radius"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      },
      {
        "type": "integer",
        "name": "num_segmentsIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Use \"num_segments == 0\" to automatically calculate tessellation (preferred)."
  },
  {
    "form": "(reaper.ImGui_DrawList_AddConvexPolyFilled draw_list points col_rgba) :: nil",
    "doc": "(reaper.ImGui_DrawList_AddConvexPolyFilled draw_list points col_rgba) :: nil\ndraw_list :: ImGui_DrawList\npoints :: reaper_array\ncol_rgba :: integer\nNote: Anti-aliased filling requires points to be in clockwise order.",
    "name": "ImGui_DrawList_AddConvexPolyFilled",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "reaper_array",
        "name": "points"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      }
    ],
    "namespace": "reaper",
    "description": "Note: Anti-aliased filling requires points to be in clockwise order."
  },
  {
    "form": "(reaper.ImGui_DrawList_AddImage draw_list img p_min_x p_min_y p_max_x p_max_y ?uv_min_xIn ?uv_min_yIn ?uv_max_xIn ?uv_max_yIn ?col_rgbaIn) :: nil",
    "doc": "(reaper.ImGui_DrawList_AddImage draw_list img p_min_x p_min_y p_max_x p_max_y ?uv_min_xIn ?uv_min_yIn ?uv_max_xIn ?uv_max_yIn ?col_rgbaIn) :: nil\ndraw_list :: ImGui_DrawList\nimg :: ImGui_Image\np_min_x :: number\np_min_y :: number\np_max_x :: number\np_max_y :: number\nuv_min_xIn :: number (optional)\nuv_min_yIn :: number (optional)\nuv_max_xIn :: number (optional)\nuv_max_yIn :: number (optional)\ncol_rgbaIn :: integer (optional)\n",
    "name": "ImGui_DrawList_AddImage",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "ImGui_Image",
        "name": "img"
      },
      {
        "type": "number",
        "name": "p_min_x"
      },
      {
        "type": "number",
        "name": "p_min_y"
      },
      {
        "type": "number",
        "name": "p_max_x"
      },
      {
        "type": "number",
        "name": "p_max_y"
      },
      {
        "type": "number",
        "name": "uv_min_xIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "uv_min_yIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "uv_max_xIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "uv_max_yIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "col_rgbaIn",
        "optional": true
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawList_AddImageQuad draw_list img p1_x p1_y p2_x p2_y p3_x p3_y p4_x p4_y ?uv1_xIn ?uv1_yIn ?uv2_xIn ?uv2_yIn ?uv3_xIn ?uv3_yIn ?uv4_xIn ?uv4_yIn ?col_rgbaIn) :: nil",
    "doc": "(reaper.ImGui_DrawList_AddImageQuad draw_list img p1_x p1_y p2_x p2_y p3_x p3_y p4_x p4_y ?uv1_xIn ?uv1_yIn ?uv2_xIn ?uv2_yIn ?uv3_xIn ?uv3_yIn ?uv4_xIn ?uv4_yIn ?col_rgbaIn) :: nil\ndraw_list :: ImGui_DrawList\nimg :: ImGui_Image\np1_x :: number\np1_y :: number\np2_x :: number\np2_y :: number\np3_x :: number\np3_y :: number\np4_x :: number\np4_y :: number\nuv1_xIn :: number (optional)\nuv1_yIn :: number (optional)\nuv2_xIn :: number (optional)\nuv2_yIn :: number (optional)\nuv3_xIn :: number (optional)\nuv3_yIn :: number (optional)\nuv4_xIn :: number (optional)\nuv4_yIn :: number (optional)\ncol_rgbaIn :: integer (optional)\n",
    "name": "ImGui_DrawList_AddImageQuad",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "ImGui_Image",
        "name": "img"
      },
      {
        "type": "number",
        "name": "p1_x"
      },
      {
        "type": "number",
        "name": "p1_y"
      },
      {
        "type": "number",
        "name": "p2_x"
      },
      {
        "type": "number",
        "name": "p2_y"
      },
      {
        "type": "number",
        "name": "p3_x"
      },
      {
        "type": "number",
        "name": "p3_y"
      },
      {
        "type": "number",
        "name": "p4_x"
      },
      {
        "type": "number",
        "name": "p4_y"
      },
      {
        "type": "number",
        "name": "uv1_xIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "uv1_yIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "uv2_xIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "uv2_yIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "uv3_xIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "uv3_yIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "uv4_xIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "uv4_yIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "col_rgbaIn",
        "optional": true
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawList_AddImageRounded draw_list img p_min_x p_min_y p_max_x p_max_y uv_min_x uv_min_y uv_max_x uv_max_y col_rgba rounding ?flagsIn) :: nil",
    "doc": "(reaper.ImGui_DrawList_AddImageRounded draw_list img p_min_x p_min_y p_max_x p_max_y uv_min_x uv_min_y uv_max_x uv_max_y col_rgba rounding ?flagsIn) :: nil\ndraw_list :: ImGui_DrawList\nimg :: ImGui_Image\np_min_x :: number\np_min_y :: number\np_max_x :: number\np_max_y :: number\nuv_min_x :: number\nuv_min_y :: number\nuv_max_x :: number\nuv_max_y :: number\ncol_rgba :: integer\nrounding :: number\nflagsIn :: integer (optional)\n",
    "name": "ImGui_DrawList_AddImageRounded",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "ImGui_Image",
        "name": "img"
      },
      {
        "type": "number",
        "name": "p_min_x"
      },
      {
        "type": "number",
        "name": "p_min_y"
      },
      {
        "type": "number",
        "name": "p_max_x"
      },
      {
        "type": "number",
        "name": "p_max_y"
      },
      {
        "type": "number",
        "name": "uv_min_x"
      },
      {
        "type": "number",
        "name": "uv_min_y"
      },
      {
        "type": "number",
        "name": "uv_max_x"
      },
      {
        "type": "number",
        "name": "uv_max_y"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      },
      {
        "type": "number",
        "name": "rounding"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawList_AddLine draw_list p1_x p1_y p2_x p2_y col_rgba ?thicknessIn) :: nil",
    "doc": "(reaper.ImGui_DrawList_AddLine draw_list p1_x p1_y p2_x p2_y col_rgba ?thicknessIn) :: nil\ndraw_list :: ImGui_DrawList\np1_x :: number\np1_y :: number\np2_x :: number\np2_y :: number\ncol_rgba :: integer\nthicknessIn :: number (optional)\n",
    "name": "ImGui_DrawList_AddLine",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "number",
        "name": "p1_x"
      },
      {
        "type": "number",
        "name": "p1_y"
      },
      {
        "type": "number",
        "name": "p2_x"
      },
      {
        "type": "number",
        "name": "p2_y"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      },
      {
        "type": "number",
        "name": "thicknessIn",
        "optional": true
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawList_AddNgon draw_list center_x center_y radius col_rgba num_segments ?thicknessIn) :: nil",
    "doc": "(reaper.ImGui_DrawList_AddNgon draw_list center_x center_y radius col_rgba num_segments ?thicknessIn) :: nil\ndraw_list :: ImGui_DrawList\ncenter_x :: number\ncenter_y :: number\nradius :: number\ncol_rgba :: integer\nnum_segments :: integer\nthicknessIn :: number (optional)\n",
    "name": "ImGui_DrawList_AddNgon",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "number",
        "name": "center_x"
      },
      {
        "type": "number",
        "name": "center_y"
      },
      {
        "type": "number",
        "name": "radius"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      },
      {
        "type": "integer",
        "name": "num_segments"
      },
      {
        "type": "number",
        "name": "thicknessIn",
        "optional": true
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawList_AddNgonFilled draw_list center_x center_y radius col_rgba num_segments) :: nil",
    "doc": "(reaper.ImGui_DrawList_AddNgonFilled draw_list center_x center_y radius col_rgba num_segments) :: nil\ndraw_list :: ImGui_DrawList\ncenter_x :: number\ncenter_y :: number\nradius :: number\ncol_rgba :: integer\nnum_segments :: integer\n",
    "name": "ImGui_DrawList_AddNgonFilled",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "number",
        "name": "center_x"
      },
      {
        "type": "number",
        "name": "center_y"
      },
      {
        "type": "number",
        "name": "radius"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      },
      {
        "type": "integer",
        "name": "num_segments"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawList_AddPolyline draw_list points col_rgba flags thickness) :: nil",
    "doc": "(reaper.ImGui_DrawList_AddPolyline draw_list points col_rgba flags thickness) :: nil\ndraw_list :: ImGui_DrawList\npoints :: reaper_array\ncol_rgba :: integer\nflags :: integer\nthickness :: number\nPoints is a list of x,y coordinates.",
    "name": "ImGui_DrawList_AddPolyline",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "reaper_array",
        "name": "points"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      },
      {
        "type": "integer",
        "name": "flags"
      },
      {
        "type": "number",
        "name": "thickness"
      }
    ],
    "namespace": "reaper",
    "description": "Points is a list of x,y coordinates."
  },
  {
    "form": "(reaper.ImGui_DrawList_AddQuad draw_list p1_x p1_y p2_x p2_y p3_x p3_y p4_x p4_y col_rgba ?thicknessIn) :: nil",
    "doc": "(reaper.ImGui_DrawList_AddQuad draw_list p1_x p1_y p2_x p2_y p3_x p3_y p4_x p4_y col_rgba ?thicknessIn) :: nil\ndraw_list :: ImGui_DrawList\np1_x :: number\np1_y :: number\np2_x :: number\np2_y :: number\np3_x :: number\np3_y :: number\np4_x :: number\np4_y :: number\ncol_rgba :: integer\nthicknessIn :: number (optional)\n",
    "name": "ImGui_DrawList_AddQuad",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "number",
        "name": "p1_x"
      },
      {
        "type": "number",
        "name": "p1_y"
      },
      {
        "type": "number",
        "name": "p2_x"
      },
      {
        "type": "number",
        "name": "p2_y"
      },
      {
        "type": "number",
        "name": "p3_x"
      },
      {
        "type": "number",
        "name": "p3_y"
      },
      {
        "type": "number",
        "name": "p4_x"
      },
      {
        "type": "number",
        "name": "p4_y"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      },
      {
        "type": "number",
        "name": "thicknessIn",
        "optional": true
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawList_AddQuadFilled draw_list p1_x p1_y p2_x p2_y p3_x p3_y p4_x p4_y col_rgba) :: nil",
    "doc": "(reaper.ImGui_DrawList_AddQuadFilled draw_list p1_x p1_y p2_x p2_y p3_x p3_y p4_x p4_y col_rgba) :: nil\ndraw_list :: ImGui_DrawList\np1_x :: number\np1_y :: number\np2_x :: number\np2_y :: number\np3_x :: number\np3_y :: number\np4_x :: number\np4_y :: number\ncol_rgba :: integer\n",
    "name": "ImGui_DrawList_AddQuadFilled",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "number",
        "name": "p1_x"
      },
      {
        "type": "number",
        "name": "p1_y"
      },
      {
        "type": "number",
        "name": "p2_x"
      },
      {
        "type": "number",
        "name": "p2_y"
      },
      {
        "type": "number",
        "name": "p3_x"
      },
      {
        "type": "number",
        "name": "p3_y"
      },
      {
        "type": "number",
        "name": "p4_x"
      },
      {
        "type": "number",
        "name": "p4_y"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawList_AddRect draw_list p_min_x p_min_y p_max_x p_max_y col_rgba ?roundingIn ?flagsIn ?thicknessIn) :: nil",
    "doc": "(reaper.ImGui_DrawList_AddRect draw_list p_min_x p_min_y p_max_x p_max_y col_rgba ?roundingIn ?flagsIn ?thicknessIn) :: nil\ndraw_list :: ImGui_DrawList\np_min_x :: number\np_min_y :: number\np_max_x :: number\np_max_y :: number\ncol_rgba :: integer\nroundingIn :: number (optional)\nflagsIn :: integer (optional)\nthicknessIn :: number (optional)\n",
    "name": "ImGui_DrawList_AddRect",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "number",
        "name": "p_min_x"
      },
      {
        "type": "number",
        "name": "p_min_y"
      },
      {
        "type": "number",
        "name": "p_max_x"
      },
      {
        "type": "number",
        "name": "p_max_y"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      },
      {
        "type": "number",
        "name": "roundingIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "thicknessIn",
        "optional": true
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawList_AddRectFilled draw_list p_min_x p_min_y p_max_x p_max_y col_rgba ?roundingIn ?flagsIn) :: nil",
    "doc": "(reaper.ImGui_DrawList_AddRectFilled draw_list p_min_x p_min_y p_max_x p_max_y col_rgba ?roundingIn ?flagsIn) :: nil\ndraw_list :: ImGui_DrawList\np_min_x :: number\np_min_y :: number\np_max_x :: number\np_max_y :: number\ncol_rgba :: integer\nroundingIn :: number (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_DrawList_AddRectFilled",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "number",
        "name": "p_min_x"
      },
      {
        "type": "number",
        "name": "p_min_y"
      },
      {
        "type": "number",
        "name": "p_max_x"
      },
      {
        "type": "number",
        "name": "p_max_y"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      },
      {
        "type": "number",
        "name": "roundingIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawList_AddRectFilledMultiColor draw_list p_min_x p_min_y p_max_x p_max_y col_upr_left col_upr_right col_bot_right col_bot_left) :: nil",
    "doc": "(reaper.ImGui_DrawList_AddRectFilledMultiColor draw_list p_min_x p_min_y p_max_x p_max_y col_upr_left col_upr_right col_bot_right col_bot_left) :: nil\ndraw_list :: ImGui_DrawList\np_min_x :: number\np_min_y :: number\np_max_x :: number\np_max_y :: number\ncol_upr_left :: integer\ncol_upr_right :: integer\ncol_bot_right :: integer\ncol_bot_left :: integer\n",
    "name": "ImGui_DrawList_AddRectFilledMultiColor",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "number",
        "name": "p_min_x"
      },
      {
        "type": "number",
        "name": "p_min_y"
      },
      {
        "type": "number",
        "name": "p_max_x"
      },
      {
        "type": "number",
        "name": "p_max_y"
      },
      {
        "type": "integer",
        "name": "col_upr_left"
      },
      {
        "type": "integer",
        "name": "col_upr_right"
      },
      {
        "type": "integer",
        "name": "col_bot_right"
      },
      {
        "type": "integer",
        "name": "col_bot_left"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawList_AddText draw_list x y col_rgba text) :: nil",
    "doc": "(reaper.ImGui_DrawList_AddText draw_list x y col_rgba text) :: nil\ndraw_list :: ImGui_DrawList\nx :: number\ny :: number\ncol_rgba :: integer\ntext :: string\n",
    "name": "ImGui_DrawList_AddText",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "number",
        "name": "x"
      },
      {
        "type": "number",
        "name": "y"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      },
      {
        "type": "string",
        "name": "text"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawList_AddTextEx draw_list font font_size pos_x pos_y col_rgba text ?wrap_widthIn ?cpu_fine_clip_rect_xIn ?cpu_fine_clip_rect_yIn ?cpu_fine_clip_rect_wIn ?cpu_fine_clip_rect_hIn) :: nil",
    "doc": "(reaper.ImGui_DrawList_AddTextEx draw_list font font_size pos_x pos_y col_rgba text ?wrap_widthIn ?cpu_fine_clip_rect_xIn ?cpu_fine_clip_rect_yIn ?cpu_fine_clip_rect_wIn ?cpu_fine_clip_rect_hIn) :: nil\ndraw_list :: ImGui_DrawList\nfont :: ImGui_Font\nfont_size :: number\npos_x :: number\npos_y :: number\ncol_rgba :: integer\ntext :: string\nwrap_widthIn :: number (optional)\ncpu_fine_clip_rect_xIn :: number (optional)\ncpu_fine_clip_rect_yIn :: number (optional)\ncpu_fine_clip_rect_wIn :: number (optional)\ncpu_fine_clip_rect_hIn :: number (optional)\nThe last pushed font is used if font is nil.\nThe size of the last pushed font is used if font_size is 0.\ncpu_fine_clip_rect_* only takes effect if all four are non-nil.",
    "name": "ImGui_DrawList_AddTextEx",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "ImGui_Font",
        "name": "font"
      },
      {
        "type": "number",
        "name": "font_size"
      },
      {
        "type": "number",
        "name": "pos_x"
      },
      {
        "type": "number",
        "name": "pos_y"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      },
      {
        "type": "string",
        "name": "text"
      },
      {
        "type": "number",
        "name": "wrap_widthIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "cpu_fine_clip_rect_xIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "cpu_fine_clip_rect_yIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "cpu_fine_clip_rect_wIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "cpu_fine_clip_rect_hIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "The last pushed font is used if font is nil.\nThe size of the last pushed font is used if font_size is 0.\ncpu_fine_clip_rect_* only takes effect if all four are non-nil."
  },
  {
    "form": "(reaper.ImGui_DrawList_AddTriangle draw_list p1_x p1_y p2_x p2_y p3_x p3_y col_rgba ?thicknessIn) :: nil",
    "doc": "(reaper.ImGui_DrawList_AddTriangle draw_list p1_x p1_y p2_x p2_y p3_x p3_y col_rgba ?thicknessIn) :: nil\ndraw_list :: ImGui_DrawList\np1_x :: number\np1_y :: number\np2_x :: number\np2_y :: number\np3_x :: number\np3_y :: number\ncol_rgba :: integer\nthicknessIn :: number (optional)\n",
    "name": "ImGui_DrawList_AddTriangle",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "number",
        "name": "p1_x"
      },
      {
        "type": "number",
        "name": "p1_y"
      },
      {
        "type": "number",
        "name": "p2_x"
      },
      {
        "type": "number",
        "name": "p2_y"
      },
      {
        "type": "number",
        "name": "p3_x"
      },
      {
        "type": "number",
        "name": "p3_y"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      },
      {
        "type": "number",
        "name": "thicknessIn",
        "optional": true
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawList_AddTriangleFilled draw_list p1_x p1_y p2_x p2_y p3_x p3_y col_rgba) :: nil",
    "doc": "(reaper.ImGui_DrawList_AddTriangleFilled draw_list p1_x p1_y p2_x p2_y p3_x p3_y col_rgba) :: nil\ndraw_list :: ImGui_DrawList\np1_x :: number\np1_y :: number\np2_x :: number\np2_y :: number\np3_x :: number\np3_y :: number\ncol_rgba :: integer\n",
    "name": "ImGui_DrawList_AddTriangleFilled",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "number",
        "name": "p1_x"
      },
      {
        "type": "number",
        "name": "p1_y"
      },
      {
        "type": "number",
        "name": "p2_x"
      },
      {
        "type": "number",
        "name": "p2_y"
      },
      {
        "type": "number",
        "name": "p3_x"
      },
      {
        "type": "number",
        "name": "p3_y"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawList_PathArcTo draw_list center_x center_y radius a_min a_max ?num_segmentsIn) :: nil",
    "doc": "(reaper.ImGui_DrawList_PathArcTo draw_list center_x center_y radius a_min a_max ?num_segmentsIn) :: nil\ndraw_list :: ImGui_DrawList\ncenter_x :: number\ncenter_y :: number\nradius :: number\na_min :: number\na_max :: number\nnum_segmentsIn :: integer (optional)\n",
    "name": "ImGui_DrawList_PathArcTo",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "number",
        "name": "center_x"
      },
      {
        "type": "number",
        "name": "center_y"
      },
      {
        "type": "number",
        "name": "radius"
      },
      {
        "type": "number",
        "name": "a_min"
      },
      {
        "type": "number",
        "name": "a_max"
      },
      {
        "type": "integer",
        "name": "num_segmentsIn",
        "optional": true
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawList_PathArcToFast draw_list center_x center_y radius a_min_of_12 a_max_of_12) :: nil",
    "doc": "(reaper.ImGui_DrawList_PathArcToFast draw_list center_x center_y radius a_min_of_12 a_max_of_12) :: nil\ndraw_list :: ImGui_DrawList\ncenter_x :: number\ncenter_y :: number\nradius :: number\na_min_of_12 :: integer\na_max_of_12 :: integer\nUse precomputed angles for a 12 steps circle.",
    "name": "ImGui_DrawList_PathArcToFast",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "number",
        "name": "center_x"
      },
      {
        "type": "number",
        "name": "center_y"
      },
      {
        "type": "number",
        "name": "radius"
      },
      {
        "type": "integer",
        "name": "a_min_of_12"
      },
      {
        "type": "integer",
        "name": "a_max_of_12"
      }
    ],
    "namespace": "reaper",
    "description": "Use precomputed angles for a 12 steps circle."
  },
  {
    "form": "(reaper.ImGui_DrawList_PathBezierCubicCurveTo draw_list p2_x p2_y p3_x p3_y p4_x p4_y ?num_segmentsIn) :: nil",
    "doc": "(reaper.ImGui_DrawList_PathBezierCubicCurveTo draw_list p2_x p2_y p3_x p3_y p4_x p4_y ?num_segmentsIn) :: nil\ndraw_list :: ImGui_DrawList\np2_x :: number\np2_y :: number\np3_x :: number\np3_y :: number\np4_x :: number\np4_y :: number\nnum_segmentsIn :: integer (optional)\nCubic Bezier (4 control points)",
    "name": "ImGui_DrawList_PathBezierCubicCurveTo",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "number",
        "name": "p2_x"
      },
      {
        "type": "number",
        "name": "p2_y"
      },
      {
        "type": "number",
        "name": "p3_x"
      },
      {
        "type": "number",
        "name": "p3_y"
      },
      {
        "type": "number",
        "name": "p4_x"
      },
      {
        "type": "number",
        "name": "p4_y"
      },
      {
        "type": "integer",
        "name": "num_segmentsIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Cubic Bezier (4 control points)"
  },
  {
    "form": "(reaper.ImGui_DrawList_PathBezierQuadraticCurveTo draw_list p2_x p2_y p3_x p3_y ?num_segmentsIn) :: nil",
    "doc": "(reaper.ImGui_DrawList_PathBezierQuadraticCurveTo draw_list p2_x p2_y p3_x p3_y ?num_segmentsIn) :: nil\ndraw_list :: ImGui_DrawList\np2_x :: number\np2_y :: number\np3_x :: number\np3_y :: number\nnum_segmentsIn :: integer (optional)\nQuadratic Bezier (3 control points)",
    "name": "ImGui_DrawList_PathBezierQuadraticCurveTo",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "number",
        "name": "p2_x"
      },
      {
        "type": "number",
        "name": "p2_y"
      },
      {
        "type": "number",
        "name": "p3_x"
      },
      {
        "type": "number",
        "name": "p3_y"
      },
      {
        "type": "integer",
        "name": "num_segmentsIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Quadratic Bezier (3 control points)"
  },
  {
    "form": "(reaper.ImGui_DrawList_PathClear draw_list) :: nil",
    "doc": "(reaper.ImGui_DrawList_PathClear draw_list) :: nil\ndraw_list :: ImGui_DrawList\n",
    "name": "ImGui_DrawList_PathClear",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawList_PathFillConvex draw_list col_rgba) :: nil",
    "doc": "(reaper.ImGui_DrawList_PathFillConvex draw_list col_rgba) :: nil\ndraw_list :: ImGui_DrawList\ncol_rgba :: integer\nNote: Anti-aliased filling requires points to be in clockwise order.",
    "name": "ImGui_DrawList_PathFillConvex",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      }
    ],
    "namespace": "reaper",
    "description": "Note: Anti-aliased filling requires points to be in clockwise order."
  },
  {
    "form": "(reaper.ImGui_DrawList_PathLineTo draw_list pos_x pos_y) :: nil",
    "doc": "(reaper.ImGui_DrawList_PathLineTo draw_list pos_x pos_y) :: nil\ndraw_list :: ImGui_DrawList\npos_x :: number\npos_y :: number\n",
    "name": "ImGui_DrawList_PathLineTo",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "number",
        "name": "pos_x"
      },
      {
        "type": "number",
        "name": "pos_y"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawList_PathRect draw_list rect_min_x rect_min_y rect_max_x rect_max_y ?roundingIn ?flagsIn) :: nil",
    "doc": "(reaper.ImGui_DrawList_PathRect draw_list rect_min_x rect_min_y rect_max_x rect_max_y ?roundingIn ?flagsIn) :: nil\ndraw_list :: ImGui_DrawList\nrect_min_x :: number\nrect_min_y :: number\nrect_max_x :: number\nrect_max_y :: number\nroundingIn :: number (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_DrawList_PathRect",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "number",
        "name": "rect_min_x"
      },
      {
        "type": "number",
        "name": "rect_min_y"
      },
      {
        "type": "number",
        "name": "rect_max_x"
      },
      {
        "type": "number",
        "name": "rect_max_y"
      },
      {
        "type": "number",
        "name": "roundingIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawList_PathStroke draw_list col_rgba ?flagsIn ?thicknessIn) :: nil",
    "doc": "(reaper.ImGui_DrawList_PathStroke draw_list col_rgba ?flagsIn ?thicknessIn) :: nil\ndraw_list :: ImGui_DrawList\ncol_rgba :: integer\nflagsIn :: integer (optional)\nthicknessIn :: number (optional)\n",
    "name": "ImGui_DrawList_PathStroke",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "thicknessIn",
        "optional": true
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_DrawList_PopClipRect draw_list) :: nil",
    "doc": "(reaper.ImGui_DrawList_PopClipRect draw_list) :: nil\ndraw_list :: ImGui_DrawList\nSee DrawList_PushClipRect",
    "name": "ImGui_DrawList_PopClipRect",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      }
    ],
    "namespace": "reaper",
    "description": "See DrawList_PushClipRect"
  },
  {
    "form": "(reaper.ImGui_DrawList_PushClipRect draw_list clip_rect_min_x clip_rect_min_y clip_rect_max_x clip_rect_max_y ?intersect_with_current_clip_rectIn) :: nil",
    "doc": "(reaper.ImGui_DrawList_PushClipRect draw_list clip_rect_min_x clip_rect_min_y clip_rect_max_x clip_rect_max_y ?intersect_with_current_clip_rectIn) :: nil\ndraw_list :: ImGui_DrawList\nclip_rect_min_x :: number\nclip_rect_min_y :: number\nclip_rect_max_x :: number\nclip_rect_max_y :: number\nintersect_with_current_clip_rectIn :: boolean (optional)\nRender-level scissoring. Prefer using higher-level PushClipRect to affect\nlogic (hit-testing and widget culling).",
    "name": "ImGui_DrawList_PushClipRect",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      },
      {
        "type": "number",
        "name": "clip_rect_min_x"
      },
      {
        "type": "number",
        "name": "clip_rect_min_y"
      },
      {
        "type": "number",
        "name": "clip_rect_max_x"
      },
      {
        "type": "number",
        "name": "clip_rect_max_y"
      },
      {
        "type": "boolean",
        "name": "intersect_with_current_clip_rectIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Render-level scissoring. Prefer using higher-level PushClipRect to affect\nlogic (hit-testing and widget culling)."
  },
  {
    "form": "(reaper.ImGui_DrawList_PushClipRectFullScreen draw_list) :: nil",
    "doc": "(reaper.ImGui_DrawList_PushClipRectFullScreen draw_list) :: nil\ndraw_list :: ImGui_DrawList\n",
    "name": "ImGui_DrawList_PushClipRectFullScreen",
    "params": [
      {
        "type": "ImGui_DrawList",
        "name": "draw_list"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Dummy ctx size_w size_h) :: nil",
    "doc": "(reaper.ImGui_Dummy ctx size_w size_h) :: nil\nctx :: ImGui_Context\nsize_w :: number\nsize_h :: number\nAdd a dummy item of given size. unlike InvisibleButton, Dummy() won't take the\nmouse click or be navigable into.",
    "name": "ImGui_Dummy",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "size_w"
      },
      {
        "type": "number",
        "name": "size_h"
      }
    ],
    "namespace": "reaper",
    "description": "Add a dummy item of given size. unlike InvisibleButton, Dummy() won't take the\nmouse click or be navigable into."
  },
  {
    "form": "(reaper.ImGui_End ctx) :: nil",
    "doc": "(reaper.ImGui_End ctx) :: nil\nctx :: ImGui_Context\nPop window from the stack. See Begin.",
    "name": "ImGui_End",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Pop window from the stack. See Begin."
  },
  {
    "form": "(reaper.ImGui_EndChild ctx) :: nil",
    "doc": "(reaper.ImGui_EndChild ctx) :: nil\nctx :: ImGui_Context\nSee BeginChild.",
    "name": "ImGui_EndChild",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "See BeginChild."
  },
  {
    "form": "(reaper.ImGui_EndChildFrame ctx) :: nil",
    "doc": "(reaper.ImGui_EndChildFrame ctx) :: nil\nctx :: ImGui_Context\nSee BeginChildFrame.",
    "name": "ImGui_EndChildFrame",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "See BeginChildFrame."
  },
  {
    "form": "(reaper.ImGui_EndCombo ctx) :: nil",
    "doc": "(reaper.ImGui_EndCombo ctx) :: nil\nctx :: ImGui_Context\nOnly call EndCombo() if BeginCombo returns true!",
    "name": "ImGui_EndCombo",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Only call EndCombo() if BeginCombo returns true!"
  },
  {
    "form": "(reaper.ImGui_EndDisabled ctx) :: nil",
    "doc": "(reaper.ImGui_EndDisabled ctx) :: nil\nctx :: ImGui_Context\nSee BeginDisabled.",
    "name": "ImGui_EndDisabled",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "See BeginDisabled."
  },
  {
    "form": "(reaper.ImGui_EndDragDropSource ctx) :: nil",
    "doc": "(reaper.ImGui_EndDragDropSource ctx) :: nil\nctx :: ImGui_Context\nOnly call EndDragDropSource() if BeginDragDropSource returns true!",
    "name": "ImGui_EndDragDropSource",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Only call EndDragDropSource() if BeginDragDropSource returns true!"
  },
  {
    "form": "(reaper.ImGui_EndDragDropTarget ctx) :: nil",
    "doc": "(reaper.ImGui_EndDragDropTarget ctx) :: nil\nctx :: ImGui_Context\nOnly call EndDragDropTarget() if BeginDragDropTarget returns true!",
    "name": "ImGui_EndDragDropTarget",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Only call EndDragDropTarget() if BeginDragDropTarget returns true!"
  },
  {
    "form": "(reaper.ImGui_EndGroup ctx) :: nil",
    "doc": "(reaper.ImGui_EndGroup ctx) :: nil\nctx :: ImGui_Context\nUnlock horizontal starting position + capture the whole group bounding box\ninto one \"item\" (so you can use IsItemHovered or layout primitives such as\nSameLine on whole group, etc.).\nSee BeginGroup.",
    "name": "ImGui_EndGroup",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Unlock horizontal starting position + capture the whole group bounding box\ninto one \"item\" (so you can use IsItemHovered or layout primitives such as\nSameLine on whole group, etc.).\nSee BeginGroup."
  },
  {
    "form": "(reaper.ImGui_EndListBox ctx) :: nil",
    "doc": "(reaper.ImGui_EndListBox ctx) :: nil\nctx :: ImGui_Context\nOnly call EndListBox() if BeginListBox returned true!",
    "name": "ImGui_EndListBox",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Only call EndListBox() if BeginListBox returned true!"
  },
  {
    "form": "(reaper.ImGui_EndMenu ctx) :: nil",
    "doc": "(reaper.ImGui_EndMenu ctx) :: nil\nctx :: ImGui_Context\nOnly call EndMenu() if BeginMenu returns true!",
    "name": "ImGui_EndMenu",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Only call EndMenu() if BeginMenu returns true!"
  },
  {
    "form": "(reaper.ImGui_EndMenuBar ctx) :: nil",
    "doc": "(reaper.ImGui_EndMenuBar ctx) :: nil\nctx :: ImGui_Context\nOnly call EndMenuBar if BeginMenuBar returns true!",
    "name": "ImGui_EndMenuBar",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Only call EndMenuBar if BeginMenuBar returns true!"
  },
  {
    "form": "(reaper.ImGui_EndPopup ctx) :: nil",
    "doc": "(reaper.ImGui_EndPopup ctx) :: nil\nctx :: ImGui_Context\nOnly call EndPopup() if BeginPopup*() returns true!",
    "name": "ImGui_EndPopup",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Only call EndPopup() if BeginPopup*() returns true!"
  },
  {
    "form": "(reaper.ImGui_EndTabBar ctx) :: nil",
    "doc": "(reaper.ImGui_EndTabBar ctx) :: nil\nctx :: ImGui_Context\nOnly call EndTabBar() if BeginTabBar() returns true!",
    "name": "ImGui_EndTabBar",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Only call EndTabBar() if BeginTabBar() returns true!"
  },
  {
    "form": "(reaper.ImGui_EndTabItem ctx) :: nil",
    "doc": "(reaper.ImGui_EndTabItem ctx) :: nil\nctx :: ImGui_Context\nOnly call EndTabItem() if BeginTabItem() returns true!",
    "name": "ImGui_EndTabItem",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Only call EndTabItem() if BeginTabItem() returns true!"
  },
  {
    "form": "(reaper.ImGui_EndTable ctx) :: nil",
    "doc": "(reaper.ImGui_EndTable ctx) :: nil\nctx :: ImGui_Context\nOnly call EndTable() if BeginTable() returns true!",
    "name": "ImGui_EndTable",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Only call EndTable() if BeginTable() returns true!"
  },
  {
    "form": "(reaper.ImGui_EndTooltip ctx) :: nil",
    "doc": "(reaper.ImGui_EndTooltip ctx) :: nil\nctx :: ImGui_Context\nOnly call EndTooltip() if BeginTooltip() returns true.",
    "name": "ImGui_EndTooltip",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Only call EndTooltip() if BeginTooltip() returns true."
  },
  {
    "form": "(reaper.ImGui_FocusedFlags_AnyWindow ) :: (integer)",
    "doc": "(reaper.ImGui_FocusedFlags_AnyWindow ) :: (integer)\nReturn true if any window is focused.",
    "name": "ImGui_FocusedFlags_AnyWindow",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Return true if any window is focused."
  },
  {
    "form": "(reaper.ImGui_FocusedFlags_ChildWindows ) :: (integer)",
    "doc": "(reaper.ImGui_FocusedFlags_ChildWindows ) :: (integer)\nReturn true if any children of the window is focused.",
    "name": "ImGui_FocusedFlags_ChildWindows",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Return true if any children of the window is focused."
  },
  {
    "form": "(reaper.ImGui_FocusedFlags_DockHierarchy ) :: (integer)",
    "doc": "(reaper.ImGui_FocusedFlags_DockHierarchy ) :: (integer)\nConsider docking hierarchy (treat dockspace host as parent of docked window)\n   (when used with _ChildWindows or _RootWindow).",
    "name": "ImGui_FocusedFlags_DockHierarchy",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Consider docking hierarchy (treat dockspace host as parent of docked window)\n   (when used with _ChildWindows or _RootWindow)."
  },
  {
    "form": "(reaper.ImGui_FocusedFlags_NoPopupHierarchy ) :: (integer)",
    "doc": "(reaper.ImGui_FocusedFlags_NoPopupHierarchy ) :: (integer)\nDo not consider popup hierarchy (do not treat popup emitter as parent of\n   popup) (when used with _ChildWindows or _RootWindow).",
    "name": "ImGui_FocusedFlags_NoPopupHierarchy",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Do not consider popup hierarchy (do not treat popup emitter as parent of\n   popup) (when used with _ChildWindows or _RootWindow)."
  },
  {
    "form": "(reaper.ImGui_FocusedFlags_None ) :: (integer)",
    "doc": "(reaper.ImGui_FocusedFlags_None ) :: (integer)\n",
    "name": "ImGui_FocusedFlags_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_FocusedFlags_RootAndChildWindows ) :: (integer)",
    "doc": "(reaper.ImGui_FocusedFlags_RootAndChildWindows ) :: (integer)\nFocusedFlags_RootWindow | FocusedFlags_ChildWindows",
    "name": "ImGui_FocusedFlags_RootAndChildWindows",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "FocusedFlags_RootWindow | FocusedFlags_ChildWindows"
  },
  {
    "form": "(reaper.ImGui_FocusedFlags_RootWindow ) :: (integer)",
    "doc": "(reaper.ImGui_FocusedFlags_RootWindow ) :: (integer)\nTest from root window (top most parent of the current hierarchy).",
    "name": "ImGui_FocusedFlags_RootWindow",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Test from root window (top most parent of the current hierarchy)."
  },
  {
    "form": "(reaper.ImGui_FontFlags_Bold ) :: (integer)",
    "doc": "(reaper.ImGui_FontFlags_Bold ) :: (integer)\n",
    "name": "ImGui_FontFlags_Bold",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_FontFlags_Italic ) :: (integer)",
    "doc": "(reaper.ImGui_FontFlags_Italic ) :: (integer)\n",
    "name": "ImGui_FontFlags_Italic",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_FontFlags_None ) :: (integer)",
    "doc": "(reaper.ImGui_FontFlags_None ) :: (integer)\n",
    "name": "ImGui_FontFlags_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Function_Execute func) :: nil",
    "doc": "(reaper.ImGui_Function_Execute func) :: nil\nfunc :: ImGui_Function\n",
    "name": "ImGui_Function_Execute",
    "params": [
      {
        "type": "ImGui_Function",
        "name": "func"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Function_GetValue func name) :: (number)",
    "doc": "(reaper.ImGui_Function_GetValue func name) :: (number)\nfunc :: ImGui_Function\nname :: string\n",
    "name": "ImGui_Function_GetValue",
    "params": [
      {
        "type": "ImGui_Function",
        "name": "func"
      },
      {
        "type": "string",
        "name": "name"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Function_GetValue_Array func name values) :: nil",
    "doc": "(reaper.ImGui_Function_GetValue_Array func name values) :: nil\nfunc :: ImGui_Function\nname :: string\nvalues :: reaper_array\nCopy the values in the function's memory starting at the address stored\nin the given variable into the array.",
    "name": "ImGui_Function_GetValue_Array",
    "params": [
      {
        "type": "ImGui_Function",
        "name": "func"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "reaper_array",
        "name": "values"
      }
    ],
    "namespace": "reaper",
    "description": "Copy the values in the function's memory starting at the address stored\nin the given variable into the array."
  },
  {
    "form": "(reaper.ImGui_Function_GetValue_String func name) :: (string)",
    "doc": "(reaper.ImGui_Function_GetValue_String func name) :: (string)\nfunc :: ImGui_Function\nname :: string\nRead from a string slot or a named string (when name starts with a `#`).",
    "name": "ImGui_Function_GetValue_String",
    "params": [
      {
        "type": "ImGui_Function",
        "name": "func"
      },
      {
        "type": "string",
        "name": "name"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "value"
      }
    ],
    "namespace": "reaper",
    "description": "Read from a string slot or a named string (when name starts with a `#`)."
  },
  {
    "form": "(reaper.ImGui_Function_SetValue func name value) :: nil",
    "doc": "(reaper.ImGui_Function_SetValue func name value) :: nil\nfunc :: ImGui_Function\nname :: string\nvalue :: number\n",
    "name": "ImGui_Function_SetValue",
    "params": [
      {
        "type": "ImGui_Function",
        "name": "func"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "number",
        "name": "value"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Function_SetValue_Array func name values) :: nil",
    "doc": "(reaper.ImGui_Function_SetValue_Array func name values) :: nil\nfunc :: ImGui_Function\nname :: string\nvalues :: reaper_array\nCopy the values in the array to the function's memory at the address stored\nin the given variable.",
    "name": "ImGui_Function_SetValue_Array",
    "params": [
      {
        "type": "ImGui_Function",
        "name": "func"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "reaper_array",
        "name": "values"
      }
    ],
    "namespace": "reaper",
    "description": "Copy the values in the array to the function's memory at the address stored\nin the given variable."
  },
  {
    "form": "(reaper.ImGui_Function_SetValue_String func name value) :: nil",
    "doc": "(reaper.ImGui_Function_SetValue_String func name value) :: nil\nfunc :: ImGui_Function\nname :: string\nvalue :: string\nWrite to a string slot or a named string (when name starts with a `#`).",
    "name": "ImGui_Function_SetValue_String",
    "params": [
      {
        "type": "ImGui_Function",
        "name": "func"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "string",
        "name": "value"
      }
    ],
    "namespace": "reaper",
    "description": "Write to a string slot or a named string (when name starts with a `#`)."
  },
  {
    "form": "(reaper.ImGui_GetBackgroundDrawList ctx) :: (ImGui_DrawList)",
    "doc": "(reaper.ImGui_GetBackgroundDrawList ctx) :: (ImGui_DrawList)\nctx :: ImGui_Context\nThis draw list will be the first rendering one. Useful to quickly draw\nshapes/text behind dear imgui contents.",
    "name": "ImGui_GetBackgroundDrawList",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "ImGui_DrawList"
      }
    ],
    "namespace": "reaper",
    "description": "This draw list will be the first rendering one. Useful to quickly draw\nshapes/text behind dear imgui contents."
  },
  {
    "form": "(reaper.ImGui_GetClipboardText ctx) :: (string)",
    "doc": "(reaper.ImGui_GetClipboardText ctx) :: (string)\nctx :: ImGui_Context\n",
    "name": "ImGui_GetClipboardText",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_GetColor ctx idx ?alpha_mulIn) :: (integer)",
    "doc": "(reaper.ImGui_GetColor ctx idx ?alpha_mulIn) :: (integer)\nctx :: ImGui_Context\nidx :: integer\nalpha_mulIn :: number (optional)\nRetrieve given style color with style alpha applied and optional extra alpha\nmultiplier, packed as a 32-bit value (RGBA). See Col_* for available style colors.",
    "name": "ImGui_GetColor",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "idx"
      },
      {
        "type": "number",
        "name": "alpha_mulIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Retrieve given style color with style alpha applied and optional extra alpha\nmultiplier, packed as a 32-bit value (RGBA). See Col_* for available style colors."
  },
  {
    "form": "(reaper.ImGui_GetColorEx ctx col_rgba) :: (integer)",
    "doc": "(reaper.ImGui_GetColorEx ctx col_rgba) :: (integer)\nctx :: ImGui_Context\ncol_rgba :: integer\nRetrieve given color with style alpha applied, packed as a 32-bit value (RGBA).",
    "name": "ImGui_GetColorEx",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Retrieve given color with style alpha applied, packed as a 32-bit value (RGBA)."
  },
  {
    "form": "(reaper.ImGui_GetConfigVar ctx var_idx) :: (number)",
    "doc": "(reaper.ImGui_GetConfigVar ctx var_idx) :: (number)\nctx :: ImGui_Context\nvar_idx :: integer\n",
    "name": "ImGui_GetConfigVar",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "var_idx"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_GetContentRegionAvail ctx) :: (number number)",
    "doc": "(reaper.ImGui_GetContentRegionAvail ctx) :: (number number)\nctx :: ImGui_Context\n== GetContentRegionMax() - GetCursorPos()",
    "name": "ImGui_GetContentRegionAvail",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "x"
      },
      {
        "type": "number",
        "name": "y"
      }
    ],
    "namespace": "reaper",
    "description": "== GetContentRegionMax() - GetCursorPos()"
  },
  {
    "form": "(reaper.ImGui_GetContentRegionMax ctx) :: (number number)",
    "doc": "(reaper.ImGui_GetContentRegionMax ctx) :: (number number)\nctx :: ImGui_Context\nCurrent content boundaries (typically window boundaries including scrolling,\nor current column boundaries), in windows coordinates.",
    "name": "ImGui_GetContentRegionMax",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "x"
      },
      {
        "type": "number",
        "name": "y"
      }
    ],
    "namespace": "reaper",
    "description": "Current content boundaries (typically window boundaries including scrolling,\nor current column boundaries), in windows coordinates."
  },
  {
    "form": "(reaper.ImGui_GetCursorPos ctx) :: (number number)",
    "doc": "(reaper.ImGui_GetCursorPos ctx) :: (number number)\nctx :: ImGui_Context\nCursor position in window",
    "name": "ImGui_GetCursorPos",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "x"
      },
      {
        "type": "number",
        "name": "y"
      }
    ],
    "namespace": "reaper",
    "description": "Cursor position in window"
  },
  {
    "form": "(reaper.ImGui_GetCursorPosX ctx) :: (number)",
    "doc": "(reaper.ImGui_GetCursorPosX ctx) :: (number)\nctx :: ImGui_Context\nCursor X position in window",
    "name": "ImGui_GetCursorPosX",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Cursor X position in window"
  },
  {
    "form": "(reaper.ImGui_GetCursorPosY ctx) :: (number)",
    "doc": "(reaper.ImGui_GetCursorPosY ctx) :: (number)\nctx :: ImGui_Context\nCursor Y position in window",
    "name": "ImGui_GetCursorPosY",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Cursor Y position in window"
  },
  {
    "form": "(reaper.ImGui_GetCursorScreenPos ctx) :: (number number)",
    "doc": "(reaper.ImGui_GetCursorScreenPos ctx) :: (number number)\nctx :: ImGui_Context\nCursor position in absolute screen coordinates (useful to work with the DrawList API).",
    "name": "ImGui_GetCursorScreenPos",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "x"
      },
      {
        "type": "number",
        "name": "y"
      }
    ],
    "namespace": "reaper",
    "description": "Cursor position in absolute screen coordinates (useful to work with the DrawList API)."
  },
  {
    "form": "(reaper.ImGui_GetCursorStartPos ctx) :: (number number)",
    "doc": "(reaper.ImGui_GetCursorStartPos ctx) :: (number number)\nctx :: ImGui_Context\nInitial cursor position in window coordinates.",
    "name": "ImGui_GetCursorStartPos",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "x"
      },
      {
        "type": "number",
        "name": "y"
      }
    ],
    "namespace": "reaper",
    "description": "Initial cursor position in window coordinates."
  },
  {
    "form": "(reaper.ImGui_GetDeltaTime ctx) :: (number)",
    "doc": "(reaper.ImGui_GetDeltaTime ctx) :: (number)\nctx :: ImGui_Context\nTime elapsed since last frame, in seconds.",
    "name": "ImGui_GetDeltaTime",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Time elapsed since last frame, in seconds."
  },
  {
    "form": "(reaper.ImGui_GetDragDropPayload ctx) :: (boolean string string boolean boolean)",
    "doc": "(reaper.ImGui_GetDragDropPayload ctx) :: (boolean string string boolean boolean)\nctx :: ImGui_Context\nPeek directly into the current payload from anywhere.",
    "name": "ImGui_GetDragDropPayload",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "type"
      },
      {
        "type": "string",
        "name": "payload"
      },
      {
        "type": "boolean",
        "name": "is_preview"
      },
      {
        "type": "boolean",
        "name": "is_delivery"
      }
    ],
    "namespace": "reaper",
    "description": "Peek directly into the current payload from anywhere."
  },
  {
    "form": "(reaper.ImGui_GetDragDropPayloadFile ctx index) :: (boolean string)",
    "doc": "(reaper.ImGui_GetDragDropPayloadFile ctx index) :: (boolean string)\nctx :: ImGui_Context\nindex :: integer\nGet a filename from the list of dropped files.\nReturns false if index is out of bounds.",
    "name": "ImGui_GetDragDropPayloadFile",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "index"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "filename"
      }
    ],
    "namespace": "reaper",
    "description": "Get a filename from the list of dropped files.\nReturns false if index is out of bounds."
  },
  {
    "form": "(reaper.ImGui_GetFont ctx) :: (ImGui_Font)",
    "doc": "(reaper.ImGui_GetFont ctx) :: (ImGui_Font)\nctx :: ImGui_Context\nGet the current font",
    "name": "ImGui_GetFont",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "ImGui_Font"
      }
    ],
    "namespace": "reaper",
    "description": "Get the current font"
  },
  {
    "form": "(reaper.ImGui_GetFontSize ctx) :: (number)",
    "doc": "(reaper.ImGui_GetFontSize ctx) :: (number)\nctx :: ImGui_Context\nGet current font size (= height in pixels) of current font with current scale\napplied.",
    "name": "ImGui_GetFontSize",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Get current font size (= height in pixels) of current font with current scale\napplied."
  },
  {
    "form": "(reaper.ImGui_GetForegroundDrawList ctx) :: (ImGui_DrawList)",
    "doc": "(reaper.ImGui_GetForegroundDrawList ctx) :: (ImGui_DrawList)\nctx :: ImGui_Context\nThis draw list will be the last rendered one. Useful to quickly draw\nshapes/text over dear imgui contents.",
    "name": "ImGui_GetForegroundDrawList",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "ImGui_DrawList"
      }
    ],
    "namespace": "reaper",
    "description": "This draw list will be the last rendered one. Useful to quickly draw\nshapes/text over dear imgui contents."
  },
  {
    "form": "(reaper.ImGui_GetFrameCount ctx) :: (integer)",
    "doc": "(reaper.ImGui_GetFrameCount ctx) :: (integer)\nctx :: ImGui_Context\nGet global imgui frame count. incremented by 1 every frame.",
    "name": "ImGui_GetFrameCount",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Get global imgui frame count. incremented by 1 every frame."
  },
  {
    "form": "(reaper.ImGui_GetFrameHeight ctx) :: (number)",
    "doc": "(reaper.ImGui_GetFrameHeight ctx) :: (number)\nctx :: ImGui_Context\nGetFontSize + StyleVar_FramePadding.y * 2",
    "name": "ImGui_GetFrameHeight",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "GetFontSize + StyleVar_FramePadding.y * 2"
  },
  {
    "form": "(reaper.ImGui_GetFrameHeightWithSpacing ctx) :: (number)",
    "doc": "(reaper.ImGui_GetFrameHeightWithSpacing ctx) :: (number)\nctx :: ImGui_Context\nGetFontSize + StyleVar_FramePadding.y * 2 + StyleVar_ItemSpacing.y\n(distance in pixels between 2 consecutive lines of framed widgets).",
    "name": "ImGui_GetFrameHeightWithSpacing",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "GetFontSize + StyleVar_FramePadding.y * 2 + StyleVar_ItemSpacing.y\n(distance in pixels between 2 consecutive lines of framed widgets)."
  },
  {
    "form": "(reaper.ImGui_GetFramerate ctx) :: (number)",
    "doc": "(reaper.ImGui_GetFramerate ctx) :: (number)\nctx :: ImGui_Context\nEstimate of application framerate (rolling average over 60 frames, based on\nGetDeltaTime), in frame per second. Solely for convenience.",
    "name": "ImGui_GetFramerate",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Estimate of application framerate (rolling average over 60 frames, based on\nGetDeltaTime), in frame per second. Solely for convenience."
  },
  {
    "form": "(reaper.ImGui_GetInputQueueCharacter ctx idx) :: (boolean integer)",
    "doc": "(reaper.ImGui_GetInputQueueCharacter ctx idx) :: (boolean integer)\nctx :: ImGui_Context\nidx :: integer\nRead from ImGui's character input queue.\nCall with increasing idx until false is returned.",
    "name": "ImGui_GetInputQueueCharacter",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "idx"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "unicode_char"
      }
    ],
    "namespace": "reaper",
    "description": "Read from ImGui's character input queue.\nCall with increasing idx until false is returned."
  },
  {
    "form": "(reaper.ImGui_GetItemRectMax ctx) :: (number number)",
    "doc": "(reaper.ImGui_GetItemRectMax ctx) :: (number number)\nctx :: ImGui_Context\nGet lower-right bounding rectangle of the last item (screen space)",
    "name": "ImGui_GetItemRectMax",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "x"
      },
      {
        "type": "number",
        "name": "y"
      }
    ],
    "namespace": "reaper",
    "description": "Get lower-right bounding rectangle of the last item (screen space)"
  },
  {
    "form": "(reaper.ImGui_GetItemRectMin ctx) :: (number number)",
    "doc": "(reaper.ImGui_GetItemRectMin ctx) :: (number number)\nctx :: ImGui_Context\nGet upper-left bounding rectangle of the last item (screen space)",
    "name": "ImGui_GetItemRectMin",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "x"
      },
      {
        "type": "number",
        "name": "y"
      }
    ],
    "namespace": "reaper",
    "description": "Get upper-left bounding rectangle of the last item (screen space)"
  },
  {
    "form": "(reaper.ImGui_GetItemRectSize ctx) :: (number number)",
    "doc": "(reaper.ImGui_GetItemRectSize ctx) :: (number number)\nctx :: ImGui_Context\nGet size of last item",
    "name": "ImGui_GetItemRectSize",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "w"
      },
      {
        "type": "number",
        "name": "h"
      }
    ],
    "namespace": "reaper",
    "description": "Get size of last item"
  },
  {
    "form": "(reaper.ImGui_GetKeyDownDuration ctx key) :: (number)",
    "doc": "(reaper.ImGui_GetKeyDownDuration ctx key) :: (number)\nctx :: ImGui_Context\nkey :: integer\nDuration the keyboard key has been down (0.0 == just pressed)",
    "name": "ImGui_GetKeyDownDuration",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "key"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Duration the keyboard key has been down (0.0 == just pressed)"
  },
  {
    "form": "(reaper.ImGui_GetKeyMods ctx) :: (integer)",
    "doc": "(reaper.ImGui_GetKeyMods ctx) :: (integer)\nctx :: ImGui_Context\nFlags for the Ctrl/Shift/Alt/Super keys. Uses Mod_* values.",
    "name": "ImGui_GetKeyMods",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Flags for the Ctrl/Shift/Alt/Super keys. Uses Mod_* values."
  },
  {
    "form": "(reaper.ImGui_GetKeyPressedAmount ctx key repeat_delay rate) :: (integer)",
    "doc": "(reaper.ImGui_GetKeyPressedAmount ctx key repeat_delay rate) :: (integer)\nctx :: ImGui_Context\nkey :: integer\nrepeat_delay :: number\nrate :: number\nUses provided repeat rate/delay. Return a count, most often 0 or 1 but might\nbe >1 if ConfigVar_RepeatRate is small enough that GetDeltaTime > RepeatRate.",
    "name": "ImGui_GetKeyPressedAmount",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "key"
      },
      {
        "type": "number",
        "name": "repeat_delay"
      },
      {
        "type": "number",
        "name": "rate"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Uses provided repeat rate/delay. Return a count, most often 0 or 1 but might\nbe >1 if ConfigVar_RepeatRate is small enough that GetDeltaTime > RepeatRate."
  },
  {
    "form": "(reaper.ImGui_GetMainViewport ctx) :: (ImGui_Viewport)",
    "doc": "(reaper.ImGui_GetMainViewport ctx) :: (ImGui_Viewport)\nctx :: ImGui_Context\nCurrently represents REAPER's main window (arrange view).\nWARNING: This may change or be removed in the future.",
    "name": "ImGui_GetMainViewport",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "ImGui_Viewport"
      }
    ],
    "namespace": "reaper",
    "description": "Currently represents REAPER's main window (arrange view).\nWARNING: This may change or be removed in the future."
  },
  {
    "form": "(reaper.ImGui_GetMouseClickedCount ctx button) :: (integer)",
    "doc": "(reaper.ImGui_GetMouseClickedCount ctx button) :: (integer)\nctx :: ImGui_Context\nbutton :: integer\nReturn the number of successive mouse-clicks at the time where a click happen (otherwise 0).",
    "name": "ImGui_GetMouseClickedCount",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "button"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Return the number of successive mouse-clicks at the time where a click happen (otherwise 0)."
  },
  {
    "form": "(reaper.ImGui_GetMouseClickedPos ctx button) :: (number number)",
    "doc": "(reaper.ImGui_GetMouseClickedPos ctx button) :: (number number)\nctx :: ImGui_Context\nbutton :: integer\n",
    "name": "ImGui_GetMouseClickedPos",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "button"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "x"
      },
      {
        "type": "number",
        "name": "y"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_GetMouseCursor ctx) :: (integer)",
    "doc": "(reaper.ImGui_GetMouseCursor ctx) :: (integer)\nctx :: ImGui_Context\nGet desired mouse cursor shape, reset every frame. This is updated during the frame.",
    "name": "ImGui_GetMouseCursor",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Get desired mouse cursor shape, reset every frame. This is updated during the frame."
  },
  {
    "form": "(reaper.ImGui_GetMouseDelta ctx) :: (number number)",
    "doc": "(reaper.ImGui_GetMouseDelta ctx) :: (number number)\nctx :: ImGui_Context\nMouse delta. Note that this is zero if either current or previous position\nare invalid (-FLT_MAX,-FLT_MAX), so a disappearing/reappearing mouse won't have\na huge delta.",
    "name": "ImGui_GetMouseDelta",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "x"
      },
      {
        "type": "number",
        "name": "y"
      }
    ],
    "namespace": "reaper",
    "description": "Mouse delta. Note that this is zero if either current or previous position\nare invalid (-FLT_MAX,-FLT_MAX), so a disappearing/reappearing mouse won't have\na huge delta."
  },
  {
    "form": "(reaper.ImGui_GetMouseDownDuration ctx button) :: (number)",
    "doc": "(reaper.ImGui_GetMouseDownDuration ctx button) :: (number)\nctx :: ImGui_Context\nbutton :: integer\nDuration the mouse button has been down (0.0 == just clicked)",
    "name": "ImGui_GetMouseDownDuration",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "button"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Duration the mouse button has been down (0.0 == just clicked)"
  },
  {
    "form": "(reaper.ImGui_GetMouseDragDelta ctx x y ?buttonIn ?lock_thresholdIn) :: (number number)",
    "doc": "(reaper.ImGui_GetMouseDragDelta ctx x y ?buttonIn ?lock_thresholdIn) :: (number number)\nctx :: ImGui_Context\nx :: number\ny :: number\nbuttonIn :: integer (optional)\nlock_thresholdIn :: number (optional)\nReturn the delta from the initial clicking position while the mouse button is\npressed or was just released. This is locked and return 0.0 until the mouse\nmoves past a distance threshold at least once (if lock_threshold < -1.0, uses\nConfigVar_MouseDragThreshold).",
    "name": "ImGui_GetMouseDragDelta",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "x"
      },
      {
        "type": "number",
        "name": "y"
      },
      {
        "type": "integer",
        "name": "buttonIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "lock_thresholdIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "x"
      },
      {
        "type": "number",
        "name": "y"
      }
    ],
    "namespace": "reaper",
    "description": "Return the delta from the initial clicking position while the mouse button is\npressed or was just released. This is locked and return 0.0 until the mouse\nmoves past a distance threshold at least once (if lock_threshold < -1.0, uses\nConfigVar_MouseDragThreshold)."
  },
  {
    "form": "(reaper.ImGui_GetMousePos ctx) :: (number number)",
    "doc": "(reaper.ImGui_GetMousePos ctx) :: (number number)\nctx :: ImGui_Context\n",
    "name": "ImGui_GetMousePos",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "x"
      },
      {
        "type": "number",
        "name": "y"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_GetMousePosOnOpeningCurrentPopup ctx) :: (number number)",
    "doc": "(reaper.ImGui_GetMousePosOnOpeningCurrentPopup ctx) :: (number number)\nctx :: ImGui_Context\nRetrieve mouse position at the time of opening popup we have BeginPopup()\ninto (helper to avoid user backing that value themselves).",
    "name": "ImGui_GetMousePosOnOpeningCurrentPopup",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "x"
      },
      {
        "type": "number",
        "name": "y"
      }
    ],
    "namespace": "reaper",
    "description": "Retrieve mouse position at the time of opening popup we have BeginPopup()\ninto (helper to avoid user backing that value themselves)."
  },
  {
    "form": "(reaper.ImGui_GetMouseWheel ctx) :: (number number)",
    "doc": "(reaper.ImGui_GetMouseWheel ctx) :: (number number)\nctx :: ImGui_Context\nVertical: 1 unit scrolls about 5 lines text. >0 scrolls Up, <0 scrolls Down.\nHold SHIFT to turn vertical scroll into horizontal scroll\nHorizontal: >0 scrolls Left, <0 scrolls Right.\nMost users don't have a mouse with a horizontal wheel.",
    "name": "ImGui_GetMouseWheel",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "vertical"
      },
      {
        "type": "number",
        "name": "horizontal"
      }
    ],
    "namespace": "reaper",
    "description": "Vertical: 1 unit scrolls about 5 lines text. >0 scrolls Up, <0 scrolls Down.\nHold SHIFT to turn vertical scroll into horizontal scroll\nHorizontal: >0 scrolls Left, <0 scrolls Right.\nMost users don't have a mouse with a horizontal wheel."
  },
  {
    "form": "(reaper.ImGui_GetScrollMaxX ctx) :: (number)",
    "doc": "(reaper.ImGui_GetScrollMaxX ctx) :: (number)\nctx :: ImGui_Context\nGet maximum scrolling amount ~~ ContentSize.x - WindowSize.x - DecorationsSize.x",
    "name": "ImGui_GetScrollMaxX",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Get maximum scrolling amount ~~ ContentSize.x - WindowSize.x - DecorationsSize.x"
  },
  {
    "form": "(reaper.ImGui_GetScrollMaxY ctx) :: (number)",
    "doc": "(reaper.ImGui_GetScrollMaxY ctx) :: (number)\nctx :: ImGui_Context\nGet maximum scrolling amount ~~ ContentSize.y - WindowSize.y - DecorationsSize.y",
    "name": "ImGui_GetScrollMaxY",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Get maximum scrolling amount ~~ ContentSize.y - WindowSize.y - DecorationsSize.y"
  },
  {
    "form": "(reaper.ImGui_GetScrollX ctx) :: (number)",
    "doc": "(reaper.ImGui_GetScrollX ctx) :: (number)\nctx :: ImGui_Context\nGet scrolling amount [0 .. GetScrollMaxX()]",
    "name": "ImGui_GetScrollX",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Get scrolling amount [0 .. GetScrollMaxX()]"
  },
  {
    "form": "(reaper.ImGui_GetScrollY ctx) :: (number)",
    "doc": "(reaper.ImGui_GetScrollY ctx) :: (number)\nctx :: ImGui_Context\nGet scrolling amount [0 .. GetScrollMaxY()]",
    "name": "ImGui_GetScrollY",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Get scrolling amount [0 .. GetScrollMaxY()]"
  },
  {
    "form": "(reaper.ImGui_GetStyleColor ctx idx) :: (integer)",
    "doc": "(reaper.ImGui_GetStyleColor ctx idx) :: (integer)\nctx :: ImGui_Context\nidx :: integer\nRetrieve style color as stored in ImGuiStyle structure.\nUse to feed back into PushStyleColor, Otherwise use GetColor to get style color\nwith style alpha baked in. See Col_* for available style colors.",
    "name": "ImGui_GetStyleColor",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "idx"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Retrieve style color as stored in ImGuiStyle structure.\nUse to feed back into PushStyleColor, Otherwise use GetColor to get style color\nwith style alpha baked in. See Col_* for available style colors."
  },
  {
    "form": "(reaper.ImGui_GetStyleVar ctx var_idx) :: (number number)",
    "doc": "(reaper.ImGui_GetStyleVar ctx var_idx) :: (number number)\nctx :: ImGui_Context\nvar_idx :: integer\n",
    "name": "ImGui_GetStyleVar",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "var_idx"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "val1"
      },
      {
        "type": "number",
        "name": "val2"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_GetTextLineHeight ctx) :: (number)",
    "doc": "(reaper.ImGui_GetTextLineHeight ctx) :: (number)\nctx :: ImGui_Context\nSame as GetFontSize",
    "name": "ImGui_GetTextLineHeight",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Same as GetFontSize"
  },
  {
    "form": "(reaper.ImGui_GetTextLineHeightWithSpacing ctx) :: (number)",
    "doc": "(reaper.ImGui_GetTextLineHeightWithSpacing ctx) :: (number)\nctx :: ImGui_Context\nGetFontSize + StyleVar_ItemSpacing.y\n(distance in pixels between 2 consecutive lines of text).",
    "name": "ImGui_GetTextLineHeightWithSpacing",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "GetFontSize + StyleVar_ItemSpacing.y\n(distance in pixels between 2 consecutive lines of text)."
  },
  {
    "form": "(reaper.ImGui_GetTime ctx) :: (number)",
    "doc": "(reaper.ImGui_GetTime ctx) :: (number)\nctx :: ImGui_Context\nGet global imgui time. Incremented every frame.",
    "name": "ImGui_GetTime",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Get global imgui time. Incremented every frame."
  },
  {
    "form": "(reaper.ImGui_GetTreeNodeToLabelSpacing ctx) :: (number)",
    "doc": "(reaper.ImGui_GetTreeNodeToLabelSpacing ctx) :: (number)\nctx :: ImGui_Context\nHorizontal distance preceding label when using TreeNode*() or Bullet()\n== (GetFontSize + StyleVar_FramePadding.x*2) for a regular unframed TreeNode.",
    "name": "ImGui_GetTreeNodeToLabelSpacing",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Horizontal distance preceding label when using TreeNode*() or Bullet()\n== (GetFontSize + StyleVar_FramePadding.x*2) for a regular unframed TreeNode."
  },
  {
    "form": "(reaper.ImGui_GetVersion ) :: (string integer string)",
    "doc": "(reaper.ImGui_GetVersion ) :: (string integer string)\n",
    "name": "ImGui_GetVersion",
    "returns": [
      {
        "type": "string",
        "name": "imgui_version"
      },
      {
        "type": "integer",
        "name": "imgui_version_num"
      },
      {
        "type": "string",
        "name": "reaimgui_version"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_GetWindowContentRegionMax ctx) :: (number number)",
    "doc": "(reaper.ImGui_GetWindowContentRegionMax ctx) :: (number number)\nctx :: ImGui_Context\nContent boundaries max (roughly (0,0)+Size-Scroll) where Size can be\noverridden with SetNextWindowContentSize, in window coordinates.",
    "name": "ImGui_GetWindowContentRegionMax",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "x"
      },
      {
        "type": "number",
        "name": "y"
      }
    ],
    "namespace": "reaper",
    "description": "Content boundaries max (roughly (0,0)+Size-Scroll) where Size can be\noverridden with SetNextWindowContentSize, in window coordinates."
  },
  {
    "form": "(reaper.ImGui_GetWindowContentRegionMin ctx) :: (number number)",
    "doc": "(reaper.ImGui_GetWindowContentRegionMin ctx) :: (number number)\nctx :: ImGui_Context\nContent boundaries min (roughly (0,0)-Scroll), in window coordinates.",
    "name": "ImGui_GetWindowContentRegionMin",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "x"
      },
      {
        "type": "number",
        "name": "y"
      }
    ],
    "namespace": "reaper",
    "description": "Content boundaries min (roughly (0,0)-Scroll), in window coordinates."
  },
  {
    "form": "(reaper.ImGui_GetWindowDockID ctx) :: (integer)",
    "doc": "(reaper.ImGui_GetWindowDockID ctx) :: (integer)\nctx :: ImGui_Context\n",
    "name": "ImGui_GetWindowDockID",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_GetWindowDpiScale ctx) :: (number)",
    "doc": "(reaper.ImGui_GetWindowDpiScale ctx) :: (number)\nctx :: ImGui_Context\nGet DPI scale currently associated to the current window's viewport\n(1.0 = 96 DPI).",
    "name": "ImGui_GetWindowDpiScale",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Get DPI scale currently associated to the current window's viewport\n(1.0 = 96 DPI)."
  },
  {
    "form": "(reaper.ImGui_GetWindowDrawList ctx) :: (ImGui_DrawList)",
    "doc": "(reaper.ImGui_GetWindowDrawList ctx) :: (ImGui_DrawList)\nctx :: ImGui_Context\nThe draw list associated to the current window, to append your own drawing primitives",
    "name": "ImGui_GetWindowDrawList",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "ImGui_DrawList"
      }
    ],
    "namespace": "reaper",
    "description": "The draw list associated to the current window, to append your own drawing primitives"
  },
  {
    "form": "(reaper.ImGui_GetWindowHeight ctx) :: (number)",
    "doc": "(reaper.ImGui_GetWindowHeight ctx) :: (number)\nctx :: ImGui_Context\nGet current window height (shortcut for (select(2, GetWindowSize())).",
    "name": "ImGui_GetWindowHeight",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Get current window height (shortcut for (select(2, GetWindowSize()))."
  },
  {
    "form": "(reaper.ImGui_GetWindowPos ctx) :: (number number)",
    "doc": "(reaper.ImGui_GetWindowPos ctx) :: (number number)\nctx :: ImGui_Context\nGet current window position in screen space (useful if you want to do your own\ndrawing via the DrawList API).",
    "name": "ImGui_GetWindowPos",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "x"
      },
      {
        "type": "number",
        "name": "y"
      }
    ],
    "namespace": "reaper",
    "description": "Get current window position in screen space (useful if you want to do your own\ndrawing via the DrawList API)."
  },
  {
    "form": "(reaper.ImGui_GetWindowSize ctx) :: (number number)",
    "doc": "(reaper.ImGui_GetWindowSize ctx) :: (number number)\nctx :: ImGui_Context\nGet current window size",
    "name": "ImGui_GetWindowSize",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "w"
      },
      {
        "type": "number",
        "name": "h"
      }
    ],
    "namespace": "reaper",
    "description": "Get current window size"
  },
  {
    "form": "(reaper.ImGui_GetWindowViewport ctx) :: (ImGui_Viewport)",
    "doc": "(reaper.ImGui_GetWindowViewport ctx) :: (ImGui_Viewport)\nctx :: ImGui_Context\nGet viewport currently associated to the current window.",
    "name": "ImGui_GetWindowViewport",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "ImGui_Viewport"
      }
    ],
    "namespace": "reaper",
    "description": "Get viewport currently associated to the current window."
  },
  {
    "form": "(reaper.ImGui_GetWindowWidth ctx) :: (number)",
    "doc": "(reaper.ImGui_GetWindowWidth ctx) :: (number)\nctx :: ImGui_Context\nGet current window width (shortcut for (select(1, GetWindowSize())).",
    "name": "ImGui_GetWindowWidth",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Get current window width (shortcut for (select(1, GetWindowSize()))."
  },
  {
    "form": "(reaper.ImGui_HoveredFlags_AllowWhenBlockedByActiveItem ) :: (integer)",
    "doc": "(reaper.ImGui_HoveredFlags_AllowWhenBlockedByActiveItem ) :: (integer)\nReturn true even if an active item is blocking access to this item/window.\n  Useful for Drag and Drop patterns.",
    "name": "ImGui_HoveredFlags_AllowWhenBlockedByActiveItem",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Return true even if an active item is blocking access to this item/window.\n  Useful for Drag and Drop patterns."
  },
  {
    "form": "(reaper.ImGui_HoveredFlags_AllowWhenBlockedByPopup ) :: (integer)",
    "doc": "(reaper.ImGui_HoveredFlags_AllowWhenBlockedByPopup ) :: (integer)\nReturn true even if a popup window is normally blocking access to this item/window.",
    "name": "ImGui_HoveredFlags_AllowWhenBlockedByPopup",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Return true even if a popup window is normally blocking access to this item/window."
  },
  {
    "form": "(reaper.ImGui_HoveredFlags_AllowWhenDisabled ) :: (integer)",
    "doc": "(reaper.ImGui_HoveredFlags_AllowWhenDisabled ) :: (integer)\nIsItemHovered only: Return true even if the item is disabled.",
    "name": "ImGui_HoveredFlags_AllowWhenDisabled",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "IsItemHovered only: Return true even if the item is disabled."
  },
  {
    "form": "(reaper.ImGui_HoveredFlags_AllowWhenOverlapped ) :: (integer)",
    "doc": "(reaper.ImGui_HoveredFlags_AllowWhenOverlapped ) :: (integer)\nIsItemHovered only: Return true even if the position is obstructed or\n  overlapped by another window.",
    "name": "ImGui_HoveredFlags_AllowWhenOverlapped",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "IsItemHovered only: Return true even if the position is obstructed or\n  overlapped by another window."
  },
  {
    "form": "(reaper.ImGui_HoveredFlags_AnyWindow ) :: (integer)",
    "doc": "(reaper.ImGui_HoveredFlags_AnyWindow ) :: (integer)\nIsWindowHovered only: Return true if any window is hovered.",
    "name": "ImGui_HoveredFlags_AnyWindow",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "IsWindowHovered only: Return true if any window is hovered."
  },
  {
    "form": "(reaper.ImGui_HoveredFlags_ChildWindows ) :: (integer)",
    "doc": "(reaper.ImGui_HoveredFlags_ChildWindows ) :: (integer)\nIsWindowHovered only: Return true if any children of the window is hovered.",
    "name": "ImGui_HoveredFlags_ChildWindows",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "IsWindowHovered only: Return true if any children of the window is hovered."
  },
  {
    "form": "(reaper.ImGui_HoveredFlags_DelayNormal ) :: (integer)",
    "doc": "(reaper.ImGui_HoveredFlags_DelayNormal ) :: (integer)\nReturn true after ConfigVar_HoverDelayNormal elapsed (~0.30 sec)",
    "name": "ImGui_HoveredFlags_DelayNormal",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Return true after ConfigVar_HoverDelayNormal elapsed (~0.30 sec)"
  },
  {
    "form": "(reaper.ImGui_HoveredFlags_DelayShort ) :: (integer)",
    "doc": "(reaper.ImGui_HoveredFlags_DelayShort ) :: (integer)\nReturn true after ConfigVar_HoverDelayShort elapsed (~0.10 sec)",
    "name": "ImGui_HoveredFlags_DelayShort",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Return true after ConfigVar_HoverDelayShort elapsed (~0.10 sec)"
  },
  {
    "form": "(reaper.ImGui_HoveredFlags_DockHierarchy ) :: (integer)",
    "doc": "(reaper.ImGui_HoveredFlags_DockHierarchy ) :: (integer)\nIsWindowHovered only: Consider docking hierarchy (treat dockspace host as\n  parent of docked window) (when used with _ChildWindows or _RootWindow).",
    "name": "ImGui_HoveredFlags_DockHierarchy",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "IsWindowHovered only: Consider docking hierarchy (treat dockspace host as\n  parent of docked window) (when used with _ChildWindows or _RootWindow)."
  },
  {
    "form": "(reaper.ImGui_HoveredFlags_NoNavOverride ) :: (integer)",
    "doc": "(reaper.ImGui_HoveredFlags_NoNavOverride ) :: (integer)\nDisable using gamepad/keyboard navigation state when active, always query mouse.",
    "name": "ImGui_HoveredFlags_NoNavOverride",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable using gamepad/keyboard navigation state when active, always query mouse."
  },
  {
    "form": "(reaper.ImGui_HoveredFlags_NoPopupHierarchy ) :: (integer)",
    "doc": "(reaper.ImGui_HoveredFlags_NoPopupHierarchy ) :: (integer)\nIsWindowHovered only: Do not consider popup hierarchy (do not treat popup\n  emitter as parent of popup) (when used with _ChildWindows or _RootWindow).",
    "name": "ImGui_HoveredFlags_NoPopupHierarchy",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "IsWindowHovered only: Do not consider popup hierarchy (do not treat popup\n  emitter as parent of popup) (when used with _ChildWindows or _RootWindow)."
  },
  {
    "form": "(reaper.ImGui_HoveredFlags_NoSharedDelay ) :: (integer)",
    "doc": "(reaper.ImGui_HoveredFlags_NoSharedDelay ) :: (integer)\nDisable shared delay system where moving from one item to the next keeps\n  the previous timer for a short time (standard for tooltips with long delays",
    "name": "ImGui_HoveredFlags_NoSharedDelay",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable shared delay system where moving from one item to the next keeps\n  the previous timer for a short time (standard for tooltips with long delays"
  },
  {
    "form": "(reaper.ImGui_HoveredFlags_None ) :: (integer)",
    "doc": "(reaper.ImGui_HoveredFlags_None ) :: (integer)\nReturn true if directly over the item/window, not obstructed by another\n  window, not obstructed by an active popup or modal blocking inputs under them.",
    "name": "ImGui_HoveredFlags_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Return true if directly over the item/window, not obstructed by another\n  window, not obstructed by an active popup or modal blocking inputs under them."
  },
  {
    "form": "(reaper.ImGui_HoveredFlags_RectOnly ) :: (integer)",
    "doc": "(reaper.ImGui_HoveredFlags_RectOnly ) :: (integer)\nHoveredFlags_AllowWhenBlockedByPopup |\n  HoveredFlags_AllowWhenBlockedByActiveItem | HoveredFlags_AllowWhenOverlapped",
    "name": "ImGui_HoveredFlags_RectOnly",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "HoveredFlags_AllowWhenBlockedByPopup |\n  HoveredFlags_AllowWhenBlockedByActiveItem | HoveredFlags_AllowWhenOverlapped"
  },
  {
    "form": "(reaper.ImGui_HoveredFlags_RootAndChildWindows ) :: (integer)",
    "doc": "(reaper.ImGui_HoveredFlags_RootAndChildWindows ) :: (integer)\nHoveredFlags_RootWindow | HoveredFlags_ChildWindows",
    "name": "ImGui_HoveredFlags_RootAndChildWindows",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "HoveredFlags_RootWindow | HoveredFlags_ChildWindows"
  },
  {
    "form": "(reaper.ImGui_HoveredFlags_RootWindow ) :: (integer)",
    "doc": "(reaper.ImGui_HoveredFlags_RootWindow ) :: (integer)\nIsWindowHovered only: Test from root window (top most parent of the current hierarchy).",
    "name": "ImGui_HoveredFlags_RootWindow",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "IsWindowHovered only: Test from root window (top most parent of the current hierarchy)."
  },
  {
    "form": "(reaper.ImGui_Image ctx img size_w size_h ?uv0_xIn ?uv0_yIn ?uv1_xIn ?uv1_yIn ?tint_col_rgbaIn ?border_col_rgbaIn) :: nil",
    "doc": "(reaper.ImGui_Image ctx img size_w size_h ?uv0_xIn ?uv0_yIn ?uv1_xIn ?uv1_yIn ?tint_col_rgbaIn ?border_col_rgbaIn) :: nil\nctx :: ImGui_Context\nimg :: ImGui_Image\nsize_w :: number\nsize_h :: number\nuv0_xIn :: number (optional)\nuv0_yIn :: number (optional)\nuv1_xIn :: number (optional)\nuv1_yIn :: number (optional)\ntint_col_rgbaIn :: integer (optional)\nborder_col_rgbaIn :: integer (optional)\n",
    "name": "ImGui_Image",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "ImGui_Image",
        "name": "img"
      },
      {
        "type": "number",
        "name": "size_w"
      },
      {
        "type": "number",
        "name": "size_h"
      },
      {
        "type": "number",
        "name": "uv0_xIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "uv0_yIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "uv1_xIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "uv1_yIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "tint_col_rgbaIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "border_col_rgbaIn",
        "optional": true
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_ImageButton ctx str_id img size_w size_h ?uv0_xIn ?uv0_yIn ?uv1_xIn ?uv1_yIn ?bg_col_rgbaIn ?tint_col_rgbaIn) :: (boolean)",
    "doc": "(reaper.ImGui_ImageButton ctx str_id img size_w size_h ?uv0_xIn ?uv0_yIn ?uv1_xIn ?uv1_yIn ?bg_col_rgbaIn ?tint_col_rgbaIn) :: (boolean)\nctx :: ImGui_Context\nstr_id :: string\nimg :: ImGui_Image\nsize_w :: number\nsize_h :: number\nuv0_xIn :: number (optional)\nuv0_yIn :: number (optional)\nuv1_xIn :: number (optional)\nuv1_yIn :: number (optional)\nbg_col_rgbaIn :: integer (optional)\ntint_col_rgbaIn :: integer (optional)\n",
    "name": "ImGui_ImageButton",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "str_id"
      },
      {
        "type": "ImGui_Image",
        "name": "img"
      },
      {
        "type": "number",
        "name": "size_w"
      },
      {
        "type": "number",
        "name": "size_h"
      },
      {
        "type": "number",
        "name": "uv0_xIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "uv0_yIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "uv1_xIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "uv1_yIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "bg_col_rgbaIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "tint_col_rgbaIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_ImageSet_Add set scale img) :: nil",
    "doc": "(reaper.ImGui_ImageSet_Add set scale img) :: nil\nset :: ImGui_ImageSet\nscale :: number\nimg :: ImGui_Image\n'img' cannot be another ImageSet.",
    "name": "ImGui_ImageSet_Add",
    "params": [
      {
        "type": "ImGui_ImageSet",
        "name": "set"
      },
      {
        "type": "number",
        "name": "scale"
      },
      {
        "type": "ImGui_Image",
        "name": "img"
      }
    ],
    "namespace": "reaper",
    "description": "'img' cannot be another ImageSet."
  },
  {
    "form": "(reaper.ImGui_Image_GetSize img) :: (number number)",
    "doc": "(reaper.ImGui_Image_GetSize img) :: (number number)\nimg :: ImGui_Image\n",
    "name": "ImGui_Image_GetSize",
    "params": [
      {
        "type": "ImGui_Image",
        "name": "img"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "w"
      },
      {
        "type": "number",
        "name": "h"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Indent ctx ?indent_wIn) :: nil",
    "doc": "(reaper.ImGui_Indent ctx ?indent_wIn) :: nil\nctx :: ImGui_Context\nindent_wIn :: number (optional)\nMove content position toward the right, by 'indent_w', or\nStyleVar_IndentSpacing if 'indent_w' <= 0. See Unindent.",
    "name": "ImGui_Indent",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "indent_wIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Move content position toward the right, by 'indent_w', or\nStyleVar_IndentSpacing if 'indent_w' <= 0. See Unindent."
  },
  {
    "form": "(reaper.ImGui_InputDouble ctx label v ?stepIn ?step_fastIn ?formatIn ?flagsIn) :: (boolean number)",
    "doc": "(reaper.ImGui_InputDouble ctx label v ?stepIn ?step_fastIn ?formatIn ?flagsIn) :: (boolean number)\nctx :: ImGui_Context\nlabel :: string\nv :: number\nstepIn :: number (optional)\nstep_fastIn :: number (optional)\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_InputDouble",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "number",
        "name": "v"
      },
      {
        "type": "number",
        "name": "stepIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "step_fastIn",
        "optional": true
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "v"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_InputDouble2 ctx label v1 v2 ?formatIn ?flagsIn) :: (boolean number number)",
    "doc": "(reaper.ImGui_InputDouble2 ctx label v1 v2 ?formatIn ?flagsIn) :: (boolean number number)\nctx :: ImGui_Context\nlabel :: string\nv1 :: number\nv2 :: number\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_InputDouble2",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "number",
        "name": "v1"
      },
      {
        "type": "number",
        "name": "v2"
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "v1"
      },
      {
        "type": "number",
        "name": "v2"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_InputDouble3 ctx label v1 v2 v3 ?formatIn ?flagsIn) :: (boolean number number number)",
    "doc": "(reaper.ImGui_InputDouble3 ctx label v1 v2 v3 ?formatIn ?flagsIn) :: (boolean number number number)\nctx :: ImGui_Context\nlabel :: string\nv1 :: number\nv2 :: number\nv3 :: number\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_InputDouble3",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "number",
        "name": "v1"
      },
      {
        "type": "number",
        "name": "v2"
      },
      {
        "type": "number",
        "name": "v3"
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "v1"
      },
      {
        "type": "number",
        "name": "v2"
      },
      {
        "type": "number",
        "name": "v3"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_InputDouble4 ctx label v1 v2 v3 v4 ?formatIn ?flagsIn) :: (boolean number number number number)",
    "doc": "(reaper.ImGui_InputDouble4 ctx label v1 v2 v3 v4 ?formatIn ?flagsIn) :: (boolean number number number number)\nctx :: ImGui_Context\nlabel :: string\nv1 :: number\nv2 :: number\nv3 :: number\nv4 :: number\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_InputDouble4",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "number",
        "name": "v1"
      },
      {
        "type": "number",
        "name": "v2"
      },
      {
        "type": "number",
        "name": "v3"
      },
      {
        "type": "number",
        "name": "v4"
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "v1"
      },
      {
        "type": "number",
        "name": "v2"
      },
      {
        "type": "number",
        "name": "v3"
      },
      {
        "type": "number",
        "name": "v4"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_InputDoubleN ctx label values ?stepIn ?step_fastIn ?formatIn ?flagsIn) :: (boolean)",
    "doc": "(reaper.ImGui_InputDoubleN ctx label values ?stepIn ?step_fastIn ?formatIn ?flagsIn) :: (boolean)\nctx :: ImGui_Context\nlabel :: string\nvalues :: reaper_array\nstepIn :: number (optional)\nstep_fastIn :: number (optional)\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_InputDoubleN",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "reaper_array",
        "name": "values"
      },
      {
        "type": "number",
        "name": "stepIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "step_fastIn",
        "optional": true
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_InputInt ctx label v ?stepIn ?step_fastIn ?flagsIn) :: (boolean integer)",
    "doc": "(reaper.ImGui_InputInt ctx label v ?stepIn ?step_fastIn ?flagsIn) :: (boolean integer)\nctx :: ImGui_Context\nlabel :: string\nv :: integer\nstepIn :: integer (optional)\nstep_fastIn :: integer (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_InputInt",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "v"
      },
      {
        "type": "integer",
        "name": "stepIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "step_fastIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "v"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_InputInt2 ctx label v1 v2 ?flagsIn) :: (boolean integer integer)",
    "doc": "(reaper.ImGui_InputInt2 ctx label v1 v2 ?flagsIn) :: (boolean integer integer)\nctx :: ImGui_Context\nlabel :: string\nv1 :: integer\nv2 :: integer\nflagsIn :: integer (optional)\n",
    "name": "ImGui_InputInt2",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "v1"
      },
      {
        "type": "integer",
        "name": "v2"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "v1"
      },
      {
        "type": "integer",
        "name": "v2"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_InputInt3 ctx label v1 v2 v3 ?flagsIn) :: (boolean integer integer integer)",
    "doc": "(reaper.ImGui_InputInt3 ctx label v1 v2 v3 ?flagsIn) :: (boolean integer integer integer)\nctx :: ImGui_Context\nlabel :: string\nv1 :: integer\nv2 :: integer\nv3 :: integer\nflagsIn :: integer (optional)\n",
    "name": "ImGui_InputInt3",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "v1"
      },
      {
        "type": "integer",
        "name": "v2"
      },
      {
        "type": "integer",
        "name": "v3"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "v1"
      },
      {
        "type": "integer",
        "name": "v2"
      },
      {
        "type": "integer",
        "name": "v3"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_InputInt4 ctx label v1 v2 v3 v4 ?flagsIn) :: (boolean integer integer integer integer)",
    "doc": "(reaper.ImGui_InputInt4 ctx label v1 v2 v3 v4 ?flagsIn) :: (boolean integer integer integer integer)\nctx :: ImGui_Context\nlabel :: string\nv1 :: integer\nv2 :: integer\nv3 :: integer\nv4 :: integer\nflagsIn :: integer (optional)\n",
    "name": "ImGui_InputInt4",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "v1"
      },
      {
        "type": "integer",
        "name": "v2"
      },
      {
        "type": "integer",
        "name": "v3"
      },
      {
        "type": "integer",
        "name": "v4"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "v1"
      },
      {
        "type": "integer",
        "name": "v2"
      },
      {
        "type": "integer",
        "name": "v3"
      },
      {
        "type": "integer",
        "name": "v4"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_InputText ctx label buf ?flagsIn callbackIn) :: (boolean string)",
    "doc": "(reaper.ImGui_InputText ctx label buf ?flagsIn callbackIn) :: (boolean string)\nctx :: ImGui_Context\nlabel :: string\nbuf :: string\nflagsIn :: integer (optional)\ncallbackIn :: ImGui_Function\n",
    "name": "ImGui_InputText",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "string",
        "name": "buf"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      },
      {
        "type": "ImGui_Function",
        "name": "callbackIn"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_InputTextFlags_AllowTabInput ) :: (integer)",
    "doc": "(reaper.ImGui_InputTextFlags_AllowTabInput ) :: (integer)\nPressing TAB input a '\\t' character into the text field.",
    "name": "ImGui_InputTextFlags_AllowTabInput",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Pressing TAB input a '\\t' character into the text field."
  },
  {
    "form": "(reaper.ImGui_InputTextFlags_AlwaysOverwrite ) :: (integer)",
    "doc": "(reaper.ImGui_InputTextFlags_AlwaysOverwrite ) :: (integer)\nOverwrite mode.",
    "name": "ImGui_InputTextFlags_AlwaysOverwrite",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Overwrite mode."
  },
  {
    "form": "(reaper.ImGui_InputTextFlags_AutoSelectAll ) :: (integer)",
    "doc": "(reaper.ImGui_InputTextFlags_AutoSelectAll ) :: (integer)\nSelect entire text when first taking mouse focus.",
    "name": "ImGui_InputTextFlags_AutoSelectAll",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Select entire text when first taking mouse focus."
  },
  {
    "form": "(reaper.ImGui_InputTextFlags_CallbackAlways ) :: (integer)",
    "doc": "(reaper.ImGui_InputTextFlags_CallbackAlways ) :: (integer)\nCallback on each iteration. User code may query cursor position, modify text buffer.",
    "name": "ImGui_InputTextFlags_CallbackAlways",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Callback on each iteration. User code may query cursor position, modify text buffer."
  },
  {
    "form": "(reaper.ImGui_InputTextFlags_CallbackCharFilter ) :: (integer)",
    "doc": "(reaper.ImGui_InputTextFlags_CallbackCharFilter ) :: (integer)\nCallback on character inputs to replace or discard them.\n   Modify 'EventChar' to replace or 'EventChar = 0' to discard.",
    "name": "ImGui_InputTextFlags_CallbackCharFilter",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Callback on character inputs to replace or discard them.\n   Modify 'EventChar' to replace or 'EventChar = 0' to discard."
  },
  {
    "form": "(reaper.ImGui_InputTextFlags_CallbackCompletion ) :: (integer)",
    "doc": "(reaper.ImGui_InputTextFlags_CallbackCompletion ) :: (integer)\nCallback on pressing TAB (for completion handling).",
    "name": "ImGui_InputTextFlags_CallbackCompletion",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Callback on pressing TAB (for completion handling)."
  },
  {
    "form": "(reaper.ImGui_InputTextFlags_CallbackEdit ) :: (integer)",
    "doc": "(reaper.ImGui_InputTextFlags_CallbackEdit ) :: (integer)\nCallback on any edit (note that InputText() already returns true on edit,\n   the callback is useful mainly to manipulate the underlying buffer while\n   focus is active).",
    "name": "ImGui_InputTextFlags_CallbackEdit",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Callback on any edit (note that InputText() already returns true on edit,\n   the callback is useful mainly to manipulate the underlying buffer while\n   focus is active)."
  },
  {
    "form": "(reaper.ImGui_InputTextFlags_CallbackHistory ) :: (integer)",
    "doc": "(reaper.ImGui_InputTextFlags_CallbackHistory ) :: (integer)\nCallback on pressing Up/Down arrows (for history handling).",
    "name": "ImGui_InputTextFlags_CallbackHistory",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Callback on pressing Up/Down arrows (for history handling)."
  },
  {
    "form": "(reaper.ImGui_InputTextFlags_CharsDecimal ) :: (integer)",
    "doc": "(reaper.ImGui_InputTextFlags_CharsDecimal ) :: (integer)\nAllow 0123456789.+-*/.",
    "name": "ImGui_InputTextFlags_CharsDecimal",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Allow 0123456789.+-*/."
  },
  {
    "form": "(reaper.ImGui_InputTextFlags_CharsHexadecimal ) :: (integer)",
    "doc": "(reaper.ImGui_InputTextFlags_CharsHexadecimal ) :: (integer)\nAllow 0123456789ABCDEFabcdef.",
    "name": "ImGui_InputTextFlags_CharsHexadecimal",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Allow 0123456789ABCDEFabcdef."
  },
  {
    "form": "(reaper.ImGui_InputTextFlags_CharsNoBlank ) :: (integer)",
    "doc": "(reaper.ImGui_InputTextFlags_CharsNoBlank ) :: (integer)\nFilter out spaces, tabs.",
    "name": "ImGui_InputTextFlags_CharsNoBlank",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Filter out spaces, tabs."
  },
  {
    "form": "(reaper.ImGui_InputTextFlags_CharsScientific ) :: (integer)",
    "doc": "(reaper.ImGui_InputTextFlags_CharsScientific ) :: (integer)\nAllow 0123456789.+-*/eE (Scientific notation input).",
    "name": "ImGui_InputTextFlags_CharsScientific",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Allow 0123456789.+-*/eE (Scientific notation input)."
  },
  {
    "form": "(reaper.ImGui_InputTextFlags_CharsUppercase ) :: (integer)",
    "doc": "(reaper.ImGui_InputTextFlags_CharsUppercase ) :: (integer)\nTurn a..z into A..Z.",
    "name": "ImGui_InputTextFlags_CharsUppercase",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Turn a..z into A..Z."
  },
  {
    "form": "(reaper.ImGui_InputTextFlags_CtrlEnterForNewLine ) :: (integer)",
    "doc": "(reaper.ImGui_InputTextFlags_CtrlEnterForNewLine ) :: (integer)\nIn multi-line mode, unfocus with Enter, add new line with Ctrl+Enter\n   (default is opposite: unfocus with Ctrl+Enter, add line with Enter).",
    "name": "ImGui_InputTextFlags_CtrlEnterForNewLine",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "In multi-line mode, unfocus with Enter, add new line with Ctrl+Enter\n   (default is opposite: unfocus with Ctrl+Enter, add line with Enter)."
  },
  {
    "form": "(reaper.ImGui_InputTextFlags_EnterReturnsTrue ) :: (integer)",
    "doc": "(reaper.ImGui_InputTextFlags_EnterReturnsTrue ) :: (integer)\nReturn 'true' when Enter is pressed (as opposed to every time the value was\n   modified). Consider looking at the IsItemDeactivatedAfterEdit function.",
    "name": "ImGui_InputTextFlags_EnterReturnsTrue",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Return 'true' when Enter is pressed (as opposed to every time the value was\n   modified). Consider looking at the IsItemDeactivatedAfterEdit function."
  },
  {
    "form": "(reaper.ImGui_InputTextFlags_EscapeClearsAll ) :: (integer)",
    "doc": "(reaper.ImGui_InputTextFlags_EscapeClearsAll ) :: (integer)\nEscape key clears content if not empty, and deactivate otherwise\n   (constrast to default behavior of Escape to revert).",
    "name": "ImGui_InputTextFlags_EscapeClearsAll",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Escape key clears content if not empty, and deactivate otherwise\n   (constrast to default behavior of Escape to revert)."
  },
  {
    "form": "(reaper.ImGui_InputTextFlags_NoHorizontalScroll ) :: (integer)",
    "doc": "(reaper.ImGui_InputTextFlags_NoHorizontalScroll ) :: (integer)\nDisable following the cursor horizontally.",
    "name": "ImGui_InputTextFlags_NoHorizontalScroll",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable following the cursor horizontally."
  },
  {
    "form": "(reaper.ImGui_InputTextFlags_NoUndoRedo ) :: (integer)",
    "doc": "(reaper.ImGui_InputTextFlags_NoUndoRedo ) :: (integer)\nDisable undo/redo. Note that input text owns the text data while active.",
    "name": "ImGui_InputTextFlags_NoUndoRedo",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable undo/redo. Note that input text owns the text data while active."
  },
  {
    "form": "(reaper.ImGui_InputTextFlags_None ) :: (integer)",
    "doc": "(reaper.ImGui_InputTextFlags_None ) :: (integer)\n",
    "name": "ImGui_InputTextFlags_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_InputTextFlags_Password ) :: (integer)",
    "doc": "(reaper.ImGui_InputTextFlags_Password ) :: (integer)\nPassword mode, display all characters as '*'.",
    "name": "ImGui_InputTextFlags_Password",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Password mode, display all characters as '*'."
  },
  {
    "form": "(reaper.ImGui_InputTextFlags_ReadOnly ) :: (integer)",
    "doc": "(reaper.ImGui_InputTextFlags_ReadOnly ) :: (integer)\nRead-only mode.",
    "name": "ImGui_InputTextFlags_ReadOnly",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Read-only mode."
  },
  {
    "form": "(reaper.ImGui_InputTextMultiline ctx label buf ?size_wIn ?size_hIn ?flagsIn callbackIn) :: (boolean string)",
    "doc": "(reaper.ImGui_InputTextMultiline ctx label buf ?size_wIn ?size_hIn ?flagsIn callbackIn) :: (boolean string)\nctx :: ImGui_Context\nlabel :: string\nbuf :: string\nsize_wIn :: number (optional)\nsize_hIn :: number (optional)\nflagsIn :: integer (optional)\ncallbackIn :: ImGui_Function\n",
    "name": "ImGui_InputTextMultiline",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "string",
        "name": "buf"
      },
      {
        "type": "number",
        "name": "size_wIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "size_hIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      },
      {
        "type": "ImGui_Function",
        "name": "callbackIn"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_InputTextWithHint ctx label hint buf ?flagsIn callbackIn) :: (boolean string)",
    "doc": "(reaper.ImGui_InputTextWithHint ctx label hint buf ?flagsIn callbackIn) :: (boolean string)\nctx :: ImGui_Context\nlabel :: string\nhint :: string\nbuf :: string\nflagsIn :: integer (optional)\ncallbackIn :: ImGui_Function\n",
    "name": "ImGui_InputTextWithHint",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "string",
        "name": "hint"
      },
      {
        "type": "string",
        "name": "buf"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      },
      {
        "type": "ImGui_Function",
        "name": "callbackIn"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_InvisibleButton ctx str_id size_w size_h ?flagsIn) :: (boolean)",
    "doc": "(reaper.ImGui_InvisibleButton ctx str_id size_w size_h ?flagsIn) :: (boolean)\nctx :: ImGui_Context\nstr_id :: string\nsize_w :: number\nsize_h :: number\nflagsIn :: integer (optional)\nFlexible button behavior without the visuals, frequently useful to build\ncustom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.).",
    "name": "ImGui_InvisibleButton",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "str_id"
      },
      {
        "type": "number",
        "name": "size_w"
      },
      {
        "type": "number",
        "name": "size_h"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Flexible button behavior without the visuals, frequently useful to build\ncustom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)."
  },
  {
    "form": "(reaper.ImGui_IsAnyItemActive ctx) :: (boolean)",
    "doc": "(reaper.ImGui_IsAnyItemActive ctx) :: (boolean)\nctx :: ImGui_Context\n",
    "name": "ImGui_IsAnyItemActive",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_IsAnyItemFocused ctx) :: (boolean)",
    "doc": "(reaper.ImGui_IsAnyItemFocused ctx) :: (boolean)\nctx :: ImGui_Context\n",
    "name": "ImGui_IsAnyItemFocused",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_IsAnyItemHovered ctx) :: (boolean)",
    "doc": "(reaper.ImGui_IsAnyItemHovered ctx) :: (boolean)\nctx :: ImGui_Context\n",
    "name": "ImGui_IsAnyItemHovered",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_IsAnyMouseDown ctx) :: (boolean)",
    "doc": "(reaper.ImGui_IsAnyMouseDown ctx) :: (boolean)\nctx :: ImGui_Context\nIs any mouse button held?",
    "name": "ImGui_IsAnyMouseDown",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Is any mouse button held?"
  },
  {
    "form": "(reaper.ImGui_IsItemActivated ctx) :: (boolean)",
    "doc": "(reaper.ImGui_IsItemActivated ctx) :: (boolean)\nctx :: ImGui_Context\nWas the last item just made active (item was previously inactive).",
    "name": "ImGui_IsItemActivated",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Was the last item just made active (item was previously inactive)."
  },
  {
    "form": "(reaper.ImGui_IsItemActive ctx) :: (boolean)",
    "doc": "(reaper.ImGui_IsItemActive ctx) :: (boolean)\nctx :: ImGui_Context\nIs the last item active? (e.g. button being held, text field being edited.\nThis will continuously return true while holding mouse button on an item.\nItems that don't interact will always return false.",
    "name": "ImGui_IsItemActive",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Is the last item active? (e.g. button being held, text field being edited.\nThis will continuously return true while holding mouse button on an item.\nItems that don't interact will always return false."
  },
  {
    "form": "(reaper.ImGui_IsItemClicked ctx ?mouse_buttonIn) :: (boolean)",
    "doc": "(reaper.ImGui_IsItemClicked ctx ?mouse_buttonIn) :: (boolean)\nctx :: ImGui_Context\nmouse_buttonIn :: integer (optional)\nIs the last item clicked? (e.g. button/node just clicked on)\n== IsMouseClicked(mouse_button) && IsItemHovered().\nThis is NOT equivalent to the behavior of e.g. Button.\nMost widgets have specific reactions based on mouse-up/down state, mouse position etc.",
    "name": "ImGui_IsItemClicked",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "mouse_buttonIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Is the last item clicked? (e.g. button/node just clicked on)\n== IsMouseClicked(mouse_button) && IsItemHovered().\nThis is NOT equivalent to the behavior of e.g. Button.\nMost widgets have specific reactions based on mouse-up/down state, mouse position etc."
  },
  {
    "form": "(reaper.ImGui_IsItemDeactivated ctx) :: (boolean)",
    "doc": "(reaper.ImGui_IsItemDeactivated ctx) :: (boolean)\nctx :: ImGui_Context\nWas the last item just made inactive (item was previously active).\nUseful for Undo/Redo patterns with widgets that require continuous editing.",
    "name": "ImGui_IsItemDeactivated",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Was the last item just made inactive (item was previously active).\nUseful for Undo/Redo patterns with widgets that require continuous editing."
  },
  {
    "form": "(reaper.ImGui_IsItemDeactivatedAfterEdit ctx) :: (boolean)",
    "doc": "(reaper.ImGui_IsItemDeactivatedAfterEdit ctx) :: (boolean)\nctx :: ImGui_Context\nWas the last item just made inactive and made a value change when it was\nactive? (e.g. Slider/Drag moved).\nUseful for Undo/Redo patterns with widgets that require continuous editing. Note\nthat you may get false positives (some widgets such as Combo/ListBox/Selectable\nwill return true even when clicking an already selected item).",
    "name": "ImGui_IsItemDeactivatedAfterEdit",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Was the last item just made inactive and made a value change when it was\nactive? (e.g. Slider/Drag moved).\nUseful for Undo/Redo patterns with widgets that require continuous editing. Note\nthat you may get false positives (some widgets such as Combo/ListBox/Selectable\nwill return true even when clicking an already selected item)."
  },
  {
    "form": "(reaper.ImGui_IsItemEdited ctx) :: (boolean)",
    "doc": "(reaper.ImGui_IsItemEdited ctx) :: (boolean)\nctx :: ImGui_Context\nDid the last item modify its underlying value this frame? or was pressed?\nThis is generally the same as the \"bool\" return value of many widgets.",
    "name": "ImGui_IsItemEdited",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Did the last item modify its underlying value this frame? or was pressed?\nThis is generally the same as the \"bool\" return value of many widgets."
  },
  {
    "form": "(reaper.ImGui_IsItemFocused ctx) :: (boolean)",
    "doc": "(reaper.ImGui_IsItemFocused ctx) :: (boolean)\nctx :: ImGui_Context\nIs the last item focused for keyboard/gamepad navigation?",
    "name": "ImGui_IsItemFocused",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Is the last item focused for keyboard/gamepad navigation?"
  },
  {
    "form": "(reaper.ImGui_IsItemHovered ctx ?flagsIn) :: (boolean)",
    "doc": "(reaper.ImGui_IsItemHovered ctx ?flagsIn) :: (boolean)\nctx :: ImGui_Context\nflagsIn :: integer (optional)\nIs the last item hovered? (and usable, aka not blocked by a popup, etc.).\nSee HoveredFlags_* for more options.",
    "name": "ImGui_IsItemHovered",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Is the last item hovered? (and usable, aka not blocked by a popup, etc.).\nSee HoveredFlags_* for more options."
  },
  {
    "form": "(reaper.ImGui_IsItemToggledOpen ctx) :: (boolean)",
    "doc": "(reaper.ImGui_IsItemToggledOpen ctx) :: (boolean)\nctx :: ImGui_Context\nWas the last item open state toggled? Set by TreeNode.",
    "name": "ImGui_IsItemToggledOpen",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Was the last item open state toggled? Set by TreeNode."
  },
  {
    "form": "(reaper.ImGui_IsItemVisible ctx) :: (boolean)",
    "doc": "(reaper.ImGui_IsItemVisible ctx) :: (boolean)\nctx :: ImGui_Context\nIs the last item visible? (items may be out of sight because of clipping/scrolling)",
    "name": "ImGui_IsItemVisible",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Is the last item visible? (items may be out of sight because of clipping/scrolling)"
  },
  {
    "form": "(reaper.ImGui_IsKeyDown ctx key) :: (boolean)",
    "doc": "(reaper.ImGui_IsKeyDown ctx key) :: (boolean)\nctx :: ImGui_Context\nkey :: integer\nIs key being held.",
    "name": "ImGui_IsKeyDown",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "key"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Is key being held."
  },
  {
    "form": "(reaper.ImGui_IsKeyPressed ctx key ?repeatIn) :: (boolean)",
    "doc": "(reaper.ImGui_IsKeyPressed ctx key ?repeatIn) :: (boolean)\nctx :: ImGui_Context\nkey :: integer\nrepeatIn :: boolean (optional)\nWas key pressed (went from !Down to Down)?\nIf repeat=true, uses ConfigVar_KeyRepeatDelay / ConfigVar_KeyRepeatRate.",
    "name": "ImGui_IsKeyPressed",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "key"
      },
      {
        "type": "boolean",
        "name": "repeatIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Was key pressed (went from !Down to Down)?\nIf repeat=true, uses ConfigVar_KeyRepeatDelay / ConfigVar_KeyRepeatRate."
  },
  {
    "form": "(reaper.ImGui_IsKeyReleased ctx key) :: (boolean)",
    "doc": "(reaper.ImGui_IsKeyReleased ctx key) :: (boolean)\nctx :: ImGui_Context\nkey :: integer\nWas key released (went from Down to !Down)?",
    "name": "ImGui_IsKeyReleased",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "key"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Was key released (went from Down to !Down)?"
  },
  {
    "form": "(reaper.ImGui_IsMouseClicked ctx button ?repeatIn) :: (boolean)",
    "doc": "(reaper.ImGui_IsMouseClicked ctx button ?repeatIn) :: (boolean)\nctx :: ImGui_Context\nbutton :: integer\nrepeatIn :: boolean (optional)\nDid mouse button clicked? (went from !Down to Down).\nSame as GetMouseClickedCount() == 1.",
    "name": "ImGui_IsMouseClicked",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "button"
      },
      {
        "type": "boolean",
        "name": "repeatIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Did mouse button clicked? (went from !Down to Down).\nSame as GetMouseClickedCount() == 1."
  },
  {
    "form": "(reaper.ImGui_IsMouseDoubleClicked ctx button) :: (boolean)",
    "doc": "(reaper.ImGui_IsMouseDoubleClicked ctx button) :: (boolean)\nctx :: ImGui_Context\nbutton :: integer\nDid mouse button double-clicked? Same as GetMouseClickedCount() == 2.\n(Note that a double-click will also report IsMouseClicked() == true)",
    "name": "ImGui_IsMouseDoubleClicked",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "button"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Did mouse button double-clicked? Same as GetMouseClickedCount() == 2.\n(Note that a double-click will also report IsMouseClicked() == true)"
  },
  {
    "form": "(reaper.ImGui_IsMouseDown ctx button) :: (boolean)",
    "doc": "(reaper.ImGui_IsMouseDown ctx button) :: (boolean)\nctx :: ImGui_Context\nbutton :: integer\nIs mouse button held?",
    "name": "ImGui_IsMouseDown",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "button"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Is mouse button held?"
  },
  {
    "form": "(reaper.ImGui_IsMouseDragging ctx button ?lock_thresholdIn) :: (boolean)",
    "doc": "(reaper.ImGui_IsMouseDragging ctx button ?lock_thresholdIn) :: (boolean)\nctx :: ImGui_Context\nbutton :: integer\nlock_thresholdIn :: number (optional)\nIs mouse dragging? (if lock_threshold < -1.0, uses ConfigVar_MouseDragThreshold)",
    "name": "ImGui_IsMouseDragging",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "button"
      },
      {
        "type": "number",
        "name": "lock_thresholdIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Is mouse dragging? (if lock_threshold < -1.0, uses ConfigVar_MouseDragThreshold)"
  },
  {
    "form": "(reaper.ImGui_IsMouseHoveringRect ctx r_min_x r_min_y r_max_x r_max_y ?clipIn) :: (boolean)",
    "doc": "(reaper.ImGui_IsMouseHoveringRect ctx r_min_x r_min_y r_max_x r_max_y ?clipIn) :: (boolean)\nctx :: ImGui_Context\nr_min_x :: number\nr_min_y :: number\nr_max_x :: number\nr_max_y :: number\nclipIn :: boolean (optional)\nIs mouse hovering given bounding rect (in screen space).\nClipped by current clipping settings, but disregarding of other consideration\nof focus/window ordering/popup-block.",
    "name": "ImGui_IsMouseHoveringRect",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "r_min_x"
      },
      {
        "type": "number",
        "name": "r_min_y"
      },
      {
        "type": "number",
        "name": "r_max_x"
      },
      {
        "type": "number",
        "name": "r_max_y"
      },
      {
        "type": "boolean",
        "name": "clipIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Is mouse hovering given bounding rect (in screen space).\nClipped by current clipping settings, but disregarding of other consideration\nof focus/window ordering/popup-block."
  },
  {
    "form": "(reaper.ImGui_IsMousePosValid ctx ?mouse_pos_xIn ?mouse_pos_yIn) :: (boolean)",
    "doc": "(reaper.ImGui_IsMousePosValid ctx ?mouse_pos_xIn ?mouse_pos_yIn) :: (boolean)\nctx :: ImGui_Context\nmouse_pos_xIn :: number (optional)\nmouse_pos_yIn :: number (optional)\n",
    "name": "ImGui_IsMousePosValid",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "mouse_pos_xIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "mouse_pos_yIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_IsMouseReleased ctx button) :: (boolean)",
    "doc": "(reaper.ImGui_IsMouseReleased ctx button) :: (boolean)\nctx :: ImGui_Context\nbutton :: integer\nDid mouse button released? (went from Down to !Down)",
    "name": "ImGui_IsMouseReleased",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "button"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Did mouse button released? (went from Down to !Down)"
  },
  {
    "form": "(reaper.ImGui_IsPopupOpen ctx str_id ?flagsIn) :: (boolean)",
    "doc": "(reaper.ImGui_IsPopupOpen ctx str_id ?flagsIn) :: (boolean)\nctx :: ImGui_Context\nstr_id :: string\nflagsIn :: integer (optional)\nReturn true if the popup is open at the current BeginPopup level of the\npopup stack.\n- With PopupFlags_AnyPopupId: return true if any popup is open at the current\n  BeginPopup() level of the popup stack.\n- With PopupFlags_AnyPopupId + PopupFlags_AnyPopupLevel: return true if any\n  popup is open.",
    "name": "ImGui_IsPopupOpen",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "str_id"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Return true if the popup is open at the current BeginPopup level of the\npopup stack.\n- With PopupFlags_AnyPopupId: return true if any popup is open at the current\n  BeginPopup() level of the popup stack.\n- With PopupFlags_AnyPopupId + PopupFlags_AnyPopupLevel: return true if any\n  popup is open."
  },
  {
    "form": "(reaper.ImGui_IsRectVisible ctx size_w size_h) :: (boolean)",
    "doc": "(reaper.ImGui_IsRectVisible ctx size_w size_h) :: (boolean)\nctx :: ImGui_Context\nsize_w :: number\nsize_h :: number\nTest if rectangle (of given size, starting from cursor position) is\nvisible / not clipped.",
    "name": "ImGui_IsRectVisible",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "size_w"
      },
      {
        "type": "number",
        "name": "size_h"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Test if rectangle (of given size, starting from cursor position) is\nvisible / not clipped."
  },
  {
    "form": "(reaper.ImGui_IsRectVisibleEx ctx rect_min_x rect_min_y rect_max_x rect_max_y) :: (boolean)",
    "doc": "(reaper.ImGui_IsRectVisibleEx ctx rect_min_x rect_min_y rect_max_x rect_max_y) :: (boolean)\nctx :: ImGui_Context\nrect_min_x :: number\nrect_min_y :: number\nrect_max_x :: number\nrect_max_y :: number\nTest if rectangle (in screen space) is visible / not clipped. to perform\ncoarse clipping on user's side.",
    "name": "ImGui_IsRectVisibleEx",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "rect_min_x"
      },
      {
        "type": "number",
        "name": "rect_min_y"
      },
      {
        "type": "number",
        "name": "rect_max_x"
      },
      {
        "type": "number",
        "name": "rect_max_y"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Test if rectangle (in screen space) is visible / not clipped. to perform\ncoarse clipping on user's side."
  },
  {
    "form": "(reaper.ImGui_IsWindowAppearing ctx) :: (boolean)",
    "doc": "(reaper.ImGui_IsWindowAppearing ctx) :: (boolean)\nctx :: ImGui_Context\nUse after Begin/BeginPopup/BeginPopupModal to tell if a window just opened.",
    "name": "ImGui_IsWindowAppearing",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Use after Begin/BeginPopup/BeginPopupModal to tell if a window just opened."
  },
  {
    "form": "(reaper.ImGui_IsWindowDocked ctx) :: (boolean)",
    "doc": "(reaper.ImGui_IsWindowDocked ctx) :: (boolean)\nctx :: ImGui_Context\nIs current window docked into another window or a REAPER docker?",
    "name": "ImGui_IsWindowDocked",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Is current window docked into another window or a REAPER docker?"
  },
  {
    "form": "(reaper.ImGui_IsWindowFocused ctx ?flagsIn) :: (boolean)",
    "doc": "(reaper.ImGui_IsWindowFocused ctx ?flagsIn) :: (boolean)\nctx :: ImGui_Context\nflagsIn :: integer (optional)\nIs current window focused? or its root/child, depending on flags.\nSee flags for options.",
    "name": "ImGui_IsWindowFocused",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Is current window focused? or its root/child, depending on flags.\nSee flags for options."
  },
  {
    "form": "(reaper.ImGui_IsWindowHovered ctx ?flagsIn) :: (boolean)",
    "doc": "(reaper.ImGui_IsWindowHovered ctx ?flagsIn) :: (boolean)\nctx :: ImGui_Context\nflagsIn :: integer (optional)\nIs current window hovered (and typically: not blocked by a popup/modal)?\nSee flags for options.",
    "name": "ImGui_IsWindowHovered",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Is current window hovered (and typically: not blocked by a popup/modal)?\nSee flags for options."
  },
  {
    "form": "(reaper.ImGui_Key_0 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_0 ) :: (integer)\n",
    "name": "ImGui_Key_0",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_1 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_1 ) :: (integer)\n",
    "name": "ImGui_Key_1",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_2 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_2 ) :: (integer)\n",
    "name": "ImGui_Key_2",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_3 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_3 ) :: (integer)\n",
    "name": "ImGui_Key_3",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_4 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_4 ) :: (integer)\n",
    "name": "ImGui_Key_4",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_5 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_5 ) :: (integer)\n",
    "name": "ImGui_Key_5",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_6 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_6 ) :: (integer)\n",
    "name": "ImGui_Key_6",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_7 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_7 ) :: (integer)\n",
    "name": "ImGui_Key_7",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_8 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_8 ) :: (integer)\n",
    "name": "ImGui_Key_8",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_9 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_9 ) :: (integer)\n",
    "name": "ImGui_Key_9",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_A ) :: (integer)",
    "doc": "(reaper.ImGui_Key_A ) :: (integer)\n",
    "name": "ImGui_Key_A",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Apostrophe ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Apostrophe ) :: (integer)\n'",
    "name": "ImGui_Key_Apostrophe",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "'"
  },
  {
    "form": "(reaper.ImGui_Key_B ) :: (integer)",
    "doc": "(reaper.ImGui_Key_B ) :: (integer)\n",
    "name": "ImGui_Key_B",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Backslash ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Backslash ) :: (integer)\n\\",
    "name": "ImGui_Key_Backslash",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "\\"
  },
  {
    "form": "(reaper.ImGui_Key_Backspace ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Backspace ) :: (integer)\n",
    "name": "ImGui_Key_Backspace",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_C ) :: (integer)",
    "doc": "(reaper.ImGui_Key_C ) :: (integer)\n",
    "name": "ImGui_Key_C",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_CapsLock ) :: (integer)",
    "doc": "(reaper.ImGui_Key_CapsLock ) :: (integer)\n",
    "name": "ImGui_Key_CapsLock",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Comma ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Comma ) :: (integer)\n,",
    "name": "ImGui_Key_Comma",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": ","
  },
  {
    "form": "(reaper.ImGui_Key_D ) :: (integer)",
    "doc": "(reaper.ImGui_Key_D ) :: (integer)\n",
    "name": "ImGui_Key_D",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Delete ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Delete ) :: (integer)\n",
    "name": "ImGui_Key_Delete",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_DownArrow ) :: (integer)",
    "doc": "(reaper.ImGui_Key_DownArrow ) :: (integer)\n",
    "name": "ImGui_Key_DownArrow",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_E ) :: (integer)",
    "doc": "(reaper.ImGui_Key_E ) :: (integer)\n",
    "name": "ImGui_Key_E",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_End ) :: (integer)",
    "doc": "(reaper.ImGui_Key_End ) :: (integer)\n",
    "name": "ImGui_Key_End",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Enter ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Enter ) :: (integer)\n",
    "name": "ImGui_Key_Enter",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Equal ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Equal ) :: (integer)\n=",
    "name": "ImGui_Key_Equal",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "="
  },
  {
    "form": "(reaper.ImGui_Key_Escape ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Escape ) :: (integer)\n",
    "name": "ImGui_Key_Escape",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_F ) :: (integer)",
    "doc": "(reaper.ImGui_Key_F ) :: (integer)\n",
    "name": "ImGui_Key_F",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_F1 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_F1 ) :: (integer)\n",
    "name": "ImGui_Key_F1",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_F10 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_F10 ) :: (integer)\n",
    "name": "ImGui_Key_F10",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_F11 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_F11 ) :: (integer)\n",
    "name": "ImGui_Key_F11",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_F12 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_F12 ) :: (integer)\n",
    "name": "ImGui_Key_F12",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_F2 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_F2 ) :: (integer)\n",
    "name": "ImGui_Key_F2",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_F3 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_F3 ) :: (integer)\n",
    "name": "ImGui_Key_F3",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_F4 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_F4 ) :: (integer)\n",
    "name": "ImGui_Key_F4",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_F5 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_F5 ) :: (integer)\n",
    "name": "ImGui_Key_F5",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_F6 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_F6 ) :: (integer)\n",
    "name": "ImGui_Key_F6",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_F7 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_F7 ) :: (integer)\n",
    "name": "ImGui_Key_F7",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_F8 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_F8 ) :: (integer)\n",
    "name": "ImGui_Key_F8",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_F9 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_F9 ) :: (integer)\n",
    "name": "ImGui_Key_F9",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_G ) :: (integer)",
    "doc": "(reaper.ImGui_Key_G ) :: (integer)\n",
    "name": "ImGui_Key_G",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_GraveAccent ) :: (integer)",
    "doc": "(reaper.ImGui_Key_GraveAccent ) :: (integer)\n`",
    "name": "ImGui_Key_GraveAccent",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "`"
  },
  {
    "form": "(reaper.ImGui_Key_H ) :: (integer)",
    "doc": "(reaper.ImGui_Key_H ) :: (integer)\n",
    "name": "ImGui_Key_H",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Home ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Home ) :: (integer)\n",
    "name": "ImGui_Key_Home",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_I ) :: (integer)",
    "doc": "(reaper.ImGui_Key_I ) :: (integer)\n",
    "name": "ImGui_Key_I",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Insert ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Insert ) :: (integer)\n",
    "name": "ImGui_Key_Insert",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_J ) :: (integer)",
    "doc": "(reaper.ImGui_Key_J ) :: (integer)\n",
    "name": "ImGui_Key_J",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_K ) :: (integer)",
    "doc": "(reaper.ImGui_Key_K ) :: (integer)\n",
    "name": "ImGui_Key_K",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Keypad0 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Keypad0 ) :: (integer)\n",
    "name": "ImGui_Key_Keypad0",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Keypad1 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Keypad1 ) :: (integer)\n",
    "name": "ImGui_Key_Keypad1",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Keypad2 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Keypad2 ) :: (integer)\n",
    "name": "ImGui_Key_Keypad2",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Keypad3 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Keypad3 ) :: (integer)\n",
    "name": "ImGui_Key_Keypad3",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Keypad4 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Keypad4 ) :: (integer)\n",
    "name": "ImGui_Key_Keypad4",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Keypad5 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Keypad5 ) :: (integer)\n",
    "name": "ImGui_Key_Keypad5",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Keypad6 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Keypad6 ) :: (integer)\n",
    "name": "ImGui_Key_Keypad6",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Keypad7 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Keypad7 ) :: (integer)\n",
    "name": "ImGui_Key_Keypad7",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Keypad8 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Keypad8 ) :: (integer)\n",
    "name": "ImGui_Key_Keypad8",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Keypad9 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Keypad9 ) :: (integer)\n",
    "name": "ImGui_Key_Keypad9",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_KeypadAdd ) :: (integer)",
    "doc": "(reaper.ImGui_Key_KeypadAdd ) :: (integer)\n",
    "name": "ImGui_Key_KeypadAdd",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_KeypadDecimal ) :: (integer)",
    "doc": "(reaper.ImGui_Key_KeypadDecimal ) :: (integer)\n",
    "name": "ImGui_Key_KeypadDecimal",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_KeypadDivide ) :: (integer)",
    "doc": "(reaper.ImGui_Key_KeypadDivide ) :: (integer)\n",
    "name": "ImGui_Key_KeypadDivide",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_KeypadEnter ) :: (integer)",
    "doc": "(reaper.ImGui_Key_KeypadEnter ) :: (integer)\n",
    "name": "ImGui_Key_KeypadEnter",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_KeypadEqual ) :: (integer)",
    "doc": "(reaper.ImGui_Key_KeypadEqual ) :: (integer)\n",
    "name": "ImGui_Key_KeypadEqual",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_KeypadMultiply ) :: (integer)",
    "doc": "(reaper.ImGui_Key_KeypadMultiply ) :: (integer)\n",
    "name": "ImGui_Key_KeypadMultiply",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_KeypadSubtract ) :: (integer)",
    "doc": "(reaper.ImGui_Key_KeypadSubtract ) :: (integer)\n",
    "name": "ImGui_Key_KeypadSubtract",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_L ) :: (integer)",
    "doc": "(reaper.ImGui_Key_L ) :: (integer)\n",
    "name": "ImGui_Key_L",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_LeftAlt ) :: (integer)",
    "doc": "(reaper.ImGui_Key_LeftAlt ) :: (integer)\n",
    "name": "ImGui_Key_LeftAlt",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_LeftArrow ) :: (integer)",
    "doc": "(reaper.ImGui_Key_LeftArrow ) :: (integer)\n",
    "name": "ImGui_Key_LeftArrow",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_LeftBracket ) :: (integer)",
    "doc": "(reaper.ImGui_Key_LeftBracket ) :: (integer)\n[",
    "name": "ImGui_Key_LeftBracket",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "["
  },
  {
    "form": "(reaper.ImGui_Key_LeftCtrl ) :: (integer)",
    "doc": "(reaper.ImGui_Key_LeftCtrl ) :: (integer)\n",
    "name": "ImGui_Key_LeftCtrl",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_LeftShift ) :: (integer)",
    "doc": "(reaper.ImGui_Key_LeftShift ) :: (integer)\n",
    "name": "ImGui_Key_LeftShift",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_LeftSuper ) :: (integer)",
    "doc": "(reaper.ImGui_Key_LeftSuper ) :: (integer)\n",
    "name": "ImGui_Key_LeftSuper",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_M ) :: (integer)",
    "doc": "(reaper.ImGui_Key_M ) :: (integer)\n",
    "name": "ImGui_Key_M",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Menu ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Menu ) :: (integer)\n",
    "name": "ImGui_Key_Menu",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Minus ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Minus ) :: (integer)\n-",
    "name": "ImGui_Key_Minus",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "-"
  },
  {
    "form": "(reaper.ImGui_Key_MouseLeft ) :: (integer)",
    "doc": "(reaper.ImGui_Key_MouseLeft ) :: (integer)\n",
    "name": "ImGui_Key_MouseLeft",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_MouseMiddle ) :: (integer)",
    "doc": "(reaper.ImGui_Key_MouseMiddle ) :: (integer)\n",
    "name": "ImGui_Key_MouseMiddle",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_MouseRight ) :: (integer)",
    "doc": "(reaper.ImGui_Key_MouseRight ) :: (integer)\n",
    "name": "ImGui_Key_MouseRight",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_MouseWheelX ) :: (integer)",
    "doc": "(reaper.ImGui_Key_MouseWheelX ) :: (integer)\n",
    "name": "ImGui_Key_MouseWheelX",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_MouseWheelY ) :: (integer)",
    "doc": "(reaper.ImGui_Key_MouseWheelY ) :: (integer)\n",
    "name": "ImGui_Key_MouseWheelY",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_MouseX1 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_MouseX1 ) :: (integer)\n",
    "name": "ImGui_Key_MouseX1",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_MouseX2 ) :: (integer)",
    "doc": "(reaper.ImGui_Key_MouseX2 ) :: (integer)\n",
    "name": "ImGui_Key_MouseX2",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_N ) :: (integer)",
    "doc": "(reaper.ImGui_Key_N ) :: (integer)\n",
    "name": "ImGui_Key_N",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_NumLock ) :: (integer)",
    "doc": "(reaper.ImGui_Key_NumLock ) :: (integer)\n",
    "name": "ImGui_Key_NumLock",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_O ) :: (integer)",
    "doc": "(reaper.ImGui_Key_O ) :: (integer)\n",
    "name": "ImGui_Key_O",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_P ) :: (integer)",
    "doc": "(reaper.ImGui_Key_P ) :: (integer)\n",
    "name": "ImGui_Key_P",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_PageDown ) :: (integer)",
    "doc": "(reaper.ImGui_Key_PageDown ) :: (integer)\n",
    "name": "ImGui_Key_PageDown",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_PageUp ) :: (integer)",
    "doc": "(reaper.ImGui_Key_PageUp ) :: (integer)\n",
    "name": "ImGui_Key_PageUp",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Pause ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Pause ) :: (integer)\n",
    "name": "ImGui_Key_Pause",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Period ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Period ) :: (integer)\n.",
    "name": "ImGui_Key_Period",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "."
  },
  {
    "form": "(reaper.ImGui_Key_PrintScreen ) :: (integer)",
    "doc": "(reaper.ImGui_Key_PrintScreen ) :: (integer)\n",
    "name": "ImGui_Key_PrintScreen",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Q ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Q ) :: (integer)\n",
    "name": "ImGui_Key_Q",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_R ) :: (integer)",
    "doc": "(reaper.ImGui_Key_R ) :: (integer)\n",
    "name": "ImGui_Key_R",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_RightAlt ) :: (integer)",
    "doc": "(reaper.ImGui_Key_RightAlt ) :: (integer)\n",
    "name": "ImGui_Key_RightAlt",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_RightArrow ) :: (integer)",
    "doc": "(reaper.ImGui_Key_RightArrow ) :: (integer)\n",
    "name": "ImGui_Key_RightArrow",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_RightBracket ) :: (integer)",
    "doc": "(reaper.ImGui_Key_RightBracket ) :: (integer)\n]",
    "name": "ImGui_Key_RightBracket",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "]"
  },
  {
    "form": "(reaper.ImGui_Key_RightCtrl ) :: (integer)",
    "doc": "(reaper.ImGui_Key_RightCtrl ) :: (integer)\n",
    "name": "ImGui_Key_RightCtrl",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_RightShift ) :: (integer)",
    "doc": "(reaper.ImGui_Key_RightShift ) :: (integer)\n",
    "name": "ImGui_Key_RightShift",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_RightSuper ) :: (integer)",
    "doc": "(reaper.ImGui_Key_RightSuper ) :: (integer)\n",
    "name": "ImGui_Key_RightSuper",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_S ) :: (integer)",
    "doc": "(reaper.ImGui_Key_S ) :: (integer)\n",
    "name": "ImGui_Key_S",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_ScrollLock ) :: (integer)",
    "doc": "(reaper.ImGui_Key_ScrollLock ) :: (integer)\n",
    "name": "ImGui_Key_ScrollLock",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Semicolon ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Semicolon ) :: (integer)\n;",
    "name": "ImGui_Key_Semicolon",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": ";"
  },
  {
    "form": "(reaper.ImGui_Key_Slash ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Slash ) :: (integer)\n/",
    "name": "ImGui_Key_Slash",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "/"
  },
  {
    "form": "(reaper.ImGui_Key_Space ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Space ) :: (integer)\n",
    "name": "ImGui_Key_Space",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_T ) :: (integer)",
    "doc": "(reaper.ImGui_Key_T ) :: (integer)\n",
    "name": "ImGui_Key_T",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Tab ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Tab ) :: (integer)\n",
    "name": "ImGui_Key_Tab",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_U ) :: (integer)",
    "doc": "(reaper.ImGui_Key_U ) :: (integer)\n",
    "name": "ImGui_Key_U",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_UpArrow ) :: (integer)",
    "doc": "(reaper.ImGui_Key_UpArrow ) :: (integer)\n",
    "name": "ImGui_Key_UpArrow",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_V ) :: (integer)",
    "doc": "(reaper.ImGui_Key_V ) :: (integer)\n",
    "name": "ImGui_Key_V",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_W ) :: (integer)",
    "doc": "(reaper.ImGui_Key_W ) :: (integer)\n",
    "name": "ImGui_Key_W",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_X ) :: (integer)",
    "doc": "(reaper.ImGui_Key_X ) :: (integer)\n",
    "name": "ImGui_Key_X",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Y ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Y ) :: (integer)\n",
    "name": "ImGui_Key_Y",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Key_Z ) :: (integer)",
    "doc": "(reaper.ImGui_Key_Z ) :: (integer)\n",
    "name": "ImGui_Key_Z",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_LabelText ctx label text) :: nil",
    "doc": "(reaper.ImGui_LabelText ctx label text) :: nil\nctx :: ImGui_Context\nlabel :: string\ntext :: string\nDisplay text+label aligned the same way as value+label widgets",
    "name": "ImGui_LabelText",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "string",
        "name": "text"
      }
    ],
    "namespace": "reaper",
    "description": "Display text+label aligned the same way as value+label widgets"
  },
  {
    "form": "(reaper.ImGui_ListBox ctx label current_item items ?height_in_itemsIn) :: (boolean integer)",
    "doc": "(reaper.ImGui_ListBox ctx label current_item items ?height_in_itemsIn) :: (boolean integer)\nctx :: ImGui_Context\nlabel :: string\ncurrent_item :: integer\nitems :: string\nheight_in_itemsIn :: integer (optional)\nThis is an helper over BeginListBox/EndListBox for convenience purpose.\nEach item must be null-terminated (requires REAPER v6.44 or newer for EEL and Lua).",
    "name": "ImGui_ListBox",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "current_item"
      },
      {
        "type": "string",
        "name": "items"
      },
      {
        "type": "integer",
        "name": "height_in_itemsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "current_item"
      }
    ],
    "namespace": "reaper",
    "description": "This is an helper over BeginListBox/EndListBox for convenience purpose.\nEach item must be null-terminated (requires REAPER v6.44 or newer for EEL and Lua)."
  },
  {
    "form": "(reaper.ImGui_ListClipper_Begin clipper items_count ?items_heightIn) :: nil",
    "doc": "(reaper.ImGui_ListClipper_Begin clipper items_count ?items_heightIn) :: nil\nclipper :: ImGui_ListClipper\nitems_count :: integer\nitems_heightIn :: number (optional)\n- items_count: Use INT_MAX if you don't know how many items you have\n(in which case the cursor won't be advanced in the final step)\n- items_height: Use -1.0 to be calculated automatically on first step.\n  Otherwise pass in the distance between your items, typically\n  GetTextLineHeightWithSpacing or GetFrameHeightWithSpacing.",
    "name": "ImGui_ListClipper_Begin",
    "params": [
      {
        "type": "ImGui_ListClipper",
        "name": "clipper"
      },
      {
        "type": "integer",
        "name": "items_count"
      },
      {
        "type": "number",
        "name": "items_heightIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "- items_count: Use INT_MAX if you don't know how many items you have\n(in which case the cursor won't be advanced in the final step)\n- items_height: Use -1.0 to be calculated automatically on first step.\n  Otherwise pass in the distance between your items, typically\n  GetTextLineHeightWithSpacing or GetFrameHeightWithSpacing."
  },
  {
    "form": "(reaper.ImGui_ListClipper_End clipper) :: nil",
    "doc": "(reaper.ImGui_ListClipper_End clipper) :: nil\nclipper :: ImGui_ListClipper\nAutomatically called on the last call of ListClipper_Step that returns false.",
    "name": "ImGui_ListClipper_End",
    "params": [
      {
        "type": "ImGui_ListClipper",
        "name": "clipper"
      }
    ],
    "namespace": "reaper",
    "description": "Automatically called on the last call of ListClipper_Step that returns false."
  },
  {
    "form": "(reaper.ImGui_ListClipper_ForceDisplayRangeByIndices clipper item_min item_max) :: nil",
    "doc": "(reaper.ImGui_ListClipper_ForceDisplayRangeByIndices clipper item_min item_max) :: nil\nclipper :: ImGui_ListClipper\nitem_min :: integer\nitem_max :: integer\nCall ListClipper_ForceDisplayRangeByIndices before first call to\nListClipper_Step if you need a range of items to be displayed regardless of\nvisibility.\nitem_max is exclusive e.g. use (42, 42+1) to make item 42 always visible BUT due\nto alignment/padding of certain items it is likely that an extra item may be\nincluded on either end of the display range.",
    "name": "ImGui_ListClipper_ForceDisplayRangeByIndices",
    "params": [
      {
        "type": "ImGui_ListClipper",
        "name": "clipper"
      },
      {
        "type": "integer",
        "name": "item_min"
      },
      {
        "type": "integer",
        "name": "item_max"
      }
    ],
    "namespace": "reaper",
    "description": "Call ListClipper_ForceDisplayRangeByIndices before first call to\nListClipper_Step if you need a range of items to be displayed regardless of\nvisibility.\nitem_max is exclusive e.g. use (42, 42+1) to make item 42 always visible BUT due\nto alignment/padding of certain items it is likely that an extra item may be\nincluded on either end of the display range."
  },
  {
    "form": "(reaper.ImGui_ListClipper_GetDisplayRange clipper) :: (integer integer)",
    "doc": "(reaper.ImGui_ListClipper_GetDisplayRange clipper) :: (integer integer)\nclipper :: ImGui_ListClipper\n",
    "name": "ImGui_ListClipper_GetDisplayRange",
    "params": [
      {
        "type": "ImGui_ListClipper",
        "name": "clipper"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "display_start"
      },
      {
        "type": "integer",
        "name": "display_end"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_ListClipper_Step clipper) :: (boolean)",
    "doc": "(reaper.ImGui_ListClipper_Step clipper) :: (boolean)\nclipper :: ImGui_ListClipper\nCall until it returns false. The display_start/display_end fields from\nListClipper_GetDisplayRange will be set and you can process/draw those items.",
    "name": "ImGui_ListClipper_Step",
    "params": [
      {
        "type": "ImGui_ListClipper",
        "name": "clipper"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Call until it returns false. The display_start/display_end fields from\nListClipper_GetDisplayRange will be set and you can process/draw those items."
  },
  {
    "form": "(reaper.ImGui_LogFinish ctx) :: nil",
    "doc": "(reaper.ImGui_LogFinish ctx) :: nil\nctx :: ImGui_Context\nStop logging (close file, etc.)",
    "name": "ImGui_LogFinish",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Stop logging (close file, etc.)"
  },
  {
    "form": "(reaper.ImGui_LogText ctx text) :: nil",
    "doc": "(reaper.ImGui_LogText ctx text) :: nil\nctx :: ImGui_Context\ntext :: string\nPass text data straight to log (without being displayed)",
    "name": "ImGui_LogText",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "text"
      }
    ],
    "namespace": "reaper",
    "description": "Pass text data straight to log (without being displayed)"
  },
  {
    "form": "(reaper.ImGui_LogToClipboard ctx ?auto_open_depthIn) :: nil",
    "doc": "(reaper.ImGui_LogToClipboard ctx ?auto_open_depthIn) :: nil\nctx :: ImGui_Context\nauto_open_depthIn :: integer (optional)\nStart logging all text output from the interface to the OS clipboard.\nSee also SetClipboardText.",
    "name": "ImGui_LogToClipboard",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "auto_open_depthIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Start logging all text output from the interface to the OS clipboard.\nSee also SetClipboardText."
  },
  {
    "form": "(reaper.ImGui_LogToFile ctx ?auto_open_depthIn ?filenameIn) :: nil",
    "doc": "(reaper.ImGui_LogToFile ctx ?auto_open_depthIn ?filenameIn) :: nil\nctx :: ImGui_Context\nauto_open_depthIn :: integer (optional)\nfilenameIn :: string (optional)\nStart logging all text output from the interface to a file.\nThe data is saved to $resource_path/imgui_log.txt if filename is nil.",
    "name": "ImGui_LogToFile",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "auto_open_depthIn",
        "optional": true
      },
      {
        "type": "string",
        "name": "filenameIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Start logging all text output from the interface to a file.\nThe data is saved to $resource_path/imgui_log.txt if filename is nil."
  },
  {
    "form": "(reaper.ImGui_LogToTTY ctx ?auto_open_depthIn) :: nil",
    "doc": "(reaper.ImGui_LogToTTY ctx ?auto_open_depthIn) :: nil\nctx :: ImGui_Context\nauto_open_depthIn :: integer (optional)\nStart logging all text output from the interface to the TTY (stdout).",
    "name": "ImGui_LogToTTY",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "auto_open_depthIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Start logging all text output from the interface to the TTY (stdout)."
  },
  {
    "form": "(reaper.ImGui_MenuItem ctx label ?shortcutIn ?p_selected ?enabledIn) :: (boolean boolean)",
    "doc": "(reaper.ImGui_MenuItem ctx label ?shortcutIn ?p_selected ?enabledIn) :: (boolean boolean)\nctx :: ImGui_Context\nlabel :: string\nshortcutIn :: string (optional)\np_selected :: boolean (optional)\nenabledIn :: boolean (optional)\nReturn true when activated. Shortcuts are displayed for convenience but not\nprocessed by ImGui at the moment. Toggle state is written to 'selected' when\nprovided.",
    "name": "ImGui_MenuItem",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "string",
        "name": "shortcutIn",
        "optional": true
      },
      {
        "type": "boolean",
        "name": "p_selected",
        "optional": true
      },
      {
        "type": "boolean",
        "name": "enabledIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "p_selected",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Return true when activated. Shortcuts are displayed for convenience but not\nprocessed by ImGui at the moment. Toggle state is written to 'selected' when\nprovided."
  },
  {
    "form": "(reaper.ImGui_Mod_Alt ) :: (integer)",
    "doc": "(reaper.ImGui_Mod_Alt ) :: (integer)\n",
    "name": "ImGui_Mod_Alt",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Mod_Ctrl ) :: (integer)",
    "doc": "(reaper.ImGui_Mod_Ctrl ) :: (integer)\n",
    "name": "ImGui_Mod_Ctrl",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Mod_None ) :: (integer)",
    "doc": "(reaper.ImGui_Mod_None ) :: (integer)\n",
    "name": "ImGui_Mod_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Mod_Shift ) :: (integer)",
    "doc": "(reaper.ImGui_Mod_Shift ) :: (integer)\n",
    "name": "ImGui_Mod_Shift",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Mod_Shortcut ) :: (integer)",
    "doc": "(reaper.ImGui_Mod_Shortcut ) :: (integer)\nAlias for Mod_Ctrl on Linux and Windows and Mod_Super on macOS (Cmd key).",
    "name": "ImGui_Mod_Shortcut",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Alias for Mod_Ctrl on Linux and Windows and Mod_Super on macOS (Cmd key)."
  },
  {
    "form": "(reaper.ImGui_Mod_Super ) :: (integer)",
    "doc": "(reaper.ImGui_Mod_Super ) :: (integer)\n",
    "name": "ImGui_Mod_Super",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_MouseButton_Left ) :: (integer)",
    "doc": "(reaper.ImGui_MouseButton_Left ) :: (integer)\n",
    "name": "ImGui_MouseButton_Left",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_MouseButton_Middle ) :: (integer)",
    "doc": "(reaper.ImGui_MouseButton_Middle ) :: (integer)\n",
    "name": "ImGui_MouseButton_Middle",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_MouseButton_Right ) :: (integer)",
    "doc": "(reaper.ImGui_MouseButton_Right ) :: (integer)\n",
    "name": "ImGui_MouseButton_Right",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_MouseCursor_Arrow ) :: (integer)",
    "doc": "(reaper.ImGui_MouseCursor_Arrow ) :: (integer)\n",
    "name": "ImGui_MouseCursor_Arrow",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_MouseCursor_Hand ) :: (integer)",
    "doc": "(reaper.ImGui_MouseCursor_Hand ) :: (integer)\n(Unused by Dear ImGui functions. Use for e.g. hyperlinks)",
    "name": "ImGui_MouseCursor_Hand",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "(Unused by Dear ImGui functions. Use for e.g. hyperlinks)"
  },
  {
    "form": "(reaper.ImGui_MouseCursor_None ) :: (integer)",
    "doc": "(reaper.ImGui_MouseCursor_None ) :: (integer)\n",
    "name": "ImGui_MouseCursor_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_MouseCursor_NotAllowed ) :: (integer)",
    "doc": "(reaper.ImGui_MouseCursor_NotAllowed ) :: (integer)\nWhen hovering something with disallowed interaction. Usually a crossed circle.",
    "name": "ImGui_MouseCursor_NotAllowed",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "When hovering something with disallowed interaction. Usually a crossed circle."
  },
  {
    "form": "(reaper.ImGui_MouseCursor_ResizeAll ) :: (integer)",
    "doc": "(reaper.ImGui_MouseCursor_ResizeAll ) :: (integer)\n(Unused by Dear ImGui functions)",
    "name": "ImGui_MouseCursor_ResizeAll",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "(Unused by Dear ImGui functions)"
  },
  {
    "form": "(reaper.ImGui_MouseCursor_ResizeEW ) :: (integer)",
    "doc": "(reaper.ImGui_MouseCursor_ResizeEW ) :: (integer)\nWhen hovering over a vertical border or a column.",
    "name": "ImGui_MouseCursor_ResizeEW",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "When hovering over a vertical border or a column."
  },
  {
    "form": "(reaper.ImGui_MouseCursor_ResizeNESW ) :: (integer)",
    "doc": "(reaper.ImGui_MouseCursor_ResizeNESW ) :: (integer)\nWhen hovering over the bottom-left corner of a window.",
    "name": "ImGui_MouseCursor_ResizeNESW",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "When hovering over the bottom-left corner of a window."
  },
  {
    "form": "(reaper.ImGui_MouseCursor_ResizeNS ) :: (integer)",
    "doc": "(reaper.ImGui_MouseCursor_ResizeNS ) :: (integer)\nWhen hovering over a horizontal border.",
    "name": "ImGui_MouseCursor_ResizeNS",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "When hovering over a horizontal border."
  },
  {
    "form": "(reaper.ImGui_MouseCursor_ResizeNWSE ) :: (integer)",
    "doc": "(reaper.ImGui_MouseCursor_ResizeNWSE ) :: (integer)\nWhen hovering over the bottom-right corner of a window.",
    "name": "ImGui_MouseCursor_ResizeNWSE",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "When hovering over the bottom-right corner of a window."
  },
  {
    "form": "(reaper.ImGui_MouseCursor_TextInput ) :: (integer)",
    "doc": "(reaper.ImGui_MouseCursor_TextInput ) :: (integer)\nWhen hovering over InputText, etc.",
    "name": "ImGui_MouseCursor_TextInput",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "When hovering over InputText, etc."
  },
  {
    "form": "(reaper.ImGui_NewLine ctx) :: nil",
    "doc": "(reaper.ImGui_NewLine ctx) :: nil\nctx :: ImGui_Context\nUndo a SameLine() or force a new line when in a horizontal-layout context.",
    "name": "ImGui_NewLine",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Undo a SameLine() or force a new line when in a horizontal-layout context."
  },
  {
    "form": "(reaper.ImGui_NumericLimits_Double ) :: (number number)",
    "doc": "(reaper.ImGui_NumericLimits_Double ) :: (number number)\nReturns DBL_MIN and DBL_MAX for this system.",
    "name": "ImGui_NumericLimits_Double",
    "returns": [
      {
        "type": "number",
        "name": "min"
      },
      {
        "type": "number",
        "name": "max"
      }
    ],
    "namespace": "reaper",
    "description": "Returns DBL_MIN and DBL_MAX for this system."
  },
  {
    "form": "(reaper.ImGui_NumericLimits_Float ) :: (number number)",
    "doc": "(reaper.ImGui_NumericLimits_Float ) :: (number number)\nReturns FLT_MIN and FLT_MAX for this system.",
    "name": "ImGui_NumericLimits_Float",
    "returns": [
      {
        "type": "number",
        "name": "min"
      },
      {
        "type": "number",
        "name": "max"
      }
    ],
    "namespace": "reaper",
    "description": "Returns FLT_MIN and FLT_MAX for this system."
  },
  {
    "form": "(reaper.ImGui_NumericLimits_Int ) :: (integer integer)",
    "doc": "(reaper.ImGui_NumericLimits_Int ) :: (integer integer)\nReturns INT_MIN and INT_MAX for this system.",
    "name": "ImGui_NumericLimits_Int",
    "returns": [
      {
        "type": "integer",
        "name": "min"
      },
      {
        "type": "integer",
        "name": "max"
      }
    ],
    "namespace": "reaper",
    "description": "Returns INT_MIN and INT_MAX for this system."
  },
  {
    "form": "(reaper.ImGui_OpenPopup ctx str_id ?popup_flagsIn) :: nil",
    "doc": "(reaper.ImGui_OpenPopup ctx str_id ?popup_flagsIn) :: nil\nctx :: ImGui_Context\nstr_id :: string\npopup_flagsIn :: integer (optional)\nSet popup state to open (don't call every frame!).\nImGuiPopupFlags are available for opening options.\nIf not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\nUse PopupFlags_NoOpenOverExistingPopup to avoid opening a popup if there's\nalready one at the same level.",
    "name": "ImGui_OpenPopup",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "str_id"
      },
      {
        "type": "integer",
        "name": "popup_flagsIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Set popup state to open (don't call every frame!).\nImGuiPopupFlags are available for opening options.\nIf not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\nUse PopupFlags_NoOpenOverExistingPopup to avoid opening a popup if there's\nalready one at the same level."
  },
  {
    "form": "(reaper.ImGui_OpenPopupOnItemClick ctx ?str_idIn ?popup_flagsIn) :: nil",
    "doc": "(reaper.ImGui_OpenPopupOnItemClick ctx ?str_idIn ?popup_flagsIn) :: nil\nctx :: ImGui_Context\nstr_idIn :: string (optional)\npopup_flagsIn :: integer (optional)\nHelper to open popup when clicked on last item. return true when just opened.\n(Note: actually triggers on the mouse _released_ event to be consistent with\npopup behaviors.)",
    "name": "ImGui_OpenPopupOnItemClick",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "str_idIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "popup_flagsIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Helper to open popup when clicked on last item. return true when just opened.\n(Note: actually triggers on the mouse _released_ event to be consistent with\npopup behaviors.)"
  },
  {
    "form": "(reaper.ImGui_PlotHistogram ctx label values ?values_offsetIn ?overlay_textIn ?scale_minIn ?scale_maxIn ?graph_size_wIn ?graph_size_hIn) :: nil",
    "doc": "(reaper.ImGui_PlotHistogram ctx label values ?values_offsetIn ?overlay_textIn ?scale_minIn ?scale_maxIn ?graph_size_wIn ?graph_size_hIn) :: nil\nctx :: ImGui_Context\nlabel :: string\nvalues :: reaper_array\nvalues_offsetIn :: integer (optional)\noverlay_textIn :: string (optional)\nscale_minIn :: number (optional)\nscale_maxIn :: number (optional)\ngraph_size_wIn :: number (optional)\ngraph_size_hIn :: number (optional)\n",
    "name": "ImGui_PlotHistogram",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "reaper_array",
        "name": "values"
      },
      {
        "type": "integer",
        "name": "values_offsetIn",
        "optional": true
      },
      {
        "type": "string",
        "name": "overlay_textIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "scale_minIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "scale_maxIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "graph_size_wIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "graph_size_hIn",
        "optional": true
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_PlotLines ctx label values ?values_offsetIn ?overlay_textIn ?scale_minIn ?scale_maxIn ?graph_size_wIn ?graph_size_hIn) :: nil",
    "doc": "(reaper.ImGui_PlotLines ctx label values ?values_offsetIn ?overlay_textIn ?scale_minIn ?scale_maxIn ?graph_size_wIn ?graph_size_hIn) :: nil\nctx :: ImGui_Context\nlabel :: string\nvalues :: reaper_array\nvalues_offsetIn :: integer (optional)\noverlay_textIn :: string (optional)\nscale_minIn :: number (optional)\nscale_maxIn :: number (optional)\ngraph_size_wIn :: number (optional)\ngraph_size_hIn :: number (optional)\n",
    "name": "ImGui_PlotLines",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "reaper_array",
        "name": "values"
      },
      {
        "type": "integer",
        "name": "values_offsetIn",
        "optional": true
      },
      {
        "type": "string",
        "name": "overlay_textIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "scale_minIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "scale_maxIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "graph_size_wIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "graph_size_hIn",
        "optional": true
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_PointConvertNative ctx x y ?to_nativeIn) :: (number number)",
    "doc": "(reaper.ImGui_PointConvertNative ctx x y ?to_nativeIn) :: (number number)\nctx :: ImGui_Context\nx :: number\ny :: number\nto_nativeIn :: boolean (optional)\nConvert a position from the current platform's native coordinate position\nsystem to ReaImGui global coordinates (or vice versa).\nThis effectively flips the Y coordinate on macOS and applies HiDPI scaling on\nWindows and Linux.",
    "name": "ImGui_PointConvertNative",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "x"
      },
      {
        "type": "number",
        "name": "y"
      },
      {
        "type": "boolean",
        "name": "to_nativeIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "x"
      },
      {
        "type": "number",
        "name": "y"
      }
    ],
    "namespace": "reaper",
    "description": "Convert a position from the current platform's native coordinate position\nsystem to ReaImGui global coordinates (or vice versa).\nThis effectively flips the Y coordinate on macOS and applies HiDPI scaling on\nWindows and Linux."
  },
  {
    "form": "(reaper.ImGui_PopButtonRepeat ctx) :: nil",
    "doc": "(reaper.ImGui_PopButtonRepeat ctx) :: nil\nctx :: ImGui_Context\nSee PushButtonRepeat",
    "name": "ImGui_PopButtonRepeat",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "See PushButtonRepeat"
  },
  {
    "form": "(reaper.ImGui_PopClipRect ctx) :: nil",
    "doc": "(reaper.ImGui_PopClipRect ctx) :: nil\nctx :: ImGui_Context\nSee PushClipRect",
    "name": "ImGui_PopClipRect",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "See PushClipRect"
  },
  {
    "form": "(reaper.ImGui_PopFont ctx) :: nil",
    "doc": "(reaper.ImGui_PopFont ctx) :: nil\nctx :: ImGui_Context\nSee PushFont.",
    "name": "ImGui_PopFont",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "See PushFont."
  },
  {
    "form": "(reaper.ImGui_PopID ctx) :: nil",
    "doc": "(reaper.ImGui_PopID ctx) :: nil\nctx :: ImGui_Context\nPop from the ID stack.",
    "name": "ImGui_PopID",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Pop from the ID stack."
  },
  {
    "form": "(reaper.ImGui_PopItemWidth ctx) :: nil",
    "doc": "(reaper.ImGui_PopItemWidth ctx) :: nil\nctx :: ImGui_Context\nSee PushItemWidth",
    "name": "ImGui_PopItemWidth",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "See PushItemWidth"
  },
  {
    "form": "(reaper.ImGui_PopStyleColor ctx ?countIn) :: nil",
    "doc": "(reaper.ImGui_PopStyleColor ctx ?countIn) :: nil\nctx :: ImGui_Context\ncountIn :: integer (optional)\n",
    "name": "ImGui_PopStyleColor",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "countIn",
        "optional": true
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_PopStyleVar ctx ?countIn) :: nil",
    "doc": "(reaper.ImGui_PopStyleVar ctx ?countIn) :: nil\nctx :: ImGui_Context\ncountIn :: integer (optional)\nReset a style variable.",
    "name": "ImGui_PopStyleVar",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "countIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Reset a style variable."
  },
  {
    "form": "(reaper.ImGui_PopTabStop ctx) :: nil",
    "doc": "(reaper.ImGui_PopTabStop ctx) :: nil\nctx :: ImGui_Context\nSee PushTabStop",
    "name": "ImGui_PopTabStop",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "See PushTabStop"
  },
  {
    "form": "(reaper.ImGui_PopTextWrapPos ctx) :: nil",
    "doc": "(reaper.ImGui_PopTextWrapPos ctx) :: nil\nctx :: ImGui_Context\n",
    "name": "ImGui_PopTextWrapPos",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_PopupFlags_AnyPopup ) :: (integer)",
    "doc": "(reaper.ImGui_PopupFlags_AnyPopup ) :: (integer)\nPopupFlags_AnyPopupId | PopupFlags_AnyPopupLevel",
    "name": "ImGui_PopupFlags_AnyPopup",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "PopupFlags_AnyPopupId | PopupFlags_AnyPopupLevel"
  },
  {
    "form": "(reaper.ImGui_PopupFlags_AnyPopupId ) :: (integer)",
    "doc": "(reaper.ImGui_PopupFlags_AnyPopupId ) :: (integer)\nFor IsPopupOpen: ignore the str_id parameter and test for any popup.",
    "name": "ImGui_PopupFlags_AnyPopupId",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "For IsPopupOpen: ignore the str_id parameter and test for any popup."
  },
  {
    "form": "(reaper.ImGui_PopupFlags_AnyPopupLevel ) :: (integer)",
    "doc": "(reaper.ImGui_PopupFlags_AnyPopupLevel ) :: (integer)\nFor IsPopupOpen: search/test at any level of the popup stack\n  (default test in the current level).",
    "name": "ImGui_PopupFlags_AnyPopupLevel",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "For IsPopupOpen: search/test at any level of the popup stack\n  (default test in the current level)."
  },
  {
    "form": "(reaper.ImGui_PopupFlags_MouseButtonLeft ) :: (integer)",
    "doc": "(reaper.ImGui_PopupFlags_MouseButtonLeft ) :: (integer)\nFor BeginPopupContext*(): open on Left Mouse release.\n   Guaranteed to always be == 0 (same as MouseButton_Left).",
    "name": "ImGui_PopupFlags_MouseButtonLeft",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "For BeginPopupContext*(): open on Left Mouse release.\n   Guaranteed to always be == 0 (same as MouseButton_Left)."
  },
  {
    "form": "(reaper.ImGui_PopupFlags_MouseButtonMiddle ) :: (integer)",
    "doc": "(reaper.ImGui_PopupFlags_MouseButtonMiddle ) :: (integer)\nFor BeginPopupContext*(): open on Middle Mouse release.\n   Guaranteed to always be == 2 (same as MouseButton_Middle).",
    "name": "ImGui_PopupFlags_MouseButtonMiddle",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "For BeginPopupContext*(): open on Middle Mouse release.\n   Guaranteed to always be == 2 (same as MouseButton_Middle)."
  },
  {
    "form": "(reaper.ImGui_PopupFlags_MouseButtonRight ) :: (integer)",
    "doc": "(reaper.ImGui_PopupFlags_MouseButtonRight ) :: (integer)\nFor BeginPopupContext*(): open on Right Mouse release.\n   Guaranteed to always be == 1 (same as MouseButton_Right).",
    "name": "ImGui_PopupFlags_MouseButtonRight",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "For BeginPopupContext*(): open on Right Mouse release.\n   Guaranteed to always be == 1 (same as MouseButton_Right)."
  },
  {
    "form": "(reaper.ImGui_PopupFlags_NoOpenOverExistingPopup ) :: (integer)",
    "doc": "(reaper.ImGui_PopupFlags_NoOpenOverExistingPopup ) :: (integer)\nFor OpenPopup*(), BeginPopupContext*(): don't open if there's already a popup\n   at the same level of the popup stack.",
    "name": "ImGui_PopupFlags_NoOpenOverExistingPopup",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "For OpenPopup*(), BeginPopupContext*(): don't open if there's already a popup\n   at the same level of the popup stack."
  },
  {
    "form": "(reaper.ImGui_PopupFlags_NoOpenOverItems ) :: (integer)",
    "doc": "(reaper.ImGui_PopupFlags_NoOpenOverItems ) :: (integer)\nFor BeginPopupContextWindow: don't return true when hovering items,\n   only when hovering empty space.",
    "name": "ImGui_PopupFlags_NoOpenOverItems",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "For BeginPopupContextWindow: don't return true when hovering items,\n   only when hovering empty space."
  },
  {
    "form": "(reaper.ImGui_PopupFlags_None ) :: (integer)",
    "doc": "(reaper.ImGui_PopupFlags_None ) :: (integer)\n",
    "name": "ImGui_PopupFlags_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_ProgressBar ctx fraction ?size_arg_wIn ?size_arg_hIn ?overlayIn) :: nil",
    "doc": "(reaper.ImGui_ProgressBar ctx fraction ?size_arg_wIn ?size_arg_hIn ?overlayIn) :: nil\nctx :: ImGui_Context\nfraction :: number\nsize_arg_wIn :: number (optional)\nsize_arg_hIn :: number (optional)\noverlayIn :: string (optional)\n",
    "name": "ImGui_ProgressBar",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "fraction"
      },
      {
        "type": "number",
        "name": "size_arg_wIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "size_arg_hIn",
        "optional": true
      },
      {
        "type": "string",
        "name": "overlayIn",
        "optional": true
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_PushButtonRepeat ctx repeat) :: nil",
    "doc": "(reaper.ImGui_PushButtonRepeat ctx repeat) :: nil\nctx :: ImGui_Context\nrepeat :: boolean\nIn 'repeat' mode, Button*() functions return repeated true in a typematic\nmanner (using ConfigVar_KeyRepeatDelay/ConfigVar_KeyRepeatRate settings).\nNote that you can call IsItemActive after any Button to tell if the button is\nheld in the current frame.",
    "name": "ImGui_PushButtonRepeat",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "boolean",
        "name": "repeat"
      }
    ],
    "namespace": "reaper",
    "description": "In 'repeat' mode, Button*() functions return repeated true in a typematic\nmanner (using ConfigVar_KeyRepeatDelay/ConfigVar_KeyRepeatRate settings).\nNote that you can call IsItemActive after any Button to tell if the button is\nheld in the current frame."
  },
  {
    "form": "(reaper.ImGui_PushClipRect ctx clip_rect_min_x clip_rect_min_y clip_rect_max_x clip_rect_max_y intersect_with_current_clip_rect) :: nil",
    "doc": "(reaper.ImGui_PushClipRect ctx clip_rect_min_x clip_rect_min_y clip_rect_max_x clip_rect_max_y intersect_with_current_clip_rect) :: nil\nctx :: ImGui_Context\nclip_rect_min_x :: number\nclip_rect_min_y :: number\nclip_rect_max_x :: number\nclip_rect_max_y :: number\nintersect_with_current_clip_rect :: boolean\n",
    "name": "ImGui_PushClipRect",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "clip_rect_min_x"
      },
      {
        "type": "number",
        "name": "clip_rect_min_y"
      },
      {
        "type": "number",
        "name": "clip_rect_max_x"
      },
      {
        "type": "number",
        "name": "clip_rect_max_y"
      },
      {
        "type": "boolean",
        "name": "intersect_with_current_clip_rect"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_PushFont ctx font) :: nil",
    "doc": "(reaper.ImGui_PushFont ctx font) :: nil\nctx :: ImGui_Context\nfont :: ImGui_Font\nChange the current font. Use nil to push the default font.\nThe font object must have been registered using Attach. See PopFont.",
    "name": "ImGui_PushFont",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "ImGui_Font",
        "name": "font"
      }
    ],
    "namespace": "reaper",
    "description": "Change the current font. Use nil to push the default font.\nThe font object must have been registered using Attach. See PopFont."
  },
  {
    "form": "(reaper.ImGui_PushID ctx str_id) :: nil",
    "doc": "(reaper.ImGui_PushID ctx str_id) :: nil\nctx :: ImGui_Context\nstr_id :: string\nPush string into the ID stack.",
    "name": "ImGui_PushID",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "str_id"
      }
    ],
    "namespace": "reaper",
    "description": "Push string into the ID stack."
  },
  {
    "form": "(reaper.ImGui_PushItemWidth ctx item_width) :: nil",
    "doc": "(reaper.ImGui_PushItemWidth ctx item_width) :: nil\nctx :: ImGui_Context\nitem_width :: number\nPush width of items for common large \"item+label\" widgets.\n- \\>0.0: width in pixels\n- <0.0 align xx pixels to the right of window\n  (so -FLT_MIN always align width to the right side)\n- 0.0 = default to ~2/3 of windows width.",
    "name": "ImGui_PushItemWidth",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "item_width"
      }
    ],
    "namespace": "reaper",
    "description": "Push width of items for common large \"item+label\" widgets.\n- \\>0.0: width in pixels\n- <0.0 align xx pixels to the right of window\n  (so -FLT_MIN always align width to the right side)\n- 0.0 = default to ~2/3 of windows width."
  },
  {
    "form": "(reaper.ImGui_PushStyleColor ctx idx col_rgba) :: nil",
    "doc": "(reaper.ImGui_PushStyleColor ctx idx col_rgba) :: nil\nctx :: ImGui_Context\nidx :: integer\ncol_rgba :: integer\nTemporarily modify a style color.\nCall PopStyleColor to undo after use (before the end of the frame).\nSee Col_* for available style colors.",
    "name": "ImGui_PushStyleColor",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "idx"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      }
    ],
    "namespace": "reaper",
    "description": "Temporarily modify a style color.\nCall PopStyleColor to undo after use (before the end of the frame).\nSee Col_* for available style colors."
  },
  {
    "form": "(reaper.ImGui_PushStyleVar ctx var_idx val1 ?val2In) :: nil",
    "doc": "(reaper.ImGui_PushStyleVar ctx var_idx val1 ?val2In) :: nil\nctx :: ImGui_Context\nvar_idx :: integer\nval1 :: number\nval2In :: number (optional)\nTemporarily modify a style variable.\nCall PopStyleVar to undo after use (before the end of the frame).\nSee StyleVar_* for possible values of 'var_idx'.",
    "name": "ImGui_PushStyleVar",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "var_idx"
      },
      {
        "type": "number",
        "name": "val1"
      },
      {
        "type": "number",
        "name": "val2In",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Temporarily modify a style variable.\nCall PopStyleVar to undo after use (before the end of the frame).\nSee StyleVar_* for possible values of 'var_idx'."
  },
  {
    "form": "(reaper.ImGui_PushTabStop ctx tab_stop) :: nil",
    "doc": "(reaper.ImGui_PushTabStop ctx tab_stop) :: nil\nctx :: ImGui_Context\ntab_stop :: boolean\nAllow focusing using TAB/Shift-TAB, enabled by default but you can disable it\nfor certain widgets",
    "name": "ImGui_PushTabStop",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "boolean",
        "name": "tab_stop"
      }
    ],
    "namespace": "reaper",
    "description": "Allow focusing using TAB/Shift-TAB, enabled by default but you can disable it\nfor certain widgets"
  },
  {
    "form": "(reaper.ImGui_PushTextWrapPos ctx ?wrap_local_pos_xIn) :: nil",
    "doc": "(reaper.ImGui_PushTextWrapPos ctx ?wrap_local_pos_xIn) :: nil\nctx :: ImGui_Context\nwrap_local_pos_xIn :: number (optional)\nPush word-wrapping position for Text*() commands.\n-  < 0.0: no wrapping\n-  = 0.0: wrap to end of window (or column)\n- \\> 0.0: wrap at 'wrap_pos_x' position in window local space.",
    "name": "ImGui_PushTextWrapPos",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "wrap_local_pos_xIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Push word-wrapping position for Text*() commands.\n-  < 0.0: no wrapping\n-  = 0.0: wrap to end of window (or column)\n- \\> 0.0: wrap at 'wrap_pos_x' position in window local space."
  },
  {
    "form": "(reaper.ImGui_RadioButton ctx label active) :: (boolean)",
    "doc": "(reaper.ImGui_RadioButton ctx label active) :: (boolean)\nctx :: ImGui_Context\nlabel :: string\nactive :: boolean\nUse with e.g. if (RadioButton(\"one\", my_value==1)) { my_value = 1; }",
    "name": "ImGui_RadioButton",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "boolean",
        "name": "active"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Use with e.g. if (RadioButton(\"one\", my_value==1)) { my_value = 1; }"
  },
  {
    "form": "(reaper.ImGui_RadioButtonEx ctx label v v_button) :: (boolean integer)",
    "doc": "(reaper.ImGui_RadioButtonEx ctx label v v_button) :: (boolean integer)\nctx :: ImGui_Context\nlabel :: string\nv :: integer\nv_button :: integer\nShortcut to handle RadioButton's example pattern when value is an integer",
    "name": "ImGui_RadioButtonEx",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "v"
      },
      {
        "type": "integer",
        "name": "v_button"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "v"
      }
    ],
    "namespace": "reaper",
    "description": "Shortcut to handle RadioButton's example pattern when value is an integer"
  },
  {
    "form": "(reaper.ImGui_ResetMouseDragDelta ctx ?buttonIn) :: nil",
    "doc": "(reaper.ImGui_ResetMouseDragDelta ctx ?buttonIn) :: nil\nctx :: ImGui_Context\nbuttonIn :: integer (optional)\n",
    "name": "ImGui_ResetMouseDragDelta",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "buttonIn",
        "optional": true
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_SameLine ctx ?offset_from_start_xIn ?spacingIn) :: nil",
    "doc": "(reaper.ImGui_SameLine ctx ?offset_from_start_xIn ?spacingIn) :: nil\nctx :: ImGui_Context\noffset_from_start_xIn :: number (optional)\nspacingIn :: number (optional)\nCall between widgets or groups to layout them horizontally.\nX position given in window coordinates.",
    "name": "ImGui_SameLine",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "offset_from_start_xIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "spacingIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Call between widgets or groups to layout them horizontally.\nX position given in window coordinates."
  },
  {
    "form": "(reaper.ImGui_Selectable ctx label p_selected ?flagsIn ?size_wIn ?size_hIn) :: (boolean boolean)",
    "doc": "(reaper.ImGui_Selectable ctx label p_selected ?flagsIn ?size_wIn ?size_hIn) :: (boolean boolean)\nctx :: ImGui_Context\nlabel :: string\np_selected :: boolean\nflagsIn :: integer (optional)\nsize_wIn :: number (optional)\nsize_hIn :: number (optional)\n",
    "name": "ImGui_Selectable",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "boolean",
        "name": "p_selected"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "size_wIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "size_hIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "p_selected"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_SelectableFlags_AllowDoubleClick ) :: (integer)",
    "doc": "(reaper.ImGui_SelectableFlags_AllowDoubleClick ) :: (integer)\nGenerate press events on double clicks too.",
    "name": "ImGui_SelectableFlags_AllowDoubleClick",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Generate press events on double clicks too."
  },
  {
    "form": "(reaper.ImGui_SelectableFlags_AllowItemOverlap ) :: (integer)",
    "doc": "(reaper.ImGui_SelectableFlags_AllowItemOverlap ) :: (integer)\nHit testing to allow subsequent widgets to overlap this one.",
    "name": "ImGui_SelectableFlags_AllowItemOverlap",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Hit testing to allow subsequent widgets to overlap this one."
  },
  {
    "form": "(reaper.ImGui_SelectableFlags_Disabled ) :: (integer)",
    "doc": "(reaper.ImGui_SelectableFlags_Disabled ) :: (integer)\nCannot be selected, display grayed out text.",
    "name": "ImGui_SelectableFlags_Disabled",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Cannot be selected, display grayed out text."
  },
  {
    "form": "(reaper.ImGui_SelectableFlags_DontClosePopups ) :: (integer)",
    "doc": "(reaper.ImGui_SelectableFlags_DontClosePopups ) :: (integer)\nClicking this doesn't close parent popup window.",
    "name": "ImGui_SelectableFlags_DontClosePopups",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Clicking this doesn't close parent popup window."
  },
  {
    "form": "(reaper.ImGui_SelectableFlags_None ) :: (integer)",
    "doc": "(reaper.ImGui_SelectableFlags_None ) :: (integer)\n",
    "name": "ImGui_SelectableFlags_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_SelectableFlags_SpanAllColumns ) :: (integer)",
    "doc": "(reaper.ImGui_SelectableFlags_SpanAllColumns ) :: (integer)\nSelectable frame can span all columns (text will still fit in current column).",
    "name": "ImGui_SelectableFlags_SpanAllColumns",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Selectable frame can span all columns (text will still fit in current column)."
  },
  {
    "form": "(reaper.ImGui_Separator ctx) :: nil",
    "doc": "(reaper.ImGui_Separator ctx) :: nil\nctx :: ImGui_Context\nSeparator, generally horizontal. inside a menu bar or in horizontal layout\nmode, this becomes a vertical separator.",
    "name": "ImGui_Separator",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Separator, generally horizontal. inside a menu bar or in horizontal layout\nmode, this becomes a vertical separator."
  },
  {
    "form": "(reaper.ImGui_SeparatorText ctx label) :: nil",
    "doc": "(reaper.ImGui_SeparatorText ctx label) :: nil\nctx :: ImGui_Context\nlabel :: string\nText formatted with an horizontal line",
    "name": "ImGui_SeparatorText",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      }
    ],
    "namespace": "reaper",
    "description": "Text formatted with an horizontal line"
  },
  {
    "form": "(reaper.ImGui_SetClipboardText ctx text) :: nil",
    "doc": "(reaper.ImGui_SetClipboardText ctx text) :: nil\nctx :: ImGui_Context\ntext :: string\nSee also the LogToClipboard function to capture GUI into clipboard,\nor easily output text data to the clipboard.",
    "name": "ImGui_SetClipboardText",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "text"
      }
    ],
    "namespace": "reaper",
    "description": "See also the LogToClipboard function to capture GUI into clipboard,\nor easily output text data to the clipboard."
  },
  {
    "form": "(reaper.ImGui_SetColorEditOptions ctx flags) :: nil",
    "doc": "(reaper.ImGui_SetColorEditOptions ctx flags) :: nil\nctx :: ImGui_Context\nflags :: integer\nPicker type, etc. User will be able to change many settings, unless you pass\nthe _NoOptions flag to your calls.",
    "name": "ImGui_SetColorEditOptions",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "flags"
      }
    ],
    "namespace": "reaper",
    "description": "Picker type, etc. User will be able to change many settings, unless you pass\nthe _NoOptions flag to your calls."
  },
  {
    "form": "(reaper.ImGui_SetConfigVar ctx var_idx value) :: nil",
    "doc": "(reaper.ImGui_SetConfigVar ctx var_idx value) :: nil\nctx :: ImGui_Context\nvar_idx :: integer\nvalue :: number\n",
    "name": "ImGui_SetConfigVar",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "var_idx"
      },
      {
        "type": "number",
        "name": "value"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_SetCursorPos ctx local_pos_x local_pos_y) :: nil",
    "doc": "(reaper.ImGui_SetCursorPos ctx local_pos_x local_pos_y) :: nil\nctx :: ImGui_Context\nlocal_pos_x :: number\nlocal_pos_y :: number\nCursor position in window",
    "name": "ImGui_SetCursorPos",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "local_pos_x"
      },
      {
        "type": "number",
        "name": "local_pos_y"
      }
    ],
    "namespace": "reaper",
    "description": "Cursor position in window"
  },
  {
    "form": "(reaper.ImGui_SetCursorPosX ctx local_x) :: nil",
    "doc": "(reaper.ImGui_SetCursorPosX ctx local_x) :: nil\nctx :: ImGui_Context\nlocal_x :: number\nCursor X position in window",
    "name": "ImGui_SetCursorPosX",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "local_x"
      }
    ],
    "namespace": "reaper",
    "description": "Cursor X position in window"
  },
  {
    "form": "(reaper.ImGui_SetCursorPosY ctx local_y) :: nil",
    "doc": "(reaper.ImGui_SetCursorPosY ctx local_y) :: nil\nctx :: ImGui_Context\nlocal_y :: number\nCursor Y position in window",
    "name": "ImGui_SetCursorPosY",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "local_y"
      }
    ],
    "namespace": "reaper",
    "description": "Cursor Y position in window"
  },
  {
    "form": "(reaper.ImGui_SetCursorScreenPos ctx pos_x pos_y) :: nil",
    "doc": "(reaper.ImGui_SetCursorScreenPos ctx pos_x pos_y) :: nil\nctx :: ImGui_Context\npos_x :: number\npos_y :: number\nCursor position in absolute screen coordinates.",
    "name": "ImGui_SetCursorScreenPos",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "pos_x"
      },
      {
        "type": "number",
        "name": "pos_y"
      }
    ],
    "namespace": "reaper",
    "description": "Cursor position in absolute screen coordinates."
  },
  {
    "form": "(reaper.ImGui_SetDragDropPayload ctx type data ?condIn) :: (boolean)",
    "doc": "(reaper.ImGui_SetDragDropPayload ctx type data ?condIn) :: (boolean)\nctx :: ImGui_Context\ntype :: string\ndata :: string\ncondIn :: integer (optional)\nThe type is a user defined string of maximum 32 characters.\nStrings starting with '_' are reserved for dear imgui internal types.\nData is copied and held by imgui.",
    "name": "ImGui_SetDragDropPayload",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "type"
      },
      {
        "type": "string",
        "name": "data"
      },
      {
        "type": "integer",
        "name": "condIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "The type is a user defined string of maximum 32 characters.\nStrings starting with '_' are reserved for dear imgui internal types.\nData is copied and held by imgui."
  },
  {
    "form": "(reaper.ImGui_SetItemAllowOverlap ctx) :: nil",
    "doc": "(reaper.ImGui_SetItemAllowOverlap ctx) :: nil\nctx :: ImGui_Context\nAllow last item to be overlapped by a subsequent item. sometimes useful with\ninvisible buttons, selectables, etc. to catch unused area.",
    "name": "ImGui_SetItemAllowOverlap",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Allow last item to be overlapped by a subsequent item. sometimes useful with\ninvisible buttons, selectables, etc. to catch unused area."
  },
  {
    "form": "(reaper.ImGui_SetItemDefaultFocus ctx) :: nil",
    "doc": "(reaper.ImGui_SetItemDefaultFocus ctx) :: nil\nctx :: ImGui_Context\nMake last item the default focused item of a window.",
    "name": "ImGui_SetItemDefaultFocus",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Make last item the default focused item of a window."
  },
  {
    "form": "(reaper.ImGui_SetKeyboardFocusHere ctx ?offsetIn) :: nil",
    "doc": "(reaper.ImGui_SetKeyboardFocusHere ctx ?offsetIn) :: nil\nctx :: ImGui_Context\noffsetIn :: integer (optional)\nFocus keyboard on the next widget. Use positive 'offset' to access sub\ncomponents of a multiple component widget. Use -1 to access previous widget.",
    "name": "ImGui_SetKeyboardFocusHere",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "offsetIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Focus keyboard on the next widget. Use positive 'offset' to access sub\ncomponents of a multiple component widget. Use -1 to access previous widget."
  },
  {
    "form": "(reaper.ImGui_SetMouseCursor ctx cursor_type) :: nil",
    "doc": "(reaper.ImGui_SetMouseCursor ctx cursor_type) :: nil\nctx :: ImGui_Context\ncursor_type :: integer\nSet desired mouse cursor shape. See MouseCursor_* for possible values.",
    "name": "ImGui_SetMouseCursor",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "cursor_type"
      }
    ],
    "namespace": "reaper",
    "description": "Set desired mouse cursor shape. See MouseCursor_* for possible values."
  },
  {
    "form": "(reaper.ImGui_SetNextFrameWantCaptureKeyboard ctx want_capture_keyboard) :: nil",
    "doc": "(reaper.ImGui_SetNextFrameWantCaptureKeyboard ctx want_capture_keyboard) :: nil\nctx :: ImGui_Context\nwant_capture_keyboard :: boolean\nRequest capture of keyboard shortcuts in REAPER's global scope for the next frame.",
    "name": "ImGui_SetNextFrameWantCaptureKeyboard",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "boolean",
        "name": "want_capture_keyboard"
      }
    ],
    "namespace": "reaper",
    "description": "Request capture of keyboard shortcuts in REAPER's global scope for the next frame."
  },
  {
    "form": "(reaper.ImGui_SetNextItemOpen ctx is_open ?condIn) :: nil",
    "doc": "(reaper.ImGui_SetNextItemOpen ctx is_open ?condIn) :: nil\nctx :: ImGui_Context\nis_open :: boolean\ncondIn :: integer (optional)\nSet next TreeNode/CollapsingHeader open state.\nCan also be done with the TreeNodeFlags_DefaultOpen flag.",
    "name": "ImGui_SetNextItemOpen",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "boolean",
        "name": "is_open"
      },
      {
        "type": "integer",
        "name": "condIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Set next TreeNode/CollapsingHeader open state.\nCan also be done with the TreeNodeFlags_DefaultOpen flag."
  },
  {
    "form": "(reaper.ImGui_SetNextItemWidth ctx item_width) :: nil",
    "doc": "(reaper.ImGui_SetNextItemWidth ctx item_width) :: nil\nctx :: ImGui_Context\nitem_width :: number\nSet width of the _next_ common large \"item+label\" widget.\n- \\>0.0: width in pixels\n- <0.0 align xx pixels to the right of window\n  (so -FLT_MIN always align width to the right side)",
    "name": "ImGui_SetNextItemWidth",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "item_width"
      }
    ],
    "namespace": "reaper",
    "description": "Set width of the _next_ common large \"item+label\" widget.\n- \\>0.0: width in pixels\n- <0.0 align xx pixels to the right of window\n  (so -FLT_MIN always align width to the right side)"
  },
  {
    "form": "(reaper.ImGui_SetNextWindowBgAlpha ctx alpha) :: nil",
    "doc": "(reaper.ImGui_SetNextWindowBgAlpha ctx alpha) :: nil\nctx :: ImGui_Context\nalpha :: number\nSet next window background color alpha. Helper to easily override the Alpha\ncomponent of Col_WindowBg/Col_ChildBg/Col_PopupBg.\nYou may also use WindowFlags_NoBackground for a fully transparent window.",
    "name": "ImGui_SetNextWindowBgAlpha",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "alpha"
      }
    ],
    "namespace": "reaper",
    "description": "Set next window background color alpha. Helper to easily override the Alpha\ncomponent of Col_WindowBg/Col_ChildBg/Col_PopupBg.\nYou may also use WindowFlags_NoBackground for a fully transparent window."
  },
  {
    "form": "(reaper.ImGui_SetNextWindowCollapsed ctx collapsed ?condIn) :: nil",
    "doc": "(reaper.ImGui_SetNextWindowCollapsed ctx collapsed ?condIn) :: nil\nctx :: ImGui_Context\ncollapsed :: boolean\ncondIn :: integer (optional)\nSet next window collapsed state.",
    "name": "ImGui_SetNextWindowCollapsed",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "boolean",
        "name": "collapsed"
      },
      {
        "type": "integer",
        "name": "condIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Set next window collapsed state."
  },
  {
    "form": "(reaper.ImGui_SetNextWindowContentSize ctx size_w size_h) :: nil",
    "doc": "(reaper.ImGui_SetNextWindowContentSize ctx size_w size_h) :: nil\nctx :: ImGui_Context\nsize_w :: number\nsize_h :: number\nSet next window content size (~ scrollable client area, which enforce the\nrange of scrollbars). Not including window decorations (title bar, menu bar,\netc.) nor StyleVar_WindowPadding. set an axis to 0.0 to leave it automatic.",
    "name": "ImGui_SetNextWindowContentSize",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "size_w"
      },
      {
        "type": "number",
        "name": "size_h"
      }
    ],
    "namespace": "reaper",
    "description": "Set next window content size (~ scrollable client area, which enforce the\nrange of scrollbars). Not including window decorations (title bar, menu bar,\netc.) nor StyleVar_WindowPadding. set an axis to 0.0 to leave it automatic."
  },
  {
    "form": "(reaper.ImGui_SetNextWindowDockID ctx dock_id ?condIn) :: nil",
    "doc": "(reaper.ImGui_SetNextWindowDockID ctx dock_id ?condIn) :: nil\nctx :: ImGui_Context\ndock_id :: integer\ncondIn :: integer (optional)\n",
    "name": "ImGui_SetNextWindowDockID",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "dock_id"
      },
      {
        "type": "integer",
        "name": "condIn",
        "optional": true
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_SetNextWindowFocus ctx) :: nil",
    "doc": "(reaper.ImGui_SetNextWindowFocus ctx) :: nil\nctx :: ImGui_Context\nSet next window to be focused / top-most.",
    "name": "ImGui_SetNextWindowFocus",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Set next window to be focused / top-most."
  },
  {
    "form": "(reaper.ImGui_SetNextWindowPos ctx pos_x pos_y ?condIn ?pivot_xIn ?pivot_yIn) :: nil",
    "doc": "(reaper.ImGui_SetNextWindowPos ctx pos_x pos_y ?condIn ?pivot_xIn ?pivot_yIn) :: nil\nctx :: ImGui_Context\npos_x :: number\npos_y :: number\ncondIn :: integer (optional)\npivot_xIn :: number (optional)\npivot_yIn :: number (optional)\nSet next window position. Use pivot=(0.5,0.5) to center on given point, etc.",
    "name": "ImGui_SetNextWindowPos",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "pos_x"
      },
      {
        "type": "number",
        "name": "pos_y"
      },
      {
        "type": "integer",
        "name": "condIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "pivot_xIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "pivot_yIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Set next window position. Use pivot=(0.5,0.5) to center on given point, etc."
  },
  {
    "form": "(reaper.ImGui_SetNextWindowScroll ctx scroll_x scroll_y) :: nil",
    "doc": "(reaper.ImGui_SetNextWindowScroll ctx scroll_x scroll_y) :: nil\nctx :: ImGui_Context\nscroll_x :: number\nscroll_y :: number\nSet next window scrolling value (use < 0.0 to not affect a given axis).",
    "name": "ImGui_SetNextWindowScroll",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "scroll_x"
      },
      {
        "type": "number",
        "name": "scroll_y"
      }
    ],
    "namespace": "reaper",
    "description": "Set next window scrolling value (use < 0.0 to not affect a given axis)."
  },
  {
    "form": "(reaper.ImGui_SetNextWindowSize ctx size_w size_h ?condIn) :: nil",
    "doc": "(reaper.ImGui_SetNextWindowSize ctx size_w size_h ?condIn) :: nil\nctx :: ImGui_Context\nsize_w :: number\nsize_h :: number\ncondIn :: integer (optional)\nSet next window size. set axis to 0.0 to force an auto-fit on this axis.",
    "name": "ImGui_SetNextWindowSize",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "size_w"
      },
      {
        "type": "number",
        "name": "size_h"
      },
      {
        "type": "integer",
        "name": "condIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Set next window size. set axis to 0.0 to force an auto-fit on this axis."
  },
  {
    "form": "(reaper.ImGui_SetNextWindowSizeConstraints ctx size_min_w size_min_h size_max_w size_max_h callbackIn) :: nil",
    "doc": "(reaper.ImGui_SetNextWindowSizeConstraints ctx size_min_w size_min_h size_max_w size_max_h callbackIn) :: nil\nctx :: ImGui_Context\nsize_min_w :: number\nsize_min_h :: number\nsize_max_w :: number\nsize_max_h :: number\ncallbackIn :: ImGui_Function\nSet next window size limits. Use -1,-1 on either X/Y axis to preserve the\ncurrent size. Use FLT_MAX (second return value of NumericLimits_Float) for no\nmaximum size. Sizes will be rounded down.",
    "name": "ImGui_SetNextWindowSizeConstraints",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "size_min_w"
      },
      {
        "type": "number",
        "name": "size_min_h"
      },
      {
        "type": "number",
        "name": "size_max_w"
      },
      {
        "type": "number",
        "name": "size_max_h"
      },
      {
        "type": "ImGui_Function",
        "name": "callbackIn"
      }
    ],
    "namespace": "reaper",
    "description": "Set next window size limits. Use -1,-1 on either X/Y axis to preserve the\ncurrent size. Use FLT_MAX (second return value of NumericLimits_Float) for no\nmaximum size. Sizes will be rounded down."
  },
  {
    "form": "(reaper.ImGui_SetScrollFromPosX ctx local_x ?center_x_ratioIn) :: nil",
    "doc": "(reaper.ImGui_SetScrollFromPosX ctx local_x ?center_x_ratioIn) :: nil\nctx :: ImGui_Context\nlocal_x :: number\ncenter_x_ratioIn :: number (optional)\nAdjust scrolling amount to make given position visible.\nGenerally GetCursorStartPos() + offset to compute a valid position.",
    "name": "ImGui_SetScrollFromPosX",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "local_x"
      },
      {
        "type": "number",
        "name": "center_x_ratioIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Adjust scrolling amount to make given position visible.\nGenerally GetCursorStartPos() + offset to compute a valid position."
  },
  {
    "form": "(reaper.ImGui_SetScrollFromPosY ctx local_y ?center_y_ratioIn) :: nil",
    "doc": "(reaper.ImGui_SetScrollFromPosY ctx local_y ?center_y_ratioIn) :: nil\nctx :: ImGui_Context\nlocal_y :: number\ncenter_y_ratioIn :: number (optional)\nAdjust scrolling amount to make given position visible.\nGenerally GetCursorStartPos() + offset to compute a valid position.",
    "name": "ImGui_SetScrollFromPosY",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "local_y"
      },
      {
        "type": "number",
        "name": "center_y_ratioIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Adjust scrolling amount to make given position visible.\nGenerally GetCursorStartPos() + offset to compute a valid position."
  },
  {
    "form": "(reaper.ImGui_SetScrollHereX ctx ?center_x_ratioIn) :: nil",
    "doc": "(reaper.ImGui_SetScrollHereX ctx ?center_x_ratioIn) :: nil\nctx :: ImGui_Context\ncenter_x_ratioIn :: number (optional)\nAdjust scrolling amount to make current cursor position visible.\ncenter_x_ratio=0.0: left, 0.5: center, 1.0: right.\nWhen using to make a \"default/current item\" visible,\nconsider using SetItemDefaultFocus instead.",
    "name": "ImGui_SetScrollHereX",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "center_x_ratioIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Adjust scrolling amount to make current cursor position visible.\ncenter_x_ratio=0.0: left, 0.5: center, 1.0: right.\nWhen using to make a \"default/current item\" visible,\nconsider using SetItemDefaultFocus instead."
  },
  {
    "form": "(reaper.ImGui_SetScrollHereY ctx ?center_y_ratioIn) :: nil",
    "doc": "(reaper.ImGui_SetScrollHereY ctx ?center_y_ratioIn) :: nil\nctx :: ImGui_Context\ncenter_y_ratioIn :: number (optional)\nAdjust scrolling amount to make current cursor position visible.\ncenter_y_ratio=0.0: top, 0.5: center, 1.0: bottom.\nWhen using to make a \"default/current item\" visible,\nconsider using SetItemDefaultFocus instead.",
    "name": "ImGui_SetScrollHereY",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "center_y_ratioIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Adjust scrolling amount to make current cursor position visible.\ncenter_y_ratio=0.0: top, 0.5: center, 1.0: bottom.\nWhen using to make a \"default/current item\" visible,\nconsider using SetItemDefaultFocus instead."
  },
  {
    "form": "(reaper.ImGui_SetScrollX ctx scroll_x) :: nil",
    "doc": "(reaper.ImGui_SetScrollX ctx scroll_x) :: nil\nctx :: ImGui_Context\nscroll_x :: number\nSet scrolling amount [0 .. GetScrollMaxX()]",
    "name": "ImGui_SetScrollX",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "scroll_x"
      }
    ],
    "namespace": "reaper",
    "description": "Set scrolling amount [0 .. GetScrollMaxX()]"
  },
  {
    "form": "(reaper.ImGui_SetScrollY ctx scroll_y) :: nil",
    "doc": "(reaper.ImGui_SetScrollY ctx scroll_y) :: nil\nctx :: ImGui_Context\nscroll_y :: number\nSet scrolling amount [0 .. GetScrollMaxY()]",
    "name": "ImGui_SetScrollY",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "scroll_y"
      }
    ],
    "namespace": "reaper",
    "description": "Set scrolling amount [0 .. GetScrollMaxY()]"
  },
  {
    "form": "(reaper.ImGui_SetTabItemClosed ctx tab_or_docked_window_label) :: nil",
    "doc": "(reaper.ImGui_SetTabItemClosed ctx tab_or_docked_window_label) :: nil\nctx :: ImGui_Context\ntab_or_docked_window_label :: string\nNotify TabBar or Docking system of a closed tab/window ahead\n(useful to reduce visual flicker on reorderable tab bars).\nFor tab-bar: call after BeginTabBar and before Tab submissions.\nOtherwise call with a window name.",
    "name": "ImGui_SetTabItemClosed",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "tab_or_docked_window_label"
      }
    ],
    "namespace": "reaper",
    "description": "Notify TabBar or Docking system of a closed tab/window ahead\n(useful to reduce visual flicker on reorderable tab bars).\nFor tab-bar: call after BeginTabBar and before Tab submissions.\nOtherwise call with a window name."
  },
  {
    "form": "(reaper.ImGui_SetTooltip ctx text) :: nil",
    "doc": "(reaper.ImGui_SetTooltip ctx text) :: nil\nctx :: ImGui_Context\ntext :: string\nSet a text-only tooltip, typically use with IsItemHovered. override any\nprevious call to SetTooltip.",
    "name": "ImGui_SetTooltip",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "text"
      }
    ],
    "namespace": "reaper",
    "description": "Set a text-only tooltip, typically use with IsItemHovered. override any\nprevious call to SetTooltip."
  },
  {
    "form": "(reaper.ImGui_SetWindowCollapsed ctx collapsed ?condIn) :: nil",
    "doc": "(reaper.ImGui_SetWindowCollapsed ctx collapsed ?condIn) :: nil\nctx :: ImGui_Context\ncollapsed :: boolean\ncondIn :: integer (optional)\n(Not recommended) Set current window collapsed state.\nPrefer using SetNextWindowCollapsed.",
    "name": "ImGui_SetWindowCollapsed",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "boolean",
        "name": "collapsed"
      },
      {
        "type": "integer",
        "name": "condIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "(Not recommended) Set current window collapsed state.\nPrefer using SetNextWindowCollapsed."
  },
  {
    "form": "(reaper.ImGui_SetWindowCollapsedEx ctx name collapsed ?condIn) :: nil",
    "doc": "(reaper.ImGui_SetWindowCollapsedEx ctx name collapsed ?condIn) :: nil\nctx :: ImGui_Context\nname :: string\ncollapsed :: boolean\ncondIn :: integer (optional)\nSet named window collapsed state.",
    "name": "ImGui_SetWindowCollapsedEx",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "boolean",
        "name": "collapsed"
      },
      {
        "type": "integer",
        "name": "condIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Set named window collapsed state."
  },
  {
    "form": "(reaper.ImGui_SetWindowFocus ctx) :: nil",
    "doc": "(reaper.ImGui_SetWindowFocus ctx) :: nil\nctx :: ImGui_Context\n(Not recommended) Set current window to be focused / top-most.\nPrefer using SetNextWindowFocus.",
    "name": "ImGui_SetWindowFocus",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "(Not recommended) Set current window to be focused / top-most.\nPrefer using SetNextWindowFocus."
  },
  {
    "form": "(reaper.ImGui_SetWindowFocusEx ctx name) :: nil",
    "doc": "(reaper.ImGui_SetWindowFocusEx ctx name) :: nil\nctx :: ImGui_Context\nname :: string\nSet named window to be focused / top-most. Use an empty name to remove focus.",
    "name": "ImGui_SetWindowFocusEx",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "name"
      }
    ],
    "namespace": "reaper",
    "description": "Set named window to be focused / top-most. Use an empty name to remove focus."
  },
  {
    "form": "(reaper.ImGui_SetWindowPos ctx pos_x pos_y ?condIn) :: nil",
    "doc": "(reaper.ImGui_SetWindowPos ctx pos_x pos_y ?condIn) :: nil\nctx :: ImGui_Context\npos_x :: number\npos_y :: number\ncondIn :: integer (optional)\n(Not recommended) Set current window position - call within Begin/End.\nPrefer using SetNextWindowPos, as this may incur tearing and minor side-effects.",
    "name": "ImGui_SetWindowPos",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "pos_x"
      },
      {
        "type": "number",
        "name": "pos_y"
      },
      {
        "type": "integer",
        "name": "condIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "(Not recommended) Set current window position - call within Begin/End.\nPrefer using SetNextWindowPos, as this may incur tearing and minor side-effects."
  },
  {
    "form": "(reaper.ImGui_SetWindowPosEx ctx name pos_x pos_y ?condIn) :: nil",
    "doc": "(reaper.ImGui_SetWindowPosEx ctx name pos_x pos_y ?condIn) :: nil\nctx :: ImGui_Context\nname :: string\npos_x :: number\npos_y :: number\ncondIn :: integer (optional)\nSet named window position.",
    "name": "ImGui_SetWindowPosEx",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "number",
        "name": "pos_x"
      },
      {
        "type": "number",
        "name": "pos_y"
      },
      {
        "type": "integer",
        "name": "condIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Set named window position."
  },
  {
    "form": "(reaper.ImGui_SetWindowSize ctx size_w size_h ?condIn) :: nil",
    "doc": "(reaper.ImGui_SetWindowSize ctx size_w size_h ?condIn) :: nil\nctx :: ImGui_Context\nsize_w :: number\nsize_h :: number\ncondIn :: integer (optional)\n(Not recommended) Set current window size - call within Begin/End.\nSet size_w and size_h to 0 to force an auto-fit.\nPrefer using SetNextWindowSize, as this may incur tearing and minor side-effects.",
    "name": "ImGui_SetWindowSize",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "size_w"
      },
      {
        "type": "number",
        "name": "size_h"
      },
      {
        "type": "integer",
        "name": "condIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "(Not recommended) Set current window size - call within Begin/End.\nSet size_w and size_h to 0 to force an auto-fit.\nPrefer using SetNextWindowSize, as this may incur tearing and minor side-effects."
  },
  {
    "form": "(reaper.ImGui_SetWindowSizeEx ctx name size_w size_h ?condIn) :: nil",
    "doc": "(reaper.ImGui_SetWindowSizeEx ctx name size_w size_h ?condIn) :: nil\nctx :: ImGui_Context\nname :: string\nsize_w :: number\nsize_h :: number\ncondIn :: integer (optional)\nSet named window size. Set axis to 0.0 to force an auto-fit on this axis.",
    "name": "ImGui_SetWindowSizeEx",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "number",
        "name": "size_w"
      },
      {
        "type": "number",
        "name": "size_h"
      },
      {
        "type": "integer",
        "name": "condIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Set named window size. Set axis to 0.0 to force an auto-fit on this axis."
  },
  {
    "form": "(reaper.ImGui_ShowAboutWindow ctx ?p_open) :: (boolean)",
    "doc": "(reaper.ImGui_ShowAboutWindow ctx ?p_open) :: (boolean)\nctx :: ImGui_Context\np_open :: boolean (optional)\nCreate About window.\nDisplay ReaImGui version, Dear ImGui version, credits and build/system information.",
    "name": "ImGui_ShowAboutWindow",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "boolean",
        "name": "p_open",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "p_open",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Create About window.\nDisplay ReaImGui version, Dear ImGui version, credits and build/system information."
  },
  {
    "form": "(reaper.ImGui_ShowDebugLogWindow ctx ?p_open) :: (boolean)",
    "doc": "(reaper.ImGui_ShowDebugLogWindow ctx ?p_open) :: (boolean)\nctx :: ImGui_Context\np_open :: boolean (optional)\nCreate Debug Log window. display a simplified log of important dear imgui events.",
    "name": "ImGui_ShowDebugLogWindow",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "boolean",
        "name": "p_open",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "p_open",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Create Debug Log window. display a simplified log of important dear imgui events."
  },
  {
    "form": "(reaper.ImGui_ShowMetricsWindow ctx ?p_open) :: (boolean)",
    "doc": "(reaper.ImGui_ShowMetricsWindow ctx ?p_open) :: (boolean)\nctx :: ImGui_Context\np_open :: boolean (optional)\nCreate Metrics/Debugger window.\nDisplay Dear ImGui internals: windows, draw commands, various internal state, etc.",
    "name": "ImGui_ShowMetricsWindow",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "boolean",
        "name": "p_open",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "p_open",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Create Metrics/Debugger window.\nDisplay Dear ImGui internals: windows, draw commands, various internal state, etc."
  },
  {
    "form": "(reaper.ImGui_ShowStackToolWindow ctx ?p_open) :: (boolean)",
    "doc": "(reaper.ImGui_ShowStackToolWindow ctx ?p_open) :: (boolean)\nctx :: ImGui_Context\np_open :: boolean (optional)\nCreate Stack Tool window. Hover items with mouse to query information about\nthe source of their unique ID.",
    "name": "ImGui_ShowStackToolWindow",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "boolean",
        "name": "p_open",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "p_open",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Create Stack Tool window. Hover items with mouse to query information about\nthe source of their unique ID."
  },
  {
    "form": "(reaper.ImGui_SliderAngle ctx label v_rad ?v_degrees_minIn ?v_degrees_maxIn ?formatIn ?flagsIn) :: (boolean number)",
    "doc": "(reaper.ImGui_SliderAngle ctx label v_rad ?v_degrees_minIn ?v_degrees_maxIn ?formatIn ?flagsIn) :: (boolean number)\nctx :: ImGui_Context\nlabel :: string\nv_rad :: number\nv_degrees_minIn :: number (optional)\nv_degrees_maxIn :: number (optional)\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_SliderAngle",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "number",
        "name": "v_rad"
      },
      {
        "type": "number",
        "name": "v_degrees_minIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "v_degrees_maxIn",
        "optional": true
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "v_rad"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_SliderDouble ctx label v v_min v_max ?formatIn ?flagsIn) :: (boolean number)",
    "doc": "(reaper.ImGui_SliderDouble ctx label v v_min v_max ?formatIn ?flagsIn) :: (boolean number)\nctx :: ImGui_Context\nlabel :: string\nv :: number\nv_min :: number\nv_max :: number\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_SliderDouble",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "number",
        "name": "v"
      },
      {
        "type": "number",
        "name": "v_min"
      },
      {
        "type": "number",
        "name": "v_max"
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "v"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_SliderDouble2 ctx label v1 v2 v_min v_max ?formatIn ?flagsIn) :: (boolean number number)",
    "doc": "(reaper.ImGui_SliderDouble2 ctx label v1 v2 v_min v_max ?formatIn ?flagsIn) :: (boolean number number)\nctx :: ImGui_Context\nlabel :: string\nv1 :: number\nv2 :: number\nv_min :: number\nv_max :: number\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_SliderDouble2",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "number",
        "name": "v1"
      },
      {
        "type": "number",
        "name": "v2"
      },
      {
        "type": "number",
        "name": "v_min"
      },
      {
        "type": "number",
        "name": "v_max"
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "v1"
      },
      {
        "type": "number",
        "name": "v2"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_SliderDouble3 ctx label v1 v2 v3 v_min v_max ?formatIn ?flagsIn) :: (boolean number number number)",
    "doc": "(reaper.ImGui_SliderDouble3 ctx label v1 v2 v3 v_min v_max ?formatIn ?flagsIn) :: (boolean number number number)\nctx :: ImGui_Context\nlabel :: string\nv1 :: number\nv2 :: number\nv3 :: number\nv_min :: number\nv_max :: number\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_SliderDouble3",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "number",
        "name": "v1"
      },
      {
        "type": "number",
        "name": "v2"
      },
      {
        "type": "number",
        "name": "v3"
      },
      {
        "type": "number",
        "name": "v_min"
      },
      {
        "type": "number",
        "name": "v_max"
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "v1"
      },
      {
        "type": "number",
        "name": "v2"
      },
      {
        "type": "number",
        "name": "v3"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_SliderDouble4 ctx label v1 v2 v3 v4 v_min v_max ?formatIn ?flagsIn) :: (boolean number number number number)",
    "doc": "(reaper.ImGui_SliderDouble4 ctx label v1 v2 v3 v4 v_min v_max ?formatIn ?flagsIn) :: (boolean number number number number)\nctx :: ImGui_Context\nlabel :: string\nv1 :: number\nv2 :: number\nv3 :: number\nv4 :: number\nv_min :: number\nv_max :: number\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_SliderDouble4",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "number",
        "name": "v1"
      },
      {
        "type": "number",
        "name": "v2"
      },
      {
        "type": "number",
        "name": "v3"
      },
      {
        "type": "number",
        "name": "v4"
      },
      {
        "type": "number",
        "name": "v_min"
      },
      {
        "type": "number",
        "name": "v_max"
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "v1"
      },
      {
        "type": "number",
        "name": "v2"
      },
      {
        "type": "number",
        "name": "v3"
      },
      {
        "type": "number",
        "name": "v4"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_SliderDoubleN ctx label values v_min v_max ?formatIn ?flagsIn) :: (boolean)",
    "doc": "(reaper.ImGui_SliderDoubleN ctx label values v_min v_max ?formatIn ?flagsIn) :: (boolean)\nctx :: ImGui_Context\nlabel :: string\nvalues :: reaper_array\nv_min :: number\nv_max :: number\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_SliderDoubleN",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "reaper_array",
        "name": "values"
      },
      {
        "type": "number",
        "name": "v_min"
      },
      {
        "type": "number",
        "name": "v_max"
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_SliderFlags_AlwaysClamp ) :: (integer)",
    "doc": "(reaper.ImGui_SliderFlags_AlwaysClamp ) :: (integer)\nClamp value to min/max bounds when input manually with CTRL+Click.\n   By default CTRL+Click allows going out of bounds.",
    "name": "ImGui_SliderFlags_AlwaysClamp",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Clamp value to min/max bounds when input manually with CTRL+Click.\n   By default CTRL+Click allows going out of bounds."
  },
  {
    "form": "(reaper.ImGui_SliderFlags_Logarithmic ) :: (integer)",
    "doc": "(reaper.ImGui_SliderFlags_Logarithmic ) :: (integer)\nMake the widget logarithmic (linear otherwise).\n   Consider using SliderFlags_NoRoundToFormat with this if using a format-string\n   with small amount of digits.",
    "name": "ImGui_SliderFlags_Logarithmic",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Make the widget logarithmic (linear otherwise).\n   Consider using SliderFlags_NoRoundToFormat with this if using a format-string\n   with small amount of digits."
  },
  {
    "form": "(reaper.ImGui_SliderFlags_NoInput ) :: (integer)",
    "doc": "(reaper.ImGui_SliderFlags_NoInput ) :: (integer)\nDisable CTRL+Click or Enter key allowing to input text directly into the widget.",
    "name": "ImGui_SliderFlags_NoInput",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable CTRL+Click or Enter key allowing to input text directly into the widget."
  },
  {
    "form": "(reaper.ImGui_SliderFlags_NoRoundToFormat ) :: (integer)",
    "doc": "(reaper.ImGui_SliderFlags_NoRoundToFormat ) :: (integer)\nDisable rounding underlying value to match precision of the display format\n   string (e.g. %.3f values are rounded to those 3 digits).",
    "name": "ImGui_SliderFlags_NoRoundToFormat",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable rounding underlying value to match precision of the display format\n   string (e.g. %.3f values are rounded to those 3 digits)."
  },
  {
    "form": "(reaper.ImGui_SliderFlags_None ) :: (integer)",
    "doc": "(reaper.ImGui_SliderFlags_None ) :: (integer)\n",
    "name": "ImGui_SliderFlags_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_SliderInt ctx label v v_min v_max ?formatIn ?flagsIn) :: (boolean integer)",
    "doc": "(reaper.ImGui_SliderInt ctx label v v_min v_max ?formatIn ?flagsIn) :: (boolean integer)\nctx :: ImGui_Context\nlabel :: string\nv :: integer\nv_min :: integer\nv_max :: integer\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_SliderInt",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "v"
      },
      {
        "type": "integer",
        "name": "v_min"
      },
      {
        "type": "integer",
        "name": "v_max"
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "v"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_SliderInt2 ctx label v1 v2 v_min v_max ?formatIn ?flagsIn) :: (boolean integer integer)",
    "doc": "(reaper.ImGui_SliderInt2 ctx label v1 v2 v_min v_max ?formatIn ?flagsIn) :: (boolean integer integer)\nctx :: ImGui_Context\nlabel :: string\nv1 :: integer\nv2 :: integer\nv_min :: integer\nv_max :: integer\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_SliderInt2",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "v1"
      },
      {
        "type": "integer",
        "name": "v2"
      },
      {
        "type": "integer",
        "name": "v_min"
      },
      {
        "type": "integer",
        "name": "v_max"
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "v1"
      },
      {
        "type": "integer",
        "name": "v2"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_SliderInt3 ctx label v1 v2 v3 v_min v_max ?formatIn ?flagsIn) :: (boolean integer integer integer)",
    "doc": "(reaper.ImGui_SliderInt3 ctx label v1 v2 v3 v_min v_max ?formatIn ?flagsIn) :: (boolean integer integer integer)\nctx :: ImGui_Context\nlabel :: string\nv1 :: integer\nv2 :: integer\nv3 :: integer\nv_min :: integer\nv_max :: integer\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_SliderInt3",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "v1"
      },
      {
        "type": "integer",
        "name": "v2"
      },
      {
        "type": "integer",
        "name": "v3"
      },
      {
        "type": "integer",
        "name": "v_min"
      },
      {
        "type": "integer",
        "name": "v_max"
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "v1"
      },
      {
        "type": "integer",
        "name": "v2"
      },
      {
        "type": "integer",
        "name": "v3"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_SliderInt4 ctx label v1 v2 v3 v4 v_min v_max ?formatIn ?flagsIn) :: (boolean integer integer integer integer)",
    "doc": "(reaper.ImGui_SliderInt4 ctx label v1 v2 v3 v4 v_min v_max ?formatIn ?flagsIn) :: (boolean integer integer integer integer)\nctx :: ImGui_Context\nlabel :: string\nv1 :: integer\nv2 :: integer\nv3 :: integer\nv4 :: integer\nv_min :: integer\nv_max :: integer\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_SliderInt4",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "v1"
      },
      {
        "type": "integer",
        "name": "v2"
      },
      {
        "type": "integer",
        "name": "v3"
      },
      {
        "type": "integer",
        "name": "v4"
      },
      {
        "type": "integer",
        "name": "v_min"
      },
      {
        "type": "integer",
        "name": "v_max"
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "v1"
      },
      {
        "type": "integer",
        "name": "v2"
      },
      {
        "type": "integer",
        "name": "v3"
      },
      {
        "type": "integer",
        "name": "v4"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_SmallButton ctx label) :: (boolean)",
    "doc": "(reaper.ImGui_SmallButton ctx label) :: (boolean)\nctx :: ImGui_Context\nlabel :: string\nButton with StyleVar_FramePadding=(0,0) to easily embed within text.",
    "name": "ImGui_SmallButton",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Button with StyleVar_FramePadding=(0,0) to easily embed within text."
  },
  {
    "form": "(reaper.ImGui_SortDirection_Ascending ) :: (integer)",
    "doc": "(reaper.ImGui_SortDirection_Ascending ) :: (integer)\nAscending = 0->9, A->Z etc.",
    "name": "ImGui_SortDirection_Ascending",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Ascending = 0->9, A->Z etc."
  },
  {
    "form": "(reaper.ImGui_SortDirection_Descending ) :: (integer)",
    "doc": "(reaper.ImGui_SortDirection_Descending ) :: (integer)\nDescending = 9->0, Z->A etc.",
    "name": "ImGui_SortDirection_Descending",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Descending = 9->0, Z->A etc."
  },
  {
    "form": "(reaper.ImGui_SortDirection_None ) :: (integer)",
    "doc": "(reaper.ImGui_SortDirection_None ) :: (integer)\n",
    "name": "ImGui_SortDirection_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_Spacing ctx) :: nil",
    "doc": "(reaper.ImGui_Spacing ctx) :: nil\nctx :: ImGui_Context\nAdd vertical spacing.",
    "name": "ImGui_Spacing",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Add vertical spacing."
  },
  {
    "form": "(reaper.ImGui_StyleVar_Alpha ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_Alpha ) :: (integer)\nGlobal alpha applies to everything in Dear ImGui.",
    "name": "ImGui_StyleVar_Alpha",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Global alpha applies to everything in Dear ImGui."
  },
  {
    "form": "(reaper.ImGui_StyleVar_ButtonTextAlign ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_ButtonTextAlign ) :: (integer)\nAlignment of button text when button is larger than text.\n   Defaults to (0.5, 0.5) (centered).",
    "name": "ImGui_StyleVar_ButtonTextAlign",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Alignment of button text when button is larger than text.\n   Defaults to (0.5, 0.5) (centered)."
  },
  {
    "form": "(reaper.ImGui_StyleVar_CellPadding ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_CellPadding ) :: (integer)\nPadding within a table cell.",
    "name": "ImGui_StyleVar_CellPadding",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Padding within a table cell."
  },
  {
    "form": "(reaper.ImGui_StyleVar_ChildBorderSize ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_ChildBorderSize ) :: (integer)\nThickness of border around child windows. Generally set to 0.0 or 1.0.\n   (Other values are not well tested and more CPU/GPU costly).",
    "name": "ImGui_StyleVar_ChildBorderSize",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Thickness of border around child windows. Generally set to 0.0 or 1.0.\n   (Other values are not well tested and more CPU/GPU costly)."
  },
  {
    "form": "(reaper.ImGui_StyleVar_ChildRounding ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_ChildRounding ) :: (integer)\nRadius of child window corners rounding. Set to 0.0 to have rectangular windows.",
    "name": "ImGui_StyleVar_ChildRounding",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Radius of child window corners rounding. Set to 0.0 to have rectangular windows."
  },
  {
    "form": "(reaper.ImGui_StyleVar_DisabledAlpha ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_DisabledAlpha ) :: (integer)\nAdditional alpha multiplier applied by BeginDisabled.\n  Multiply over current value of Alpha.",
    "name": "ImGui_StyleVar_DisabledAlpha",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Additional alpha multiplier applied by BeginDisabled.\n  Multiply over current value of Alpha."
  },
  {
    "form": "(reaper.ImGui_StyleVar_FrameBorderSize ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_FrameBorderSize ) :: (integer)\nThickness of border around frames. Generally set to 0.0 or 1.0.\n   (Other values are not well tested and more CPU/GPU costly).",
    "name": "ImGui_StyleVar_FrameBorderSize",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Thickness of border around frames. Generally set to 0.0 or 1.0.\n   (Other values are not well tested and more CPU/GPU costly)."
  },
  {
    "form": "(reaper.ImGui_StyleVar_FramePadding ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_FramePadding ) :: (integer)\nPadding within a framed rectangle (used by most widgets).",
    "name": "ImGui_StyleVar_FramePadding",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Padding within a framed rectangle (used by most widgets)."
  },
  {
    "form": "(reaper.ImGui_StyleVar_FrameRounding ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_FrameRounding ) :: (integer)\nRadius of frame corners rounding.\n   Set to 0.0 to have rectangular frame (used by most widgets).",
    "name": "ImGui_StyleVar_FrameRounding",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Radius of frame corners rounding.\n   Set to 0.0 to have rectangular frame (used by most widgets)."
  },
  {
    "form": "(reaper.ImGui_StyleVar_GrabMinSize ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_GrabMinSize ) :: (integer)\nMinimum width/height of a grab box for slider/scrollbar.",
    "name": "ImGui_StyleVar_GrabMinSize",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Minimum width/height of a grab box for slider/scrollbar."
  },
  {
    "form": "(reaper.ImGui_StyleVar_GrabRounding ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_GrabRounding ) :: (integer)\nRadius of grabs corners rounding. Set to 0.0 to have rectangular slider grabs.",
    "name": "ImGui_StyleVar_GrabRounding",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Radius of grabs corners rounding. Set to 0.0 to have rectangular slider grabs."
  },
  {
    "form": "(reaper.ImGui_StyleVar_IndentSpacing ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_IndentSpacing ) :: (integer)\nHorizontal indentation when e.g. entering a tree node.\n   Generally == (GetFontSize + StyleVar_FramePadding.x*2).",
    "name": "ImGui_StyleVar_IndentSpacing",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Horizontal indentation when e.g. entering a tree node.\n   Generally == (GetFontSize + StyleVar_FramePadding.x*2)."
  },
  {
    "form": "(reaper.ImGui_StyleVar_ItemInnerSpacing ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_ItemInnerSpacing ) :: (integer)\nHorizontal and vertical spacing between within elements of a composed widget\n   (e.g. a slider and its label).",
    "name": "ImGui_StyleVar_ItemInnerSpacing",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Horizontal and vertical spacing between within elements of a composed widget\n   (e.g. a slider and its label)."
  },
  {
    "form": "(reaper.ImGui_StyleVar_ItemSpacing ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_ItemSpacing ) :: (integer)\nHorizontal and vertical spacing between widgets/lines.",
    "name": "ImGui_StyleVar_ItemSpacing",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Horizontal and vertical spacing between widgets/lines."
  },
  {
    "form": "(reaper.ImGui_StyleVar_PopupBorderSize ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_PopupBorderSize ) :: (integer)\nThickness of border around popup/tooltip windows. Generally set to 0.0 or 1.0.\n   (Other values are not well tested and more CPU/GPU costly).",
    "name": "ImGui_StyleVar_PopupBorderSize",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Thickness of border around popup/tooltip windows. Generally set to 0.0 or 1.0.\n   (Other values are not well tested and more CPU/GPU costly)."
  },
  {
    "form": "(reaper.ImGui_StyleVar_PopupRounding ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_PopupRounding ) :: (integer)\nRadius of popup window corners rounding.\n   (Note that tooltip windows use StyleVar_WindowRounding.)",
    "name": "ImGui_StyleVar_PopupRounding",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Radius of popup window corners rounding.\n   (Note that tooltip windows use StyleVar_WindowRounding.)"
  },
  {
    "form": "(reaper.ImGui_StyleVar_ScrollbarRounding ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_ScrollbarRounding ) :: (integer)\nRadius of grab corners for scrollbar.",
    "name": "ImGui_StyleVar_ScrollbarRounding",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Radius of grab corners for scrollbar."
  },
  {
    "form": "(reaper.ImGui_StyleVar_ScrollbarSize ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_ScrollbarSize ) :: (integer)\nWidth of the vertical scrollbar, Height of the horizontal scrollbar.",
    "name": "ImGui_StyleVar_ScrollbarSize",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Width of the vertical scrollbar, Height of the horizontal scrollbar."
  },
  {
    "form": "(reaper.ImGui_StyleVar_SelectableTextAlign ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_SelectableTextAlign ) :: (integer)\nAlignment of selectable text. Defaults to (0.0, 0.0) (top-left aligned).\n   It's generally important to keep this left-aligned if you want to lay\n   multiple items on a same line.",
    "name": "ImGui_StyleVar_SelectableTextAlign",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Alignment of selectable text. Defaults to (0.0, 0.0) (top-left aligned).\n   It's generally important to keep this left-aligned if you want to lay\n   multiple items on a same line."
  },
  {
    "form": "(reaper.ImGui_StyleVar_SeparatorTextAlign ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_SeparatorTextAlign ) :: (integer)\nAlignment of text within the separator.\nDefaults to (0.0, 0.5) (left aligned, center).",
    "name": "ImGui_StyleVar_SeparatorTextAlign",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Alignment of text within the separator.\nDefaults to (0.0, 0.5) (left aligned, center)."
  },
  {
    "form": "(reaper.ImGui_StyleVar_SeparatorTextBorderSize ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_SeparatorTextBorderSize ) :: (integer)\nThickness of border in SeparatorText()",
    "name": "ImGui_StyleVar_SeparatorTextBorderSize",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Thickness of border in SeparatorText()"
  },
  {
    "form": "(reaper.ImGui_StyleVar_SeparatorTextPadding ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_SeparatorTextPadding ) :: (integer)\nHorizontal offset of text from each edge of the separator + spacing on other\naxis. Generally small values. .y is recommended to be == StyleVar_FramePadding.y.",
    "name": "ImGui_StyleVar_SeparatorTextPadding",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Horizontal offset of text from each edge of the separator + spacing on other\naxis. Generally small values. .y is recommended to be == StyleVar_FramePadding.y."
  },
  {
    "form": "(reaper.ImGui_StyleVar_TabRounding ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_TabRounding ) :: (integer)\nRadius of upper corners of a tab. Set to 0.0 to have rectangular tabs.",
    "name": "ImGui_StyleVar_TabRounding",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Radius of upper corners of a tab. Set to 0.0 to have rectangular tabs."
  },
  {
    "form": "(reaper.ImGui_StyleVar_WindowBorderSize ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_WindowBorderSize ) :: (integer)\nThickness of border around windows. Generally set to 0.0 or 1.0.\n  (Other values are not well tested and more CPU/GPU costly).",
    "name": "ImGui_StyleVar_WindowBorderSize",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Thickness of border around windows. Generally set to 0.0 or 1.0.\n  (Other values are not well tested and more CPU/GPU costly)."
  },
  {
    "form": "(reaper.ImGui_StyleVar_WindowMinSize ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_WindowMinSize ) :: (integer)\nMinimum window size. This is a global setting.\n  If you want to constrain individual windows, use SetNextWindowSizeConstraints.",
    "name": "ImGui_StyleVar_WindowMinSize",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Minimum window size. This is a global setting.\n  If you want to constrain individual windows, use SetNextWindowSizeConstraints."
  },
  {
    "form": "(reaper.ImGui_StyleVar_WindowPadding ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_WindowPadding ) :: (integer)\nPadding within a window.",
    "name": "ImGui_StyleVar_WindowPadding",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Padding within a window."
  },
  {
    "form": "(reaper.ImGui_StyleVar_WindowRounding ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_WindowRounding ) :: (integer)\nRadius of window corners rounding. Set to 0.0 to have rectangular windows.\n  Large values tend to lead to variety of artifacts and are not recommended.",
    "name": "ImGui_StyleVar_WindowRounding",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Radius of window corners rounding. Set to 0.0 to have rectangular windows.\n  Large values tend to lead to variety of artifacts and are not recommended."
  },
  {
    "form": "(reaper.ImGui_StyleVar_WindowTitleAlign ) :: (integer)",
    "doc": "(reaper.ImGui_StyleVar_WindowTitleAlign ) :: (integer)\nAlignment for title bar text.\n   Defaults to (0.0,0.5) for left-aligned,vertically centered.",
    "name": "ImGui_StyleVar_WindowTitleAlign",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Alignment for title bar text.\n   Defaults to (0.0,0.5) for left-aligned,vertically centered."
  },
  {
    "form": "(reaper.ImGui_TabBarFlags_AutoSelectNewTabs ) :: (integer)",
    "doc": "(reaper.ImGui_TabBarFlags_AutoSelectNewTabs ) :: (integer)\nAutomatically select new tabs when they appear.",
    "name": "ImGui_TabBarFlags_AutoSelectNewTabs",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Automatically select new tabs when they appear."
  },
  {
    "form": "(reaper.ImGui_TabBarFlags_FittingPolicyResizeDown ) :: (integer)",
    "doc": "(reaper.ImGui_TabBarFlags_FittingPolicyResizeDown ) :: (integer)\nResize tabs when they don't fit.",
    "name": "ImGui_TabBarFlags_FittingPolicyResizeDown",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Resize tabs when they don't fit."
  },
  {
    "form": "(reaper.ImGui_TabBarFlags_FittingPolicyScroll ) :: (integer)",
    "doc": "(reaper.ImGui_TabBarFlags_FittingPolicyScroll ) :: (integer)\nAdd scroll buttons when tabs don't fit.",
    "name": "ImGui_TabBarFlags_FittingPolicyScroll",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Add scroll buttons when tabs don't fit."
  },
  {
    "form": "(reaper.ImGui_TabBarFlags_NoCloseWithMiddleMouseButton ) :: (integer)",
    "doc": "(reaper.ImGui_TabBarFlags_NoCloseWithMiddleMouseButton ) :: (integer)\nDisable behavior of closing tabs (that are submitted with p_open != nil)\n   with middle mouse button. You can still repro this behavior on user's side\n   with if(IsItemHovered() && IsMouseClicked(2)) p_open = false.",
    "name": "ImGui_TabBarFlags_NoCloseWithMiddleMouseButton",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable behavior of closing tabs (that are submitted with p_open != nil)\n   with middle mouse button. You can still repro this behavior on user's side\n   with if(IsItemHovered() && IsMouseClicked(2)) p_open = false."
  },
  {
    "form": "(reaper.ImGui_TabBarFlags_NoTabListScrollingButtons ) :: (integer)",
    "doc": "(reaper.ImGui_TabBarFlags_NoTabListScrollingButtons ) :: (integer)\nDisable scrolling buttons (apply when fitting policy is\n   TabBarFlags_FittingPolicyScroll).",
    "name": "ImGui_TabBarFlags_NoTabListScrollingButtons",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable scrolling buttons (apply when fitting policy is\n   TabBarFlags_FittingPolicyScroll)."
  },
  {
    "form": "(reaper.ImGui_TabBarFlags_NoTooltip ) :: (integer)",
    "doc": "(reaper.ImGui_TabBarFlags_NoTooltip ) :: (integer)\nDisable tooltips when hovering a tab.",
    "name": "ImGui_TabBarFlags_NoTooltip",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable tooltips when hovering a tab."
  },
  {
    "form": "(reaper.ImGui_TabBarFlags_None ) :: (integer)",
    "doc": "(reaper.ImGui_TabBarFlags_None ) :: (integer)\n",
    "name": "ImGui_TabBarFlags_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_TabBarFlags_Reorderable ) :: (integer)",
    "doc": "(reaper.ImGui_TabBarFlags_Reorderable ) :: (integer)\nAllow manually dragging tabs to re-order them + New tabs are appended at\n   the end of list.",
    "name": "ImGui_TabBarFlags_Reorderable",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Allow manually dragging tabs to re-order them + New tabs are appended at\n   the end of list."
  },
  {
    "form": "(reaper.ImGui_TabBarFlags_TabListPopupButton ) :: (integer)",
    "doc": "(reaper.ImGui_TabBarFlags_TabListPopupButton ) :: (integer)\nDisable buttons to open the tab list popup.",
    "name": "ImGui_TabBarFlags_TabListPopupButton",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable buttons to open the tab list popup."
  },
  {
    "form": "(reaper.ImGui_TabItemButton ctx label ?flagsIn) :: (boolean)",
    "doc": "(reaper.ImGui_TabItemButton ctx label ?flagsIn) :: (boolean)\nctx :: ImGui_Context\nlabel :: string\nflagsIn :: integer (optional)\nCreate a Tab behaving like a button. Return true when clicked.\nCannot be selected in the tab bar.",
    "name": "ImGui_TabItemButton",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Create a Tab behaving like a button. Return true when clicked.\nCannot be selected in the tab bar."
  },
  {
    "form": "(reaper.ImGui_TabItemFlags_Leading ) :: (integer)",
    "doc": "(reaper.ImGui_TabItemFlags_Leading ) :: (integer)\nEnforce the tab position to the left of the tab bar (after the tab list popup button).",
    "name": "ImGui_TabItemFlags_Leading",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Enforce the tab position to the left of the tab bar (after the tab list popup button)."
  },
  {
    "form": "(reaper.ImGui_TabItemFlags_NoCloseWithMiddleMouseButton ) :: (integer)",
    "doc": "(reaper.ImGui_TabItemFlags_NoCloseWithMiddleMouseButton ) :: (integer)\nDisable behavior of closing tabs (that are submitted with p_open != nil) with\n   middle mouse button. You can still repro this behavior on user's side with\n   if(IsItemHovered() && IsMouseClicked(2)) p_open = false.",
    "name": "ImGui_TabItemFlags_NoCloseWithMiddleMouseButton",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable behavior of closing tabs (that are submitted with p_open != nil) with\n   middle mouse button. You can still repro this behavior on user's side with\n   if(IsItemHovered() && IsMouseClicked(2)) p_open = false."
  },
  {
    "form": "(reaper.ImGui_TabItemFlags_NoPushId ) :: (integer)",
    "doc": "(reaper.ImGui_TabItemFlags_NoPushId ) :: (integer)\nDon't call PushID(tab->ID)/PopID() on BeginTabItem/EndTabItem.",
    "name": "ImGui_TabItemFlags_NoPushId",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Don't call PushID(tab->ID)/PopID() on BeginTabItem/EndTabItem."
  },
  {
    "form": "(reaper.ImGui_TabItemFlags_NoReorder ) :: (integer)",
    "doc": "(reaper.ImGui_TabItemFlags_NoReorder ) :: (integer)\nDisable reordering this tab or having another tab cross over this tab.",
    "name": "ImGui_TabItemFlags_NoReorder",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable reordering this tab or having another tab cross over this tab."
  },
  {
    "form": "(reaper.ImGui_TabItemFlags_NoTooltip ) :: (integer)",
    "doc": "(reaper.ImGui_TabItemFlags_NoTooltip ) :: (integer)\nDisable tooltip for the given tab.",
    "name": "ImGui_TabItemFlags_NoTooltip",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable tooltip for the given tab."
  },
  {
    "form": "(reaper.ImGui_TabItemFlags_None ) :: (integer)",
    "doc": "(reaper.ImGui_TabItemFlags_None ) :: (integer)\n",
    "name": "ImGui_TabItemFlags_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_TabItemFlags_SetSelected ) :: (integer)",
    "doc": "(reaper.ImGui_TabItemFlags_SetSelected ) :: (integer)\nTrigger flag to programmatically make the tab selected when calling BeginTabItem.",
    "name": "ImGui_TabItemFlags_SetSelected",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Trigger flag to programmatically make the tab selected when calling BeginTabItem."
  },
  {
    "form": "(reaper.ImGui_TabItemFlags_Trailing ) :: (integer)",
    "doc": "(reaper.ImGui_TabItemFlags_Trailing ) :: (integer)\nEnforce the tab position to the right of the tab bar (before the scrolling buttons).",
    "name": "ImGui_TabItemFlags_Trailing",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Enforce the tab position to the right of the tab bar (before the scrolling buttons)."
  },
  {
    "form": "(reaper.ImGui_TabItemFlags_UnsavedDocument ) :: (integer)",
    "doc": "(reaper.ImGui_TabItemFlags_UnsavedDocument ) :: (integer)\nAppend '*' to title without affecting the ID, as a convenience to avoid using\n   the ### operator. Also: tab is selected on closure and closure is deferred by\n   one frame to allow code to undo it without flicker.",
    "name": "ImGui_TabItemFlags_UnsavedDocument",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Append '*' to title without affecting the ID, as a convenience to avoid using\n   the ### operator. Also: tab is selected on closure and closure is deferred by\n   one frame to allow code to undo it without flicker."
  },
  {
    "form": "(reaper.ImGui_TableBgTarget_CellBg ) :: (integer)",
    "doc": "(reaper.ImGui_TableBgTarget_CellBg ) :: (integer)\nSet cell background color (top-most color).",
    "name": "ImGui_TableBgTarget_CellBg",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Set cell background color (top-most color)."
  },
  {
    "form": "(reaper.ImGui_TableBgTarget_None ) :: (integer)",
    "doc": "(reaper.ImGui_TableBgTarget_None ) :: (integer)\n",
    "name": "ImGui_TableBgTarget_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_TableBgTarget_RowBg0 ) :: (integer)",
    "doc": "(reaper.ImGui_TableBgTarget_RowBg0 ) :: (integer)\nSet row background color 0 (generally used for background,\n   automatically set when TableFlags_RowBg is used).",
    "name": "ImGui_TableBgTarget_RowBg0",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Set row background color 0 (generally used for background,\n   automatically set when TableFlags_RowBg is used)."
  },
  {
    "form": "(reaper.ImGui_TableBgTarget_RowBg1 ) :: (integer)",
    "doc": "(reaper.ImGui_TableBgTarget_RowBg1 ) :: (integer)\nSet row background color 1 (generally used for selection marking).",
    "name": "ImGui_TableBgTarget_RowBg1",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Set row background color 1 (generally used for selection marking)."
  },
  {
    "form": "(reaper.ImGui_TableColumnFlags_DefaultHide ) :: (integer)",
    "doc": "(reaper.ImGui_TableColumnFlags_DefaultHide ) :: (integer)\nDefault as a hidden/disabled column.",
    "name": "ImGui_TableColumnFlags_DefaultHide",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Default as a hidden/disabled column."
  },
  {
    "form": "(reaper.ImGui_TableColumnFlags_DefaultSort ) :: (integer)",
    "doc": "(reaper.ImGui_TableColumnFlags_DefaultSort ) :: (integer)\nDefault as a sorting column.",
    "name": "ImGui_TableColumnFlags_DefaultSort",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Default as a sorting column."
  },
  {
    "form": "(reaper.ImGui_TableColumnFlags_Disabled ) :: (integer)",
    "doc": "(reaper.ImGui_TableColumnFlags_Disabled ) :: (integer)\nOverriding/master disable flag: hide column, won't show in context menu\n   (unlike calling TableSetColumnEnabled which manipulates the user accessible state).",
    "name": "ImGui_TableColumnFlags_Disabled",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Overriding/master disable flag: hide column, won't show in context menu\n   (unlike calling TableSetColumnEnabled which manipulates the user accessible state)."
  },
  {
    "form": "(reaper.ImGui_TableColumnFlags_IndentDisable ) :: (integer)",
    "doc": "(reaper.ImGui_TableColumnFlags_IndentDisable ) :: (integer)\nIgnore current Indent value when entering cell (default for columns > 0).\n   Indentation changes _within_ the cell will still be honored.",
    "name": "ImGui_TableColumnFlags_IndentDisable",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Ignore current Indent value when entering cell (default for columns > 0).\n   Indentation changes _within_ the cell will still be honored."
  },
  {
    "form": "(reaper.ImGui_TableColumnFlags_IndentEnable ) :: (integer)",
    "doc": "(reaper.ImGui_TableColumnFlags_IndentEnable ) :: (integer)\nUse current Indent value when entering cell (default for column 0).",
    "name": "ImGui_TableColumnFlags_IndentEnable",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Use current Indent value when entering cell (default for column 0)."
  },
  {
    "form": "(reaper.ImGui_TableColumnFlags_IsEnabled ) :: (integer)",
    "doc": "(reaper.ImGui_TableColumnFlags_IsEnabled ) :: (integer)\nStatus: is enabled == not hidden by user/api (referred to as \"Hide\" in\n   _DefaultHide and _NoHide) flags.",
    "name": "ImGui_TableColumnFlags_IsEnabled",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Status: is enabled == not hidden by user/api (referred to as \"Hide\" in\n   _DefaultHide and _NoHide) flags."
  },
  {
    "form": "(reaper.ImGui_TableColumnFlags_IsHovered ) :: (integer)",
    "doc": "(reaper.ImGui_TableColumnFlags_IsHovered ) :: (integer)\nStatus: is hovered by mouse.",
    "name": "ImGui_TableColumnFlags_IsHovered",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Status: is hovered by mouse."
  },
  {
    "form": "(reaper.ImGui_TableColumnFlags_IsSorted ) :: (integer)",
    "doc": "(reaper.ImGui_TableColumnFlags_IsSorted ) :: (integer)\nStatus: is currently part of the sort specs.",
    "name": "ImGui_TableColumnFlags_IsSorted",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Status: is currently part of the sort specs."
  },
  {
    "form": "(reaper.ImGui_TableColumnFlags_IsVisible ) :: (integer)",
    "doc": "(reaper.ImGui_TableColumnFlags_IsVisible ) :: (integer)\nStatus: is visible == is enabled AND not clipped by scrolling.",
    "name": "ImGui_TableColumnFlags_IsVisible",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Status: is visible == is enabled AND not clipped by scrolling."
  },
  {
    "form": "(reaper.ImGui_TableColumnFlags_NoClip ) :: (integer)",
    "doc": "(reaper.ImGui_TableColumnFlags_NoClip ) :: (integer)\nDisable clipping for this column\n   (all NoClip columns will render in a same draw command).",
    "name": "ImGui_TableColumnFlags_NoClip",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable clipping for this column\n   (all NoClip columns will render in a same draw command)."
  },
  {
    "form": "(reaper.ImGui_TableColumnFlags_NoHeaderLabel ) :: (integer)",
    "doc": "(reaper.ImGui_TableColumnFlags_NoHeaderLabel ) :: (integer)\nTableHeadersRow will not submit label for this column.\n   Convenient for some small columns. Name will still appear in context menu.",
    "name": "ImGui_TableColumnFlags_NoHeaderLabel",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "TableHeadersRow will not submit label for this column.\n   Convenient for some small columns. Name will still appear in context menu."
  },
  {
    "form": "(reaper.ImGui_TableColumnFlags_NoHeaderWidth ) :: (integer)",
    "doc": "(reaper.ImGui_TableColumnFlags_NoHeaderWidth ) :: (integer)\nDisable header text width contribution to automatic column width.",
    "name": "ImGui_TableColumnFlags_NoHeaderWidth",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable header text width contribution to automatic column width."
  },
  {
    "form": "(reaper.ImGui_TableColumnFlags_NoHide ) :: (integer)",
    "doc": "(reaper.ImGui_TableColumnFlags_NoHide ) :: (integer)\nDisable ability to hide/disable this column.",
    "name": "ImGui_TableColumnFlags_NoHide",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable ability to hide/disable this column."
  },
  {
    "form": "(reaper.ImGui_TableColumnFlags_NoReorder ) :: (integer)",
    "doc": "(reaper.ImGui_TableColumnFlags_NoReorder ) :: (integer)\nDisable manual reordering this column, this will also prevent other columns\n   from crossing over this column.",
    "name": "ImGui_TableColumnFlags_NoReorder",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable manual reordering this column, this will also prevent other columns\n   from crossing over this column."
  },
  {
    "form": "(reaper.ImGui_TableColumnFlags_NoResize ) :: (integer)",
    "doc": "(reaper.ImGui_TableColumnFlags_NoResize ) :: (integer)\nDisable manual resizing.",
    "name": "ImGui_TableColumnFlags_NoResize",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable manual resizing."
  },
  {
    "form": "(reaper.ImGui_TableColumnFlags_NoSort ) :: (integer)",
    "doc": "(reaper.ImGui_TableColumnFlags_NoSort ) :: (integer)\nDisable ability to sort on this field\n   (even if TableFlags_Sortable is set on the table).",
    "name": "ImGui_TableColumnFlags_NoSort",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable ability to sort on this field\n   (even if TableFlags_Sortable is set on the table)."
  },
  {
    "form": "(reaper.ImGui_TableColumnFlags_NoSortAscending ) :: (integer)",
    "doc": "(reaper.ImGui_TableColumnFlags_NoSortAscending ) :: (integer)\nDisable ability to sort in the ascending direction.",
    "name": "ImGui_TableColumnFlags_NoSortAscending",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable ability to sort in the ascending direction."
  },
  {
    "form": "(reaper.ImGui_TableColumnFlags_NoSortDescending ) :: (integer)",
    "doc": "(reaper.ImGui_TableColumnFlags_NoSortDescending ) :: (integer)\nDisable ability to sort in the descending direction.",
    "name": "ImGui_TableColumnFlags_NoSortDescending",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable ability to sort in the descending direction."
  },
  {
    "form": "(reaper.ImGui_TableColumnFlags_None ) :: (integer)",
    "doc": "(reaper.ImGui_TableColumnFlags_None ) :: (integer)\n",
    "name": "ImGui_TableColumnFlags_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_TableColumnFlags_PreferSortAscending ) :: (integer)",
    "doc": "(reaper.ImGui_TableColumnFlags_PreferSortAscending ) :: (integer)\nMake the initial sort direction Ascending when first sorting on this column (default).",
    "name": "ImGui_TableColumnFlags_PreferSortAscending",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Make the initial sort direction Ascending when first sorting on this column (default)."
  },
  {
    "form": "(reaper.ImGui_TableColumnFlags_PreferSortDescending ) :: (integer)",
    "doc": "(reaper.ImGui_TableColumnFlags_PreferSortDescending ) :: (integer)\nMake the initial sort direction Descending when first sorting on this column.",
    "name": "ImGui_TableColumnFlags_PreferSortDescending",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Make the initial sort direction Descending when first sorting on this column."
  },
  {
    "form": "(reaper.ImGui_TableColumnFlags_WidthFixed ) :: (integer)",
    "doc": "(reaper.ImGui_TableColumnFlags_WidthFixed ) :: (integer)\nColumn will not stretch. Preferable with horizontal scrolling enabled\n   (default if table sizing policy is _SizingFixedFit and table is resizable).",
    "name": "ImGui_TableColumnFlags_WidthFixed",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Column will not stretch. Preferable with horizontal scrolling enabled\n   (default if table sizing policy is _SizingFixedFit and table is resizable)."
  },
  {
    "form": "(reaper.ImGui_TableColumnFlags_WidthStretch ) :: (integer)",
    "doc": "(reaper.ImGui_TableColumnFlags_WidthStretch ) :: (integer)\nColumn will stretch. Preferable with horizontal scrolling disabled\n   (default if table sizing policy is _SizingStretchSame or _SizingStretchProp).",
    "name": "ImGui_TableColumnFlags_WidthStretch",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Column will stretch. Preferable with horizontal scrolling disabled\n   (default if table sizing policy is _SizingStretchSame or _SizingStretchProp)."
  },
  {
    "form": "(reaper.ImGui_TableFlags_Borders ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_Borders ) :: (integer)\nDraw all borders.",
    "name": "ImGui_TableFlags_Borders",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Draw all borders."
  },
  {
    "form": "(reaper.ImGui_TableFlags_BordersH ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_BordersH ) :: (integer)\nDraw horizontal borders.",
    "name": "ImGui_TableFlags_BordersH",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Draw horizontal borders."
  },
  {
    "form": "(reaper.ImGui_TableFlags_BordersInner ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_BordersInner ) :: (integer)\nDraw inner borders.",
    "name": "ImGui_TableFlags_BordersInner",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Draw inner borders."
  },
  {
    "form": "(reaper.ImGui_TableFlags_BordersInnerH ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_BordersInnerH ) :: (integer)\nDraw horizontal borders between rows.",
    "name": "ImGui_TableFlags_BordersInnerH",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Draw horizontal borders between rows."
  },
  {
    "form": "(reaper.ImGui_TableFlags_BordersInnerV ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_BordersInnerV ) :: (integer)\nDraw vertical borders between columns.",
    "name": "ImGui_TableFlags_BordersInnerV",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Draw vertical borders between columns."
  },
  {
    "form": "(reaper.ImGui_TableFlags_BordersOuter ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_BordersOuter ) :: (integer)\nDraw outer borders.",
    "name": "ImGui_TableFlags_BordersOuter",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Draw outer borders."
  },
  {
    "form": "(reaper.ImGui_TableFlags_BordersOuterH ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_BordersOuterH ) :: (integer)\nDraw horizontal borders at the top and bottom.",
    "name": "ImGui_TableFlags_BordersOuterH",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Draw horizontal borders at the top and bottom."
  },
  {
    "form": "(reaper.ImGui_TableFlags_BordersOuterV ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_BordersOuterV ) :: (integer)\nDraw vertical borders on the left and right sides.",
    "name": "ImGui_TableFlags_BordersOuterV",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Draw vertical borders on the left and right sides."
  },
  {
    "form": "(reaper.ImGui_TableFlags_BordersV ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_BordersV ) :: (integer)\nDraw vertical borders.",
    "name": "ImGui_TableFlags_BordersV",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Draw vertical borders."
  },
  {
    "form": "(reaper.ImGui_TableFlags_ContextMenuInBody ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_ContextMenuInBody ) :: (integer)\nRight-click on columns body/contents will display table context menu.\n   By default it is available in TableHeadersRow.",
    "name": "ImGui_TableFlags_ContextMenuInBody",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Right-click on columns body/contents will display table context menu.\n   By default it is available in TableHeadersRow."
  },
  {
    "form": "(reaper.ImGui_TableFlags_Hideable ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_Hideable ) :: (integer)\nEnable hiding/disabling columns in context menu.",
    "name": "ImGui_TableFlags_Hideable",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Enable hiding/disabling columns in context menu."
  },
  {
    "form": "(reaper.ImGui_TableFlags_NoClip ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_NoClip ) :: (integer)\nDisable clipping rectangle for every individual columns\n   (reduce draw command count, items will be able to overflow into other columns).\n   Generally incompatible with TableSetupScrollFreeze.",
    "name": "ImGui_TableFlags_NoClip",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable clipping rectangle for every individual columns\n   (reduce draw command count, items will be able to overflow into other columns).\n   Generally incompatible with TableSetupScrollFreeze."
  },
  {
    "form": "(reaper.ImGui_TableFlags_NoHostExtendX ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_NoHostExtendX ) :: (integer)\nMake outer width auto-fit to columns, overriding outer_size.x value. Only\n   available when ScrollX/ScrollY are disabled and Stretch columns are not used.",
    "name": "ImGui_TableFlags_NoHostExtendX",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Make outer width auto-fit to columns, overriding outer_size.x value. Only\n   available when ScrollX/ScrollY are disabled and Stretch columns are not used."
  },
  {
    "form": "(reaper.ImGui_TableFlags_NoHostExtendY ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_NoHostExtendY ) :: (integer)\nMake outer height stop exactly at outer_size.y (prevent auto-extending table\n   past the limit). Only available when ScrollX/ScrollY are disabled.\n   Data below the limit will be clipped and not visible.",
    "name": "ImGui_TableFlags_NoHostExtendY",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Make outer height stop exactly at outer_size.y (prevent auto-extending table\n   past the limit). Only available when ScrollX/ScrollY are disabled.\n   Data below the limit will be clipped and not visible."
  },
  {
    "form": "(reaper.ImGui_TableFlags_NoKeepColumnsVisible ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_NoKeepColumnsVisible ) :: (integer)\nDisable keeping column always minimally visible when ScrollX is off and table\n   gets too small. Not recommended if columns are resizable.",
    "name": "ImGui_TableFlags_NoKeepColumnsVisible",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable keeping column always minimally visible when ScrollX is off and table\n   gets too small. Not recommended if columns are resizable."
  },
  {
    "form": "(reaper.ImGui_TableFlags_NoPadInnerX ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_NoPadInnerX ) :: (integer)\nDisable inner padding between columns (double inner padding if\n   TableFlags_BordersOuterV is on, single inner padding if BordersOuterV is off).",
    "name": "ImGui_TableFlags_NoPadInnerX",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable inner padding between columns (double inner padding if\n   TableFlags_BordersOuterV is on, single inner padding if BordersOuterV is off)."
  },
  {
    "form": "(reaper.ImGui_TableFlags_NoPadOuterX ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_NoPadOuterX ) :: (integer)\nDefault if TableFlags_BordersOuterV is off. Disable outermost padding.",
    "name": "ImGui_TableFlags_NoPadOuterX",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Default if TableFlags_BordersOuterV is off. Disable outermost padding."
  },
  {
    "form": "(reaper.ImGui_TableFlags_NoSavedSettings ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_NoSavedSettings ) :: (integer)\nDisable persisting columns order, width and sort settings in the .ini file.",
    "name": "ImGui_TableFlags_NoSavedSettings",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable persisting columns order, width and sort settings in the .ini file."
  },
  {
    "form": "(reaper.ImGui_TableFlags_None ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_None ) :: (integer)\n",
    "name": "ImGui_TableFlags_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_TableFlags_PadOuterX ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_PadOuterX ) :: (integer)\nDefault if TableFlags_BordersOuterV is on. Enable outermost padding.\n   Generally desirable if you have headers.",
    "name": "ImGui_TableFlags_PadOuterX",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Default if TableFlags_BordersOuterV is on. Enable outermost padding.\n   Generally desirable if you have headers."
  },
  {
    "form": "(reaper.ImGui_TableFlags_PreciseWidths ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_PreciseWidths ) :: (integer)\nDisable distributing remainder width to stretched columns (width allocation\n   on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this\n   flag: 33,33,33).\n   With larger number of columns, resizing will appear to be less smooth.",
    "name": "ImGui_TableFlags_PreciseWidths",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable distributing remainder width to stretched columns (width allocation\n   on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this\n   flag: 33,33,33).\n   With larger number of columns, resizing will appear to be less smooth."
  },
  {
    "form": "(reaper.ImGui_TableFlags_Reorderable ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_Reorderable ) :: (integer)\nEnable reordering columns in header row\n   (need calling TableSetupColumn + TableHeadersRow to display headers).",
    "name": "ImGui_TableFlags_Reorderable",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Enable reordering columns in header row\n   (need calling TableSetupColumn + TableHeadersRow to display headers)."
  },
  {
    "form": "(reaper.ImGui_TableFlags_Resizable ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_Resizable ) :: (integer)\nEnable resizing columns.",
    "name": "ImGui_TableFlags_Resizable",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Enable resizing columns."
  },
  {
    "form": "(reaper.ImGui_TableFlags_RowBg ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_RowBg ) :: (integer)\nSet each RowBg color with Col_TableRowBg or Col_TableRowBgAlt (equivalent of\n   calling TableSetBgColor with TableBgTarget_RowBg0 on each row manually).",
    "name": "ImGui_TableFlags_RowBg",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Set each RowBg color with Col_TableRowBg or Col_TableRowBgAlt (equivalent of\n   calling TableSetBgColor with TableBgTarget_RowBg0 on each row manually)."
  },
  {
    "form": "(reaper.ImGui_TableFlags_ScrollX ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_ScrollX ) :: (integer)\nEnable horizontal scrolling. Require 'outer_size' parameter of BeginTable to\n   specify the container size. Changes default sizing policy.\n   Because this creates a child window, ScrollY is currently generally\n   recommended when using ScrollX.",
    "name": "ImGui_TableFlags_ScrollX",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Enable horizontal scrolling. Require 'outer_size' parameter of BeginTable to\n   specify the container size. Changes default sizing policy.\n   Because this creates a child window, ScrollY is currently generally\n   recommended when using ScrollX."
  },
  {
    "form": "(reaper.ImGui_TableFlags_ScrollY ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_ScrollY ) :: (integer)\nEnable vertical scrolling.\n   Require 'outer_size' parameter of BeginTable to specify the container size.",
    "name": "ImGui_TableFlags_ScrollY",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Enable vertical scrolling.\n   Require 'outer_size' parameter of BeginTable to specify the container size."
  },
  {
    "form": "(reaper.ImGui_TableFlags_SizingFixedFit ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_SizingFixedFit ) :: (integer)\nColumns default to _WidthFixed or _WidthAuto (if resizable or not resizable),\n   matching contents width.",
    "name": "ImGui_TableFlags_SizingFixedFit",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable),\n   matching contents width."
  },
  {
    "form": "(reaper.ImGui_TableFlags_SizingFixedSame ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_SizingFixedSame ) :: (integer)\nColumns default to _WidthFixed or _WidthAuto (if resizable or not resizable),\n   matching the maximum contents width of all columns.\n   Implicitly enable TableFlags_NoKeepColumnsVisible.",
    "name": "ImGui_TableFlags_SizingFixedSame",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable),\n   matching the maximum contents width of all columns.\n   Implicitly enable TableFlags_NoKeepColumnsVisible."
  },
  {
    "form": "(reaper.ImGui_TableFlags_SizingStretchProp ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_SizingStretchProp ) :: (integer)\nColumns default to _WidthStretch with default weights proportional to each\n   columns contents widths.",
    "name": "ImGui_TableFlags_SizingStretchProp",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Columns default to _WidthStretch with default weights proportional to each\n   columns contents widths."
  },
  {
    "form": "(reaper.ImGui_TableFlags_SizingStretchSame ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_SizingStretchSame ) :: (integer)\nColumns default to _WidthStretch with default weights all equal,\n   unless overriden by TableSetupColumn.",
    "name": "ImGui_TableFlags_SizingStretchSame",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Columns default to _WidthStretch with default weights all equal,\n   unless overriden by TableSetupColumn."
  },
  {
    "form": "(reaper.ImGui_TableFlags_SortMulti ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_SortMulti ) :: (integer)\nHold shift when clicking headers to sort on multiple column.\n   TableGetGetSortSpecs may return specs where (SpecsCount > 1).",
    "name": "ImGui_TableFlags_SortMulti",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Hold shift when clicking headers to sort on multiple column.\n   TableGetGetSortSpecs may return specs where (SpecsCount > 1)."
  },
  {
    "form": "(reaper.ImGui_TableFlags_SortTristate ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_SortTristate ) :: (integer)\nAllow no sorting, disable default sorting.\n   TableGetColumnSortSpecs may return specs where (SpecsCount == 0).",
    "name": "ImGui_TableFlags_SortTristate",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Allow no sorting, disable default sorting.\n   TableGetColumnSortSpecs may return specs where (SpecsCount == 0)."
  },
  {
    "form": "(reaper.ImGui_TableFlags_Sortable ) :: (integer)",
    "doc": "(reaper.ImGui_TableFlags_Sortable ) :: (integer)\nEnable sorting. Call TableNeedSort/TableGetColumnSortSpecs to obtain sort specs.\n   Also see TableFlags_SortMulti and TableFlags_SortTristate.",
    "name": "ImGui_TableFlags_Sortable",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Enable sorting. Call TableNeedSort/TableGetColumnSortSpecs to obtain sort specs.\n   Also see TableFlags_SortMulti and TableFlags_SortTristate."
  },
  {
    "form": "(reaper.ImGui_TableGetColumnCount ctx) :: (integer)",
    "doc": "(reaper.ImGui_TableGetColumnCount ctx) :: (integer)\nctx :: ImGui_Context\nReturn number of columns (value passed to BeginTable).",
    "name": "ImGui_TableGetColumnCount",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Return number of columns (value passed to BeginTable)."
  },
  {
    "form": "(reaper.ImGui_TableGetColumnFlags ctx ?column_nIn) :: (integer)",
    "doc": "(reaper.ImGui_TableGetColumnFlags ctx ?column_nIn) :: (integer)\nctx :: ImGui_Context\ncolumn_nIn :: integer (optional)\nReturn column flags so you can query their Enabled/Visible/Sorted/Hovered\nstatus flags. Pass -1 to use current column.",
    "name": "ImGui_TableGetColumnFlags",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "column_nIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Return column flags so you can query their Enabled/Visible/Sorted/Hovered\nstatus flags. Pass -1 to use current column."
  },
  {
    "form": "(reaper.ImGui_TableGetColumnIndex ctx) :: (integer)",
    "doc": "(reaper.ImGui_TableGetColumnIndex ctx) :: (integer)\nctx :: ImGui_Context\nReturn current column index.",
    "name": "ImGui_TableGetColumnIndex",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Return current column index."
  },
  {
    "form": "(reaper.ImGui_TableGetColumnName ctx ?column_nIn) :: (string)",
    "doc": "(reaper.ImGui_TableGetColumnName ctx ?column_nIn) :: (string)\nctx :: ImGui_Context\ncolumn_nIn :: integer (optional)\nReturn \"\" if column didn't have a name declared by TableSetupColumn.\nPass -1 to use current column.",
    "name": "ImGui_TableGetColumnName",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "column_nIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "Return \"\" if column didn't have a name declared by TableSetupColumn.\nPass -1 to use current column."
  },
  {
    "form": "(reaper.ImGui_TableGetColumnSortSpecs ctx id) :: (boolean integer integer integer integer)",
    "doc": "(reaper.ImGui_TableGetColumnSortSpecs ctx id) :: (boolean integer integer integer integer)\nctx :: ImGui_Context\nid :: integer\nSorting specification for one column of a table.\nCall while incrementing 'id' from 0 until false is returned.\n- ColumnUserID:  User id of the column (if specified by a TableSetupColumn call)\n- ColumnIndex:   Index of the column\n- SortOrder:     Index within parent SortSpecs (always stored in order starting\n  from 0, tables sorted on a single criteria will always have a 0 here)\n- SortDirection: SortDirection_Ascending or SortDirection_Descending\n  (you can use this or SortSign, whichever is more convenient for your sort\n  function)\nSee TableNeedSort.",
    "name": "ImGui_TableGetColumnSortSpecs",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "id"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "column_user_id"
      },
      {
        "type": "integer",
        "name": "column_index"
      },
      {
        "type": "integer",
        "name": "sort_order"
      },
      {
        "type": "integer",
        "name": "sort_direction"
      }
    ],
    "namespace": "reaper",
    "description": "Sorting specification for one column of a table.\nCall while incrementing 'id' from 0 until false is returned.\n- ColumnUserID:  User id of the column (if specified by a TableSetupColumn call)\n- ColumnIndex:   Index of the column\n- SortOrder:     Index within parent SortSpecs (always stored in order starting\n  from 0, tables sorted on a single criteria will always have a 0 here)\n- SortDirection: SortDirection_Ascending or SortDirection_Descending\n  (you can use this or SortSign, whichever is more convenient for your sort\n  function)\nSee TableNeedSort."
  },
  {
    "form": "(reaper.ImGui_TableGetRowIndex ctx) :: (integer)",
    "doc": "(reaper.ImGui_TableGetRowIndex ctx) :: (integer)\nctx :: ImGui_Context\nReturn current row index.",
    "name": "ImGui_TableGetRowIndex",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Return current row index."
  },
  {
    "form": "(reaper.ImGui_TableHeader ctx label) :: nil",
    "doc": "(reaper.ImGui_TableHeader ctx label) :: nil\nctx :: ImGui_Context\nlabel :: string\nSubmit one header cell manually (rarely used). See TableSetupColumn.",
    "name": "ImGui_TableHeader",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      }
    ],
    "namespace": "reaper",
    "description": "Submit one header cell manually (rarely used). See TableSetupColumn."
  },
  {
    "form": "(reaper.ImGui_TableHeadersRow ctx) :: nil",
    "doc": "(reaper.ImGui_TableHeadersRow ctx) :: nil\nctx :: ImGui_Context\nSubmit all headers cells based on data provided to TableSetupColumn +\nsubmit context menu.",
    "name": "ImGui_TableHeadersRow",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Submit all headers cells based on data provided to TableSetupColumn +\nsubmit context menu."
  },
  {
    "form": "(reaper.ImGui_TableNeedSort ctx) :: (boolean boolean)",
    "doc": "(reaper.ImGui_TableNeedSort ctx) :: (boolean boolean)\nctx :: ImGui_Context\nReturn true once when sorting specs have changed since last call,\nor the first time. 'has_specs' is false when not sorting.\nSee TableGetColumnSortSpecs.",
    "name": "ImGui_TableNeedSort",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "has_specs"
      }
    ],
    "namespace": "reaper",
    "description": "Return true once when sorting specs have changed since last call,\nor the first time. 'has_specs' is false when not sorting.\nSee TableGetColumnSortSpecs."
  },
  {
    "form": "(reaper.ImGui_TableNextColumn ctx) :: (boolean)",
    "doc": "(reaper.ImGui_TableNextColumn ctx) :: (boolean)\nctx :: ImGui_Context\nAppend into the next column (or first column of next row if currently in\nlast column). Return true when column is visible.",
    "name": "ImGui_TableNextColumn",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Append into the next column (or first column of next row if currently in\nlast column). Return true when column is visible."
  },
  {
    "form": "(reaper.ImGui_TableNextRow ctx ?row_flagsIn ?min_row_heightIn) :: nil",
    "doc": "(reaper.ImGui_TableNextRow ctx ?row_flagsIn ?min_row_heightIn) :: nil\nctx :: ImGui_Context\nrow_flagsIn :: integer (optional)\nmin_row_heightIn :: number (optional)\nAppend into the first cell of a new row.",
    "name": "ImGui_TableNextRow",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "row_flagsIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "min_row_heightIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Append into the first cell of a new row."
  },
  {
    "form": "(reaper.ImGui_TableRowFlags_Headers ) :: (integer)",
    "doc": "(reaper.ImGui_TableRowFlags_Headers ) :: (integer)\nIdentify header row (set default background color + width of its contents\n   accounted different for auto column width).",
    "name": "ImGui_TableRowFlags_Headers",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Identify header row (set default background color + width of its contents\n   accounted different for auto column width)."
  },
  {
    "form": "(reaper.ImGui_TableRowFlags_None ) :: (integer)",
    "doc": "(reaper.ImGui_TableRowFlags_None ) :: (integer)\nFor TableNextRow.",
    "name": "ImGui_TableRowFlags_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "For TableNextRow."
  },
  {
    "form": "(reaper.ImGui_TableSetBgColor ctx target color_rgba ?column_nIn) :: nil",
    "doc": "(reaper.ImGui_TableSetBgColor ctx target color_rgba ?column_nIn) :: nil\nctx :: ImGui_Context\ntarget :: integer\ncolor_rgba :: integer\ncolumn_nIn :: integer (optional)\nChange the color of a cell, row, or column.\nSee TableBgTarget_* flags for details.",
    "name": "ImGui_TableSetBgColor",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "target"
      },
      {
        "type": "integer",
        "name": "color_rgba"
      },
      {
        "type": "integer",
        "name": "column_nIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Change the color of a cell, row, or column.\nSee TableBgTarget_* flags for details."
  },
  {
    "form": "(reaper.ImGui_TableSetColumnEnabled ctx column_n v) :: nil",
    "doc": "(reaper.ImGui_TableSetColumnEnabled ctx column_n v) :: nil\nctx :: ImGui_Context\ncolumn_n :: integer\nv :: boolean\nChange user-accessible enabled/disabled state of a column, set to false to\nhide the column. Note that end-user can use the context menu to change this\nthemselves (right-click in headers, or right-click in columns body with\nTableFlags_ContextMenuInBody).\n- Require table to have the TableFlags_Hideable flag because we are manipulating\n  user accessible state.\n- Request will be applied during next layout, which happens on the first call to\n  TableNextRow after Begin_Table.\n- For the getter you can test\n  (TableGetColumnFlags() & TableColumnFlags_IsEnabled) != 0.",
    "name": "ImGui_TableSetColumnEnabled",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "column_n"
      },
      {
        "type": "boolean",
        "name": "v"
      }
    ],
    "namespace": "reaper",
    "description": "Change user-accessible enabled/disabled state of a column, set to false to\nhide the column. Note that end-user can use the context menu to change this\nthemselves (right-click in headers, or right-click in columns body with\nTableFlags_ContextMenuInBody).\n- Require table to have the TableFlags_Hideable flag because we are manipulating\n  user accessible state.\n- Request will be applied during next layout, which happens on the first call to\n  TableNextRow after Begin_Table.\n- For the getter you can test\n  (TableGetColumnFlags() & TableColumnFlags_IsEnabled) != 0."
  },
  {
    "form": "(reaper.ImGui_TableSetColumnIndex ctx column_n) :: (boolean)",
    "doc": "(reaper.ImGui_TableSetColumnIndex ctx column_n) :: (boolean)\nctx :: ImGui_Context\ncolumn_n :: integer\nAppend into the specified column. Return true when column is visible.",
    "name": "ImGui_TableSetColumnIndex",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "column_n"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Append into the specified column. Return true when column is visible."
  },
  {
    "form": "(reaper.ImGui_TableSetupColumn ctx label ?flagsIn ?init_width_or_weightIn ?user_idIn) :: nil",
    "doc": "(reaper.ImGui_TableSetupColumn ctx label ?flagsIn ?init_width_or_weightIn ?user_idIn) :: nil\nctx :: ImGui_Context\nlabel :: string\nflagsIn :: integer (optional)\ninit_width_or_weightIn :: number (optional)\nuser_idIn :: integer (optional)\nUse to specify label, resizing policy, default width/weight, id,\nvarious other flags etc.",
    "name": "ImGui_TableSetupColumn",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "init_width_or_weightIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "user_idIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Use to specify label, resizing policy, default width/weight, id,\nvarious other flags etc."
  },
  {
    "form": "(reaper.ImGui_TableSetupScrollFreeze ctx cols rows) :: nil",
    "doc": "(reaper.ImGui_TableSetupScrollFreeze ctx cols rows) :: nil\nctx :: ImGui_Context\ncols :: integer\nrows :: integer\nLock columns/rows so they stay visible when scrolled.",
    "name": "ImGui_TableSetupScrollFreeze",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "cols"
      },
      {
        "type": "integer",
        "name": "rows"
      }
    ],
    "namespace": "reaper",
    "description": "Lock columns/rows so they stay visible when scrolled."
  },
  {
    "form": "(reaper.ImGui_Text ctx text) :: nil",
    "doc": "(reaper.ImGui_Text ctx text) :: nil\nctx :: ImGui_Context\ntext :: string\n",
    "name": "ImGui_Text",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "text"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_TextColored ctx col_rgba text) :: nil",
    "doc": "(reaper.ImGui_TextColored ctx col_rgba text) :: nil\nctx :: ImGui_Context\ncol_rgba :: integer\ntext :: string\nShortcut for PushStyleColor(Col_Text, color); Text(text); PopStyleColor();",
    "name": "ImGui_TextColored",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "integer",
        "name": "col_rgba"
      },
      {
        "type": "string",
        "name": "text"
      }
    ],
    "namespace": "reaper",
    "description": "Shortcut for PushStyleColor(Col_Text, color); Text(text); PopStyleColor();"
  },
  {
    "form": "(reaper.ImGui_TextDisabled ctx text) :: nil",
    "doc": "(reaper.ImGui_TextDisabled ctx text) :: nil\nctx :: ImGui_Context\ntext :: string\n",
    "name": "ImGui_TextDisabled",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "text"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_TextFilter_Clear filter) :: nil",
    "doc": "(reaper.ImGui_TextFilter_Clear filter) :: nil\nfilter :: ImGui_TextFilter\n",
    "name": "ImGui_TextFilter_Clear",
    "params": [
      {
        "type": "ImGui_TextFilter",
        "name": "filter"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_TextFilter_Draw filter ctx ?labelIn ?widthIn) :: (boolean)",
    "doc": "(reaper.ImGui_TextFilter_Draw filter ctx ?labelIn ?widthIn) :: (boolean)\nfilter :: ImGui_TextFilter\nctx :: ImGui_Context\nlabelIn :: string (optional)\nwidthIn :: number (optional)\nHelper calling InputText+TextFilter_Set",
    "name": "ImGui_TextFilter_Draw",
    "params": [
      {
        "type": "ImGui_TextFilter",
        "name": "filter"
      },
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "labelIn",
        "optional": true
      },
      {
        "type": "number",
        "name": "widthIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Helper calling InputText+TextFilter_Set"
  },
  {
    "form": "(reaper.ImGui_TextFilter_Get filter) :: (string)",
    "doc": "(reaper.ImGui_TextFilter_Get filter) :: (string)\nfilter :: ImGui_TextFilter\n",
    "name": "ImGui_TextFilter_Get",
    "params": [
      {
        "type": "ImGui_TextFilter",
        "name": "filter"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_TextFilter_IsActive filter) :: (boolean)",
    "doc": "(reaper.ImGui_TextFilter_IsActive filter) :: (boolean)\nfilter :: ImGui_TextFilter\n",
    "name": "ImGui_TextFilter_IsActive",
    "params": [
      {
        "type": "ImGui_TextFilter",
        "name": "filter"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_TextFilter_PassFilter filter text) :: (boolean)",
    "doc": "(reaper.ImGui_TextFilter_PassFilter filter text) :: (boolean)\nfilter :: ImGui_TextFilter\ntext :: string\n",
    "name": "ImGui_TextFilter_PassFilter",
    "params": [
      {
        "type": "ImGui_TextFilter",
        "name": "filter"
      },
      {
        "type": "string",
        "name": "text"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_TextFilter_Set filter filter_text) :: nil",
    "doc": "(reaper.ImGui_TextFilter_Set filter filter_text) :: nil\nfilter :: ImGui_TextFilter\nfilter_text :: string\n",
    "name": "ImGui_TextFilter_Set",
    "params": [
      {
        "type": "ImGui_TextFilter",
        "name": "filter"
      },
      {
        "type": "string",
        "name": "filter_text"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_TextWrapped ctx text) :: nil",
    "doc": "(reaper.ImGui_TextWrapped ctx text) :: nil\nctx :: ImGui_Context\ntext :: string\nShortcut for PushTextWrapPos(0.0); Text(text); PopTextWrapPos();.\nNote that this won't work on an auto-resizing window if there's no other\nwidgets to extend the window width, yoy may need to set a size using\nSetNextWindowSize.",
    "name": "ImGui_TextWrapped",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "text"
      }
    ],
    "namespace": "reaper",
    "description": "Shortcut for PushTextWrapPos(0.0); Text(text); PopTextWrapPos();.\nNote that this won't work on an auto-resizing window if there's no other\nwidgets to extend the window width, yoy may need to set a size using\nSetNextWindowSize."
  },
  {
    "form": "(reaper.ImGui_TreeNode ctx label ?flagsIn) :: (boolean)",
    "doc": "(reaper.ImGui_TreeNode ctx label ?flagsIn) :: (boolean)\nctx :: ImGui_Context\nlabel :: string\nflagsIn :: integer (optional)\nTreeNode functions return true when the node is open, in which case you need\nto also call TreePop when you are finished displaying the tree node contents.",
    "name": "ImGui_TreeNode",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "TreeNode functions return true when the node is open, in which case you need\nto also call TreePop when you are finished displaying the tree node contents."
  },
  {
    "form": "(reaper.ImGui_TreeNodeEx ctx str_id label ?flagsIn) :: (boolean)",
    "doc": "(reaper.ImGui_TreeNodeEx ctx str_id label ?flagsIn) :: (boolean)\nctx :: ImGui_Context\nstr_id :: string\nlabel :: string\nflagsIn :: integer (optional)\nHelper variation to easily decorelate the id from the displayed string.\nRead the [FAQ](https://dearimgui.org/faq) about why and how to use ID.\nTo align arbitrary text at the same level as a TreeNode you can use Bullet.",
    "name": "ImGui_TreeNodeEx",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "str_id"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Helper variation to easily decorelate the id from the displayed string.\nRead the [FAQ](https://dearimgui.org/faq) about why and how to use ID.\nTo align arbitrary text at the same level as a TreeNode you can use Bullet."
  },
  {
    "form": "(reaper.ImGui_TreeNodeFlags_AllowItemOverlap ) :: (integer)",
    "doc": "(reaper.ImGui_TreeNodeFlags_AllowItemOverlap ) :: (integer)\nHit testing to allow subsequent widgets to overlap this one.",
    "name": "ImGui_TreeNodeFlags_AllowItemOverlap",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Hit testing to allow subsequent widgets to overlap this one."
  },
  {
    "form": "(reaper.ImGui_TreeNodeFlags_Bullet ) :: (integer)",
    "doc": "(reaper.ImGui_TreeNodeFlags_Bullet ) :: (integer)\nDisplay a bullet instead of arrow.",
    "name": "ImGui_TreeNodeFlags_Bullet",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Display a bullet instead of arrow."
  },
  {
    "form": "(reaper.ImGui_TreeNodeFlags_CollapsingHeader ) :: (integer)",
    "doc": "(reaper.ImGui_TreeNodeFlags_CollapsingHeader ) :: (integer)\nTreeNodeFlags_Framed | TreeNodeFlags_NoTreePushOnOpen | TreeNodeFlags_NoAutoOpenOnLog",
    "name": "ImGui_TreeNodeFlags_CollapsingHeader",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "TreeNodeFlags_Framed | TreeNodeFlags_NoTreePushOnOpen | TreeNodeFlags_NoAutoOpenOnLog"
  },
  {
    "form": "(reaper.ImGui_TreeNodeFlags_DefaultOpen ) :: (integer)",
    "doc": "(reaper.ImGui_TreeNodeFlags_DefaultOpen ) :: (integer)\nDefault node to be open.",
    "name": "ImGui_TreeNodeFlags_DefaultOpen",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Default node to be open."
  },
  {
    "form": "(reaper.ImGui_TreeNodeFlags_FramePadding ) :: (integer)",
    "doc": "(reaper.ImGui_TreeNodeFlags_FramePadding ) :: (integer)\nUse FramePadding (even for an unframed text node) to vertically align text\n   baseline to regular widget height.\n   Equivalent to calling AlignTextToFramePadding.",
    "name": "ImGui_TreeNodeFlags_FramePadding",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Use FramePadding (even for an unframed text node) to vertically align text\n   baseline to regular widget height.\n   Equivalent to calling AlignTextToFramePadding."
  },
  {
    "form": "(reaper.ImGui_TreeNodeFlags_Framed ) :: (integer)",
    "doc": "(reaper.ImGui_TreeNodeFlags_Framed ) :: (integer)\nDraw frame with background (e.g. for CollapsingHeader).",
    "name": "ImGui_TreeNodeFlags_Framed",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Draw frame with background (e.g. for CollapsingHeader)."
  },
  {
    "form": "(reaper.ImGui_TreeNodeFlags_Leaf ) :: (integer)",
    "doc": "(reaper.ImGui_TreeNodeFlags_Leaf ) :: (integer)\nNo collapsing, no arrow (use as a convenience for leaf nodes).",
    "name": "ImGui_TreeNodeFlags_Leaf",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "No collapsing, no arrow (use as a convenience for leaf nodes)."
  },
  {
    "form": "(reaper.ImGui_TreeNodeFlags_NoAutoOpenOnLog ) :: (integer)",
    "doc": "(reaper.ImGui_TreeNodeFlags_NoAutoOpenOnLog ) :: (integer)\nDon't automatically and temporarily open node when Logging is active\n   (by default logging will automatically open tree nodes).",
    "name": "ImGui_TreeNodeFlags_NoAutoOpenOnLog",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Don't automatically and temporarily open node when Logging is active\n   (by default logging will automatically open tree nodes)."
  },
  {
    "form": "(reaper.ImGui_TreeNodeFlags_NoTreePushOnOpen ) :: (integer)",
    "doc": "(reaper.ImGui_TreeNodeFlags_NoTreePushOnOpen ) :: (integer)\nDon't do a TreePush when open (e.g. for CollapsingHeader)\n   = no extra indent nor pushing on ID stack.",
    "name": "ImGui_TreeNodeFlags_NoTreePushOnOpen",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Don't do a TreePush when open (e.g. for CollapsingHeader)\n   = no extra indent nor pushing on ID stack."
  },
  {
    "form": "(reaper.ImGui_TreeNodeFlags_None ) :: (integer)",
    "doc": "(reaper.ImGui_TreeNodeFlags_None ) :: (integer)\n",
    "name": "ImGui_TreeNodeFlags_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_TreeNodeFlags_OpenOnArrow ) :: (integer)",
    "doc": "(reaper.ImGui_TreeNodeFlags_OpenOnArrow ) :: (integer)\nOnly open when clicking on the arrow part.\n   If TreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or\n   double-click all box to open.",
    "name": "ImGui_TreeNodeFlags_OpenOnArrow",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Only open when clicking on the arrow part.\n   If TreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or\n   double-click all box to open."
  },
  {
    "form": "(reaper.ImGui_TreeNodeFlags_OpenOnDoubleClick ) :: (integer)",
    "doc": "(reaper.ImGui_TreeNodeFlags_OpenOnDoubleClick ) :: (integer)\nNeed double-click to open node.",
    "name": "ImGui_TreeNodeFlags_OpenOnDoubleClick",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Need double-click to open node."
  },
  {
    "form": "(reaper.ImGui_TreeNodeFlags_Selected ) :: (integer)",
    "doc": "(reaper.ImGui_TreeNodeFlags_Selected ) :: (integer)\nDraw as selected.",
    "name": "ImGui_TreeNodeFlags_Selected",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Draw as selected."
  },
  {
    "form": "(reaper.ImGui_TreeNodeFlags_SpanAvailWidth ) :: (integer)",
    "doc": "(reaper.ImGui_TreeNodeFlags_SpanAvailWidth ) :: (integer)\nExtend hit box to the right-most edge, even if not framed.\n   This is not the default in order to allow adding other items on the same line.\n   In the future we may refactor the hit system to be front-to-back,\n   allowing natural overlaps and then this can become the default.",
    "name": "ImGui_TreeNodeFlags_SpanAvailWidth",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Extend hit box to the right-most edge, even if not framed.\n   This is not the default in order to allow adding other items on the same line.\n   In the future we may refactor the hit system to be front-to-back,\n   allowing natural overlaps and then this can become the default."
  },
  {
    "form": "(reaper.ImGui_TreeNodeFlags_SpanFullWidth ) :: (integer)",
    "doc": "(reaper.ImGui_TreeNodeFlags_SpanFullWidth ) :: (integer)\nExtend hit box to the left-most and right-most edges (bypass the indented area).",
    "name": "ImGui_TreeNodeFlags_SpanFullWidth",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Extend hit box to the left-most and right-most edges (bypass the indented area)."
  },
  {
    "form": "(reaper.ImGui_TreePop ctx) :: nil",
    "doc": "(reaper.ImGui_TreePop ctx) :: nil\nctx :: ImGui_Context\nUnindent()+PopID()",
    "name": "ImGui_TreePop",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      }
    ],
    "namespace": "reaper",
    "description": "Unindent()+PopID()"
  },
  {
    "form": "(reaper.ImGui_TreePush ctx str_id) :: nil",
    "doc": "(reaper.ImGui_TreePush ctx str_id) :: nil\nctx :: ImGui_Context\nstr_id :: string\nIndent()+PushID(). Already called by TreeNode when returning true,\nbut you can call TreePush/TreePop yourself if desired.",
    "name": "ImGui_TreePush",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "str_id"
      }
    ],
    "namespace": "reaper",
    "description": "Indent()+PushID(). Already called by TreeNode when returning true,\nbut you can call TreePush/TreePop yourself if desired."
  },
  {
    "form": "(reaper.ImGui_Unindent ctx ?indent_wIn) :: nil",
    "doc": "(reaper.ImGui_Unindent ctx ?indent_wIn) :: nil\nctx :: ImGui_Context\nindent_wIn :: number (optional)\nMove content position back to the left, by 'indent_w', or\nStyleVar_IndentSpacing if 'indent_w' <= 0",
    "name": "ImGui_Unindent",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "number",
        "name": "indent_wIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Move content position back to the left, by 'indent_w', or\nStyleVar_IndentSpacing if 'indent_w' <= 0"
  },
  {
    "form": "(reaper.ImGui_VSliderDouble ctx label size_w size_h v v_min v_max ?formatIn ?flagsIn) :: (boolean number)",
    "doc": "(reaper.ImGui_VSliderDouble ctx label size_w size_h v v_min v_max ?formatIn ?flagsIn) :: (boolean number)\nctx :: ImGui_Context\nlabel :: string\nsize_w :: number\nsize_h :: number\nv :: number\nv_min :: number\nv_max :: number\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_VSliderDouble",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "number",
        "name": "size_w"
      },
      {
        "type": "number",
        "name": "size_h"
      },
      {
        "type": "number",
        "name": "v"
      },
      {
        "type": "number",
        "name": "v_min"
      },
      {
        "type": "number",
        "name": "v_max"
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "v"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_VSliderInt ctx label size_w size_h v v_min v_max ?formatIn ?flagsIn) :: (boolean integer)",
    "doc": "(reaper.ImGui_VSliderInt ctx label size_w size_h v v_min v_max ?formatIn ?flagsIn) :: (boolean integer)\nctx :: ImGui_Context\nlabel :: string\nsize_w :: number\nsize_h :: number\nv :: integer\nv_min :: integer\nv_max :: integer\nformatIn :: string (optional)\nflagsIn :: integer (optional)\n",
    "name": "ImGui_VSliderInt",
    "params": [
      {
        "type": "ImGui_Context",
        "name": "ctx"
      },
      {
        "type": "string",
        "name": "label"
      },
      {
        "type": "number",
        "name": "size_w"
      },
      {
        "type": "number",
        "name": "size_h"
      },
      {
        "type": "integer",
        "name": "v"
      },
      {
        "type": "integer",
        "name": "v_min"
      },
      {
        "type": "integer",
        "name": "v_max"
      },
      {
        "type": "string",
        "name": "formatIn",
        "optional": true
      },
      {
        "type": "integer",
        "name": "flagsIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "v"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.ImGui_ValidatePtr pointer type) :: (boolean)",
    "doc": "(reaper.ImGui_ValidatePtr pointer type) :: (boolean)\npointer :: identifier\ntype :: string\nReturn whether the pointer of the specified type is valid.\nSupported types are:\n- ImGui_Context*\n- ImGui_DrawList*\n- ImGui_DrawListSplitter*\n- ImGui_Font*\n- ImGui_Function*\n- ImGui_Image*\n- ImGui_ImageSet*\n- ImGui_ListClipper*\n- ImGui_TextFilter*\n- ImGui_Viewport*",
    "name": "ImGui_ValidatePtr",
    "params": [
      {
        "type": "identifier",
        "name": "pointer"
      },
      {
        "type": "string",
        "name": "type"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Return whether the pointer of the specified type is valid.\nSupported types are:\n- ImGui_Context*\n- ImGui_DrawList*\n- ImGui_DrawListSplitter*\n- ImGui_Font*\n- ImGui_Function*\n- ImGui_Image*\n- ImGui_ImageSet*\n- ImGui_ListClipper*\n- ImGui_TextFilter*\n- ImGui_Viewport*"
  },
  {
    "form": "(reaper.ImGui_Viewport_GetCenter viewport) :: (number number)",
    "doc": "(reaper.ImGui_Viewport_GetCenter viewport) :: (number number)\nviewport :: ImGui_Viewport\nCenter of the viewport.",
    "name": "ImGui_Viewport_GetCenter",
    "params": [
      {
        "type": "ImGui_Viewport",
        "name": "viewport"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "x"
      },
      {
        "type": "number",
        "name": "y"
      }
    ],
    "namespace": "reaper",
    "description": "Center of the viewport."
  },
  {
    "form": "(reaper.ImGui_Viewport_GetPos viewport) :: (number number)",
    "doc": "(reaper.ImGui_Viewport_GetPos viewport) :: (number number)\nviewport :: ImGui_Viewport\nMain Area: Position of the viewport",
    "name": "ImGui_Viewport_GetPos",
    "params": [
      {
        "type": "ImGui_Viewport",
        "name": "viewport"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "x"
      },
      {
        "type": "number",
        "name": "y"
      }
    ],
    "namespace": "reaper",
    "description": "Main Area: Position of the viewport"
  },
  {
    "form": "(reaper.ImGui_Viewport_GetSize viewport) :: (number number)",
    "doc": "(reaper.ImGui_Viewport_GetSize viewport) :: (number number)\nviewport :: ImGui_Viewport\nMain Area: Size of the viewport.",
    "name": "ImGui_Viewport_GetSize",
    "params": [
      {
        "type": "ImGui_Viewport",
        "name": "viewport"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "w"
      },
      {
        "type": "number",
        "name": "h"
      }
    ],
    "namespace": "reaper",
    "description": "Main Area: Size of the viewport."
  },
  {
    "form": "(reaper.ImGui_Viewport_GetWorkCenter viewport) :: (number number)",
    "doc": "(reaper.ImGui_Viewport_GetWorkCenter viewport) :: (number number)\nviewport :: ImGui_Viewport\nCenter of the viewport's work area.",
    "name": "ImGui_Viewport_GetWorkCenter",
    "params": [
      {
        "type": "ImGui_Viewport",
        "name": "viewport"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "x"
      },
      {
        "type": "number",
        "name": "y"
      }
    ],
    "namespace": "reaper",
    "description": "Center of the viewport's work area."
  },
  {
    "form": "(reaper.ImGui_Viewport_GetWorkPos viewport) :: (number number)",
    "doc": "(reaper.ImGui_Viewport_GetWorkPos viewport) :: (number number)\nviewport :: ImGui_Viewport\n>= Viewport_GetPos",
    "name": "ImGui_Viewport_GetWorkPos",
    "params": [
      {
        "type": "ImGui_Viewport",
        "name": "viewport"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "x"
      },
      {
        "type": "number",
        "name": "y"
      }
    ],
    "namespace": "reaper",
    "description": ">= Viewport_GetPos"
  },
  {
    "form": "(reaper.ImGui_Viewport_GetWorkSize viewport) :: (number number)",
    "doc": "(reaper.ImGui_Viewport_GetWorkSize viewport) :: (number number)\nviewport :: ImGui_Viewport\n<= Viewport_GetSize",
    "name": "ImGui_Viewport_GetWorkSize",
    "params": [
      {
        "type": "ImGui_Viewport",
        "name": "viewport"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "w"
      },
      {
        "type": "number",
        "name": "h"
      }
    ],
    "namespace": "reaper",
    "description": "<= Viewport_GetSize"
  },
  {
    "form": "(reaper.ImGui_WindowFlags_AlwaysAutoResize ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_AlwaysAutoResize ) :: (integer)\nResize every window to its content every frame.",
    "name": "ImGui_WindowFlags_AlwaysAutoResize",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Resize every window to its content every frame."
  },
  {
    "form": "(reaper.ImGui_WindowFlags_AlwaysHorizontalScrollbar ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_AlwaysHorizontalScrollbar ) :: (integer)\nAlways show horizontal scrollbar (even if ContentSize.x < Size.x).",
    "name": "ImGui_WindowFlags_AlwaysHorizontalScrollbar",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Always show horizontal scrollbar (even if ContentSize.x < Size.x)."
  },
  {
    "form": "(reaper.ImGui_WindowFlags_AlwaysUseWindowPadding ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_AlwaysUseWindowPadding ) :: (integer)\nEnsure child windows without border uses StyleVar_WindowPadding\n   (ignored by default for non-bordered child windows, because more convenient).",
    "name": "ImGui_WindowFlags_AlwaysUseWindowPadding",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Ensure child windows without border uses StyleVar_WindowPadding\n   (ignored by default for non-bordered child windows, because more convenient)."
  },
  {
    "form": "(reaper.ImGui_WindowFlags_AlwaysVerticalScrollbar ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_AlwaysVerticalScrollbar ) :: (integer)\nAlways show vertical scrollbar (even if ContentSize.y < Size.y).",
    "name": "ImGui_WindowFlags_AlwaysVerticalScrollbar",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Always show vertical scrollbar (even if ContentSize.y < Size.y)."
  },
  {
    "form": "(reaper.ImGui_WindowFlags_HorizontalScrollbar ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_HorizontalScrollbar ) :: (integer)\nAllow horizontal scrollbar to appear (off by default).\n   You may use SetNextWindowContentSize(width, 0.0) prior to calling Begin() to\n   specify width. Read code in the demo's \"Horizontal Scrolling\" section.",
    "name": "ImGui_WindowFlags_HorizontalScrollbar",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Allow horizontal scrollbar to appear (off by default).\n   You may use SetNextWindowContentSize(width, 0.0) prior to calling Begin() to\n   specify width. Read code in the demo's \"Horizontal Scrolling\" section."
  },
  {
    "form": "(reaper.ImGui_WindowFlags_MenuBar ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_MenuBar ) :: (integer)\nHas a menu-bar.",
    "name": "ImGui_WindowFlags_MenuBar",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Has a menu-bar."
  },
  {
    "form": "(reaper.ImGui_WindowFlags_NoBackground ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_NoBackground ) :: (integer)\nDisable drawing background color (WindowBg, etc.) and outside border.\n   Similar as using SetNextWindowBgAlpha(0.0).",
    "name": "ImGui_WindowFlags_NoBackground",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable drawing background color (WindowBg, etc.) and outside border.\n   Similar as using SetNextWindowBgAlpha(0.0)."
  },
  {
    "form": "(reaper.ImGui_WindowFlags_NoCollapse ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_NoCollapse ) :: (integer)\nDisable user collapsing window by double-clicking on it.\n   Also referred to as Window Menu Button (e.g. within a docking node).",
    "name": "ImGui_WindowFlags_NoCollapse",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable user collapsing window by double-clicking on it.\n   Also referred to as Window Menu Button (e.g. within a docking node)."
  },
  {
    "form": "(reaper.ImGui_WindowFlags_NoDecoration ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_NoDecoration ) :: (integer)\nWindowFlags_NoTitleBar | WindowFlags_NoResize | WindowFlags_NoScrollbar |\n   WindowFlags_NoCollapse",
    "name": "ImGui_WindowFlags_NoDecoration",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "WindowFlags_NoTitleBar | WindowFlags_NoResize | WindowFlags_NoScrollbar |\n   WindowFlags_NoCollapse"
  },
  {
    "form": "(reaper.ImGui_WindowFlags_NoDocking ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_NoDocking ) :: (integer)\nDisable docking of this window.",
    "name": "ImGui_WindowFlags_NoDocking",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable docking of this window."
  },
  {
    "form": "(reaper.ImGui_WindowFlags_NoFocusOnAppearing ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_NoFocusOnAppearing ) :: (integer)\nDisable taking focus when transitioning from hidden to visible state.",
    "name": "ImGui_WindowFlags_NoFocusOnAppearing",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable taking focus when transitioning from hidden to visible state."
  },
  {
    "form": "(reaper.ImGui_WindowFlags_NoInputs ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_NoInputs ) :: (integer)\nWindowFlags_NoMouseInputs | WindowFlags_NoNavInputs | WindowFlags_NoNavFocus",
    "name": "ImGui_WindowFlags_NoInputs",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "WindowFlags_NoMouseInputs | WindowFlags_NoNavInputs | WindowFlags_NoNavFocus"
  },
  {
    "form": "(reaper.ImGui_WindowFlags_NoMouseInputs ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_NoMouseInputs ) :: (integer)\nDisable catching mouse, hovering test with pass through.",
    "name": "ImGui_WindowFlags_NoMouseInputs",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable catching mouse, hovering test with pass through."
  },
  {
    "form": "(reaper.ImGui_WindowFlags_NoMove ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_NoMove ) :: (integer)\nDisable user moving the window.",
    "name": "ImGui_WindowFlags_NoMove",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable user moving the window."
  },
  {
    "form": "(reaper.ImGui_WindowFlags_NoNav ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_NoNav ) :: (integer)\nWindowFlags_NoNavInputs | WindowFlags_NoNavFocus",
    "name": "ImGui_WindowFlags_NoNav",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "WindowFlags_NoNavInputs | WindowFlags_NoNavFocus"
  },
  {
    "form": "(reaper.ImGui_WindowFlags_NoNavFocus ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_NoNavFocus ) :: (integer)\nNo focusing toward this window with gamepad/keyboard navigation\n   (e.g. skipped by CTRL+TAB).",
    "name": "ImGui_WindowFlags_NoNavFocus",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "No focusing toward this window with gamepad/keyboard navigation\n   (e.g. skipped by CTRL+TAB)."
  },
  {
    "form": "(reaper.ImGui_WindowFlags_NoNavInputs ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_NoNavInputs ) :: (integer)\nNo gamepad/keyboard navigation within the window.",
    "name": "ImGui_WindowFlags_NoNavInputs",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "No gamepad/keyboard navigation within the window."
  },
  {
    "form": "(reaper.ImGui_WindowFlags_NoResize ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_NoResize ) :: (integer)\nDisable user resizing with the lower-right grip.",
    "name": "ImGui_WindowFlags_NoResize",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable user resizing with the lower-right grip."
  },
  {
    "form": "(reaper.ImGui_WindowFlags_NoSavedSettings ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_NoSavedSettings ) :: (integer)\nNever load/save settings in .ini file.",
    "name": "ImGui_WindowFlags_NoSavedSettings",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Never load/save settings in .ini file."
  },
  {
    "form": "(reaper.ImGui_WindowFlags_NoScrollWithMouse ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_NoScrollWithMouse ) :: (integer)\nDisable user vertically scrolling with mouse wheel.\n   On child window, mouse wheel will be forwarded to the parent unless\n   NoScrollbar is also set.",
    "name": "ImGui_WindowFlags_NoScrollWithMouse",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable user vertically scrolling with mouse wheel.\n   On child window, mouse wheel will be forwarded to the parent unless\n   NoScrollbar is also set."
  },
  {
    "form": "(reaper.ImGui_WindowFlags_NoScrollbar ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_NoScrollbar ) :: (integer)\nDisable scrollbars (window can still scroll with mouse or programmatically).",
    "name": "ImGui_WindowFlags_NoScrollbar",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable scrollbars (window can still scroll with mouse or programmatically)."
  },
  {
    "form": "(reaper.ImGui_WindowFlags_NoTitleBar ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_NoTitleBar ) :: (integer)\nDisable title-bar.",
    "name": "ImGui_WindowFlags_NoTitleBar",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Disable title-bar."
  },
  {
    "form": "(reaper.ImGui_WindowFlags_None ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_None ) :: (integer)\nDefault flag.",
    "name": "ImGui_WindowFlags_None",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Default flag."
  },
  {
    "form": "(reaper.ImGui_WindowFlags_TopMost ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_TopMost ) :: (integer)\nShow the window above all non-topmost windows.",
    "name": "ImGui_WindowFlags_TopMost",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Show the window above all non-topmost windows."
  },
  {
    "form": "(reaper.ImGui_WindowFlags_UnsavedDocument ) :: (integer)",
    "doc": "(reaper.ImGui_WindowFlags_UnsavedDocument ) :: (integer)\nDisplay a dot next to the title. When used in a tab/docking context,\n   tab is selected when clicking the X + closure is not assumed\n   (will wait for user to stop submitting the tab).\n   Otherwise closure is assumed when pressing the X,\n   so if you keep submitting the tab may reappear at end of tab bar.",
    "name": "ImGui_WindowFlags_UnsavedDocument",
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Display a dot next to the title. When used in a tab/docking context,\n   tab is selected when clicking the X + closure is not assumed\n   (will wait for user to stop submitting the tab).\n   Otherwise closure is assumed when pressing the X,\n   so if you keep submitting the tab may reappear at end of tab bar."
  },
  {
    "form": "(reaper.JS_Actions_CountShortcuts section cmdID) :: (integer)",
    "doc": "(reaper.JS_Actions_CountShortcuts section cmdID) :: (integer)\nsection :: integer\ncmdID :: integer\nSection:\n0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer.",
    "name": "JS_Actions_CountShortcuts",
    "params": [
      {
        "type": "integer",
        "name": "section"
      },
      {
        "type": "integer",
        "name": "cmdID"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Section:\n0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer."
  },
  {
    "form": "(reaper.JS_Actions_DeleteShortcut section cmdID shortcutidx) :: (boolean)",
    "doc": "(reaper.JS_Actions_DeleteShortcut section cmdID shortcutidx) :: (boolean)\nsection :: integer\ncmdID :: integer\nshortcutidx :: integer\nSection:\n0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer.",
    "name": "JS_Actions_DeleteShortcut",
    "params": [
      {
        "type": "integer",
        "name": "section"
      },
      {
        "type": "integer",
        "name": "cmdID"
      },
      {
        "type": "integer",
        "name": "shortcutidx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Section:\n0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer."
  },
  {
    "form": "(reaper.JS_Actions_DoShortcutDialog section cmdID shortcutidx) :: (boolean)",
    "doc": "(reaper.JS_Actions_DoShortcutDialog section cmdID shortcutidx) :: (boolean)\nsection :: integer\ncmdID :: integer\nshortcutidx :: integer\nSection:\n0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer.\nIf the shortcut index is higher than the current number of shortcuts, it will add a new shortcut.",
    "name": "JS_Actions_DoShortcutDialog",
    "params": [
      {
        "type": "integer",
        "name": "section"
      },
      {
        "type": "integer",
        "name": "cmdID"
      },
      {
        "type": "integer",
        "name": "shortcutidx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Section:\n0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer.\nIf the shortcut index is higher than the current number of shortcuts, it will add a new shortcut."
  },
  {
    "form": "(reaper.JS_Actions_GetShortcutDesc section cmdID shortcutidx) :: (boolean string)",
    "doc": "(reaper.JS_Actions_GetShortcutDesc section cmdID shortcutidx) :: (boolean string)\nsection :: integer\ncmdID :: integer\nshortcutidx :: integer\nSection:\n0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer.",
    "name": "JS_Actions_GetShortcutDesc",
    "params": [
      {
        "type": "integer",
        "name": "section"
      },
      {
        "type": "integer",
        "name": "cmdID"
      },
      {
        "type": "integer",
        "name": "shortcutidx"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "desc"
      }
    ],
    "namespace": "reaper",
    "description": "Section:\n0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer."
  },
  {
    "form": "(reaper.JS_Byte pointer offset) :: (integer)",
    "doc": "(reaper.JS_Byte pointer offset) :: (integer)\npointer :: identifier\noffset :: integer\nReturns the unsigned byte at address[offset]. Offset is added as steps of 1 byte each.",
    "name": "JS_Byte",
    "params": [
      {
        "type": "identifier",
        "name": "pointer"
      },
      {
        "type": "integer",
        "name": "offset"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "byte"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the unsigned byte at address[offset]. Offset is added as steps of 1 byte each."
  },
  {
    "form": "(reaper.JS_Composite windowHWND dstx dsty dstw dsth sysBitmap srcx srcy srcw srch autoUpdate) :: (integer)",
    "doc": "(reaper.JS_Composite windowHWND dstx dsty dstw dsth sysBitmap srcx srcy srcw srch autoUpdate) :: (integer)\nwindowHWND :: identifier\ndstx :: integer\ndsty :: integer\ndstw :: integer\ndsth :: integer\nsysBitmap :: identifier\nsrcx :: integer\nsrcy :: integer\nsrcw :: integer\nsrch :: integer\nautoUpdate :: unsupported\nComposites a LICE bitmap with a REAPER window.  Each time that the window is re-drawn, the bitmap will be blitted over the window's client area (with per-pixel alpha blending).\n * If dstw or dsth is -1, the bitmap will be stretched to fill the width or height of the window, respectively.\n * autoUpdate is an optional parameter that is false by default. If true, JS_Composite will automatically invalidate and re-draw the part of the window that covers the current position of the bitmap, and if the bitmap is being moved, also the previous position. (If only one or a handful of bitmaps are being moved across the screen, autoUpdate should result in smoother animation on WindowsOS; if numerous bitmaps are spread over the entire window, it may be faster to disable autoUpdate and instead call JS_Window_InvalidateRect explicitly once all bitmaps have been moved.)\n * InvalidateRect should also be called whenever the contents of the bitmap contents have been changed, but not the position, to trigger a window update.\n * On WindowsOS, the key to reducing flickering is to slow down the frequency at which the window is re-drawn. InvalidateRect should only be called when absolutely necessary, preferably not more than 20 times per second.  (Also refer to the JS_Composite_Delay function.)\n * On WindowsOS, flickering can further be reduced by keeping the invalidated area as small as possible, covering only the bitmaps that have been edited or moved.  However, if numerous bitmaps are spread over the entire window, it may be faster to simply invalidate the entire client area. \n * This function should not be applied directly to top-level windows, but rather to child windows.\n * Some classes of UI elements, particularly buttons, do not take kindly to being composited, and may crash REAPER.\n * On WindowsOS, GDI blitting does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect.\nReturns:\n1 if successful, otherwise -1 = windowHWND is not a window, -3 = Could not obtain the original window process, -4 = sysBitmap is not a LICE bitmap, -5 = sysBitmap is not a system bitmap, -6 = Could not obtain the window HDC, -7 = Error when subclassing to new window process.",
    "name": "JS_Composite",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "integer",
        "name": "dstx"
      },
      {
        "type": "integer",
        "name": "dsty"
      },
      {
        "type": "integer",
        "name": "dstw"
      },
      {
        "type": "integer",
        "name": "dsth"
      },
      {
        "type": "identifier",
        "name": "sysBitmap"
      },
      {
        "type": "integer",
        "name": "srcx"
      },
      {
        "type": "integer",
        "name": "srcy"
      },
      {
        "type": "integer",
        "name": "srcw"
      },
      {
        "type": "integer",
        "name": "srch"
      },
      {
        "type": "unsupported",
        "name": "autoUpdate"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Composites a LICE bitmap with a REAPER window.  Each time that the window is re-drawn, the bitmap will be blitted over the window's client area (with per-pixel alpha blending).\n * If dstw or dsth is -1, the bitmap will be stretched to fill the width or height of the window, respectively.\n * autoUpdate is an optional parameter that is false by default. If true, JS_Composite will automatically invalidate and re-draw the part of the window that covers the current position of the bitmap, and if the bitmap is being moved, also the previous position. (If only one or a handful of bitmaps are being moved across the screen, autoUpdate should result in smoother animation on WindowsOS; if numerous bitmaps are spread over the entire window, it may be faster to disable autoUpdate and instead call JS_Window_InvalidateRect explicitly once all bitmaps have been moved.)\n * InvalidateRect should also be called whenever the contents of the bitmap contents have been changed, but not the position, to trigger a window update.\n * On WindowsOS, the key to reducing flickering is to slow down the frequency at which the window is re-drawn. InvalidateRect should only be called when absolutely necessary, preferably not more than 20 times per second.  (Also refer to the JS_Composite_Delay function.)\n * On WindowsOS, flickering can further be reduced by keeping the invalidated area as small as possible, covering only the bitmaps that have been edited or moved.  However, if numerous bitmaps are spread over the entire window, it may be faster to simply invalidate the entire client area. \n * This function should not be applied directly to top-level windows, but rather to child windows.\n * Some classes of UI elements, particularly buttons, do not take kindly to being composited, and may crash REAPER.\n * On WindowsOS, GDI blitting does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect.\nReturns:\n1 if successful, otherwise -1 = windowHWND is not a window, -3 = Could not obtain the original window process, -4 = sysBitmap is not a LICE bitmap, -5 = sysBitmap is not a system bitmap, -6 = Could not obtain the window HDC, -7 = Error when subclassing to new window process."
  },
  {
    "form": "(reaper.JS_Composite_Delay windowHWND minTime maxTime numBitmapsWhenMax) :: (integer number number integer)",
    "doc": "(reaper.JS_Composite_Delay windowHWND minTime maxTime numBitmapsWhenMax) :: (integer number number integer)\nwindowHWND :: identifier\nminTime :: number\nmaxTime :: number\nnumBitmapsWhenMax :: integer\nOn WindowsOS, flickering of composited images can be improved considerably by slowing the refresh rate of the window.  The optimal refresh rate may depend on the number of composited bitmaps.\nminTime is the minimum refresh delay, in seconds, when only one bitmap is composited onto the window.  The delay time will increase linearly with the number of bitmaps, up to a maximum of maxTime when numBitmapsWhenMax is reached.\nIf both minTime and maxTime are 0, all delay settings for the window are cleared.\nReturns:\n * retval = 1 if successful, 0 if arguments are invalid (i.e. if maxTime < minTime, or maxBitmaps < 1).\n * If delay times have not previously been set for this window, prev time values are 0.",
    "name": "JS_Composite_Delay",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "number",
        "name": "minTime"
      },
      {
        "type": "number",
        "name": "maxTime"
      },
      {
        "type": "integer",
        "name": "numBitmapsWhenMax"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "prevMinTime"
      },
      {
        "type": "number",
        "name": "prevMaxTime"
      },
      {
        "type": "integer",
        "name": "prevBitmaps"
      }
    ],
    "namespace": "reaper",
    "description": "On WindowsOS, flickering of composited images can be improved considerably by slowing the refresh rate of the window.  The optimal refresh rate may depend on the number of composited bitmaps.\nminTime is the minimum refresh delay, in seconds, when only one bitmap is composited onto the window.  The delay time will increase linearly with the number of bitmaps, up to a maximum of maxTime when numBitmapsWhenMax is reached.\nIf both minTime and maxTime are 0, all delay settings for the window are cleared.\nReturns:\n * retval = 1 if successful, 0 if arguments are invalid (i.e. if maxTime < minTime, or maxBitmaps < 1).\n * If delay times have not previously been set for this window, prev time values are 0."
  },
  {
    "form": "(reaper.JS_Composite_ListBitmaps windowHWND) :: (integer string)",
    "doc": "(reaper.JS_Composite_ListBitmaps windowHWND) :: (integer string)\nwindowHWND :: identifier\nReturns all bitmaps composited to the given window.\nThe list is formatted as a comma-separated string of hexadecimal values, each representing a LICE_IBitmap* pointer.\nretval is the number of linked bitmaps found, or negative if an error occured.",
    "name": "JS_Composite_ListBitmaps",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "list"
      }
    ],
    "namespace": "reaper",
    "description": "Returns all bitmaps composited to the given window.\nThe list is formatted as a comma-separated string of hexadecimal values, each representing a LICE_IBitmap* pointer.\nretval is the number of linked bitmaps found, or negative if an error occured."
  },
  {
    "form": "(reaper.JS_Composite_Unlink windowHWND bitmap autoUpdate) :: nil",
    "doc": "(reaper.JS_Composite_Unlink windowHWND bitmap autoUpdate) :: nil\nwindowHWND :: identifier\nbitmap :: identifier\nautoUpdate :: unsupported\nUnlinks the window and bitmap.\n * autoUpdate is an optional parameter. If unlinking a single bitmap and autoUpdate is true, the function will automatically re-draw the window to remove the blitted image.\nIf no bitmap is specified, all bitmaps composited to the window will be unlinked -- even those by other scripts.",
    "name": "JS_Composite_Unlink",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "identifier",
        "name": "bitmap"
      },
      {
        "type": "unsupported",
        "name": "autoUpdate"
      }
    ],
    "namespace": "reaper",
    "description": "Unlinks the window and bitmap.\n * autoUpdate is an optional parameter. If unlinking a single bitmap and autoUpdate is true, the function will automatically re-draw the window to remove the blitted image.\nIf no bitmap is specified, all bitmaps composited to the window will be unlinked -- even those by other scripts."
  },
  {
    "form": "(reaper.JS_Dialog_BrowseForFolder caption initialFolder) :: (integer string)",
    "doc": "(reaper.JS_Dialog_BrowseForFolder caption initialFolder) :: (integer string)\ncaption :: string\ninitialFolder :: string\nretval is 1 if a file was selected, 0 if the user cancelled the dialog, and -1 if an error occurred.",
    "name": "JS_Dialog_BrowseForFolder",
    "params": [
      {
        "type": "string",
        "name": "caption"
      },
      {
        "type": "string",
        "name": "initialFolder"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "folder"
      }
    ],
    "namespace": "reaper",
    "description": "retval is 1 if a file was selected, 0 if the user cancelled the dialog, and -1 if an error occurred."
  },
  {
    "form": "(reaper.JS_Dialog_BrowseForOpenFiles windowTitle initialFolder initialFile extensionList allowMultiple) :: (integer string)",
    "doc": "(reaper.JS_Dialog_BrowseForOpenFiles windowTitle initialFolder initialFile extensionList allowMultiple) :: (integer string)\nwindowTitle :: string\ninitialFolder :: string\ninitialFile :: string\nextensionList :: string\nallowMultiple :: boolean\nIf allowMultiple is true, multiple files may be selected. The returned string is \\0-separated, with the first substring containing the folder path and subsequent substrings containing the file names.\n * On macOS, the first substring may be empty, and each file name will then contain its entire path.\n * This function only allows selection of existing files, and does not allow creation of new files.\nextensionList is a string containing pairs of \\0-terminated substrings. The last substring must be terminated by two \\0 characters. Each pair defines one filter pattern:\n * The first substring in each pair describes the filter in user-readable form (for example, \"Lua script files (*.lua)\") and will be displayed in the dialog box.\n * The second substring specifies the filter that the operating system must use to search for the files (for example, \"*.txt\"; the wildcard should not be omitted). To specify multiple extensions for a single display string, use a semicolon to separate the patterns (for example, \"*.lua;*.eel\").\nAn example of an extensionList string:\n\"ReaScript files\\0*.lua;*.eel\\0Lua files (.lua)\\0*.lua\\0EEL files (.eel)\\0*.eel\\0\\0\".\nOn macOS, file dialogs do not accept empty extensionLists, nor wildcard extensions (such as \"All files\\0*.*\\0\\0\"), so each acceptable extension must be listed explicitly. On Linux and Windows, wildcard extensions are acceptable, and if the extensionList string is empty, the dialog will display a default \"All files (*.*)\" filter.\nretval is 1 if one or more files were selected, 0 if the user cancelled the dialog, or negative if an error occurred.\nDisplaying \\0-separated strings:\n * REAPER's IDE and ShowConsoleMsg only display strings up to the first \\0 byte. If multiple files were selected, only the first substring containing the path will be displayed. This is not a problem for Lua or EEL, which can access the full string beyond the first \\0 byte as usual.",
    "name": "JS_Dialog_BrowseForOpenFiles",
    "params": [
      {
        "type": "string",
        "name": "windowTitle"
      },
      {
        "type": "string",
        "name": "initialFolder"
      },
      {
        "type": "string",
        "name": "initialFile"
      },
      {
        "type": "string",
        "name": "extensionList"
      },
      {
        "type": "boolean",
        "name": "allowMultiple"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "fileNames"
      }
    ],
    "namespace": "reaper",
    "description": "If allowMultiple is true, multiple files may be selected. The returned string is \\0-separated, with the first substring containing the folder path and subsequent substrings containing the file names.\n * On macOS, the first substring may be empty, and each file name will then contain its entire path.\n * This function only allows selection of existing files, and does not allow creation of new files.\nextensionList is a string containing pairs of \\0-terminated substrings. The last substring must be terminated by two \\0 characters. Each pair defines one filter pattern:\n * The first substring in each pair describes the filter in user-readable form (for example, \"Lua script files (*.lua)\") and will be displayed in the dialog box.\n * The second substring specifies the filter that the operating system must use to search for the files (for example, \"*.txt\"; the wildcard should not be omitted). To specify multiple extensions for a single display string, use a semicolon to separate the patterns (for example, \"*.lua;*.eel\").\nAn example of an extensionList string:\n\"ReaScript files\\0*.lua;*.eel\\0Lua files (.lua)\\0*.lua\\0EEL files (.eel)\\0*.eel\\0\\0\".\nOn macOS, file dialogs do not accept empty extensionLists, nor wildcard extensions (such as \"All files\\0*.*\\0\\0\"), so each acceptable extension must be listed explicitly. On Linux and Windows, wildcard extensions are acceptable, and if the extensionList string is empty, the dialog will display a default \"All files (*.*)\" filter.\nretval is 1 if one or more files were selected, 0 if the user cancelled the dialog, or negative if an error occurred.\nDisplaying \\0-separated strings:\n * REAPER's IDE and ShowConsoleMsg only display strings up to the first \\0 byte. If multiple files were selected, only the first substring containing the path will be displayed. This is not a problem for Lua or EEL, which can access the full string beyond the first \\0 byte as usual."
  },
  {
    "form": "(reaper.JS_Dialog_BrowseForSaveFile windowTitle initialFolder initialFile extensionList) :: (integer string)",
    "doc": "(reaper.JS_Dialog_BrowseForSaveFile windowTitle initialFolder initialFile extensionList) :: (integer string)\nwindowTitle :: string\ninitialFolder :: string\ninitialFile :: string\nextensionList :: string\nretval is 1 if a file was selected, 0 if the user cancelled the dialog, or negative if an error occurred.\nextensionList is as described for JS_Dialog_BrowseForOpenFiles.",
    "name": "JS_Dialog_BrowseForSaveFile",
    "params": [
      {
        "type": "string",
        "name": "windowTitle"
      },
      {
        "type": "string",
        "name": "initialFolder"
      },
      {
        "type": "string",
        "name": "initialFile"
      },
      {
        "type": "string",
        "name": "extensionList"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "fileName"
      }
    ],
    "namespace": "reaper",
    "description": "retval is 1 if a file was selected, 0 if the user cancelled the dialog, or negative if an error occurred.\nextensionList is as described for JS_Dialog_BrowseForOpenFiles."
  },
  {
    "form": "(reaper.JS_Double pointer offset) :: (number)",
    "doc": "(reaper.JS_Double pointer offset) :: (number)\npointer :: identifier\noffset :: integer\nReturns the 8-byte floating point value at address[offset]. Offset is added as steps of 8 bytes each.",
    "name": "JS_Double",
    "params": [
      {
        "type": "identifier",
        "name": "pointer"
      },
      {
        "type": "integer",
        "name": "offset"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "double"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the 8-byte floating point value at address[offset]. Offset is added as steps of 8 bytes each."
  },
  {
    "form": "(reaper.JS_File_Stat filePath) :: (integer number string string string integer integer integer integer integer integer integer)",
    "doc": "(reaper.JS_File_Stat filePath) :: (integer number string string string integer integer integer integer integer integer integer)\nfilePath :: string\nReturns information about a file.\ncTime is not implemented on all systems. If it does return a time, the value may differ depending on the OS: on WindowsOS, it may refer to the time that the file was either created or copied, whereas on Linux and macOS, it may refer to the time of last status change.\nretval is 0 if successful, negative if not.",
    "name": "JS_File_Stat",
    "params": [
      {
        "type": "string",
        "name": "filePath"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "size"
      },
      {
        "type": "string",
        "name": "accessedTime"
      },
      {
        "type": "string",
        "name": "modifiedTime"
      },
      {
        "type": "string",
        "name": "cTime"
      },
      {
        "type": "integer",
        "name": "deviceID"
      },
      {
        "type": "integer",
        "name": "deviceSpecialID"
      },
      {
        "type": "integer",
        "name": "inode"
      },
      {
        "type": "integer",
        "name": "mode"
      },
      {
        "type": "integer",
        "name": "numLinks"
      },
      {
        "type": "integer",
        "name": "ownerUserID"
      },
      {
        "type": "integer",
        "name": "ownerGroupID"
      }
    ],
    "namespace": "reaper",
    "description": "Returns information about a file.\ncTime is not implemented on all systems. If it does return a time, the value may differ depending on the OS: on WindowsOS, it may refer to the time that the file was either created or copied, whereas on Linux and macOS, it may refer to the time of last status change.\nretval is 0 if successful, negative if not."
  },
  {
    "form": "(reaper.JS_GDI_Blit destHDC dstx dsty sourceHDC srcx srxy width height ?mode) :: nil",
    "doc": "(reaper.JS_GDI_Blit destHDC dstx dsty sourceHDC srcx srxy width height ?mode) :: nil\ndestHDC :: identifier\ndstx :: integer\ndsty :: integer\nsourceHDC :: identifier\nsrcx :: integer\nsrxy :: integer\nwidth :: integer\nheight :: integer\nmode :: string (optional)\nBlits between two device contexts, which may include LICE \"system bitmaps\".\nmode: Optional parameter. \"SRCCOPY\" by default, or specify \"ALPHA\" to enable per-pixel alpha blending.\nWARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect.",
    "name": "JS_GDI_Blit",
    "params": [
      {
        "type": "identifier",
        "name": "destHDC"
      },
      {
        "type": "integer",
        "name": "dstx"
      },
      {
        "type": "integer",
        "name": "dsty"
      },
      {
        "type": "identifier",
        "name": "sourceHDC"
      },
      {
        "type": "integer",
        "name": "srcx"
      },
      {
        "type": "integer",
        "name": "srxy"
      },
      {
        "type": "integer",
        "name": "width"
      },
      {
        "type": "integer",
        "name": "height"
      },
      {
        "type": "string",
        "name": "mode",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Blits between two device contexts, which may include LICE \"system bitmaps\".\nmode: Optional parameter. \"SRCCOPY\" by default, or specify \"ALPHA\" to enable per-pixel alpha blending.\nWARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect."
  },
  {
    "form": "(reaper.JS_GDI_CreateFillBrush color) :: (identifier)",
    "doc": "(reaper.JS_GDI_CreateFillBrush color) :: (identifier)\ncolor :: integer\n",
    "name": "JS_GDI_CreateFillBrush",
    "params": [
      {
        "type": "integer",
        "name": "color"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_GDI_CreateFont height weight angle italic underline strike fontName) :: (identifier)",
    "doc": "(reaper.JS_GDI_CreateFont height weight angle italic underline strike fontName) :: (identifier)\nheight :: integer\nweight :: integer\nangle :: integer\nitalic :: boolean\nunderline :: boolean\nstrike :: boolean\nfontName :: string\nParameters:\n * weight: 0 - 1000, with 0 = auto, 400 = normal and 700 = bold.\n * angle: the angle, in tenths of degrees, between the text and the x-axis of the device.\n * fontName: If empty string \"\", uses first font that matches the other specified attributes.\nNote: Text color must be set separately.",
    "name": "JS_GDI_CreateFont",
    "params": [
      {
        "type": "integer",
        "name": "height"
      },
      {
        "type": "integer",
        "name": "weight"
      },
      {
        "type": "integer",
        "name": "angle"
      },
      {
        "type": "boolean",
        "name": "italic"
      },
      {
        "type": "boolean",
        "name": "underline"
      },
      {
        "type": "boolean",
        "name": "strike"
      },
      {
        "type": "string",
        "name": "fontName"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "Parameters:\n * weight: 0 - 1000, with 0 = auto, 400 = normal and 700 = bold.\n * angle: the angle, in tenths of degrees, between the text and the x-axis of the device.\n * fontName: If empty string \"\", uses first font that matches the other specified attributes.\nNote: Text color must be set separately."
  },
  {
    "form": "(reaper.JS_GDI_CreatePen width color) :: (identifier)",
    "doc": "(reaper.JS_GDI_CreatePen width color) :: (identifier)\nwidth :: integer\ncolor :: integer\n",
    "name": "JS_GDI_CreatePen",
    "params": [
      {
        "type": "integer",
        "name": "width"
      },
      {
        "type": "integer",
        "name": "color"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_GDI_DeleteObject GDIObject) :: nil",
    "doc": "(reaper.JS_GDI_DeleteObject GDIObject) :: nil\nGDIObject :: identifier\n",
    "name": "JS_GDI_DeleteObject",
    "params": [
      {
        "type": "identifier",
        "name": "GDIObject"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_GDI_DrawText deviceHDC text len left top right bottom align) :: (integer)",
    "doc": "(reaper.JS_GDI_DrawText deviceHDC text len left top right bottom align) :: (integer)\ndeviceHDC :: identifier\ntext :: string\nlen :: integer\nleft :: integer\ntop :: integer\nright :: integer\nbottom :: integer\nalign :: string\nParameters:\n * align: Combination of: \"TOP\", \"VCENTER\", \"LEFT\", \"HCENTER\", \"RIGHT\", \"BOTTOM\", \"WORDBREAK\", \"SINGLELINE\", \"NOCLIP\", \"CALCRECT\", \"NOPREFIX\" or \"ELLIPSIS\"",
    "name": "JS_GDI_DrawText",
    "params": [
      {
        "type": "identifier",
        "name": "deviceHDC"
      },
      {
        "type": "string",
        "name": "text"
      },
      {
        "type": "integer",
        "name": "len"
      },
      {
        "type": "integer",
        "name": "left"
      },
      {
        "type": "integer",
        "name": "top"
      },
      {
        "type": "integer",
        "name": "right"
      },
      {
        "type": "integer",
        "name": "bottom"
      },
      {
        "type": "string",
        "name": "align"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Parameters:\n * align: Combination of: \"TOP\", \"VCENTER\", \"LEFT\", \"HCENTER\", \"RIGHT\", \"BOTTOM\", \"WORDBREAK\", \"SINGLELINE\", \"NOCLIP\", \"CALCRECT\", \"NOPREFIX\" or \"ELLIPSIS\""
  },
  {
    "form": "(reaper.JS_GDI_FillEllipse deviceHDC left top right bottom) :: nil",
    "doc": "(reaper.JS_GDI_FillEllipse deviceHDC left top right bottom) :: nil\ndeviceHDC :: identifier\nleft :: integer\ntop :: integer\nright :: integer\nbottom :: integer\n",
    "name": "JS_GDI_FillEllipse",
    "params": [
      {
        "type": "identifier",
        "name": "deviceHDC"
      },
      {
        "type": "integer",
        "name": "left"
      },
      {
        "type": "integer",
        "name": "top"
      },
      {
        "type": "integer",
        "name": "right"
      },
      {
        "type": "integer",
        "name": "bottom"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_GDI_FillPolygon deviceHDC packedX packedY numPoints) :: nil",
    "doc": "(reaper.JS_GDI_FillPolygon deviceHDC packedX packedY numPoints) :: nil\ndeviceHDC :: identifier\npackedX :: string\npackedY :: string\nnumPoints :: integer\npackedX and packedY are strings of points, each packed as \"<i4\".",
    "name": "JS_GDI_FillPolygon",
    "params": [
      {
        "type": "identifier",
        "name": "deviceHDC"
      },
      {
        "type": "string",
        "name": "packedX"
      },
      {
        "type": "string",
        "name": "packedY"
      },
      {
        "type": "integer",
        "name": "numPoints"
      }
    ],
    "namespace": "reaper",
    "description": "packedX and packedY are strings of points, each packed as \"<i4\"."
  },
  {
    "form": "(reaper.JS_GDI_FillRect deviceHDC left top right bottom) :: nil",
    "doc": "(reaper.JS_GDI_FillRect deviceHDC left top right bottom) :: nil\ndeviceHDC :: identifier\nleft :: integer\ntop :: integer\nright :: integer\nbottom :: integer\n",
    "name": "JS_GDI_FillRect",
    "params": [
      {
        "type": "identifier",
        "name": "deviceHDC"
      },
      {
        "type": "integer",
        "name": "left"
      },
      {
        "type": "integer",
        "name": "top"
      },
      {
        "type": "integer",
        "name": "right"
      },
      {
        "type": "integer",
        "name": "bottom"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_GDI_FillRoundRect deviceHDC left top right bottom xrnd yrnd) :: nil",
    "doc": "(reaper.JS_GDI_FillRoundRect deviceHDC left top right bottom xrnd yrnd) :: nil\ndeviceHDC :: identifier\nleft :: integer\ntop :: integer\nright :: integer\nbottom :: integer\nxrnd :: integer\nyrnd :: integer\n",
    "name": "JS_GDI_FillRoundRect",
    "params": [
      {
        "type": "identifier",
        "name": "deviceHDC"
      },
      {
        "type": "integer",
        "name": "left"
      },
      {
        "type": "integer",
        "name": "top"
      },
      {
        "type": "integer",
        "name": "right"
      },
      {
        "type": "integer",
        "name": "bottom"
      },
      {
        "type": "integer",
        "name": "xrnd"
      },
      {
        "type": "integer",
        "name": "yrnd"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_GDI_GetClientDC windowHWND) :: (identifier)",
    "doc": "(reaper.JS_GDI_GetClientDC windowHWND) :: (identifier)\nwindowHWND :: identifier\nReturns the device context for the client area of the specified window.",
    "name": "JS_GDI_GetClientDC",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the device context for the client area of the specified window."
  },
  {
    "form": "(reaper.JS_GDI_GetScreenDC ) :: (identifier)",
    "doc": "(reaper.JS_GDI_GetScreenDC ) :: (identifier)\nReturns a device context for the entire screen.\nWARNING: Only available on Windows, not Linux or macOS.",
    "name": "JS_GDI_GetScreenDC",
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "Returns a device context for the entire screen.\nWARNING: Only available on Windows, not Linux or macOS."
  },
  {
    "form": "(reaper.JS_GDI_GetSysColor GUIElement) :: (integer)",
    "doc": "(reaper.JS_GDI_GetSysColor GUIElement) :: (integer)\nGUIElement :: string\n",
    "name": "JS_GDI_GetSysColor",
    "params": [
      {
        "type": "string",
        "name": "GUIElement"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_GDI_GetTextColor deviceHDC) :: (integer)",
    "doc": "(reaper.JS_GDI_GetTextColor deviceHDC) :: (integer)\ndeviceHDC :: identifier\n",
    "name": "JS_GDI_GetTextColor",
    "params": [
      {
        "type": "identifier",
        "name": "deviceHDC"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_GDI_GetWindowDC windowHWND) :: (identifier)",
    "doc": "(reaper.JS_GDI_GetWindowDC windowHWND) :: (identifier)\nwindowHWND :: identifier\nReturns the device context for the entire window, including title bar and frame.",
    "name": "JS_GDI_GetWindowDC",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the device context for the entire window, including title bar and frame."
  },
  {
    "form": "(reaper.JS_GDI_Line deviceHDC x1 y1 x2 y2) :: nil",
    "doc": "(reaper.JS_GDI_Line deviceHDC x1 y1 x2 y2) :: nil\ndeviceHDC :: identifier\nx1 :: integer\ny1 :: integer\nx2 :: integer\ny2 :: integer\n",
    "name": "JS_GDI_Line",
    "params": [
      {
        "type": "identifier",
        "name": "deviceHDC"
      },
      {
        "type": "integer",
        "name": "x1"
      },
      {
        "type": "integer",
        "name": "y1"
      },
      {
        "type": "integer",
        "name": "x2"
      },
      {
        "type": "integer",
        "name": "y2"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_GDI_Polyline deviceHDC packedX packedY numPoints) :: nil",
    "doc": "(reaper.JS_GDI_Polyline deviceHDC packedX packedY numPoints) :: nil\ndeviceHDC :: identifier\npackedX :: string\npackedY :: string\nnumPoints :: integer\npackedX and packedY are strings of points, each packed as \"<i4\".",
    "name": "JS_GDI_Polyline",
    "params": [
      {
        "type": "identifier",
        "name": "deviceHDC"
      },
      {
        "type": "string",
        "name": "packedX"
      },
      {
        "type": "string",
        "name": "packedY"
      },
      {
        "type": "integer",
        "name": "numPoints"
      }
    ],
    "namespace": "reaper",
    "description": "packedX and packedY are strings of points, each packed as \"<i4\"."
  },
  {
    "form": "(reaper.JS_GDI_ReleaseDC deviceHDC windowHWND) :: (integer)",
    "doc": "(reaper.JS_GDI_ReleaseDC deviceHDC windowHWND) :: (integer)\ndeviceHDC :: identifier\nwindowHWND :: identifier\nTo release a window HDC, both arguments must be supplied: the HWND as well as the HDC.  To release a screen DC, only the HDC needs to be supplied.  \nFor compatibility with previous versions, the HWND and HDC can be supplied in any order.\nNOTE: Any GDI HDC should be released immediately after drawing, and deferred scripts should get and release new DCs in each cycle.",
    "name": "JS_GDI_ReleaseDC",
    "params": [
      {
        "type": "identifier",
        "name": "deviceHDC"
      },
      {
        "type": "identifier",
        "name": "windowHWND"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "To release a window HDC, both arguments must be supplied: the HWND as well as the HDC.  To release a screen DC, only the HDC needs to be supplied.  \nFor compatibility with previous versions, the HWND and HDC can be supplied in any order.\nNOTE: Any GDI HDC should be released immediately after drawing, and deferred scripts should get and release new DCs in each cycle."
  },
  {
    "form": "(reaper.JS_GDI_SelectObject deviceHDC GDIObject) :: (identifier)",
    "doc": "(reaper.JS_GDI_SelectObject deviceHDC GDIObject) :: (identifier)\ndeviceHDC :: identifier\nGDIObject :: identifier\nActivates a font, pen, or fill brush for subsequent drawing in the specified device context.",
    "name": "JS_GDI_SelectObject",
    "params": [
      {
        "type": "identifier",
        "name": "deviceHDC"
      },
      {
        "type": "identifier",
        "name": "GDIObject"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "Activates a font, pen, or fill brush for subsequent drawing in the specified device context."
  },
  {
    "form": "(reaper.JS_GDI_SetPixel deviceHDC x y color) :: nil",
    "doc": "(reaper.JS_GDI_SetPixel deviceHDC x y color) :: nil\ndeviceHDC :: identifier\nx :: integer\ny :: integer\ncolor :: integer\n",
    "name": "JS_GDI_SetPixel",
    "params": [
      {
        "type": "identifier",
        "name": "deviceHDC"
      },
      {
        "type": "integer",
        "name": "x"
      },
      {
        "type": "integer",
        "name": "y"
      },
      {
        "type": "integer",
        "name": "color"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_GDI_SetTextBkColor deviceHDC color) :: nil",
    "doc": "(reaper.JS_GDI_SetTextBkColor deviceHDC color) :: nil\ndeviceHDC :: identifier\ncolor :: integer\n",
    "name": "JS_GDI_SetTextBkColor",
    "params": [
      {
        "type": "identifier",
        "name": "deviceHDC"
      },
      {
        "type": "integer",
        "name": "color"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_GDI_SetTextBkMode deviceHDC mode) :: nil",
    "doc": "(reaper.JS_GDI_SetTextBkMode deviceHDC mode) :: nil\ndeviceHDC :: identifier\nmode :: integer\n",
    "name": "JS_GDI_SetTextBkMode",
    "params": [
      {
        "type": "identifier",
        "name": "deviceHDC"
      },
      {
        "type": "integer",
        "name": "mode"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_GDI_SetTextColor deviceHDC color) :: nil",
    "doc": "(reaper.JS_GDI_SetTextColor deviceHDC color) :: nil\ndeviceHDC :: identifier\ncolor :: integer\n",
    "name": "JS_GDI_SetTextColor",
    "params": [
      {
        "type": "identifier",
        "name": "deviceHDC"
      },
      {
        "type": "integer",
        "name": "color"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_GDI_StretchBlit destHDC dstx dsty dstw dsth sourceHDC srcx srxy srcw srch ?mode) :: nil",
    "doc": "(reaper.JS_GDI_StretchBlit destHDC dstx dsty dstw dsth sourceHDC srcx srxy srcw srch ?mode) :: nil\ndestHDC :: identifier\ndstx :: integer\ndsty :: integer\ndstw :: integer\ndsth :: integer\nsourceHDC :: identifier\nsrcx :: integer\nsrxy :: integer\nsrcw :: integer\nsrch :: integer\nmode :: string (optional)\nBlits between two device contexts, which may include LICE \"system bitmaps\".\nmodeOptional: \"SRCCOPY\" by default, or specify \"ALPHA\" to enable per-pixel alpha blending.\nWARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect.",
    "name": "JS_GDI_StretchBlit",
    "params": [
      {
        "type": "identifier",
        "name": "destHDC"
      },
      {
        "type": "integer",
        "name": "dstx"
      },
      {
        "type": "integer",
        "name": "dsty"
      },
      {
        "type": "integer",
        "name": "dstw"
      },
      {
        "type": "integer",
        "name": "dsth"
      },
      {
        "type": "identifier",
        "name": "sourceHDC"
      },
      {
        "type": "integer",
        "name": "srcx"
      },
      {
        "type": "integer",
        "name": "srxy"
      },
      {
        "type": "integer",
        "name": "srcw"
      },
      {
        "type": "integer",
        "name": "srch"
      },
      {
        "type": "string",
        "name": "mode",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Blits between two device contexts, which may include LICE \"system bitmaps\".\nmodeOptional: \"SRCCOPY\" by default, or specify \"ALPHA\" to enable per-pixel alpha blending.\nWARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect."
  },
  {
    "form": "(reaper.JS_Header_GetItemCount headerHWND) :: (integer)",
    "doc": "(reaper.JS_Header_GetItemCount headerHWND) :: (integer)\nheaderHWND :: identifier\n",
    "name": "JS_Header_GetItemCount",
    "params": [
      {
        "type": "identifier",
        "name": "headerHWND"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_Int pointer offset) :: (integer)",
    "doc": "(reaper.JS_Int pointer offset) :: (integer)\npointer :: identifier\noffset :: integer\nReturns the 4-byte signed integer at address[offset]. Offset is added as steps of 4 bytes each.",
    "name": "JS_Int",
    "params": [
      {
        "type": "identifier",
        "name": "pointer"
      },
      {
        "type": "integer",
        "name": "offset"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "int"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the 4-byte signed integer at address[offset]. Offset is added as steps of 4 bytes each."
  },
  {
    "form": "(reaper.JS_LICE_AlterBitmapHSV bitmap hue saturation value) :: nil",
    "doc": "(reaper.JS_LICE_AlterBitmapHSV bitmap hue saturation value) :: nil\nbitmap :: identifier\nhue :: number\nsaturation :: number\nvalue :: number\nHue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)",
    "name": "JS_LICE_AlterBitmapHSV",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      },
      {
        "type": "number",
        "name": "hue"
      },
      {
        "type": "number",
        "name": "saturation"
      },
      {
        "type": "number",
        "name": "value"
      }
    ],
    "namespace": "reaper",
    "description": "Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)"
  },
  {
    "form": "(reaper.JS_LICE_AlterRectHSV bitmap x y w h hue saturation value) :: nil",
    "doc": "(reaper.JS_LICE_AlterRectHSV bitmap x y w h hue saturation value) :: nil\nbitmap :: identifier\nx :: integer\ny :: integer\nw :: integer\nh :: integer\nhue :: number\nsaturation :: number\nvalue :: number\nHue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)",
    "name": "JS_LICE_AlterRectHSV",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      },
      {
        "type": "integer",
        "name": "x"
      },
      {
        "type": "integer",
        "name": "y"
      },
      {
        "type": "integer",
        "name": "w"
      },
      {
        "type": "integer",
        "name": "h"
      },
      {
        "type": "number",
        "name": "hue"
      },
      {
        "type": "number",
        "name": "saturation"
      },
      {
        "type": "number",
        "name": "value"
      }
    ],
    "namespace": "reaper",
    "description": "Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)"
  },
  {
    "form": "(reaper.JS_LICE_Arc bitmap cx cy r minAngle maxAngle color alpha mode antialias) :: nil",
    "doc": "(reaper.JS_LICE_Arc bitmap cx cy r minAngle maxAngle color alpha mode antialias) :: nil\nbitmap :: identifier\ncx :: number\ncy :: number\nr :: number\nminAngle :: number\nmaxAngle :: number\ncolor :: integer\nalpha :: number\nmode :: string\nantialias :: boolean\nLICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).",
    "name": "JS_LICE_Arc",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      },
      {
        "type": "number",
        "name": "cx"
      },
      {
        "type": "number",
        "name": "cy"
      },
      {
        "type": "number",
        "name": "r"
      },
      {
        "type": "number",
        "name": "minAngle"
      },
      {
        "type": "number",
        "name": "maxAngle"
      },
      {
        "type": "integer",
        "name": "color"
      },
      {
        "type": "number",
        "name": "alpha"
      },
      {
        "type": "string",
        "name": "mode"
      },
      {
        "type": "boolean",
        "name": "antialias"
      }
    ],
    "namespace": "reaper",
    "description": "LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
  },
  {
    "form": "(reaper.JS_LICE_ArrayAllBitmaps reaperarray) :: (integer)",
    "doc": "(reaper.JS_LICE_ArrayAllBitmaps reaperarray) :: (integer)\nreaperarray :: identifier\n",
    "name": "JS_LICE_ArrayAllBitmaps",
    "params": [
      {
        "type": "identifier",
        "name": "reaperarray"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_LICE_Bezier bitmap xstart ystart xctl1 yctl1 xctl2 yctl2 xend yend tol color alpha mode antialias) :: nil",
    "doc": "(reaper.JS_LICE_Bezier bitmap xstart ystart xctl1 yctl1 xctl2 yctl2 xend yend tol color alpha mode antialias) :: nil\nbitmap :: identifier\nxstart :: number\nystart :: number\nxctl1 :: number\nyctl1 :: number\nxctl2 :: number\nyctl2 :: number\nxend :: number\nyend :: number\ntol :: number\ncolor :: integer\nalpha :: number\nmode :: string\nantialias :: boolean\nLICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\" to enable per-pixel alpha blending.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).",
    "name": "JS_LICE_Bezier",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      },
      {
        "type": "number",
        "name": "xstart"
      },
      {
        "type": "number",
        "name": "ystart"
      },
      {
        "type": "number",
        "name": "xctl1"
      },
      {
        "type": "number",
        "name": "yctl1"
      },
      {
        "type": "number",
        "name": "xctl2"
      },
      {
        "type": "number",
        "name": "yctl2"
      },
      {
        "type": "number",
        "name": "xend"
      },
      {
        "type": "number",
        "name": "yend"
      },
      {
        "type": "number",
        "name": "tol"
      },
      {
        "type": "integer",
        "name": "color"
      },
      {
        "type": "number",
        "name": "alpha"
      },
      {
        "type": "string",
        "name": "mode"
      },
      {
        "type": "boolean",
        "name": "antialias"
      }
    ],
    "namespace": "reaper",
    "description": "LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\" to enable per-pixel alpha blending.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
  },
  {
    "form": "(reaper.JS_LICE_Blit destBitmap dstx dsty sourceBitmap srcx srcy width height alpha mode) :: nil",
    "doc": "(reaper.JS_LICE_Blit destBitmap dstx dsty sourceBitmap srcx srcy width height alpha mode) :: nil\ndestBitmap :: identifier\ndstx :: integer\ndsty :: integer\nsourceBitmap :: identifier\nsrcx :: integer\nsrcy :: integer\nwidth :: integer\nheight :: integer\nalpha :: number\nmode :: string\nStandard LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\" to enable per-pixel alpha blending.\nIn addition to the standard LICE modes, LICE_Blit also offers:\n * \"CHANCOPY_XTOY\", with X and Y any of the four channels, A, R, G or B. (CHANCOPY_ATOA is similar to MASK mode.)\n * \"BLUR\"\n * \"ALPHAMUL\", which overwrites the destination with a per-pixel alpha-multiplied copy of the source. (Similar to first clearing the destination with 0x00000000 and then blitting with \"COPY,ALPHA\".)",
    "name": "JS_LICE_Blit",
    "params": [
      {
        "type": "identifier",
        "name": "destBitmap"
      },
      {
        "type": "integer",
        "name": "dstx"
      },
      {
        "type": "integer",
        "name": "dsty"
      },
      {
        "type": "identifier",
        "name": "sourceBitmap"
      },
      {
        "type": "integer",
        "name": "srcx"
      },
      {
        "type": "integer",
        "name": "srcy"
      },
      {
        "type": "integer",
        "name": "width"
      },
      {
        "type": "integer",
        "name": "height"
      },
      {
        "type": "number",
        "name": "alpha"
      },
      {
        "type": "string",
        "name": "mode"
      }
    ],
    "namespace": "reaper",
    "description": "Standard LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\" to enable per-pixel alpha blending.\nIn addition to the standard LICE modes, LICE_Blit also offers:\n * \"CHANCOPY_XTOY\", with X and Y any of the four channels, A, R, G or B. (CHANCOPY_ATOA is similar to MASK mode.)\n * \"BLUR\"\n * \"ALPHAMUL\", which overwrites the destination with a per-pixel alpha-multiplied copy of the source. (Similar to first clearing the destination with 0x00000000 and then blitting with \"COPY,ALPHA\".)"
  },
  {
    "form": "(reaper.JS_LICE_Circle bitmap cx cy r color alpha mode antialias) :: nil",
    "doc": "(reaper.JS_LICE_Circle bitmap cx cy r color alpha mode antialias) :: nil\nbitmap :: identifier\ncx :: number\ncy :: number\nr :: number\ncolor :: integer\nalpha :: number\nmode :: string\nantialias :: boolean\nLICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).",
    "name": "JS_LICE_Circle",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      },
      {
        "type": "number",
        "name": "cx"
      },
      {
        "type": "number",
        "name": "cy"
      },
      {
        "type": "number",
        "name": "r"
      },
      {
        "type": "integer",
        "name": "color"
      },
      {
        "type": "number",
        "name": "alpha"
      },
      {
        "type": "string",
        "name": "mode"
      },
      {
        "type": "boolean",
        "name": "antialias"
      }
    ],
    "namespace": "reaper",
    "description": "LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
  },
  {
    "form": "(reaper.JS_LICE_Clear bitmap color) :: nil",
    "doc": "(reaper.JS_LICE_Clear bitmap color) :: nil\nbitmap :: identifier\ncolor :: integer\n",
    "name": "JS_LICE_Clear",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      },
      {
        "type": "integer",
        "name": "color"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_LICE_CreateBitmap isSysBitmap width height) :: (identifier)",
    "doc": "(reaper.JS_LICE_CreateBitmap isSysBitmap width height) :: (identifier)\nisSysBitmap :: boolean\nwidth :: integer\nheight :: integer\n",
    "name": "JS_LICE_CreateBitmap",
    "params": [
      {
        "type": "boolean",
        "name": "isSysBitmap"
      },
      {
        "type": "integer",
        "name": "width"
      },
      {
        "type": "integer",
        "name": "height"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_LICE_CreateFont ) :: (identifier)",
    "doc": "(reaper.JS_LICE_CreateFont ) :: (identifier)\n",
    "name": "JS_LICE_CreateFont",
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_LICE_DestroyBitmap bitmap) :: nil",
    "doc": "(reaper.JS_LICE_DestroyBitmap bitmap) :: nil\nbitmap :: identifier\nDeletes the bitmap, and also unlinks bitmap from any composited window.",
    "name": "JS_LICE_DestroyBitmap",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      }
    ],
    "namespace": "reaper",
    "description": "Deletes the bitmap, and also unlinks bitmap from any composited window."
  },
  {
    "form": "(reaper.JS_LICE_DestroyFont LICEFont) :: nil",
    "doc": "(reaper.JS_LICE_DestroyFont LICEFont) :: nil\nLICEFont :: identifier\n",
    "name": "JS_LICE_DestroyFont",
    "params": [
      {
        "type": "identifier",
        "name": "LICEFont"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_LICE_DrawChar bitmap x y c color alpha mode) :: nil",
    "doc": "(reaper.JS_LICE_DrawChar bitmap x y c color alpha mode) :: nil\nbitmap :: identifier\nx :: integer\ny :: integer\nc :: integer\ncolor :: integer\nalpha :: number\nmode :: integer\n",
    "name": "JS_LICE_DrawChar",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      },
      {
        "type": "integer",
        "name": "x"
      },
      {
        "type": "integer",
        "name": "y"
      },
      {
        "type": "integer",
        "name": "c"
      },
      {
        "type": "integer",
        "name": "color"
      },
      {
        "type": "number",
        "name": "alpha"
      },
      {
        "type": "integer",
        "name": "mode"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_LICE_DrawText bitmap LICEFont text textLen x1 y1 x2 y2) :: (integer)",
    "doc": "(reaper.JS_LICE_DrawText bitmap LICEFont text textLen x1 y1 x2 y2) :: (integer)\nbitmap :: identifier\nLICEFont :: identifier\ntext :: string\ntextLen :: integer\nx1 :: integer\ny1 :: integer\nx2 :: integer\ny2 :: integer\n",
    "name": "JS_LICE_DrawText",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      },
      {
        "type": "identifier",
        "name": "LICEFont"
      },
      {
        "type": "string",
        "name": "text"
      },
      {
        "type": "integer",
        "name": "textLen"
      },
      {
        "type": "integer",
        "name": "x1"
      },
      {
        "type": "integer",
        "name": "y1"
      },
      {
        "type": "integer",
        "name": "x2"
      },
      {
        "type": "integer",
        "name": "y2"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_LICE_FillCircle bitmap cx cy r color alpha mode antialias) :: nil",
    "doc": "(reaper.JS_LICE_FillCircle bitmap cx cy r color alpha mode antialias) :: nil\nbitmap :: identifier\ncx :: number\ncy :: number\nr :: number\ncolor :: integer\nalpha :: number\nmode :: string\nantialias :: boolean\nLICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).",
    "name": "JS_LICE_FillCircle",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      },
      {
        "type": "number",
        "name": "cx"
      },
      {
        "type": "number",
        "name": "cy"
      },
      {
        "type": "number",
        "name": "r"
      },
      {
        "type": "integer",
        "name": "color"
      },
      {
        "type": "number",
        "name": "alpha"
      },
      {
        "type": "string",
        "name": "mode"
      },
      {
        "type": "boolean",
        "name": "antialias"
      }
    ],
    "namespace": "reaper",
    "description": "LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
  },
  {
    "form": "(reaper.JS_LICE_FillPolygon bitmap packedX packedY numPoints color alpha mode) :: nil",
    "doc": "(reaper.JS_LICE_FillPolygon bitmap packedX packedY numPoints color alpha mode) :: nil\nbitmap :: identifier\npackedX :: string\npackedY :: string\nnumPoints :: integer\ncolor :: integer\nalpha :: number\nmode :: string\npackedX and packedY are two strings of coordinates, each packed as \"<i4\".\nLICE modes : \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\" to enable per-pixel alpha blending.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).",
    "name": "JS_LICE_FillPolygon",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      },
      {
        "type": "string",
        "name": "packedX"
      },
      {
        "type": "string",
        "name": "packedY"
      },
      {
        "type": "integer",
        "name": "numPoints"
      },
      {
        "type": "integer",
        "name": "color"
      },
      {
        "type": "number",
        "name": "alpha"
      },
      {
        "type": "string",
        "name": "mode"
      }
    ],
    "namespace": "reaper",
    "description": "packedX and packedY are two strings of coordinates, each packed as \"<i4\".\nLICE modes : \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\" to enable per-pixel alpha blending.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
  },
  {
    "form": "(reaper.JS_LICE_FillRect bitmap x y w h color alpha mode) :: nil",
    "doc": "(reaper.JS_LICE_FillRect bitmap x y w h color alpha mode) :: nil\nbitmap :: identifier\nx :: integer\ny :: integer\nw :: integer\nh :: integer\ncolor :: integer\nalpha :: number\nmode :: string\nLICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).",
    "name": "JS_LICE_FillRect",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      },
      {
        "type": "integer",
        "name": "x"
      },
      {
        "type": "integer",
        "name": "y"
      },
      {
        "type": "integer",
        "name": "w"
      },
      {
        "type": "integer",
        "name": "h"
      },
      {
        "type": "integer",
        "name": "color"
      },
      {
        "type": "number",
        "name": "alpha"
      },
      {
        "type": "string",
        "name": "mode"
      }
    ],
    "namespace": "reaper",
    "description": "LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
  },
  {
    "form": "(reaper.JS_LICE_FillTriangle bitmap x1 y1 x2 y2 x3 y3 color alpha mode) :: nil",
    "doc": "(reaper.JS_LICE_FillTriangle bitmap x1 y1 x2 y2 x3 y3 color alpha mode) :: nil\nbitmap :: identifier\nx1 :: integer\ny1 :: integer\nx2 :: integer\ny2 :: integer\nx3 :: integer\ny3 :: integer\ncolor :: integer\nalpha :: number\nmode :: string\nLICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).",
    "name": "JS_LICE_FillTriangle",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      },
      {
        "type": "integer",
        "name": "x1"
      },
      {
        "type": "integer",
        "name": "y1"
      },
      {
        "type": "integer",
        "name": "x2"
      },
      {
        "type": "integer",
        "name": "y2"
      },
      {
        "type": "integer",
        "name": "x3"
      },
      {
        "type": "integer",
        "name": "y3"
      },
      {
        "type": "integer",
        "name": "color"
      },
      {
        "type": "number",
        "name": "alpha"
      },
      {
        "type": "string",
        "name": "mode"
      }
    ],
    "namespace": "reaper",
    "description": "LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
  },
  {
    "form": "(reaper.JS_LICE_GetDC bitmap) :: (identifier)",
    "doc": "(reaper.JS_LICE_GetDC bitmap) :: (identifier)\nbitmap :: identifier\n",
    "name": "JS_LICE_GetDC",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_LICE_GetHeight bitmap) :: (integer)",
    "doc": "(reaper.JS_LICE_GetHeight bitmap) :: (integer)\nbitmap :: identifier\n",
    "name": "JS_LICE_GetHeight",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_LICE_GetPixel bitmap x y) :: (number)",
    "doc": "(reaper.JS_LICE_GetPixel bitmap x y) :: (number)\nbitmap :: identifier\nx :: integer\ny :: integer\nReturns the color of the specified pixel.",
    "name": "JS_LICE_GetPixel",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      },
      {
        "type": "integer",
        "name": "x"
      },
      {
        "type": "integer",
        "name": "y"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "color"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the color of the specified pixel."
  },
  {
    "form": "(reaper.JS_LICE_GetWidth bitmap) :: (integer)",
    "doc": "(reaper.JS_LICE_GetWidth bitmap) :: (integer)\nbitmap :: identifier\n",
    "name": "JS_LICE_GetWidth",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_LICE_GradRect bitmap dstx dsty dstw dsth ir ig ib ia drdx dgdx dbdx dadx drdy dgdy dbdy dady mode) :: nil",
    "doc": "(reaper.JS_LICE_GradRect bitmap dstx dsty dstw dsth ir ig ib ia drdx dgdx dbdx dadx drdy dgdy dbdy dady mode) :: nil\nbitmap :: identifier\ndstx :: integer\ndsty :: integer\ndstw :: integer\ndsth :: integer\nir :: number\nig :: number\nib :: number\nia :: number\ndrdx :: number\ndgdx :: number\ndbdx :: number\ndadx :: number\ndrdy :: number\ndgdy :: number\ndbdy :: number\ndady :: number\nmode :: string\n",
    "name": "JS_LICE_GradRect",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      },
      {
        "type": "integer",
        "name": "dstx"
      },
      {
        "type": "integer",
        "name": "dsty"
      },
      {
        "type": "integer",
        "name": "dstw"
      },
      {
        "type": "integer",
        "name": "dsth"
      },
      {
        "type": "number",
        "name": "ir"
      },
      {
        "type": "number",
        "name": "ig"
      },
      {
        "type": "number",
        "name": "ib"
      },
      {
        "type": "number",
        "name": "ia"
      },
      {
        "type": "number",
        "name": "drdx"
      },
      {
        "type": "number",
        "name": "dgdx"
      },
      {
        "type": "number",
        "name": "dbdx"
      },
      {
        "type": "number",
        "name": "dadx"
      },
      {
        "type": "number",
        "name": "drdy"
      },
      {
        "type": "number",
        "name": "dgdy"
      },
      {
        "type": "number",
        "name": "dbdy"
      },
      {
        "type": "number",
        "name": "dady"
      },
      {
        "type": "string",
        "name": "mode"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_LICE_IsFlipped bitmap) :: (boolean)",
    "doc": "(reaper.JS_LICE_IsFlipped bitmap) :: (boolean)\nbitmap :: identifier\n",
    "name": "JS_LICE_IsFlipped",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_LICE_Line bitmap x1 y1 x2 y2 color alpha mode antialias) :: nil",
    "doc": "(reaper.JS_LICE_Line bitmap x1 y1 x2 y2 color alpha mode antialias) :: nil\nbitmap :: identifier\nx1 :: number\ny1 :: number\nx2 :: number\ny2 :: number\ncolor :: integer\nalpha :: number\nmode :: string\nantialias :: boolean\nLICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).",
    "name": "JS_LICE_Line",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      },
      {
        "type": "number",
        "name": "x1"
      },
      {
        "type": "number",
        "name": "y1"
      },
      {
        "type": "number",
        "name": "x2"
      },
      {
        "type": "number",
        "name": "y2"
      },
      {
        "type": "integer",
        "name": "color"
      },
      {
        "type": "number",
        "name": "alpha"
      },
      {
        "type": "string",
        "name": "mode"
      },
      {
        "type": "boolean",
        "name": "antialias"
      }
    ],
    "namespace": "reaper",
    "description": "LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
  },
  {
    "form": "(reaper.JS_LICE_ListAllBitmaps ) :: (integer string)",
    "doc": "(reaper.JS_LICE_ListAllBitmaps ) :: (integer string)\n",
    "name": "JS_LICE_ListAllBitmaps",
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "list"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_LICE_LoadJPG filename) :: (identifier)",
    "doc": "(reaper.JS_LICE_LoadJPG filename) :: (identifier)\nfilename :: string\nReturns a system LICE bitmap containing the JPEG.",
    "name": "JS_LICE_LoadJPG",
    "params": [
      {
        "type": "string",
        "name": "filename"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "Returns a system LICE bitmap containing the JPEG."
  },
  {
    "form": "(reaper.JS_LICE_LoadJPGFromMemory buffer bufsize) :: (identifier)",
    "doc": "(reaper.JS_LICE_LoadJPGFromMemory buffer bufsize) :: (identifier)\nbuffer :: string\nbufsize :: integer\nReturns a system LICE bitmap containing the JPEG.",
    "name": "JS_LICE_LoadJPGFromMemory",
    "params": [
      {
        "type": "string",
        "name": "buffer"
      },
      {
        "type": "integer",
        "name": "bufsize"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "Returns a system LICE bitmap containing the JPEG."
  },
  {
    "form": "(reaper.JS_LICE_LoadPNG filename) :: (identifier)",
    "doc": "(reaper.JS_LICE_LoadPNG filename) :: (identifier)\nfilename :: string\nReturns a system LICE bitmap containing the PNG.",
    "name": "JS_LICE_LoadPNG",
    "params": [
      {
        "type": "string",
        "name": "filename"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "Returns a system LICE bitmap containing the PNG."
  },
  {
    "form": "(reaper.JS_LICE_LoadPNGFromMemory buffer bufsize) :: (identifier)",
    "doc": "(reaper.JS_LICE_LoadPNGFromMemory buffer bufsize) :: (identifier)\nbuffer :: string\nbufsize :: integer\nReturns a system LICE bitmap containing the PNG.",
    "name": "JS_LICE_LoadPNGFromMemory",
    "params": [
      {
        "type": "string",
        "name": "buffer"
      },
      {
        "type": "integer",
        "name": "bufsize"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "Returns a system LICE bitmap containing the PNG."
  },
  {
    "form": "(reaper.JS_LICE_MeasureText text) :: (integer integer)",
    "doc": "(reaper.JS_LICE_MeasureText text) :: (integer integer)\ntext :: string\n",
    "name": "JS_LICE_MeasureText",
    "params": [
      {
        "type": "string",
        "name": "text"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "width"
      },
      {
        "type": "integer",
        "name": "Height"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_LICE_ProcessRect bitmap x y w h mode operand) :: (boolean)",
    "doc": "(reaper.JS_LICE_ProcessRect bitmap x y w h mode operand) :: (boolean)\nbitmap :: identifier\nx :: integer\ny :: integer\nw :: integer\nh :: integer\nmode :: string\noperand :: number\nApplies bitwise operations to each pixel in the target rectangle.\noperand: a color in 0xAARRGGBB format.\nmodes:\n * \"XOR\", \"OR\" or \"AND\".\n * \"SET_XYZ\", with XYZ any combination of A, R, G, and B: copies the specified channels from operand to the bitmap. (Useful for setting the alpha values of a bitmap.)\n * \"ALPHAMUL\": Performs alpha pre-multiplication on each pixel in the rect. operand is ignored in this mode. (On WindowsOS, GDI_Blit does not perform alpha multiplication on the fly, and a separate alpha pre-multiplication step is therefore required.)\nNOTE:\nLICE_Blit and LICE_ScaledBlit are also useful for processing bitmap colors. For example, to multiply all channel values by 1.5:\nreaper.JS_LICE_Blit(bitmap, x, y, bitmap, x, y, w, h, 0.5, \"ADD\").",
    "name": "JS_LICE_ProcessRect",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      },
      {
        "type": "integer",
        "name": "x"
      },
      {
        "type": "integer",
        "name": "y"
      },
      {
        "type": "integer",
        "name": "w"
      },
      {
        "type": "integer",
        "name": "h"
      },
      {
        "type": "string",
        "name": "mode"
      },
      {
        "type": "number",
        "name": "operand"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Applies bitwise operations to each pixel in the target rectangle.\noperand: a color in 0xAARRGGBB format.\nmodes:\n * \"XOR\", \"OR\" or \"AND\".\n * \"SET_XYZ\", with XYZ any combination of A, R, G, and B: copies the specified channels from operand to the bitmap. (Useful for setting the alpha values of a bitmap.)\n * \"ALPHAMUL\": Performs alpha pre-multiplication on each pixel in the rect. operand is ignored in this mode. (On WindowsOS, GDI_Blit does not perform alpha multiplication on the fly, and a separate alpha pre-multiplication step is therefore required.)\nNOTE:\nLICE_Blit and LICE_ScaledBlit are also useful for processing bitmap colors. For example, to multiply all channel values by 1.5:\nreaper.JS_LICE_Blit(bitmap, x, y, bitmap, x, y, w, h, 0.5, \"ADD\")."
  },
  {
    "form": "(reaper.JS_LICE_PutPixel bitmap x y color alpha mode) :: nil",
    "doc": "(reaper.JS_LICE_PutPixel bitmap x y color alpha mode) :: nil\nbitmap :: identifier\nx :: integer\ny :: integer\ncolor :: number\nalpha :: number\nmode :: string\nLICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).",
    "name": "JS_LICE_PutPixel",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      },
      {
        "type": "integer",
        "name": "x"
      },
      {
        "type": "integer",
        "name": "y"
      },
      {
        "type": "number",
        "name": "color"
      },
      {
        "type": "number",
        "name": "alpha"
      },
      {
        "type": "string",
        "name": "mode"
      }
    ],
    "namespace": "reaper",
    "description": "LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
  },
  {
    "form": "(reaper.JS_LICE_Resize bitmap width height) :: nil",
    "doc": "(reaper.JS_LICE_Resize bitmap width height) :: nil\nbitmap :: identifier\nwidth :: integer\nheight :: integer\n",
    "name": "JS_LICE_Resize",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      },
      {
        "type": "integer",
        "name": "width"
      },
      {
        "type": "integer",
        "name": "height"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_LICE_RotatedBlit destBitmap dstx dsty dstw dsth sourceBitmap srcx srcy srcw srch angle rotxcent rotycent cliptosourcerect alpha mode) :: nil",
    "doc": "(reaper.JS_LICE_RotatedBlit destBitmap dstx dsty dstw dsth sourceBitmap srcx srcy srcw srch angle rotxcent rotycent cliptosourcerect alpha mode) :: nil\ndestBitmap :: identifier\ndstx :: integer\ndsty :: integer\ndstw :: integer\ndsth :: integer\nsourceBitmap :: identifier\nsrcx :: number\nsrcy :: number\nsrcw :: number\nsrch :: number\nangle :: number\nrotxcent :: number\nrotycent :: number\ncliptosourcerect :: boolean\nalpha :: number\nmode :: string\nLICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\" to enable per-pixel alpha blending.",
    "name": "JS_LICE_RotatedBlit",
    "params": [
      {
        "type": "identifier",
        "name": "destBitmap"
      },
      {
        "type": "integer",
        "name": "dstx"
      },
      {
        "type": "integer",
        "name": "dsty"
      },
      {
        "type": "integer",
        "name": "dstw"
      },
      {
        "type": "integer",
        "name": "dsth"
      },
      {
        "type": "identifier",
        "name": "sourceBitmap"
      },
      {
        "type": "number",
        "name": "srcx"
      },
      {
        "type": "number",
        "name": "srcy"
      },
      {
        "type": "number",
        "name": "srcw"
      },
      {
        "type": "number",
        "name": "srch"
      },
      {
        "type": "number",
        "name": "angle"
      },
      {
        "type": "number",
        "name": "rotxcent"
      },
      {
        "type": "number",
        "name": "rotycent"
      },
      {
        "type": "boolean",
        "name": "cliptosourcerect"
      },
      {
        "type": "number",
        "name": "alpha"
      },
      {
        "type": "string",
        "name": "mode"
      }
    ],
    "namespace": "reaper",
    "description": "LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\" to enable per-pixel alpha blending."
  },
  {
    "form": "(reaper.JS_LICE_RoundRect bitmap x y w h cornerradius color alpha mode antialias) :: nil",
    "doc": "(reaper.JS_LICE_RoundRect bitmap x y w h cornerradius color alpha mode antialias) :: nil\nbitmap :: identifier\nx :: number\ny :: number\nw :: number\nh :: number\ncornerradius :: integer\ncolor :: integer\nalpha :: number\nmode :: string\nantialias :: boolean\nLICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).",
    "name": "JS_LICE_RoundRect",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      },
      {
        "type": "number",
        "name": "x"
      },
      {
        "type": "number",
        "name": "y"
      },
      {
        "type": "number",
        "name": "w"
      },
      {
        "type": "number",
        "name": "h"
      },
      {
        "type": "integer",
        "name": "cornerradius"
      },
      {
        "type": "integer",
        "name": "color"
      },
      {
        "type": "number",
        "name": "alpha"
      },
      {
        "type": "string",
        "name": "mode"
      },
      {
        "type": "boolean",
        "name": "antialias"
      }
    ],
    "namespace": "reaper",
    "description": "LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\".\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode)."
  },
  {
    "form": "(reaper.JS_LICE_ScaledBlit destBitmap dstx dsty dstw dsth srcBitmap srcx srcy srcw srch alpha mode) :: nil",
    "doc": "(reaper.JS_LICE_ScaledBlit destBitmap dstx dsty dstw dsth srcBitmap srcx srcy srcw srch alpha mode) :: nil\ndestBitmap :: identifier\ndstx :: integer\ndsty :: integer\ndstw :: integer\ndsth :: integer\nsrcBitmap :: identifier\nsrcx :: number\nsrcy :: number\nsrcw :: number\nsrch :: number\nalpha :: number\nmode :: string\nLICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\" to enable per-pixel alpha blending.",
    "name": "JS_LICE_ScaledBlit",
    "params": [
      {
        "type": "identifier",
        "name": "destBitmap"
      },
      {
        "type": "integer",
        "name": "dstx"
      },
      {
        "type": "integer",
        "name": "dsty"
      },
      {
        "type": "integer",
        "name": "dstw"
      },
      {
        "type": "integer",
        "name": "dsth"
      },
      {
        "type": "identifier",
        "name": "srcBitmap"
      },
      {
        "type": "number",
        "name": "srcx"
      },
      {
        "type": "number",
        "name": "srcy"
      },
      {
        "type": "number",
        "name": "srcw"
      },
      {
        "type": "number",
        "name": "srch"
      },
      {
        "type": "number",
        "name": "alpha"
      },
      {
        "type": "string",
        "name": "mode"
      }
    ],
    "namespace": "reaper",
    "description": "LICE modes: \"COPY\" (default if empty string), \"MASK\", \"ADD\", \"DODGE\", \"MUL\", \"OVERLAY\" or \"HSVADJ\", any of which may be combined with \"ALPHA\" to enable per-pixel alpha blending."
  },
  {
    "form": "(reaper.JS_LICE_SetAlphaFromColorMask bitmap colorRGB) :: nil",
    "doc": "(reaper.JS_LICE_SetAlphaFromColorMask bitmap colorRGB) :: nil\nbitmap :: identifier\ncolorRGB :: integer\nSets all pixels that match the given color's RGB values to fully transparent, and all other pixels to fully opaque.  (All pixels' RGB values remain unchanged.)",
    "name": "JS_LICE_SetAlphaFromColorMask",
    "params": [
      {
        "type": "identifier",
        "name": "bitmap"
      },
      {
        "type": "integer",
        "name": "colorRGB"
      }
    ],
    "namespace": "reaper",
    "description": "Sets all pixels that match the given color's RGB values to fully transparent, and all other pixels to fully opaque.  (All pixels' RGB values remain unchanged.)"
  },
  {
    "form": "(reaper.JS_LICE_SetFontBkColor LICEFont color) :: nil",
    "doc": "(reaper.JS_LICE_SetFontBkColor LICEFont color) :: nil\nLICEFont :: identifier\ncolor :: integer\nSets the color of the font background.",
    "name": "JS_LICE_SetFontBkColor",
    "params": [
      {
        "type": "identifier",
        "name": "LICEFont"
      },
      {
        "type": "integer",
        "name": "color"
      }
    ],
    "namespace": "reaper",
    "description": "Sets the color of the font background."
  },
  {
    "form": "(reaper.JS_LICE_SetFontColor LICEFont color) :: nil",
    "doc": "(reaper.JS_LICE_SetFontColor LICEFont color) :: nil\nLICEFont :: identifier\ncolor :: integer\n",
    "name": "JS_LICE_SetFontColor",
    "params": [
      {
        "type": "identifier",
        "name": "LICEFont"
      },
      {
        "type": "integer",
        "name": "color"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_LICE_SetFontFXColor LICEFont color) :: nil",
    "doc": "(reaper.JS_LICE_SetFontFXColor LICEFont color) :: nil\nLICEFont :: identifier\ncolor :: integer\nSets the color of font FX such as shadow.",
    "name": "JS_LICE_SetFontFXColor",
    "params": [
      {
        "type": "identifier",
        "name": "LICEFont"
      },
      {
        "type": "integer",
        "name": "color"
      }
    ],
    "namespace": "reaper",
    "description": "Sets the color of font FX such as shadow."
  },
  {
    "form": "(reaper.JS_LICE_SetFontFromGDI LICEFont GDIFont moreFormats) :: nil",
    "doc": "(reaper.JS_LICE_SetFontFromGDI LICEFont GDIFont moreFormats) :: nil\nLICEFont :: identifier\nGDIFont :: identifier\nmoreFormats :: string\nConverts a GDI font into a LICE font.\nThe font can be modified by the following flags, in a comma-separated list:\n\"VERTICAL\", \"BOTTOMUP\", \"NATIVE\", \"BLUR\", \"INVERT\", \"MONO\", \"SHADOW\" or \"OUTLINE\".",
    "name": "JS_LICE_SetFontFromGDI",
    "params": [
      {
        "type": "identifier",
        "name": "LICEFont"
      },
      {
        "type": "identifier",
        "name": "GDIFont"
      },
      {
        "type": "string",
        "name": "moreFormats"
      }
    ],
    "namespace": "reaper",
    "description": "Converts a GDI font into a LICE font.\nThe font can be modified by the following flags, in a comma-separated list:\n\"VERTICAL\", \"BOTTOMUP\", \"NATIVE\", \"BLUR\", \"INVERT\", \"MONO\", \"SHADOW\" or \"OUTLINE\"."
  },
  {
    "form": "(reaper.JS_LICE_WriteJPG filename bitmap quality forceBaseline) :: (boolean)",
    "doc": "(reaper.JS_LICE_WriteJPG filename bitmap quality forceBaseline) :: (boolean)\nfilename :: string\nbitmap :: identifier\nquality :: integer\nforceBaseline :: unsupported\nParameters:\n * quality is an integer in the range 1..100.\n * forceBaseline is an optional boolean parameter that ensures compatibility with all JPEG viewers by preventing too low quality, \"cubist\" settings.",
    "name": "JS_LICE_WriteJPG",
    "params": [
      {
        "type": "string",
        "name": "filename"
      },
      {
        "type": "identifier",
        "name": "bitmap"
      },
      {
        "type": "integer",
        "name": "quality"
      },
      {
        "type": "unsupported",
        "name": "forceBaseline"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Parameters:\n * quality is an integer in the range 1..100.\n * forceBaseline is an optional boolean parameter that ensures compatibility with all JPEG viewers by preventing too low quality, \"cubist\" settings."
  },
  {
    "form": "(reaper.JS_LICE_WritePNG filename bitmap wantAlpha) :: (boolean)",
    "doc": "(reaper.JS_LICE_WritePNG filename bitmap wantAlpha) :: (boolean)\nfilename :: string\nbitmap :: identifier\nwantAlpha :: boolean\n",
    "name": "JS_LICE_WritePNG",
    "params": [
      {
        "type": "string",
        "name": "filename"
      },
      {
        "type": "identifier",
        "name": "bitmap"
      },
      {
        "type": "boolean",
        "name": "wantAlpha"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_ListView_EnsureVisible listviewHWND index partialOK) :: nil",
    "doc": "(reaper.JS_ListView_EnsureVisible listviewHWND index partialOK) :: nil\nlistviewHWND :: identifier\nindex :: integer\npartialOK :: boolean\n",
    "name": "JS_ListView_EnsureVisible",
    "params": [
      {
        "type": "identifier",
        "name": "listviewHWND"
      },
      {
        "type": "integer",
        "name": "index"
      },
      {
        "type": "boolean",
        "name": "partialOK"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_ListView_EnumSelItems listviewHWND index) :: (integer)",
    "doc": "(reaper.JS_ListView_EnumSelItems listviewHWND index) :: (integer)\nlistviewHWND :: identifier\nindex :: integer\nReturns the index of the next selected list item with index greater that the specified number. Returns -1 if no selected items left.",
    "name": "JS_ListView_EnumSelItems",
    "params": [
      {
        "type": "identifier",
        "name": "listviewHWND"
      },
      {
        "type": "integer",
        "name": "index"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the index of the next selected list item with index greater that the specified number. Returns -1 if no selected items left."
  },
  {
    "form": "(reaper.JS_ListView_GetFocusedItem listviewHWND) :: (integer string)",
    "doc": "(reaper.JS_ListView_GetFocusedItem listviewHWND) :: (integer string)\nlistviewHWND :: identifier\nReturns the index and text of the focused item, if any.",
    "name": "JS_ListView_GetFocusedItem",
    "params": [
      {
        "type": "identifier",
        "name": "listviewHWND"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "text"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the index and text of the focused item, if any."
  },
  {
    "form": "(reaper.JS_ListView_GetHeader listviewHWND) :: (identifier)",
    "doc": "(reaper.JS_ListView_GetHeader listviewHWND) :: (identifier)\nlistviewHWND :: identifier\n",
    "name": "JS_ListView_GetHeader",
    "params": [
      {
        "type": "identifier",
        "name": "listviewHWND"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_ListView_GetItem listviewHWND index subItem) :: (string integer)",
    "doc": "(reaper.JS_ListView_GetItem listviewHWND index subItem) :: (string integer)\nlistviewHWND :: identifier\nindex :: integer\nsubItem :: integer\nReturns the text and state of specified item.",
    "name": "JS_ListView_GetItem",
    "params": [
      {
        "type": "identifier",
        "name": "listviewHWND"
      },
      {
        "type": "integer",
        "name": "index"
      },
      {
        "type": "integer",
        "name": "subItem"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "text"
      },
      {
        "type": "integer",
        "name": "state"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the text and state of specified item."
  },
  {
    "form": "(reaper.JS_ListView_GetItemCount listviewHWND) :: (integer)",
    "doc": "(reaper.JS_ListView_GetItemCount listviewHWND) :: (integer)\nlistviewHWND :: identifier\n",
    "name": "JS_ListView_GetItemCount",
    "params": [
      {
        "type": "identifier",
        "name": "listviewHWND"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_ListView_GetItemRect listviewHWND index) :: (boolean integer integer integer integer)",
    "doc": "(reaper.JS_ListView_GetItemRect listviewHWND index) :: (boolean integer integer integer integer)\nlistviewHWND :: identifier\nindex :: integer\nReturns client coordinates of the item.",
    "name": "JS_ListView_GetItemRect",
    "params": [
      {
        "type": "identifier",
        "name": "listviewHWND"
      },
      {
        "type": "integer",
        "name": "index"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "left"
      },
      {
        "type": "integer",
        "name": "top"
      },
      {
        "type": "integer",
        "name": "right"
      },
      {
        "type": "integer",
        "name": "bottom"
      }
    ],
    "namespace": "reaper",
    "description": "Returns client coordinates of the item."
  },
  {
    "form": "(reaper.JS_ListView_GetItemState listviewHWND index) :: (integer)",
    "doc": "(reaper.JS_ListView_GetItemState listviewHWND index) :: (integer)\nlistviewHWND :: identifier\nindex :: integer\nState is a bitmask:\n1 = focused, 2 = selected. On Windows only, cut-and-paste marked = 4, drag-and-drop highlighted = 8.\nWarning: this function uses the Win32 bitmask values, which differ from the values used by WDL/swell.",
    "name": "JS_ListView_GetItemState",
    "params": [
      {
        "type": "identifier",
        "name": "listviewHWND"
      },
      {
        "type": "integer",
        "name": "index"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "State is a bitmask:\n1 = focused, 2 = selected. On Windows only, cut-and-paste marked = 4, drag-and-drop highlighted = 8.\nWarning: this function uses the Win32 bitmask values, which differ from the values used by WDL/swell."
  },
  {
    "form": "(reaper.JS_ListView_GetItemText listviewHWND index subItem) :: (string)",
    "doc": "(reaper.JS_ListView_GetItemText listviewHWND index subItem) :: (string)\nlistviewHWND :: identifier\nindex :: integer\nsubItem :: integer\n",
    "name": "JS_ListView_GetItemText",
    "params": [
      {
        "type": "identifier",
        "name": "listviewHWND"
      },
      {
        "type": "integer",
        "name": "index"
      },
      {
        "type": "integer",
        "name": "subItem"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "text"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_ListView_GetSelectedCount listviewHWND) :: (integer)",
    "doc": "(reaper.JS_ListView_GetSelectedCount listviewHWND) :: (integer)\nlistviewHWND :: identifier\n",
    "name": "JS_ListView_GetSelectedCount",
    "params": [
      {
        "type": "identifier",
        "name": "listviewHWND"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_ListView_GetTopIndex listviewHWND) :: (integer)",
    "doc": "(reaper.JS_ListView_GetTopIndex listviewHWND) :: (integer)\nlistviewHWND :: identifier\n",
    "name": "JS_ListView_GetTopIndex",
    "params": [
      {
        "type": "identifier",
        "name": "listviewHWND"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_ListView_HitTest listviewHWND clientX clientY) :: (integer integer integer)",
    "doc": "(reaper.JS_ListView_HitTest listviewHWND clientX clientY) :: (integer integer integer)\nlistviewHWND :: identifier\nclientX :: integer\nclientY :: integer\n",
    "name": "JS_ListView_HitTest",
    "params": [
      {
        "type": "identifier",
        "name": "listviewHWND"
      },
      {
        "type": "integer",
        "name": "clientX"
      },
      {
        "type": "integer",
        "name": "clientY"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "index"
      },
      {
        "type": "integer",
        "name": "subItem"
      },
      {
        "type": "integer",
        "name": "flags"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_ListView_ListAllSelItems listviewHWND) :: (integer string)",
    "doc": "(reaper.JS_ListView_ListAllSelItems listviewHWND) :: (integer string)\nlistviewHWND :: identifier\nReturns the indices of all selected items as a comma-separated list.\n * retval: Number of selected items found; negative or zero if an error occured.",
    "name": "JS_ListView_ListAllSelItems",
    "params": [
      {
        "type": "identifier",
        "name": "listviewHWND"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "items"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the indices of all selected items as a comma-separated list.\n * retval: Number of selected items found; negative or zero if an error occured."
  },
  {
    "form": "(reaper.JS_ListView_SetItemState listviewHWND index state mask) :: nil",
    "doc": "(reaper.JS_ListView_SetItemState listviewHWND index state mask) :: nil\nlistviewHWND :: identifier\nindex :: integer\nstate :: integer\nmask :: integer\nThe mask parameter specifies the state bits that must be set, and the state parameter specifies the new values for those bits.\n1 = focused, 2 = selected. On Windows only, cut-and-paste marked = 4, drag-and-drop highlighted = 8.\nWarning: this function uses the Win32 bitmask values, which differ from the values used by WDL/swell.",
    "name": "JS_ListView_SetItemState",
    "params": [
      {
        "type": "identifier",
        "name": "listviewHWND"
      },
      {
        "type": "integer",
        "name": "index"
      },
      {
        "type": "integer",
        "name": "state"
      },
      {
        "type": "integer",
        "name": "mask"
      }
    ],
    "namespace": "reaper",
    "description": "The mask parameter specifies the state bits that must be set, and the state parameter specifies the new values for those bits.\n1 = focused, 2 = selected. On Windows only, cut-and-paste marked = 4, drag-and-drop highlighted = 8.\nWarning: this function uses the Win32 bitmask values, which differ from the values used by WDL/swell."
  },
  {
    "form": "(reaper.JS_ListView_SetItemText listviewHWND index subItem text) :: nil",
    "doc": "(reaper.JS_ListView_SetItemText listviewHWND index subItem text) :: nil\nlistviewHWND :: identifier\nindex :: integer\nsubItem :: integer\ntext :: string\nCurrently, this fuction only accepts ASCII text.",
    "name": "JS_ListView_SetItemText",
    "params": [
      {
        "type": "identifier",
        "name": "listviewHWND"
      },
      {
        "type": "integer",
        "name": "index"
      },
      {
        "type": "integer",
        "name": "subItem"
      },
      {
        "type": "string",
        "name": "text"
      }
    ],
    "namespace": "reaper",
    "description": "Currently, this fuction only accepts ASCII text."
  },
  {
    "form": "(reaper.JS_Localize USEnglish LangPackSection) :: (string)",
    "doc": "(reaper.JS_Localize USEnglish LangPackSection) :: (string)\nUSEnglish :: string\nLangPackSection :: string\nReturns the translation of the given US English text, according to the currently loaded Language Pack.\nParameters:\n * LangPackSection: Language Packs are divided into sections such as \"common\" or \"DLG_102\".\n * In Lua, by default, text of up to 1024 chars can be returned. To increase (or reduce) the default buffer size, a string and size can be included as optional 3rd and 4th arguments.\nExample: reaper.JS_Localize(\"Actions\", \"common\", \"\", 20)",
    "name": "JS_Localize",
    "params": [
      {
        "type": "string",
        "name": "USEnglish"
      },
      {
        "type": "string",
        "name": "LangPackSection"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "translation"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the translation of the given US English text, according to the currently loaded Language Pack.\nParameters:\n * LangPackSection: Language Packs are divided into sections such as \"common\" or \"DLG_102\".\n * In Lua, by default, text of up to 1024 chars can be returned. To increase (or reduce) the default buffer size, a string and size can be included as optional 3rd and 4th arguments.\nExample: reaper.JS_Localize(\"Actions\", \"common\", \"\", 20)"
  },
  {
    "form": "(reaper.JS_MIDIEditor_ArrayAll reaperarray) :: (integer)",
    "doc": "(reaper.JS_MIDIEditor_ArrayAll reaperarray) :: (integer)\nreaperarray :: identifier\nFinds all open MIDI windows (whether docked or not).\n * retval: The number of MIDI editor windows found; negative if an error occurred.\n * The address of each MIDI editor window is stored in the provided reaper.array. Each address can be converted to a REAPER object (HWND) by the function JS_Window_HandleFromAddress.",
    "name": "JS_MIDIEditor_ArrayAll",
    "params": [
      {
        "type": "identifier",
        "name": "reaperarray"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Finds all open MIDI windows (whether docked or not).\n * retval: The number of MIDI editor windows found; negative if an error occurred.\n * The address of each MIDI editor window is stored in the provided reaper.array. Each address can be converted to a REAPER object (HWND) by the function JS_Window_HandleFromAddress."
  },
  {
    "form": "(reaper.JS_MIDIEditor_ListAll ) :: (integer string)",
    "doc": "(reaper.JS_MIDIEditor_ListAll ) :: (integer string)\nFinds all open MIDI windows (whether docked or not).\n * retval: The number of MIDI editor windows found; negative if an error occurred.\n * list: Comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.",
    "name": "JS_MIDIEditor_ListAll",
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "list"
      }
    ],
    "namespace": "reaper",
    "description": "Finds all open MIDI windows (whether docked or not).\n * retval: The number of MIDI editor windows found; negative if an error occurred.\n * list: Comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress."
  },
  {
    "form": "(reaper.JS_Mem_Alloc sizeBytes) :: (identifier)",
    "doc": "(reaper.JS_Mem_Alloc sizeBytes) :: (identifier)\nsizeBytes :: integer\nAllocates memory for general use by functions that require memory buffers.",
    "name": "JS_Mem_Alloc",
    "params": [
      {
        "type": "integer",
        "name": "sizeBytes"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "Allocates memory for general use by functions that require memory buffers."
  },
  {
    "form": "(reaper.JS_Mem_Free mallocPointer) :: (boolean)",
    "doc": "(reaper.JS_Mem_Free mallocPointer) :: (boolean)\nmallocPointer :: identifier\nFrees memory that was previously allocated by JS_Mem_Alloc.",
    "name": "JS_Mem_Free",
    "params": [
      {
        "type": "identifier",
        "name": "mallocPointer"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Frees memory that was previously allocated by JS_Mem_Alloc."
  },
  {
    "form": "(reaper.JS_Mem_FromString mallocPointer offset packedString stringLength) :: (boolean)",
    "doc": "(reaper.JS_Mem_FromString mallocPointer offset packedString stringLength) :: (boolean)\nmallocPointer :: identifier\noffset :: integer\npackedString :: string\nstringLength :: integer\nCopies a packed string into a memory buffer.",
    "name": "JS_Mem_FromString",
    "params": [
      {
        "type": "identifier",
        "name": "mallocPointer"
      },
      {
        "type": "integer",
        "name": "offset"
      },
      {
        "type": "string",
        "name": "packedString"
      },
      {
        "type": "integer",
        "name": "stringLength"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Copies a packed string into a memory buffer."
  },
  {
    "form": "(reaper.JS_Mouse_GetCursor ) :: (identifier)",
    "doc": "(reaper.JS_Mouse_GetCursor ) :: (identifier)\nOn Windows, retrieves a handle to the current mouse cursor.\nOn Linux and macOS, retrieves a handle to the last cursor set by REAPER or its extensions via SWELL.",
    "name": "JS_Mouse_GetCursor",
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "On Windows, retrieves a handle to the current mouse cursor.\nOn Linux and macOS, retrieves a handle to the last cursor set by REAPER or its extensions via SWELL."
  },
  {
    "form": "(reaper.JS_Mouse_GetState flags) :: (integer)",
    "doc": "(reaper.JS_Mouse_GetState flags) :: (integer)\nflags :: integer\nRetrieves the states of mouse buttons and modifiers keys.\nParameters:\n * flags, state: The parameter and the return value both use the same format as gfx.mouse_cap. For example, to get the states of the left mouse button and the ctrl key, use flags = 0b00000101.",
    "name": "JS_Mouse_GetState",
    "params": [
      {
        "type": "integer",
        "name": "flags"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Retrieves the states of mouse buttons and modifiers keys.\nParameters:\n * flags, state: The parameter and the return value both use the same format as gfx.mouse_cap. For example, to get the states of the left mouse button and the ctrl key, use flags = 0b00000101."
  },
  {
    "form": "(reaper.JS_Mouse_LoadCursor cursorNumber) :: (identifier)",
    "doc": "(reaper.JS_Mouse_LoadCursor cursorNumber) :: (identifier)\ncursorNumber :: integer\nLoads a cursor by number.\ncursorNumber: Same as used for gfx.setcursor, and includes some of Windows' predefined cursors (with numbers > 32000; refer to documentation for the Win32 C++ function LoadCursor), and REAPER's own cursors (with numbers < 2000).\nIf successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor.",
    "name": "JS_Mouse_LoadCursor",
    "params": [
      {
        "type": "integer",
        "name": "cursorNumber"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "Loads a cursor by number.\ncursorNumber: Same as used for gfx.setcursor, and includes some of Windows' predefined cursors (with numbers > 32000; refer to documentation for the Win32 C++ function LoadCursor), and REAPER's own cursors (with numbers < 2000).\nIf successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor."
  },
  {
    "form": "(reaper.JS_Mouse_LoadCursorFromFile pathAndFileName forceNewLoad) :: (identifier)",
    "doc": "(reaper.JS_Mouse_LoadCursorFromFile pathAndFileName forceNewLoad) :: (identifier)\npathAndFileName :: string\nforceNewLoad :: unsupported\nLoads a cursor from a .cur file.\nforceNewLoad is an optional boolean parameter:\n * If omitted or false, and if the cursor file has already been loaded previously during the REAPER session by any script, the file will not be re-loaded, and the existing handle will be returned.\n * If true, the file will be re-loaded and a new handle will be returned.\n * WARNING: Each time that a cursor file is re-loaded, the number of GDI objects increases for the entire duration of the REAPER session.\nIf successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor.",
    "name": "JS_Mouse_LoadCursorFromFile",
    "params": [
      {
        "type": "string",
        "name": "pathAndFileName"
      },
      {
        "type": "unsupported",
        "name": "forceNewLoad"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "Loads a cursor from a .cur file.\nforceNewLoad is an optional boolean parameter:\n * If omitted or false, and if the cursor file has already been loaded previously during the REAPER session by any script, the file will not be re-loaded, and the existing handle will be returned.\n * If true, the file will be re-loaded and a new handle will be returned.\n * WARNING: Each time that a cursor file is re-loaded, the number of GDI objects increases for the entire duration of the REAPER session.\nIf successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor."
  },
  {
    "form": "(reaper.JS_Mouse_SetCursor cursorHandle) :: nil",
    "doc": "(reaper.JS_Mouse_SetCursor cursorHandle) :: nil\ncursorHandle :: identifier\nSets the mouse cursor.  (Only lasts while script is running, and for a single \"defer\" cycle.)",
    "name": "JS_Mouse_SetCursor",
    "params": [
      {
        "type": "identifier",
        "name": "cursorHandle"
      }
    ],
    "namespace": "reaper",
    "description": "Sets the mouse cursor.  (Only lasts while script is running, and for a single \"defer\" cycle.)"
  },
  {
    "form": "(reaper.JS_Mouse_SetPosition x y) :: (boolean)",
    "doc": "(reaper.JS_Mouse_SetPosition x y) :: (boolean)\nx :: integer\ny :: integer\nMoves the mouse cursor to the specified screen coordinates.\nNOTES:\n * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.",
    "name": "JS_Mouse_SetPosition",
    "params": [
      {
        "type": "integer",
        "name": "x"
      },
      {
        "type": "integer",
        "name": "y"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Moves the mouse cursor to the specified screen coordinates.\nNOTES:\n * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward."
  },
  {
    "form": "(reaper.JS_ReaScriptAPI_Version ) :: (number)",
    "doc": "(reaper.JS_ReaScriptAPI_Version ) :: (number)\nReturns the version of the js_ReaScriptAPI extension.",
    "name": "JS_ReaScriptAPI_Version",
    "returns": [
      {
        "type": "number",
        "name": "version"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the version of the js_ReaScriptAPI extension."
  },
  {
    "form": "(reaper.JS_String pointer offset lengthChars) :: (boolean string)",
    "doc": "(reaper.JS_String pointer offset lengthChars) :: (boolean string)\npointer :: identifier\noffset :: integer\nlengthChars :: integer\nReturns the memory contents starting at address[offset] as a packed string. Offset is added as steps of 1 byte (char) each.",
    "name": "JS_String",
    "params": [
      {
        "type": "identifier",
        "name": "pointer"
      },
      {
        "type": "integer",
        "name": "offset"
      },
      {
        "type": "integer",
        "name": "lengthChars"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the memory contents starting at address[offset] as a packed string. Offset is added as steps of 1 byte (char) each."
  },
  {
    "form": "(reaper.JS_VKeys_GetDown cutoffTime) :: (string)",
    "doc": "(reaper.JS_VKeys_GetDown cutoffTime) :: (string)\ncutoffTime :: number\nReturns a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYDOWN messages since cutoffTime.\nNotes:\n * Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.\n * Auto-repeated KEYDOWN messages are ignored.",
    "name": "JS_VKeys_GetDown",
    "params": [
      {
        "type": "number",
        "name": "cutoffTime"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "state"
      }
    ],
    "namespace": "reaper",
    "description": "Returns a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYDOWN messages since cutoffTime.\nNotes:\n * Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.\n * Auto-repeated KEYDOWN messages are ignored."
  },
  {
    "form": "(reaper.JS_VKeys_GetState cutoffTime) :: (string)",
    "doc": "(reaper.JS_VKeys_GetState cutoffTime) :: (string)\ncutoffTime :: number\nRetrieves the current states (0 or 1) of all virtual keys, from 0x01 to 0xFF, in a 255-byte array.\ncutoffTime: A key is only regarded as down if it sent a KEYDOWN message after the cut-off time, not followed by KEYUP. (This is useful for excluding old KEYDOWN messages that weren't properly followed by KEYUP.) \nIf cutoffTime is positive, is it interpreted as absolute time in similar format as time_precise().\nIf cutoffTime is negative, it is relative to the current time.\nNotes:\n * Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.\n * Auto-repeated KEYDOWN messages are ignored.",
    "name": "JS_VKeys_GetState",
    "params": [
      {
        "type": "number",
        "name": "cutoffTime"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "state"
      }
    ],
    "namespace": "reaper",
    "description": "Retrieves the current states (0 or 1) of all virtual keys, from 0x01 to 0xFF, in a 255-byte array.\ncutoffTime: A key is only regarded as down if it sent a KEYDOWN message after the cut-off time, not followed by KEYUP. (This is useful for excluding old KEYDOWN messages that weren't properly followed by KEYUP.) \nIf cutoffTime is positive, is it interpreted as absolute time in similar format as time_precise().\nIf cutoffTime is negative, it is relative to the current time.\nNotes:\n * Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.\n * Auto-repeated KEYDOWN messages are ignored."
  },
  {
    "form": "(reaper.JS_VKeys_GetUp cutoffTime) :: (string)",
    "doc": "(reaper.JS_VKeys_GetUp cutoffTime) :: (string)\ncutoffTime :: number\nReturn a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYUP messages since cutoffTime.\nNote: Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.",
    "name": "JS_VKeys_GetUp",
    "params": [
      {
        "type": "number",
        "name": "cutoffTime"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "state"
      }
    ],
    "namespace": "reaper",
    "description": "Return a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYUP messages since cutoffTime.\nNote: Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead."
  },
  {
    "form": "(reaper.JS_VKeys_Intercept keyCode intercept) :: (integer)",
    "doc": "(reaper.JS_VKeys_Intercept keyCode intercept) :: (integer)\nkeyCode :: integer\nintercept :: integer\nIntercepting (blocking) virtual keys work similar to the native function PreventUIRefresh:  Each key has a (non-negative) intercept state, and the key is passed through as usual if the state equals 0, or blocked if the state is greater than 0.\nkeyCode: The virtual key code of the key, or -1 to change the state of all keys.\nintercept: A script can increase the intercept state by passing +1, or lower the state by passing -1.  Multiple scripts can block the same key, and the intercept state may reach up to 255. If zero is passed, the intercept state is not changed, but the current state is returned.\nReturns: If keyCode refers to a single key, the intercept state of that key is returned.  If keyCode = -1, the state of the key that is most strongly blocked (highest intercept state) is returned.",
    "name": "JS_VKeys_Intercept",
    "params": [
      {
        "type": "integer",
        "name": "keyCode"
      },
      {
        "type": "integer",
        "name": "intercept"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Intercepting (blocking) virtual keys work similar to the native function PreventUIRefresh:  Each key has a (non-negative) intercept state, and the key is passed through as usual if the state equals 0, or blocked if the state is greater than 0.\nkeyCode: The virtual key code of the key, or -1 to change the state of all keys.\nintercept: A script can increase the intercept state by passing +1, or lower the state by passing -1.  Multiple scripts can block the same key, and the intercept state may reach up to 255. If zero is passed, the intercept state is not changed, but the current state is returned.\nReturns: If keyCode refers to a single key, the intercept state of that key is returned.  If keyCode = -1, the state of the key that is most strongly blocked (highest intercept state) is returned."
  },
  {
    "form": "(reaper.JS_WindowMessage_Intercept windowHWND message passThrough) :: (integer)",
    "doc": "(reaper.JS_WindowMessage_Intercept windowHWND message passThrough) :: (integer)\nwindowHWND :: identifier\nmessage :: string\npassThrough :: boolean\nBegins intercepting a window message type to specified window.\nParameters:\n * message: a single message type to be intercepted, either in WM_ or hexadecimal format. For example \"WM_SETCURSOR\" or \"0x0020\".\n * passThrough: Whether message should be blocked (false) or passed through (true) to the window.\n    For more information on message codes, refer to the Win32 C++ API documentation.\n    All WM_ and CB_ message types listed in swell-types.h should be valid cross-platform, and the function can recognize all of these by name. Other messages can be specified by their hex code.\nReturns:\n * 1: Success.\n * 0: The message type is already being intercepted by another script.\n * -2: message string could not be parsed.\n * -3: Failure getting original window process / window not valid.\n * -6: Could not obtain the window client HDC.\nNotes:\n * Intercepted messages can be polled using JS_WindowMessage_Peek.\n * Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.\n * To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts.\n * Mouse events are typically received by the child window under the mouse, not the parent window.\nKeyboard events are usually *not* received by any individual window. To intercept keyboard events, use the VKey functions.",
    "name": "JS_WindowMessage_Intercept",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "string",
        "name": "message"
      },
      {
        "type": "boolean",
        "name": "passThrough"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Begins intercepting a window message type to specified window.\nParameters:\n * message: a single message type to be intercepted, either in WM_ or hexadecimal format. For example \"WM_SETCURSOR\" or \"0x0020\".\n * passThrough: Whether message should be blocked (false) or passed through (true) to the window.\n    For more information on message codes, refer to the Win32 C++ API documentation.\n    All WM_ and CB_ message types listed in swell-types.h should be valid cross-platform, and the function can recognize all of these by name. Other messages can be specified by their hex code.\nReturns:\n * 1: Success.\n * 0: The message type is already being intercepted by another script.\n * -2: message string could not be parsed.\n * -3: Failure getting original window process / window not valid.\n * -6: Could not obtain the window client HDC.\nNotes:\n * Intercepted messages can be polled using JS_WindowMessage_Peek.\n * Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.\n * To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts.\n * Mouse events are typically received by the child window under the mouse, not the parent window.\nKeyboard events are usually *not* received by any individual window. To intercept keyboard events, use the VKey functions."
  },
  {
    "form": "(reaper.JS_WindowMessage_InterceptList windowHWND messages) :: (integer)",
    "doc": "(reaper.JS_WindowMessage_InterceptList windowHWND messages) :: (integer)\nwindowHWND :: identifier\nmessages :: string\nBegins intercepting window messages to specified window.\nParameters:\n * messages: comma-separated string of message types to be intercepted (either in WM_ or hexadecimal format), each with a \"block\" or \"passthrough\" modifier to specify whether the message should be blocked or passed through to the window. For example \"WM_SETCURSOR:block, 0x0201:passthrough\".\n    For more information on message codes, refer to the Win32 C++ API documentation.\n    All WM_ and CB_ message types listed in swell-types.h should be valid cross-platform, and the function can recognize all of these by name. Other messages can be specified by their hex code.\nReturns:\n * 1: Success.\n * 0: The message type is already being intercepted by another script.\n * -1: windowHWND is not a valid window.\n * -2: message string could not be parsed.\n * -3: Failure getting original window process.\n * -6: COuld not obtain the window client HDC.\nNotes:\n * Intercepted messages can be polled using JS_WindowMessage_Peek.\n * Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.\n * To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts.",
    "name": "JS_WindowMessage_InterceptList",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "string",
        "name": "messages"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Begins intercepting window messages to specified window.\nParameters:\n * messages: comma-separated string of message types to be intercepted (either in WM_ or hexadecimal format), each with a \"block\" or \"passthrough\" modifier to specify whether the message should be blocked or passed through to the window. For example \"WM_SETCURSOR:block, 0x0201:passthrough\".\n    For more information on message codes, refer to the Win32 C++ API documentation.\n    All WM_ and CB_ message types listed in swell-types.h should be valid cross-platform, and the function can recognize all of these by name. Other messages can be specified by their hex code.\nReturns:\n * 1: Success.\n * 0: The message type is already being intercepted by another script.\n * -1: windowHWND is not a valid window.\n * -2: message string could not be parsed.\n * -3: Failure getting original window process.\n * -6: COuld not obtain the window client HDC.\nNotes:\n * Intercepted messages can be polled using JS_WindowMessage_Peek.\n * Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.\n * To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts."
  },
  {
    "form": "(reaper.JS_WindowMessage_ListIntercepts windowHWND) :: (boolean string)",
    "doc": "(reaper.JS_WindowMessage_ListIntercepts windowHWND) :: (boolean string)\nwindowHWND :: identifier\nReturns a string with a list of all message types currently being intercepted for the specified window.",
    "name": "JS_WindowMessage_ListIntercepts",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "list"
      }
    ],
    "namespace": "reaper",
    "description": "Returns a string with a list of all message types currently being intercepted for the specified window."
  },
  {
    "form": "(reaper.JS_WindowMessage_PassThrough windowHWND message passThrough) :: (integer)",
    "doc": "(reaper.JS_WindowMessage_PassThrough windowHWND message passThrough) :: (integer)\nwindowHWND :: identifier\nmessage :: string\npassThrough :: boolean\nChanges the passthrough setting of a message type that is already being intercepted.\nReturns 1 if successful, 0 if the message type is not yet being intercepted, or -2 if the argument could not be parsed.",
    "name": "JS_WindowMessage_PassThrough",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "string",
        "name": "message"
      },
      {
        "type": "boolean",
        "name": "passThrough"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Changes the passthrough setting of a message type that is already being intercepted.\nReturns 1 if successful, 0 if the message type is not yet being intercepted, or -2 if the argument could not be parsed."
  },
  {
    "form": "(reaper.JS_WindowMessage_Peek windowHWND message) :: (boolean boolean number integer integer integer integer)",
    "doc": "(reaper.JS_WindowMessage_Peek windowHWND message) :: (boolean boolean number integer integer integer integer)\nwindowHWND :: identifier\nmessage :: string\nPolls the state of an intercepted message.\nParameters:\n * message: String containing a single message name, such as \"WM_SETCURSOR\", or in hexadecimal format, \"0x0020\".\n (For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)\nReturns:\n * A retval of false indicates that the message type is not being intercepted in the specified window.\n * All messages are timestamped. A time of 0 indicates that no message if this type has been intercepted yet.\n * For more information about wParam and lParam for different message types, refer to Win32 C++ documentation.\n * For example, in the case of mousewheel, returns mousewheel delta, modifier keys, x position and y position.\n * wParamHigh, lParamLow and lParamHigh are signed, whereas wParamLow is unsigned.",
    "name": "JS_WindowMessage_Peek",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "string",
        "name": "message"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "boolean",
        "name": "passedThrough"
      },
      {
        "type": "number",
        "name": "time"
      },
      {
        "type": "integer",
        "name": "wParamLow"
      },
      {
        "type": "integer",
        "name": "wParamHigh"
      },
      {
        "type": "integer",
        "name": "lParamLow"
      },
      {
        "type": "integer",
        "name": "lParamHigh"
      }
    ],
    "namespace": "reaper",
    "description": "Polls the state of an intercepted message.\nParameters:\n * message: String containing a single message name, such as \"WM_SETCURSOR\", or in hexadecimal format, \"0x0020\".\n (For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)\nReturns:\n * A retval of false indicates that the message type is not being intercepted in the specified window.\n * All messages are timestamped. A time of 0 indicates that no message if this type has been intercepted yet.\n * For more information about wParam and lParam for different message types, refer to Win32 C++ documentation.\n * For example, in the case of mousewheel, returns mousewheel delta, modifier keys, x position and y position.\n * wParamHigh, lParamLow and lParamHigh are signed, whereas wParamLow is unsigned."
  },
  {
    "form": "(reaper.JS_WindowMessage_Post windowHWND message wParam wParamHighWord lParam lParamHighWord) :: (boolean)",
    "doc": "(reaper.JS_WindowMessage_Post windowHWND message wParam wParamHighWord lParam lParamHighWord) :: (boolean)\nwindowHWND :: identifier\nmessage :: string\nwParam :: number\nwParamHighWord :: integer\nlParam :: number\nlParamHighWord :: integer\nIf the specified window and message type are not currently being intercepted by a script, this function will post the message in the message queue of the specified window, and return without waiting.\nIf the window and message type are currently being intercepted, the message will be sent directly to the original window process, similar to WindowMessage_Send, thereby skipping any intercepts.\nParameters:\n * message: String containing a single message name, such as \"WM_SETCURSOR\", or in hexadecimal format, \"0x0020\".\n (For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)\n * wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.\n(Most window messages encode separate information into the two WORDs. However, for those rare cases in which the entire WPARAM and LPARAM must be used to post a large pointer, the script can store this address in wParam or lParam, and keep wParamHigh and lParamHigh zero.)\nNotes:\n * For more information about parameter values, refer to documentation for the Win32 C++ function PostMessage.\n * Messages should only be sent to windows that were created from the main thread.\n * Useful for simulating mouse clicks and calling mouse modifier actions from scripts.",
    "name": "JS_WindowMessage_Post",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "string",
        "name": "message"
      },
      {
        "type": "number",
        "name": "wParam"
      },
      {
        "type": "integer",
        "name": "wParamHighWord"
      },
      {
        "type": "number",
        "name": "lParam"
      },
      {
        "type": "integer",
        "name": "lParamHighWord"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "If the specified window and message type are not currently being intercepted by a script, this function will post the message in the message queue of the specified window, and return without waiting.\nIf the window and message type are currently being intercepted, the message will be sent directly to the original window process, similar to WindowMessage_Send, thereby skipping any intercepts.\nParameters:\n * message: String containing a single message name, such as \"WM_SETCURSOR\", or in hexadecimal format, \"0x0020\".\n (For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)\n * wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.\n(Most window messages encode separate information into the two WORDs. However, for those rare cases in which the entire WPARAM and LPARAM must be used to post a large pointer, the script can store this address in wParam or lParam, and keep wParamHigh and lParamHigh zero.)\nNotes:\n * For more information about parameter values, refer to documentation for the Win32 C++ function PostMessage.\n * Messages should only be sent to windows that were created from the main thread.\n * Useful for simulating mouse clicks and calling mouse modifier actions from scripts."
  },
  {
    "form": "(reaper.JS_WindowMessage_Release windowHWND messages) :: (integer)",
    "doc": "(reaper.JS_WindowMessage_Release windowHWND messages) :: (integer)\nwindowHWND :: identifier\nmessages :: string\nRelease intercepts of specified message types.\nParameters:\n * messages: \"WM_SETCURSOR,WM_MOUSEHWHEEL\" or \"0x0020,0x020E\", for example.",
    "name": "JS_WindowMessage_Release",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "string",
        "name": "messages"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Release intercepts of specified message types.\nParameters:\n * messages: \"WM_SETCURSOR,WM_MOUSEHWHEEL\" or \"0x0020,0x020E\", for example."
  },
  {
    "form": "(reaper.JS_WindowMessage_ReleaseAll ) :: nil",
    "doc": "(reaper.JS_WindowMessage_ReleaseAll ) :: nil\nRelease script intercepts of window messages for all windows.",
    "name": "JS_WindowMessage_ReleaseAll",
    "namespace": "reaper",
    "description": "Release script intercepts of window messages for all windows."
  },
  {
    "form": "(reaper.JS_WindowMessage_ReleaseWindow windowHWND) :: nil",
    "doc": "(reaper.JS_WindowMessage_ReleaseWindow windowHWND) :: nil\nwindowHWND :: identifier\nRelease script intercepts of window messages for specified window.",
    "name": "JS_WindowMessage_ReleaseWindow",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      }
    ],
    "namespace": "reaper",
    "description": "Release script intercepts of window messages for specified window."
  },
  {
    "form": "(reaper.JS_WindowMessage_Send windowHWND message wParam wParamHighWord lParam lParamHighWord) :: (integer)",
    "doc": "(reaper.JS_WindowMessage_Send windowHWND message wParam wParamHighWord lParam lParamHighWord) :: (integer)\nwindowHWND :: identifier\nmessage :: string\nwParam :: number\nwParamHighWord :: integer\nlParam :: number\nlParamHighWord :: integer\nSends a message to the specified window by calling the window process directly, and only returns after the message has been processed. Any intercepts of the message by scripts will be skipped, and the message can therefore not be blocked.\nParameters:\n * message: String containing a single message name, such as \"WM_SETCURSOR\", or in hexadecimal format, \"0x0020\".\n (For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)\n * wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.\n(Most window messages encode separate information into the two WORDs. However, for those rare cases in which the entire WPARAM and LPARAM must be used to post a large pointer, the script can store this address in wParam or lParam, and keep wParamHigh and lParamHigh zero.)\nNotes:\n * For more information about parameter and return values, refer to documentation for the Win32 C++ function SendMessage.\n * Messages should only be sent to windows that were created from the main thread.\n * Useful for simulating mouse clicks and calling mouse modifier actions from scripts.",
    "name": "JS_WindowMessage_Send",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "string",
        "name": "message"
      },
      {
        "type": "number",
        "name": "wParam"
      },
      {
        "type": "integer",
        "name": "wParamHighWord"
      },
      {
        "type": "number",
        "name": "lParam"
      },
      {
        "type": "integer",
        "name": "lParamHighWord"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Sends a message to the specified window by calling the window process directly, and only returns after the message has been processed. Any intercepts of the message by scripts will be skipped, and the message can therefore not be blocked.\nParameters:\n * message: String containing a single message name, such as \"WM_SETCURSOR\", or in hexadecimal format, \"0x0020\".\n (For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)\n * wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.\n(Most window messages encode separate information into the two WORDs. However, for those rare cases in which the entire WPARAM and LPARAM must be used to post a large pointer, the script can store this address in wParam or lParam, and keep wParamHigh and lParamHigh zero.)\nNotes:\n * For more information about parameter and return values, refer to documentation for the Win32 C++ function SendMessage.\n * Messages should only be sent to windows that were created from the main thread.\n * Useful for simulating mouse clicks and calling mouse modifier actions from scripts."
  },
  {
    "form": "(reaper.JS_Window_AddressFromHandle handle) :: (number)",
    "doc": "(reaper.JS_Window_AddressFromHandle handle) :: (number)\nhandle :: identifier\n",
    "name": "JS_Window_AddressFromHandle",
    "params": [
      {
        "type": "identifier",
        "name": "handle"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "address"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_Window_ArrayAllChild parentHWND reaperarray) :: (integer)",
    "doc": "(reaper.JS_Window_ArrayAllChild parentHWND reaperarray) :: (integer)\nparentHWND :: identifier\nreaperarray :: identifier\nFinds all child windows of the specified parent.\nReturns:\n * retval: The number of windows found; negative if an error occurred.\n * The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.",
    "name": "JS_Window_ArrayAllChild",
    "params": [
      {
        "type": "identifier",
        "name": "parentHWND"
      },
      {
        "type": "identifier",
        "name": "reaperarray"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Finds all child windows of the specified parent.\nReturns:\n * retval: The number of windows found; negative if an error occurred.\n * The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress."
  },
  {
    "form": "(reaper.JS_Window_ArrayAllTop reaperarray) :: (integer)",
    "doc": "(reaper.JS_Window_ArrayAllTop reaperarray) :: (integer)\nreaperarray :: identifier\nFinds all top-level windows.\nReturns:\n * retval: The number of windows found; negative if an error occurred.\n * The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.",
    "name": "JS_Window_ArrayAllTop",
    "params": [
      {
        "type": "identifier",
        "name": "reaperarray"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Finds all top-level windows.\nReturns:\n * retval: The number of windows found; negative if an error occurred.\n * The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress."
  },
  {
    "form": "(reaper.JS_Window_ArrayFind title exact reaperarray) :: (integer)",
    "doc": "(reaper.JS_Window_ArrayFind title exact reaperarray) :: (integer)\ntitle :: string\nexact :: boolean\nreaperarray :: identifier\nFinds all windows, whether top-level or child, whose titles match the specified string.\nReturns:\n * retval: The number of windows found; negative if an error occurred.\n * The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.\nParameters:\n * exact: Match entire title exactly, or match substring of title.",
    "name": "JS_Window_ArrayFind",
    "params": [
      {
        "type": "string",
        "name": "title"
      },
      {
        "type": "boolean",
        "name": "exact"
      },
      {
        "type": "identifier",
        "name": "reaperarray"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Finds all windows, whether top-level or child, whose titles match the specified string.\nReturns:\n * retval: The number of windows found; negative if an error occurred.\n * The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.\nParameters:\n * exact: Match entire title exactly, or match substring of title."
  },
  {
    "form": "(reaper.JS_Window_AttachResizeGrip windowHWND) :: nil",
    "doc": "(reaper.JS_Window_AttachResizeGrip windowHWND) :: nil\nwindowHWND :: identifier\n",
    "name": "JS_Window_AttachResizeGrip",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_Window_AttachTopmostPin windowHWND) :: nil",
    "doc": "(reaper.JS_Window_AttachTopmostPin windowHWND) :: nil\nwindowHWND :: identifier\nAttaches a \"pin on top\" button to the window frame. The button should remember its state when closing and re-opening the window.\nWARNING: This function does not yet work on Linux.",
    "name": "JS_Window_AttachTopmostPin",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      }
    ],
    "namespace": "reaper",
    "description": "Attaches a \"pin on top\" button to the window frame. The button should remember its state when closing and re-opening the window.\nWARNING: This function does not yet work on Linux."
  },
  {
    "form": "(reaper.JS_Window_ClientToScreen windowHWND x y) :: (integer integer)",
    "doc": "(reaper.JS_Window_ClientToScreen windowHWND x y) :: (integer integer)\nwindowHWND :: identifier\nx :: integer\ny :: integer\nConverts the client-area coordinates of a specified point to screen coordinates.\nNOTES:\n * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.\n * On all platforms, client coordinates are relative to the upper left corner of the client area.",
    "name": "JS_Window_ClientToScreen",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "integer",
        "name": "x"
      },
      {
        "type": "integer",
        "name": "y"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "x"
      },
      {
        "type": "integer",
        "name": "y"
      }
    ],
    "namespace": "reaper",
    "description": "Converts the client-area coordinates of a specified point to screen coordinates.\nNOTES:\n * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.\n * On all platforms, client coordinates are relative to the upper left corner of the client area."
  },
  {
    "form": "(reaper.JS_Window_Create title className x y w h ?style ownerHWND) :: (identifier string)",
    "doc": "(reaper.JS_Window_Create title className x y w h ?style ownerHWND) :: (identifier string)\ntitle :: string\nclassName :: string\nx :: integer\ny :: integer\nw :: integer\nh :: integer\nstyle :: string (optional)\nownerHWND :: identifier\nCreates a modeless window with WS_OVERLAPPEDWINDOW style and only rudimentary features. Scripts can paint into the window using GDI or LICE/Composite functions (and JS_Window_InvalidateRect to trigger re-painting).\nstyle: An optional parameter that overrides the default style. The string may include any combination of standard window styles, such as \"POPUP\" for a frameless window, or \"CAPTION,SIZEBOX,SYSMENU\" for a standard framed window.\nOn Linux and macOS, \"MAXIMIZE\" has not yet been implemented, and the remaining styles may appear slightly different from their WindowsOS counterparts.\nclassName: On Windows, only standard ANSI characters are supported.\nownerHWND: Optional parameter, only available on WindowsOS.  Usually either the REAPER main window or another script window, and useful for ensuring that the created window automatically closes when the owner is closed.\nNOTE: On Linux and macOS, the window contents are only updated *between* defer cycles, so the window cannot be animated by for/while loops within a single defer cycle.",
    "name": "JS_Window_Create",
    "params": [
      {
        "type": "string",
        "name": "title"
      },
      {
        "type": "string",
        "name": "className"
      },
      {
        "type": "integer",
        "name": "x"
      },
      {
        "type": "integer",
        "name": "y"
      },
      {
        "type": "integer",
        "name": "w"
      },
      {
        "type": "integer",
        "name": "h"
      },
      {
        "type": "string",
        "name": "style",
        "optional": true
      },
      {
        "type": "identifier",
        "name": "ownerHWND"
      }
    ],
    "returns": [
      {
        "type": "identifier",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "style",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Creates a modeless window with WS_OVERLAPPEDWINDOW style and only rudimentary features. Scripts can paint into the window using GDI or LICE/Composite functions (and JS_Window_InvalidateRect to trigger re-painting).\nstyle: An optional parameter that overrides the default style. The string may include any combination of standard window styles, such as \"POPUP\" for a frameless window, or \"CAPTION,SIZEBOX,SYSMENU\" for a standard framed window.\nOn Linux and macOS, \"MAXIMIZE\" has not yet been implemented, and the remaining styles may appear slightly different from their WindowsOS counterparts.\nclassName: On Windows, only standard ANSI characters are supported.\nownerHWND: Optional parameter, only available on WindowsOS.  Usually either the REAPER main window or another script window, and useful for ensuring that the created window automatically closes when the owner is closed.\nNOTE: On Linux and macOS, the window contents are only updated *between* defer cycles, so the window cannot be animated by for/while loops within a single defer cycle."
  },
  {
    "form": "(reaper.JS_Window_Destroy windowHWND) :: nil",
    "doc": "(reaper.JS_Window_Destroy windowHWND) :: nil\nwindowHWND :: identifier\nDestroys the specified window.",
    "name": "JS_Window_Destroy",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      }
    ],
    "namespace": "reaper",
    "description": "Destroys the specified window."
  },
  {
    "form": "(reaper.JS_Window_Enable windowHWND enable) :: nil",
    "doc": "(reaper.JS_Window_Enable windowHWND enable) :: nil\nwindowHWND :: identifier\nenable :: boolean\nEnables or disables mouse and keyboard input to the specified window or control.",
    "name": "JS_Window_Enable",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "boolean",
        "name": "enable"
      }
    ],
    "namespace": "reaper",
    "description": "Enables or disables mouse and keyboard input to the specified window or control."
  },
  {
    "form": "(reaper.JS_Window_EnableMetal windowHWND) :: (integer)",
    "doc": "(reaper.JS_Window_EnableMetal windowHWND) :: (integer)\nwindowHWND :: identifier\nOn macOS, returns the Metal graphics setting:\n2 = Metal enabled and support GetDC()/ReleaseDC() for drawing (more overhead).\n1 = Metal enabled.\n0 = N/A (Windows and Linux).\n-1 = non-metal async layered mode.\n-2 = non-metal non-async layered mode.\nWARNING: If using mode -1, any BitBlt()/StretchBlt() MUST have the source bitmap persist. If it is resized after Blit it could cause crashes.",
    "name": "JS_Window_EnableMetal",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "On macOS, returns the Metal graphics setting:\n2 = Metal enabled and support GetDC()/ReleaseDC() for drawing (more overhead).\n1 = Metal enabled.\n0 = N/A (Windows and Linux).\n-1 = non-metal async layered mode.\n-2 = non-metal non-async layered mode.\nWARNING: If using mode -1, any BitBlt()/StretchBlt() MUST have the source bitmap persist. If it is resized after Blit it could cause crashes."
  },
  {
    "form": "(reaper.JS_Window_Find title exact) :: (identifier)",
    "doc": "(reaper.JS_Window_Find title exact) :: (identifier)\ntitle :: string\nexact :: boolean\nReturns a HWND to a window whose title matches the specified string.\n * Unlike the Win32 function FindWindow, this function searches top-level as well as child windows, so that the target window can be found irrespective of docked state.\n * In addition, the function can optionally match substrings of the title.\n * Matching is not case sensitive.\nParameters:\n * exact: Match entire title, or match substring of title.",
    "name": "JS_Window_Find",
    "params": [
      {
        "type": "string",
        "name": "title"
      },
      {
        "type": "boolean",
        "name": "exact"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "Returns a HWND to a window whose title matches the specified string.\n * Unlike the Win32 function FindWindow, this function searches top-level as well as child windows, so that the target window can be found irrespective of docked state.\n * In addition, the function can optionally match substrings of the title.\n * Matching is not case sensitive.\nParameters:\n * exact: Match entire title, or match substring of title."
  },
  {
    "form": "(reaper.JS_Window_FindChild parentHWND title exact) :: (identifier)",
    "doc": "(reaper.JS_Window_FindChild parentHWND title exact) :: (identifier)\nparentHWND :: identifier\ntitle :: string\nexact :: boolean\nReturns a HWND to a child window whose title matches the specified string.\nParameters:\n * exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.",
    "name": "JS_Window_FindChild",
    "params": [
      {
        "type": "identifier",
        "name": "parentHWND"
      },
      {
        "type": "string",
        "name": "title"
      },
      {
        "type": "boolean",
        "name": "exact"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "Returns a HWND to a child window whose title matches the specified string.\nParameters:\n * exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive."
  },
  {
    "form": "(reaper.JS_Window_FindChildByID parentHWND ID) :: (identifier)",
    "doc": "(reaper.JS_Window_FindChildByID parentHWND ID) :: (identifier)\nparentHWND :: identifier\nID :: integer\nSimilar to the C++ WIN32 function GetDlgItem, this function finds child windows by ID.\n(The ID of a window may be retrieved by JS_Window_GetLongPtr.)",
    "name": "JS_Window_FindChildByID",
    "params": [
      {
        "type": "identifier",
        "name": "parentHWND"
      },
      {
        "type": "integer",
        "name": "ID"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "Similar to the C++ WIN32 function GetDlgItem, this function finds child windows by ID.\n(The ID of a window may be retrieved by JS_Window_GetLongPtr.)"
  },
  {
    "form": "(reaper.JS_Window_FindEx parentHWND childHWND className title) :: (identifier)",
    "doc": "(reaper.JS_Window_FindEx parentHWND childHWND className title) :: (identifier)\nparentHWND :: identifier\nchildHWND :: identifier\nclassName :: string\ntitle :: string\nReturns a handle to a child window whose class and title match the specified strings.\nParameters: * childWindow: The function searches child windows, beginning with the window *after* the specified child window. If childHWND is equal to parentHWND, the search begins with the first child window of parentHWND.\n * title: An empty string, \"\", will match all windows. (Search is not case sensitive.)",
    "name": "JS_Window_FindEx",
    "params": [
      {
        "type": "identifier",
        "name": "parentHWND"
      },
      {
        "type": "identifier",
        "name": "childHWND"
      },
      {
        "type": "string",
        "name": "className"
      },
      {
        "type": "string",
        "name": "title"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "Returns a handle to a child window whose class and title match the specified strings.\nParameters: * childWindow: The function searches child windows, beginning with the window *after* the specified child window. If childHWND is equal to parentHWND, the search begins with the first child window of parentHWND.\n * title: An empty string, \"\", will match all windows. (Search is not case sensitive.)"
  },
  {
    "form": "(reaper.JS_Window_FindTop title exact) :: (identifier)",
    "doc": "(reaper.JS_Window_FindTop title exact) :: (identifier)\ntitle :: string\nexact :: boolean\nReturns a HWND to a top-level window whose title matches the specified string.\nParameters:\n * exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.",
    "name": "JS_Window_FindTop",
    "params": [
      {
        "type": "string",
        "name": "title"
      },
      {
        "type": "boolean",
        "name": "exact"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "Returns a HWND to a top-level window whose title matches the specified string.\nParameters:\n * exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive."
  },
  {
    "form": "(reaper.JS_Window_FromPoint x y) :: (identifier)",
    "doc": "(reaper.JS_Window_FromPoint x y) :: (identifier)\nx :: integer\ny :: integer\nRetrieves a HWND to the window that contains the specified point.\nNOTES:\n * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.",
    "name": "JS_Window_FromPoint",
    "params": [
      {
        "type": "integer",
        "name": "x"
      },
      {
        "type": "integer",
        "name": "y"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "Retrieves a HWND to the window that contains the specified point.\nNOTES:\n * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward."
  },
  {
    "form": "(reaper.JS_Window_GetClassName windowHWND) :: (string)",
    "doc": "(reaper.JS_Window_GetClassName windowHWND) :: (string)\nwindowHWND :: identifier\nWARNING: May not be fully implemented on macOS and Linux.",
    "name": "JS_Window_GetClassName",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "class"
      }
    ],
    "namespace": "reaper",
    "description": "WARNING: May not be fully implemented on macOS and Linux."
  },
  {
    "form": "(reaper.JS_Window_GetClientRect windowHWND) :: (boolean integer integer integer integer)",
    "doc": "(reaper.JS_Window_GetClientRect windowHWND) :: (boolean integer integer integer integer)\nwindowHWND :: identifier\nRetrieves the screen coordinates of the client area rectangle of the specified window.\nNOTES:\n * Unlike the C++ function GetClientRect, this function returns the screen coordinates, not the width and height. To get the client size, use GetClientSize.\n * The pixel at (right, bottom) lies immediately outside the rectangle.\n * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.",
    "name": "JS_Window_GetClientRect",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "left"
      },
      {
        "type": "integer",
        "name": "top"
      },
      {
        "type": "integer",
        "name": "right"
      },
      {
        "type": "integer",
        "name": "bottom"
      }
    ],
    "namespace": "reaper",
    "description": "Retrieves the screen coordinates of the client area rectangle of the specified window.\nNOTES:\n * Unlike the C++ function GetClientRect, this function returns the screen coordinates, not the width and height. To get the client size, use GetClientSize.\n * The pixel at (right, bottom) lies immediately outside the rectangle.\n * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward."
  },
  {
    "form": "(reaper.JS_Window_GetClientSize windowHWND) :: (boolean integer integer)",
    "doc": "(reaper.JS_Window_GetClientSize windowHWND) :: (boolean integer integer)\nwindowHWND :: identifier\n",
    "name": "JS_Window_GetClientSize",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "width"
      },
      {
        "type": "integer",
        "name": "height"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_Window_GetFocus ) :: (identifier)",
    "doc": "(reaper.JS_Window_GetFocus ) :: (identifier)\nRetrieves a HWND to the window that has the keyboard focus, if the window is attached to the calling thread's message queue.",
    "name": "JS_Window_GetFocus",
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "Retrieves a HWND to the window that has the keyboard focus, if the window is attached to the calling thread's message queue."
  },
  {
    "form": "(reaper.JS_Window_GetForeground ) :: (identifier)",
    "doc": "(reaper.JS_Window_GetForeground ) :: (identifier)\nRetrieves a HWND to the top-level foreground window (the window with which the user is currently working).",
    "name": "JS_Window_GetForeground",
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "Retrieves a HWND to the top-level foreground window (the window with which the user is currently working)."
  },
  {
    "form": "(reaper.JS_Window_GetLong windowHWND info) :: (number)",
    "doc": "(reaper.JS_Window_GetLong windowHWND info) :: (number)\nwindowHWND :: identifier\ninfo :: string\nSimilar to JS_Window_GetLongPtr, but returns the information as a number instead of a pointer. \nIn the case of \"DLGPROC\" and \"WNDPROC\", the return values can be converted to pointers by JS_Window_HandleFromAddress.\nIf the function fails, the return value is 0.",
    "name": "JS_Window_GetLong",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "string",
        "name": "info"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "retval"
      }
    ],
    "namespace": "reaper",
    "description": "Similar to JS_Window_GetLongPtr, but returns the information as a number instead of a pointer. \nIn the case of \"DLGPROC\" and \"WNDPROC\", the return values can be converted to pointers by JS_Window_HandleFromAddress.\nIf the function fails, the return value is 0."
  },
  {
    "form": "(reaper.JS_Window_GetLongPtr windowHWND info) :: (identifier)",
    "doc": "(reaper.JS_Window_GetLongPtr windowHWND info) :: (identifier)\nwindowHWND :: identifier\ninfo :: string\nReturns information about the specified window.\ninfo: \"USERDATA\", \"WNDPROC\", \"DLGPROC\", \"ID\", \"EXSTYLE\" or \"STYLE\".\nFor documentation about the types of information returned, refer to the Win32 function GetWindowLongPtr.\nThe values returned by \"DLGPROC\" and \"WNDPROC\" are typically used as-is, as pointers, whereas the others should first be converted to integers.\nIf the function fails, a null pointer is returned.",
    "name": "JS_Window_GetLongPtr",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "string",
        "name": "info"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "Returns information about the specified window.\ninfo: \"USERDATA\", \"WNDPROC\", \"DLGPROC\", \"ID\", \"EXSTYLE\" or \"STYLE\".\nFor documentation about the types of information returned, refer to the Win32 function GetWindowLongPtr.\nThe values returned by \"DLGPROC\" and \"WNDPROC\" are typically used as-is, as pointers, whereas the others should first be converted to integers.\nIf the function fails, a null pointer is returned."
  },
  {
    "form": "(reaper.JS_Window_GetParent windowHWND) :: (identifier)",
    "doc": "(reaper.JS_Window_GetParent windowHWND) :: (identifier)\nwindowHWND :: identifier\nRetrieves a HWND to the specified window's parent or owner.\nReturns NULL if the window is unowned or if the function otherwise fails.",
    "name": "JS_Window_GetParent",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "Retrieves a HWND to the specified window's parent or owner.\nReturns NULL if the window is unowned or if the function otherwise fails."
  },
  {
    "form": "(reaper.JS_Window_GetRect windowHWND) :: (boolean integer integer integer integer)",
    "doc": "(reaper.JS_Window_GetRect windowHWND) :: (boolean integer integer integer integer)\nwindowHWND :: identifier\nRetrieves the screen coordinates of the bounding rectangle of the specified window.\nNOTES:\n * On Windows and Linux, coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.\n * The pixel at (right, bottom) lies immediately outside the rectangle.",
    "name": "JS_Window_GetRect",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "left"
      },
      {
        "type": "integer",
        "name": "top"
      },
      {
        "type": "integer",
        "name": "right"
      },
      {
        "type": "integer",
        "name": "bottom"
      }
    ],
    "namespace": "reaper",
    "description": "Retrieves the screen coordinates of the bounding rectangle of the specified window.\nNOTES:\n * On Windows and Linux, coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.\n * The pixel at (right, bottom) lies immediately outside the rectangle."
  },
  {
    "form": "(reaper.JS_Window_GetRelated windowHWND relation) :: (identifier)",
    "doc": "(reaper.JS_Window_GetRelated windowHWND relation) :: (identifier)\nwindowHWND :: identifier\nrelation :: string\nRetrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.\nrelation: \"LAST\", \"NEXT\", \"PREV\", \"OWNER\" or \"CHILD\".\n(Refer to documentation for Win32 C++ function GetWindow.)",
    "name": "JS_Window_GetRelated",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "string",
        "name": "relation"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.\nrelation: \"LAST\", \"NEXT\", \"PREV\", \"OWNER\" or \"CHILD\".\n(Refer to documentation for Win32 C++ function GetWindow.)"
  },
  {
    "form": "(reaper.JS_Window_GetScrollInfo windowHWND scrollbar) :: (boolean integer integer integer integer integer)",
    "doc": "(reaper.JS_Window_GetScrollInfo windowHWND scrollbar) :: (boolean integer integer integer integer integer)\nwindowHWND :: identifier\nscrollbar :: string\nRetrieves the scroll information of a window.\nParameters:\n * windowHWND: The window that contains the scrollbar. This is usually a child window, not a top-level, framed window.\n * scrollbar: \"v\" (or \"SB_VERT\", or \"VERT\") for vertical scroll, \"h\" (or \"SB_HORZ\" or \"HORZ\") for horizontal.\nReturns:\n * Leftmost or topmost visible pixel position, as well as the visible page size, the range minimum and maximum, and scroll box tracking position.",
    "name": "JS_Window_GetScrollInfo",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "string",
        "name": "scrollbar"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "position"
      },
      {
        "type": "integer",
        "name": "pageSize"
      },
      {
        "type": "integer",
        "name": "min"
      },
      {
        "type": "integer",
        "name": "max"
      },
      {
        "type": "integer",
        "name": "trackPos"
      }
    ],
    "namespace": "reaper",
    "description": "Retrieves the scroll information of a window.\nParameters:\n * windowHWND: The window that contains the scrollbar. This is usually a child window, not a top-level, framed window.\n * scrollbar: \"v\" (or \"SB_VERT\", or \"VERT\") for vertical scroll, \"h\" (or \"SB_HORZ\" or \"HORZ\") for horizontal.\nReturns:\n * Leftmost or topmost visible pixel position, as well as the visible page size, the range minimum and maximum, and scroll box tracking position."
  },
  {
    "form": "(reaper.JS_Window_GetTitle windowHWND) :: (string)",
    "doc": "(reaper.JS_Window_GetTitle windowHWND) :: (string)\nwindowHWND :: identifier\nReturns the title (if any) of the specified window.",
    "name": "JS_Window_GetTitle",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "title"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the title (if any) of the specified window."
  },
  {
    "form": "(reaper.JS_Window_GetViewportFromRect x1 y1 x2 y2 wantWork) :: (integer integer integer integer)",
    "doc": "(reaper.JS_Window_GetViewportFromRect x1 y1 x2 y2 wantWork) :: (integer integer integer integer)\nx1 :: integer\ny1 :: integer\nx2 :: integer\ny2 :: integer\nwantWork :: boolean\nRetrieves the dimensions of the display monitor that has the largest area of intersection with the specified rectangle.\nIf the monitor is not the primary display, some of the rectangle's coordinates may be negative.\nwantWork: Returns the work area of the display, which excludes the system taskbar or application desktop toolbars.",
    "name": "JS_Window_GetViewportFromRect",
    "params": [
      {
        "type": "integer",
        "name": "x1"
      },
      {
        "type": "integer",
        "name": "y1"
      },
      {
        "type": "integer",
        "name": "x2"
      },
      {
        "type": "integer",
        "name": "y2"
      },
      {
        "type": "boolean",
        "name": "wantWork"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "left"
      },
      {
        "type": "integer",
        "name": "top"
      },
      {
        "type": "integer",
        "name": "right"
      },
      {
        "type": "integer",
        "name": "bottom"
      }
    ],
    "namespace": "reaper",
    "description": "Retrieves the dimensions of the display monitor that has the largest area of intersection with the specified rectangle.\nIf the monitor is not the primary display, some of the rectangle's coordinates may be negative.\nwantWork: Returns the work area of the display, which excludes the system taskbar or application desktop toolbars."
  },
  {
    "form": "(reaper.JS_Window_HandleFromAddress address) :: (identifier)",
    "doc": "(reaper.JS_Window_HandleFromAddress address) :: (identifier)\naddress :: number\nConverts an address to a handle (such as a HWND) that can be utilized by REAPER and other API functions.",
    "name": "JS_Window_HandleFromAddress",
    "params": [
      {
        "type": "number",
        "name": "address"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "Converts an address to a handle (such as a HWND) that can be utilized by REAPER and other API functions."
  },
  {
    "form": "(reaper.JS_Window_InvalidateRect windowHWND left top right bottom eraseBackground) :: (boolean)",
    "doc": "(reaper.JS_Window_InvalidateRect windowHWND left top right bottom eraseBackground) :: (boolean)\nwindowHWND :: identifier\nleft :: integer\ntop :: integer\nright :: integer\nbottom :: integer\neraseBackground :: boolean\nSimilar to the Win32 function InvalidateRect.",
    "name": "JS_Window_InvalidateRect",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "integer",
        "name": "left"
      },
      {
        "type": "integer",
        "name": "top"
      },
      {
        "type": "integer",
        "name": "right"
      },
      {
        "type": "integer",
        "name": "bottom"
      },
      {
        "type": "boolean",
        "name": "eraseBackground"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Similar to the Win32 function InvalidateRect."
  },
  {
    "form": "(reaper.JS_Window_IsChild parentHWND childHWND) :: (boolean)",
    "doc": "(reaper.JS_Window_IsChild parentHWND childHWND) :: (boolean)\nparentHWND :: identifier\nchildHWND :: identifier\nDetermines whether a window is a child window or descendant window of a specified parent window.",
    "name": "JS_Window_IsChild",
    "params": [
      {
        "type": "identifier",
        "name": "parentHWND"
      },
      {
        "type": "identifier",
        "name": "childHWND"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Determines whether a window is a child window or descendant window of a specified parent window."
  },
  {
    "form": "(reaper.JS_Window_IsVisible windowHWND) :: (boolean)",
    "doc": "(reaper.JS_Window_IsVisible windowHWND) :: (boolean)\nwindowHWND :: identifier\nDetermines the visibility state of the window.",
    "name": "JS_Window_IsVisible",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Determines the visibility state of the window."
  },
  {
    "form": "(reaper.JS_Window_IsWindow windowHWND) :: (boolean)",
    "doc": "(reaper.JS_Window_IsWindow windowHWND) :: (boolean)\nwindowHWND :: identifier\nDetermines whether the specified window handle identifies an existing window.\nOn macOS and Linux, only windows that were created by WDL/swell will be identified (and only such windows should be acted on by scripts).\nNOTE: Since REAPER v5.974, windows can be checked using the native function ValidatePtr(windowHWND, \"HWND\").",
    "name": "JS_Window_IsWindow",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Determines whether the specified window handle identifies an existing window.\nOn macOS and Linux, only windows that were created by WDL/swell will be identified (and only such windows should be acted on by scripts).\nNOTE: Since REAPER v5.974, windows can be checked using the native function ValidatePtr(windowHWND, \"HWND\")."
  },
  {
    "form": "(reaper.JS_Window_ListAllChild parentHWND) :: (integer string)",
    "doc": "(reaper.JS_Window_ListAllChild parentHWND) :: (integer string)\nparentHWND :: identifier\nFinds all child windows of the specified parent.\nReturns:\n * retval: The number of windows found; negative if an error occurred.\n * list: A comma-separated string of hexadecimal values.\nEach value is an address that can be converted to a HWND by the function Window_HandleFromAddress.",
    "name": "JS_Window_ListAllChild",
    "params": [
      {
        "type": "identifier",
        "name": "parentHWND"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "list"
      }
    ],
    "namespace": "reaper",
    "description": "Finds all child windows of the specified parent.\nReturns:\n * retval: The number of windows found; negative if an error occurred.\n * list: A comma-separated string of hexadecimal values.\nEach value is an address that can be converted to a HWND by the function Window_HandleFromAddress."
  },
  {
    "form": "(reaper.JS_Window_ListAllTop ) :: (integer string)",
    "doc": "(reaper.JS_Window_ListAllTop ) :: (integer string)\nFinds all top-level windows.\nReturns:\n * retval: The number of windows found; negative if an error occurred.\n * list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.",
    "name": "JS_Window_ListAllTop",
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "list"
      }
    ],
    "namespace": "reaper",
    "description": "Finds all top-level windows.\nReturns:\n * retval: The number of windows found; negative if an error occurred.\n * list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress."
  },
  {
    "form": "(reaper.JS_Window_ListFind title exact) :: (integer string)",
    "doc": "(reaper.JS_Window_ListFind title exact) :: (integer string)\ntitle :: string\nexact :: boolean\nFinds all windows (whether top-level or child) whose titles match the specified string.\nReturns:\n * retval: The number of windows found; negative if an error occurred.\n * list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.\nParameters:\n * exact: Match entire title exactly, or match substring of title.",
    "name": "JS_Window_ListFind",
    "params": [
      {
        "type": "string",
        "name": "title"
      },
      {
        "type": "boolean",
        "name": "exact"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "list"
      }
    ],
    "namespace": "reaper",
    "description": "Finds all windows (whether top-level or child) whose titles match the specified string.\nReturns:\n * retval: The number of windows found; negative if an error occurred.\n * list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.\nParameters:\n * exact: Match entire title exactly, or match substring of title."
  },
  {
    "form": "(reaper.JS_Window_MonitorFromRect x1 y1 x2 y2 wantWork) :: (integer integer integer integer)",
    "doc": "(reaper.JS_Window_MonitorFromRect x1 y1 x2 y2 wantWork) :: (integer integer integer integer)\nx1 :: integer\ny1 :: integer\nx2 :: integer\ny2 :: integer\nwantWork :: boolean\nDeprecated - use GetViewportFromRect instead.",
    "name": "JS_Window_MonitorFromRect",
    "params": [
      {
        "type": "integer",
        "name": "x1"
      },
      {
        "type": "integer",
        "name": "y1"
      },
      {
        "type": "integer",
        "name": "x2"
      },
      {
        "type": "integer",
        "name": "y2"
      },
      {
        "type": "boolean",
        "name": "wantWork"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "left"
      },
      {
        "type": "integer",
        "name": "top"
      },
      {
        "type": "integer",
        "name": "right"
      },
      {
        "type": "integer",
        "name": "bottom"
      }
    ],
    "namespace": "reaper",
    "description": "Deprecated - use GetViewportFromRect instead."
  },
  {
    "form": "(reaper.JS_Window_Move windowHWND left top) :: nil",
    "doc": "(reaper.JS_Window_Move windowHWND left top) :: nil\nwindowHWND :: identifier\nleft :: integer\ntop :: integer\nChanges the position of the specified window, keeping its size constant.\nNOTES:\n * For top-level windows, position is relative to the primary display.\n * On Windows and Linux, position is calculated as the coordinates of the upper left corner of the window, relative to upper left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, position is calculated as the coordinates of the bottom left corner of the window, relative to bottom left corner of the display, and the positive Y-axis points upward.\n * For a child window, on all platforms, position is relative to the upper-left corner of the parent window's client area.\n * Equivalent to calling JS_Window_SetPosition with NOSIZE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.",
    "name": "JS_Window_Move",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "integer",
        "name": "left"
      },
      {
        "type": "integer",
        "name": "top"
      }
    ],
    "namespace": "reaper",
    "description": "Changes the position of the specified window, keeping its size constant.\nNOTES:\n * For top-level windows, position is relative to the primary display.\n * On Windows and Linux, position is calculated as the coordinates of the upper left corner of the window, relative to upper left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, position is calculated as the coordinates of the bottom left corner of the window, relative to bottom left corner of the display, and the positive Y-axis points upward.\n * For a child window, on all platforms, position is relative to the upper-left corner of the parent window's client area.\n * Equivalent to calling JS_Window_SetPosition with NOSIZE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set."
  },
  {
    "form": "(reaper.JS_Window_OnCommand windowHWND commandID) :: (boolean)",
    "doc": "(reaper.JS_Window_OnCommand windowHWND commandID) :: (boolean)\nwindowHWND :: identifier\ncommandID :: integer\nSends a \"WM_COMMAND\" message to the specified window, which simulates a user selecting a command in the window menu.\nThis function is similar to Main_OnCommand and MIDIEditor_OnCommand, but can send commands to any window that has a menu.\nIn the case of windows that are listed among the Action list's contexts (such as the Media Explorer), the commandIDs of the actions in the Actions list may be used.",
    "name": "JS_Window_OnCommand",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "integer",
        "name": "commandID"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Sends a \"WM_COMMAND\" message to the specified window, which simulates a user selecting a command in the window menu.\nThis function is similar to Main_OnCommand and MIDIEditor_OnCommand, but can send commands to any window that has a menu.\nIn the case of windows that are listed among the Action list's contexts (such as the Media Explorer), the commandIDs of the actions in the Actions list may be used."
  },
  {
    "form": "(reaper.JS_Window_Resize windowHWND width height) :: nil",
    "doc": "(reaper.JS_Window_Resize windowHWND width height) :: nil\nwindowHWND :: identifier\nwidth :: integer\nheight :: integer\nChanges the dimensions of the specified window, keeping the top left corner position constant.\n * If resizing script GUIs, call gfx.update() after resizing.\n* Equivalent to calling JS_Window_SetPosition with NOMOVE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.",
    "name": "JS_Window_Resize",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "integer",
        "name": "width"
      },
      {
        "type": "integer",
        "name": "height"
      }
    ],
    "namespace": "reaper",
    "description": "Changes the dimensions of the specified window, keeping the top left corner position constant.\n * If resizing script GUIs, call gfx.update() after resizing.\n* Equivalent to calling JS_Window_SetPosition with NOMOVE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set."
  },
  {
    "form": "(reaper.JS_Window_ScreenToClient windowHWND x y) :: (integer integer)",
    "doc": "(reaper.JS_Window_ScreenToClient windowHWND x y) :: (integer integer)\nwindowHWND :: identifier\nx :: integer\ny :: integer\nConverts the screen coordinates of a specified point on the screen to client-area coordinates.\nNOTES:\n * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.\n * On all platforms, client coordinates are relative to the upper left corner of the client area.",
    "name": "JS_Window_ScreenToClient",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "integer",
        "name": "x"
      },
      {
        "type": "integer",
        "name": "y"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "x"
      },
      {
        "type": "integer",
        "name": "y"
      }
    ],
    "namespace": "reaper",
    "description": "Converts the screen coordinates of a specified point on the screen to client-area coordinates.\nNOTES:\n * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.\n * On all platforms, client coordinates are relative to the upper left corner of the client area."
  },
  {
    "form": "(reaper.JS_Window_SetFocus windowHWND) :: nil",
    "doc": "(reaper.JS_Window_SetFocus windowHWND) :: nil\nwindowHWND :: identifier\nSets the keyboard focus to the specified window.",
    "name": "JS_Window_SetFocus",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      }
    ],
    "namespace": "reaper",
    "description": "Sets the keyboard focus to the specified window."
  },
  {
    "form": "(reaper.JS_Window_SetForeground windowHWND) :: nil",
    "doc": "(reaper.JS_Window_SetForeground windowHWND) :: nil\nwindowHWND :: identifier\nBrings the specified window into the foreground, activates the window, and directs keyboard input to it.",
    "name": "JS_Window_SetForeground",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      }
    ],
    "namespace": "reaper",
    "description": "Brings the specified window into the foreground, activates the window, and directs keyboard input to it."
  },
  {
    "form": "(reaper.JS_Window_SetLong windowHWND info value) :: (number)",
    "doc": "(reaper.JS_Window_SetLong windowHWND info value) :: (number)\nwindowHWND :: identifier\ninfo :: string\nvalue :: number\nSimilar to the Win32 function SetWindowLongPtr. \ninfo: \"USERDATA\", \"WNDPROC\", \"DLGPROC\", \"ID\", \"EXSTYLE\" or \"STYLE\", and only on WindowOS, \"INSTANCE\" and \"PARENT\".",
    "name": "JS_Window_SetLong",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "string",
        "name": "info"
      },
      {
        "type": "number",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "retval"
      }
    ],
    "namespace": "reaper",
    "description": "Similar to the Win32 function SetWindowLongPtr. \ninfo: \"USERDATA\", \"WNDPROC\", \"DLGPROC\", \"ID\", \"EXSTYLE\" or \"STYLE\", and only on WindowOS, \"INSTANCE\" and \"PARENT\"."
  },
  {
    "form": "(reaper.JS_Window_SetOpacity windowHWND mode value) :: (boolean)",
    "doc": "(reaper.JS_Window_SetOpacity windowHWND mode value) :: (boolean)\nwindowHWND :: identifier\nmode :: string\nvalue :: number\nSets the window opacity.\nParameters:\nmode: either \"ALPHA\" or \"COLOR\". \nvalue: If ALPHA, the specified value may range from zero to one, and will apply to the entire window, frame included. \nIf COLOR, value specifies a 0xRRGGBB color, and all pixels of this color will be made transparent. (All mouse clicks over transparent pixels will pass through, too).  WARNING:\nCOLOR mode is only available in Windows, not Linux or macOS.\nTransparency can only be applied to top-level windows. If windowHWND refers to a child window, the entire top-level window that contains windowHWND will be made transparent.",
    "name": "JS_Window_SetOpacity",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "string",
        "name": "mode"
      },
      {
        "type": "number",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Sets the window opacity.\nParameters:\nmode: either \"ALPHA\" or \"COLOR\". \nvalue: If ALPHA, the specified value may range from zero to one, and will apply to the entire window, frame included. \nIf COLOR, value specifies a 0xRRGGBB color, and all pixels of this color will be made transparent. (All mouse clicks over transparent pixels will pass through, too).  WARNING:\nCOLOR mode is only available in Windows, not Linux or macOS.\nTransparency can only be applied to top-level windows. If windowHWND refers to a child window, the entire top-level window that contains windowHWND will be made transparent."
  },
  {
    "form": "(reaper.JS_Window_SetParent childHWND parentHWND) :: (identifier)",
    "doc": "(reaper.JS_Window_SetParent childHWND parentHWND) :: (identifier)\nchildHWND :: identifier\nparentHWND :: identifier\nIf successful, returns a handle to the previous parent window.\nOnly on WindowsOS: If parentHWND is not specified, the desktop window becomes the new parent window.",
    "name": "JS_Window_SetParent",
    "params": [
      {
        "type": "identifier",
        "name": "childHWND"
      },
      {
        "type": "identifier",
        "name": "parentHWND"
      }
    ],
    "returns": [
      {
        "type": "identifier"
      }
    ],
    "namespace": "reaper",
    "description": "If successful, returns a handle to the previous parent window.\nOnly on WindowsOS: If parentHWND is not specified, the desktop window becomes the new parent window."
  },
  {
    "form": "(reaper.JS_Window_SetPosition windowHWND left top width height ?ZOrder ?flags) :: (boolean string string)",
    "doc": "(reaper.JS_Window_SetPosition windowHWND left top width height ?ZOrder ?flags) :: (boolean string string)\nwindowHWND :: identifier\nleft :: integer\ntop :: integer\nwidth :: integer\nheight :: integer\nZOrder :: string (optional)\nflags :: string (optional)\nInterface to the Win32/swell function SetWindowPos, with which window position, size, Z-order and visibility can be set, and new frame styles can be applied.\nZOrder and flags are optional parameters. If no arguments are supplied, the window will simply be moved and resized, as if the NOACTIVATE, NOZORDER, NOOWNERZORDER flags were set.\n * ZOrder: \"BOTTOM\", \"TOPMOST\", \"NOTOPMOST\", \"TOP\" or a window HWND converted to a string, for example by the Lua function tostring.\n * flags: Any combination of the standard flags, of which \"NOMOVE\", \"NOSIZE\", \"NOZORDER\", \"NOACTIVATE\", \"SHOWWINDOW\", \"FRAMECHANGED\" and \"NOCOPYBITS\" should be valid cross-platform.",
    "name": "JS_Window_SetPosition",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "integer",
        "name": "left"
      },
      {
        "type": "integer",
        "name": "top"
      },
      {
        "type": "integer",
        "name": "width"
      },
      {
        "type": "integer",
        "name": "height"
      },
      {
        "type": "string",
        "name": "ZOrder",
        "optional": true
      },
      {
        "type": "string",
        "name": "flags",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "ZOrder",
        "optional": true
      },
      {
        "type": "string",
        "name": "flags",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Interface to the Win32/swell function SetWindowPos, with which window position, size, Z-order and visibility can be set, and new frame styles can be applied.\nZOrder and flags are optional parameters. If no arguments are supplied, the window will simply be moved and resized, as if the NOACTIVATE, NOZORDER, NOOWNERZORDER flags were set.\n * ZOrder: \"BOTTOM\", \"TOPMOST\", \"NOTOPMOST\", \"TOP\" or a window HWND converted to a string, for example by the Lua function tostring.\n * flags: Any combination of the standard flags, of which \"NOMOVE\", \"NOSIZE\", \"NOZORDER\", \"NOACTIVATE\", \"SHOWWINDOW\", \"FRAMECHANGED\" and \"NOCOPYBITS\" should be valid cross-platform."
  },
  {
    "form": "(reaper.JS_Window_SetScrollPos windowHWND scrollbar position) :: (boolean)",
    "doc": "(reaper.JS_Window_SetScrollPos windowHWND scrollbar position) :: (boolean)\nwindowHWND :: identifier\nscrollbar :: string\nposition :: integer\nParameters:\n * scrollbar: \"v\" (or \"SB_VERT\", or \"VERT\") for vertical scroll, \"h\" (or \"SB_HORZ\" or \"HORZ\") for horizontal.\nNOTE: API functions can scroll REAPER's windows, but cannot zoom them.  Instead, use actions such as \"View: Zoom to one loop iteration\".",
    "name": "JS_Window_SetScrollPos",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "string",
        "name": "scrollbar"
      },
      {
        "type": "integer",
        "name": "position"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Parameters:\n * scrollbar: \"v\" (or \"SB_VERT\", or \"VERT\") for vertical scroll, \"h\" (or \"SB_HORZ\" or \"HORZ\") for horizontal.\nNOTE: API functions can scroll REAPER's windows, but cannot zoom them.  Instead, use actions such as \"View: Zoom to one loop iteration\"."
  },
  {
    "form": "(reaper.JS_Window_SetStyle windowHWND style) :: (boolean string)",
    "doc": "(reaper.JS_Window_SetStyle windowHWND style) :: (boolean string)\nwindowHWND :: identifier\nstyle :: string\nSets and applies a window style.\nstyle may include any combination of standard window styles, such as \"POPUP\" for a frameless window, or \"CAPTION,SIZEBOX,SYSMENU\" for a standard framed window.\nOn Linux and macOS, \"MAXIMIZE\" has not yet been implmented, and the remaining styles may appear slightly different from their WindowsOS counterparts.",
    "name": "JS_Window_SetStyle",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "string",
        "name": "style"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "style"
      }
    ],
    "namespace": "reaper",
    "description": "Sets and applies a window style.\nstyle may include any combination of standard window styles, such as \"POPUP\" for a frameless window, or \"CAPTION,SIZEBOX,SYSMENU\" for a standard framed window.\nOn Linux and macOS, \"MAXIMIZE\" has not yet been implmented, and the remaining styles may appear slightly different from their WindowsOS counterparts."
  },
  {
    "form": "(reaper.JS_Window_SetTitle windowHWND title) :: (boolean)",
    "doc": "(reaper.JS_Window_SetTitle windowHWND title) :: (boolean)\nwindowHWND :: identifier\ntitle :: string\nChanges the title of the specified window. Returns true if successful.",
    "name": "JS_Window_SetTitle",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "string",
        "name": "title"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Changes the title of the specified window. Returns true if successful."
  },
  {
    "form": "(reaper.JS_Window_SetZOrder windowHWND ZOrder insertAfterHWND) :: (boolean)",
    "doc": "(reaper.JS_Window_SetZOrder windowHWND ZOrder insertAfterHWND) :: (boolean)\nwindowHWND :: identifier\nZOrder :: string\ninsertAfterHWND :: identifier\nSets the window Z order.\n * Equivalent to calling JS_Window_SetPos with flags NOMOVE | NOSIZE.\n * Not all the Z orders have been implemented in Linux yet.\nParameters:\n * ZOrder: \"BOTTOM\", \"TOPMOST\", \"NOTOPMOST\", \"TOP\", or a window HWND converted to a string, for example by the Lua function tostring.\n* InsertAfterHWND: For compatibility with older versions, this parameter is still available, and is optional. If ZOrder is \"INSERTAFTER\", insertAfterHWND must be a handle to the window behind which windowHWND will be placed in the Z order, equivalent to setting ZOrder to this HWND; otherwise, insertAfterHWND is ignored and can be left out (or it can simply be set to the same value as windowHWND).",
    "name": "JS_Window_SetZOrder",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "string",
        "name": "ZOrder"
      },
      {
        "type": "identifier",
        "name": "insertAfterHWND"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Sets the window Z order.\n * Equivalent to calling JS_Window_SetPos with flags NOMOVE | NOSIZE.\n * Not all the Z orders have been implemented in Linux yet.\nParameters:\n * ZOrder: \"BOTTOM\", \"TOPMOST\", \"NOTOPMOST\", \"TOP\", or a window HWND converted to a string, for example by the Lua function tostring.\n* InsertAfterHWND: For compatibility with older versions, this parameter is still available, and is optional. If ZOrder is \"INSERTAFTER\", insertAfterHWND must be a handle to the window behind which windowHWND will be placed in the Z order, equivalent to setting ZOrder to this HWND; otherwise, insertAfterHWND is ignored and can be left out (or it can simply be set to the same value as windowHWND)."
  },
  {
    "form": "(reaper.JS_Window_Show windowHWND state) :: nil",
    "doc": "(reaper.JS_Window_Show windowHWND state) :: nil\nwindowHWND :: identifier\nstate :: string\nSets the specified window's show state.\nParameters:\n * state: One of the following options: \"SHOW\", \"SHOWNA\" (or \"SHOWNOACTIVATE\"), \"SHOWMINIMIZED\", \"HIDE\", \"NORMAL\", \"SHOWNORMAL\", \"SHOWMAXIMIZED\", \"SHOWDEFAULT\" or \"RESTORE\". On Linux and macOS, only the first four options are fully implemented.",
    "name": "JS_Window_Show",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      },
      {
        "type": "string",
        "name": "state"
      }
    ],
    "namespace": "reaper",
    "description": "Sets the specified window's show state.\nParameters:\n * state: One of the following options: \"SHOW\", \"SHOWNA\" (or \"SHOWNOACTIVATE\"), \"SHOWMINIMIZED\", \"HIDE\", \"NORMAL\", \"SHOWNORMAL\", \"SHOWMAXIMIZED\", \"SHOWDEFAULT\" or \"RESTORE\". On Linux and macOS, only the first four options are fully implemented."
  },
  {
    "form": "(reaper.JS_Window_Update windowHWND) :: nil",
    "doc": "(reaper.JS_Window_Update windowHWND) :: nil\nwindowHWND :: identifier\nSimilar to the Win32 function UpdateWindow.",
    "name": "JS_Window_Update",
    "params": [
      {
        "type": "identifier",
        "name": "windowHWND"
      }
    ],
    "namespace": "reaper",
    "description": "Similar to the Win32 function UpdateWindow."
  },
  {
    "form": "(reaper.JS_Zip_Close zipFile zipHandle) :: (integer)",
    "doc": "(reaper.JS_Zip_Close zipFile zipHandle) :: (integer)\nzipFile :: string\nzipHandle :: identifier\nCloses the zip archive, using either the file name or the zip handle. Finalizes entries and releases resources.",
    "name": "JS_Zip_Close",
    "params": [
      {
        "type": "string",
        "name": "zipFile"
      },
      {
        "type": "identifier",
        "name": "zipHandle"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Closes the zip archive, using either the file name or the zip handle. Finalizes entries and releases resources."
  },
  {
    "form": "(reaper.JS_Zip_CountEntries zipHandle) :: (integer)",
    "doc": "(reaper.JS_Zip_CountEntries zipHandle) :: (integer)\nzipHandle :: identifier\n",
    "name": "JS_Zip_CountEntries",
    "params": [
      {
        "type": "identifier",
        "name": "zipHandle"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.JS_Zip_DeleteEntries zipHandle entryNames entryNamesStrLen) :: (integer)",
    "doc": "(reaper.JS_Zip_DeleteEntries zipHandle entryNames entryNamesStrLen) :: (integer)\nzipHandle :: identifier\nentryNames :: string\nentryNamesStrLen :: integer\nDeletes the specified entries from an existing Zip file.\nentryNames is zero-separated and double-zero-terminated.\nReturns the number of deleted entries on success, negative number (< 0) on error.",
    "name": "JS_Zip_DeleteEntries",
    "params": [
      {
        "type": "identifier",
        "name": "zipHandle"
      },
      {
        "type": "string",
        "name": "entryNames"
      },
      {
        "type": "integer",
        "name": "entryNamesStrLen"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Deletes the specified entries from an existing Zip file.\nentryNames is zero-separated and double-zero-terminated.\nReturns the number of deleted entries on success, negative number (< 0) on error."
  },
  {
    "form": "(reaper.JS_Zip_Entry_Close zipHandle) :: (integer)",
    "doc": "(reaper.JS_Zip_Entry_Close zipHandle) :: (integer)\nzipHandle :: identifier\nCloses a zip entry, flushes buffer and releases resources. In WRITE mode, entries must be closed in order to apply and save changes.\nReturns 0 on success, negative number (< 0) on error.",
    "name": "JS_Zip_Entry_Close",
    "params": [
      {
        "type": "identifier",
        "name": "zipHandle"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Closes a zip entry, flushes buffer and releases resources. In WRITE mode, entries must be closed in order to apply and save changes.\nReturns 0 on success, negative number (< 0) on error."
  },
  {
    "form": "(reaper.JS_Zip_Entry_CompressFile zipHandle inputFile) :: (integer)",
    "doc": "(reaper.JS_Zip_Entry_CompressFile zipHandle inputFile) :: (integer)\nzipHandle :: identifier\ninputFile :: string\nCompresses the specified file into the zip archive's open entry.\nReturns 0 on success, negative number (< 0) on error.",
    "name": "JS_Zip_Entry_CompressFile",
    "params": [
      {
        "type": "identifier",
        "name": "zipHandle"
      },
      {
        "type": "string",
        "name": "inputFile"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Compresses the specified file into the zip archive's open entry.\nReturns 0 on success, negative number (< 0) on error."
  },
  {
    "form": "(reaper.JS_Zip_Entry_CompressMemory zipHandle buf buf_size) :: (integer)",
    "doc": "(reaper.JS_Zip_Entry_CompressMemory zipHandle buf buf_size) :: (integer)\nzipHandle :: identifier\nbuf :: string\nbuf_size :: integer\nCompresses the specified memory buffer into the zip archive's open entry.\nReturns 0 on success, negative number (< 0) on error.",
    "name": "JS_Zip_Entry_CompressMemory",
    "params": [
      {
        "type": "identifier",
        "name": "zipHandle"
      },
      {
        "type": "string",
        "name": "buf"
      },
      {
        "type": "integer",
        "name": "buf_size"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Compresses the specified memory buffer into the zip archive's open entry.\nReturns 0 on success, negative number (< 0) on error."
  },
  {
    "form": "(reaper.JS_Zip_Entry_ExtractToFile zipHandle outputFile) :: (integer)",
    "doc": "(reaper.JS_Zip_Entry_ExtractToFile zipHandle outputFile) :: (integer)\nzipHandle :: identifier\noutputFile :: string\nExtracts the zip archive's open entry.\nReturns 0 on success, negative number (< 0) on error.",
    "name": "JS_Zip_Entry_ExtractToFile",
    "params": [
      {
        "type": "identifier",
        "name": "zipHandle"
      },
      {
        "type": "string",
        "name": "outputFile"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Extracts the zip archive's open entry.\nReturns 0 on success, negative number (< 0) on error."
  },
  {
    "form": "(reaper.JS_Zip_Entry_ExtractToMemory zipHandle) :: (integer string)",
    "doc": "(reaper.JS_Zip_Entry_ExtractToMemory zipHandle) :: (integer string)\nzipHandle :: identifier\nExtracts and returns the zip archive's open entry.\nReturns the number of bytes extracted on success, negative number (< 0) on error.",
    "name": "JS_Zip_Entry_ExtractToMemory",
    "params": [
      {
        "type": "identifier",
        "name": "zipHandle"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "contents"
      }
    ],
    "namespace": "reaper",
    "description": "Extracts and returns the zip archive's open entry.\nReturns the number of bytes extracted on success, negative number (< 0) on error."
  },
  {
    "form": "(reaper.JS_Zip_Entry_Info zipHandle) :: (integer string integer integer number number)",
    "doc": "(reaper.JS_Zip_Entry_Info zipHandle) :: (integer string integer integer number number)\nzipHandle :: identifier\nReturns information about the zip archive's open entry.",
    "name": "JS_Zip_Entry_Info",
    "params": [
      {
        "type": "identifier",
        "name": "zipHandle"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "integer",
        "name": "index"
      },
      {
        "type": "integer",
        "name": "isFolder"
      },
      {
        "type": "number",
        "name": "size"
      },
      {
        "type": "number",
        "name": "crc32"
      }
    ],
    "namespace": "reaper",
    "description": "Returns information about the zip archive's open entry."
  },
  {
    "form": "(reaper.JS_Zip_Entry_OpenByIndex zipHandle index) :: (integer)",
    "doc": "(reaper.JS_Zip_Entry_OpenByIndex zipHandle index) :: (integer)\nzipHandle :: identifier\nindex :: integer\nOpens a new entry by index in the zip archive.\nThis function is only valid if zip archive was opened in 'r' (readonly) mode.\nReturns 0 on success, negative number on error.",
    "name": "JS_Zip_Entry_OpenByIndex",
    "params": [
      {
        "type": "identifier",
        "name": "zipHandle"
      },
      {
        "type": "integer",
        "name": "index"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Opens a new entry by index in the zip archive.\nThis function is only valid if zip archive was opened in 'r' (readonly) mode.\nReturns 0 on success, negative number on error."
  },
  {
    "form": "(reaper.JS_Zip_Entry_OpenByName zipHandle entryName) :: (integer)",
    "doc": "(reaper.JS_Zip_Entry_OpenByName zipHandle entryName) :: (integer)\nzipHandle :: identifier\nentryName :: string\nOpens an entry by name in the zip archive.\nFor zip archive opened in 'w' or 'a' mode the function will append a new entry. In readonly mode the function tries to locate an existing entry.\nReturns 0 on success, negative number (< 0) on error.",
    "name": "JS_Zip_Entry_OpenByName",
    "params": [
      {
        "type": "identifier",
        "name": "zipHandle"
      },
      {
        "type": "string",
        "name": "entryName"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Opens an entry by name in the zip archive.\nFor zip archive opened in 'w' or 'a' mode the function will append a new entry. In readonly mode the function tries to locate an existing entry.\nReturns 0 on success, negative number (< 0) on error."
  },
  {
    "form": "(reaper.JS_Zip_ErrorString errorNum) :: (string)",
    "doc": "(reaper.JS_Zip_ErrorString errorNum) :: (string)\nerrorNum :: integer\nReturns a descriptive string for the given error code.",
    "name": "JS_Zip_ErrorString",
    "params": [
      {
        "type": "integer",
        "name": "errorNum"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "errorStr"
      }
    ],
    "namespace": "reaper",
    "description": "Returns a descriptive string for the given error code."
  },
  {
    "form": "(reaper.JS_Zip_Extract zipFile outputFolder) :: (integer)",
    "doc": "(reaper.JS_Zip_Extract zipFile outputFolder) :: (integer)\nzipFile :: string\noutputFolder :: string\nExtracts an existing Zip file to the specified folder.\nReturns the number of extracted files on success, negative number (< 0) on error.",
    "name": "JS_Zip_Extract",
    "params": [
      {
        "type": "string",
        "name": "zipFile"
      },
      {
        "type": "string",
        "name": "outputFolder"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Extracts an existing Zip file to the specified folder.\nReturns the number of extracted files on success, negative number (< 0) on error."
  },
  {
    "form": "(reaper.JS_Zip_ListAllEntries zipHandle) :: (integer string)",
    "doc": "(reaper.JS_Zip_ListAllEntries zipHandle) :: (integer string)\nzipHandle :: identifier\nReturns the number of entries and a zero-separated and double-zero-terminated string of entry names.\nOn error, returns a negative number (< 0).",
    "name": "JS_Zip_ListAllEntries",
    "params": [
      {
        "type": "identifier",
        "name": "zipHandle"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "list"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the number of entries and a zero-separated and double-zero-terminated string of entry names.\nOn error, returns a negative number (< 0)."
  },
  {
    "form": "(reaper.JS_Zip_Open zipFile mode compressionLevel) :: (identifier integer)",
    "doc": "(reaper.JS_Zip_Open zipFile mode compressionLevel) :: (identifier integer)\nzipFile :: string\nmode :: string\ncompressionLevel :: integer\nOpens a zip archive using the given mode, which can be either \"READ\" or \"WRITE\" (or simply 'r' or 'w').\n * READ: Opens an existing archive for reading/extracting.\n * WRITE: Opens an archive for writing/deleting. If the file doesn't exist, an empty archive will created.\ncompressionLevel is only relevant for WRITE mode, and ranges from 0 (fastest, no compression) to 9 (slowest, best compression), with a default of 6.\nIf successful, returns 0 and a handle to the Zip archive. If failed, returns a negative error code. If the file is already open -- in the given mode -- the existing handle will be returned.\nNOTES:\n * The Zip API functions support Unicode file names and entry names.\n * The original zip specification did not support Unicode. Some applications still use this outdated specification by default, or try to use the local code page. This may lead to incompatibility and incorrect retrieval of file or entry names.",
    "name": "JS_Zip_Open",
    "params": [
      {
        "type": "string",
        "name": "zipFile"
      },
      {
        "type": "string",
        "name": "mode"
      },
      {
        "type": "integer",
        "name": "compressionLevel"
      }
    ],
    "returns": [
      {
        "type": "identifier",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "retval"
      }
    ],
    "namespace": "reaper",
    "description": "Opens a zip archive using the given mode, which can be either \"READ\" or \"WRITE\" (or simply 'r' or 'w').\n * READ: Opens an existing archive for reading/extracting.\n * WRITE: Opens an archive for writing/deleting. If the file doesn't exist, an empty archive will created.\ncompressionLevel is only relevant for WRITE mode, and ranges from 0 (fastest, no compression) to 9 (slowest, best compression), with a default of 6.\nIf successful, returns 0 and a handle to the Zip archive. If failed, returns a negative error code. If the file is already open -- in the given mode -- the existing handle will be returned.\nNOTES:\n * The Zip API functions support Unicode file names and entry names.\n * The original zip specification did not support Unicode. Some applications still use this outdated specification by default, or try to use the local code page. This may lead to incompatibility and incorrect retrieval of file or entry names."
  },
  {
    "form": "(reaper.Llm_Do ?paramIn) :: nil",
    "doc": "(reaper.Llm_Do ?paramIn) :: nil\nparamIn :: integer (optional)\nCalled with parameter value 1 executes one ReaLlm cycle. E.g. for running ReaLlm on custom timer, or deferred. 0 or nothing performs shutdown. Disarming/disabling all monitored inputs and calling with parameter value 1 equals to shutdown.",
    "name": "Llm_Do",
    "params": [
      {
        "type": "integer",
        "name": "paramIn",
        "optional": true
      }
    ],
    "namespace": "reaper",
    "description": "Called with parameter value 1 executes one ReaLlm cycle. E.g. for running ReaLlm on custom timer, or deferred. 0 or nothing performs shutdown. Disarming/disabling all monitored inputs and calling with parameter value 1 equals to shutdown."
  },
  {
    "form": "(reaper.Llm_Get parmname buf trIn) :: (string)",
    "doc": "(reaper.Llm_Get parmname buf trIn) :: (string)\nparmname :: string\nbuf :: string\ntrIn :: MediaTrack\nGet ReaLlm information string. Zero-based indices. Master track index -1. Optional MediaTrack* tr gets results relative to tr. Each line (newline '\\n' separated) represents entry. Tracks are separated with ';'. FX are listed after ':' separated with ','. \nGRAPH : Mixer routings as network graph in format \"node;neighborhood\\n\" where node is track, and neighborhood is group of tracks in format \"track;tr#1;tr#2...\\n\". Or as \"parent;children\\n\" where first field is parent and rest are children. Or as multiply linked list where first field is node and rest are links. E.g. \"7;1;-1;\\n\" would mean \"8th track is connected to 2nd track and Master track.\"\nPDCLATENCY : Latency in samples.\nPDCLIMIT : Limit in samples.\nREALLM or STATE : Current state of ReaLlm as approach vektors with disabled FX in format: \"begin:disabled fx,...;next:fx,...;end:fx,...;\\n.\" E.g. \"3:1,2;0;-1:0\\n\" would be: 4th track, fx#2 and #3 disabled => 1st track, nofx disabled => Master track, fx#1 disabled.\nSAFE : 'Safed' plugins as \"track#:fx#\\n\" pairs.\nVECTOR : Same as REALLM without FX information. Faster.",
    "name": "Llm_Get",
    "params": [
      {
        "type": "string",
        "name": "parmname"
      },
      {
        "type": "string",
        "name": "buf"
      },
      {
        "type": "MediaTrack",
        "name": "trIn"
      }
    ],
    "returns": [
      {
        "type": "string",
        "name": "buf"
      }
    ],
    "namespace": "reaper",
    "description": "Get ReaLlm information string. Zero-based indices. Master track index -1. Optional MediaTrack* tr gets results relative to tr. Each line (newline '\\n' separated) represents entry. Tracks are separated with ';'. FX are listed after ':' separated with ','. \nGRAPH : Mixer routings as network graph in format \"node;neighborhood\\n\" where node is track, and neighborhood is group of tracks in format \"track;tr#1;tr#2...\\n\". Or as \"parent;children\\n\" where first field is parent and rest are children. Or as multiply linked list where first field is node and rest are links. E.g. \"7;1;-1;\\n\" would mean \"8th track is connected to 2nd track and Master track.\"\nPDCLATENCY : Latency in samples.\nPDCLIMIT : Limit in samples.\nREALLM or STATE : Current state of ReaLlm as approach vektors with disabled FX in format: \"begin:disabled fx,...;next:fx,...;end:fx,...;\\n.\" E.g. \"3:1,2;0;-1:0\\n\" would be: 4th track, fx#2 and #3 disabled => 1st track, nofx disabled => Master track, fx#1 disabled.\nSAFE : 'Safed' plugins as \"track#:fx#\\n\" pairs.\nVECTOR : Same as REALLM without FX information. Faster."
  },
  {
    "form": "(reaper.Llm_Set parmname bufIn) :: nil",
    "doc": "(reaper.Llm_Set parmname bufIn) :: nil\nparmname :: string\nbufIn :: string\nSet ReaLlm parameters.\nPDCLIMIT : PDC latency limit in audio blocks/buffers, e.g. \"1.5\".\nMONITORINGFX : Use any non-empty string to include Monitoring FX. E.g. \"true\".\nPARAMCHANGE : Instead of bypassing, changes FX parameter between val1 (low latency) and val2 (original). Use bufIn string format 'fx_name,param_index,val1,val2'.",
    "name": "Llm_Set",
    "params": [
      {
        "type": "string",
        "name": "parmname"
      },
      {
        "type": "string",
        "name": "bufIn"
      }
    ],
    "namespace": "reaper",
    "description": "Set ReaLlm parameters.\nPDCLIMIT : PDC latency limit in audio blocks/buffers, e.g. \"1.5\".\nMONITORINGFX : Use any non-empty string to include Monitoring FX. E.g. \"true\".\nPARAMCHANGE : Instead of bypassing, changes FX parameter between val1 (low latency) and val2 (original). Use bufIn string format 'fx_name,param_index,val1,val2'."
  },
  {
    "form": "(reaper.NF_AnalyzeMediaItemPeakAndRMS item windowSize reaper.array_peaks reaper.array_peakpositions reaper.array_RMSs reaper.array_RMSpositions) :: (boolean)",
    "doc": "(reaper.NF_AnalyzeMediaItemPeakAndRMS item windowSize reaper.array_peaks reaper.array_peakpositions reaper.array_RMSs reaper.array_RMSpositions) :: (boolean)\nitem :: MediaItem\nwindowSize :: number\nreaper.array_peaks :: identifier\nreaper.array_peakpositions :: identifier\nreaper.array_RMSs :: identifier\nreaper.array_RMSpositions :: identifier\nThis function combines all other NF_Peak/RMS functions in a single one and additionally returns peak RMS positions. Lua example code here. Note: It's recommended to use this function with ReaScript/Lua as it provides reaper.array objects. If using this function with other scripting languages, you must provide arrays in the reaper.array format.",
    "name": "NF_AnalyzeMediaItemPeakAndRMS",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      },
      {
        "type": "number",
        "name": "windowSize"
      },
      {
        "type": "identifier",
        "name": "reaper.array_peaks"
      },
      {
        "type": "identifier",
        "name": "reaper.array_peakpositions"
      },
      {
        "type": "identifier",
        "name": "reaper.array_RMSs"
      },
      {
        "type": "identifier",
        "name": "reaper.array_RMSpositions"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "This function combines all other NF_Peak/RMS functions in a single one and additionally returns peak RMS positions. Lua example code here. Note: It's recommended to use this function with ReaScript/Lua as it provides reaper.array objects. If using this function with other scripting languages, you must provide arrays in the reaper.array format."
  },
  {
    "form": "(reaper.NF_AnalyzeTakeLoudness take analyzeTruePeak) :: (boolean number number number number number number)",
    "doc": "(reaper.NF_AnalyzeTakeLoudness take analyzeTruePeak) :: (boolean number number number number number number)\ntake :: MediaItem_Take\nanalyzeTruePeak :: boolean\nFull loudness analysis. retval: returns true on successful analysis, false on MIDI take or when analysis failed for some reason. analyzeTruePeak=true: Also do true peak analysis. Returns true peak value and true peak position (relative to item position). Considerably slower than without true peak analysis (since it uses oversampling). Note: Short term uses a time window of 3 sec. for calculation. So for items shorter than this shortTermMaxOut can't be calculated correctly. Momentary uses a time window of 0.4 sec.",
    "name": "NF_AnalyzeTakeLoudness",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "boolean",
        "name": "analyzeTruePeak"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "lufsIntegrated"
      },
      {
        "type": "number",
        "name": "range"
      },
      {
        "type": "number",
        "name": "truePeak"
      },
      {
        "type": "number",
        "name": "truePeakPos"
      },
      {
        "type": "number",
        "name": "shortTermMax"
      },
      {
        "type": "number",
        "name": "momentaryMax"
      }
    ],
    "namespace": "reaper",
    "description": "Full loudness analysis. retval: returns true on successful analysis, false on MIDI take or when analysis failed for some reason. analyzeTruePeak=true: Also do true peak analysis. Returns true peak value and true peak position (relative to item position). Considerably slower than without true peak analysis (since it uses oversampling). Note: Short term uses a time window of 3 sec. for calculation. So for items shorter than this shortTermMaxOut can't be calculated correctly. Momentary uses a time window of 0.4 sec."
  },
  {
    "form": "(reaper.NF_AnalyzeTakeLoudness2 take analyzeTruePeak) :: (boolean number number number number number number number number)",
    "doc": "(reaper.NF_AnalyzeTakeLoudness2 take analyzeTruePeak) :: (boolean number number number number number number number number)\ntake :: MediaItem_Take\nanalyzeTruePeak :: boolean\nSame as NF_AnalyzeTakeLoudness but additionally returns shortTermMaxPos and momentaryMaxPos (in absolute project time). Note: shortTermMaxPos and momentaryMaxPos actaully indicate the beginning of time , (3 sec. and 0.4 sec. resp.).",
    "name": "NF_AnalyzeTakeLoudness2",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "boolean",
        "name": "analyzeTruePeak"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "lufsIntegrated"
      },
      {
        "type": "number",
        "name": "range"
      },
      {
        "type": "number",
        "name": "truePeak"
      },
      {
        "type": "number",
        "name": "truePeakPos"
      },
      {
        "type": "number",
        "name": "shortTermMax"
      },
      {
        "type": "number",
        "name": "momentaryMax"
      },
      {
        "type": "number",
        "name": "shortTermMaxPos"
      },
      {
        "type": "number",
        "name": "momentaryMaxPos"
      }
    ],
    "namespace": "reaper",
    "description": "Same as NF_AnalyzeTakeLoudness but additionally returns shortTermMaxPos and momentaryMaxPos (in absolute project time). Note: shortTermMaxPos and momentaryMaxPos actaully indicate the beginning of time , (3 sec. and 0.4 sec. resp.)."
  },
  {
    "form": "(reaper.NF_AnalyzeTakeLoudness_IntegratedOnly take) :: (boolean number)",
    "doc": "(reaper.NF_AnalyzeTakeLoudness_IntegratedOnly take) :: (boolean number)\ntake :: MediaItem_Take\nDoes LUFS integrated analysis only. Faster than full loudness analysis (NF_AnalyzeTakeLoudness) . Use this if only LUFS integrated is required. Take vol. env. is taken into account. See: Signal flow",
    "name": "NF_AnalyzeTakeLoudness_IntegratedOnly",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "lufsIntegrated"
      }
    ],
    "namespace": "reaper",
    "description": "Does LUFS integrated analysis only. Faster than full loudness analysis (NF_AnalyzeTakeLoudness) . Use this if only LUFS integrated is required. Take vol. env. is taken into account. See: Signal flow"
  },
  {
    "form": "(reaper.NF_GetMediaItemAverageRMS item) :: (number)",
    "doc": "(reaper.NF_GetMediaItemAverageRMS item) :: (number)\nitem :: MediaItem\nReturns the average overall (non-windowed) RMS level of active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \n Returns -150.0 if MIDI take or empty item.",
    "name": "NF_GetMediaItemAverageRMS",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the average overall (non-windowed) RMS level of active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \n Returns -150.0 if MIDI take or empty item."
  },
  {
    "form": "(reaper.NF_GetMediaItemMaxPeak item) :: (number)",
    "doc": "(reaper.NF_GetMediaItemMaxPeak item) :: (number)\nitem :: MediaItem\nReturns the greatest max. peak value of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \n Returns -150.0 if MIDI take or empty item.",
    "name": "NF_GetMediaItemMaxPeak",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the greatest max. peak value of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \n Returns -150.0 if MIDI take or empty item."
  },
  {
    "form": "(reaper.NF_GetMediaItemMaxPeakAndMaxPeakPos item) :: (number number)",
    "doc": "(reaper.NF_GetMediaItemMaxPeakAndMaxPeakPos item) :: (number number)\nitem :: MediaItem\nSee NF_GetMediaItemMaxPeak, additionally returns maxPeakPos (relative to item position).",
    "name": "NF_GetMediaItemMaxPeakAndMaxPeakPos",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      }
    ],
    "returns": [
      {
        "type": "number",
        "name": "retval"
      },
      {
        "type": "number",
        "name": "maxPeakPos"
      }
    ],
    "namespace": "reaper",
    "description": "See NF_GetMediaItemMaxPeak, additionally returns maxPeakPos (relative to item position)."
  },
  {
    "form": "(reaper.NF_GetMediaItemPeakRMS_NonWindowed item) :: (number)",
    "doc": "(reaper.NF_GetMediaItemPeakRMS_NonWindowed item) :: (number)\nitem :: MediaItem\nReturns the greatest overall (non-windowed) RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \n Returns -150.0 if MIDI take or empty item.",
    "name": "NF_GetMediaItemPeakRMS_NonWindowed",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the greatest overall (non-windowed) RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \n Returns -150.0 if MIDI take or empty item."
  },
  {
    "form": "(reaper.NF_GetMediaItemPeakRMS_Windowed item) :: (number)",
    "doc": "(reaper.NF_GetMediaItemPeakRMS_Windowed item) :: (number)\nitem :: MediaItem\nReturns the average RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \n Obeys 'Window size for peak RMS' setting in 'SWS: Set RMS analysis/normalize options' for calculation. Returns -150.0 if MIDI take or empty item.",
    "name": "NF_GetMediaItemPeakRMS_Windowed",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the average RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \n Obeys 'Window size for peak RMS' setting in 'SWS: Set RMS analysis/normalize options' for calculation. Returns -150.0 if MIDI take or empty item."
  },
  {
    "form": "(reaper.NF_GetSWSMarkerRegionSub markerRegionIdx) :: (string)",
    "doc": "(reaper.NF_GetSWSMarkerRegionSub markerRegionIdx) :: (string)\nmarkerRegionIdx :: integer\nReturns SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to EnumProjectMarkers (not displayed marker/region index). Returns empty string if marker/region with specified index not found or marker/region subtitle not set. Lua code example here.",
    "name": "NF_GetSWSMarkerRegionSub",
    "params": [
      {
        "type": "integer",
        "name": "markerRegionIdx"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "Returns SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to EnumProjectMarkers (not displayed marker/region index). Returns empty string if marker/region with specified index not found or marker/region subtitle not set. Lua code example here."
  },
  {
    "form": "(reaper.NF_GetSWSTrackNotes track) :: (string)",
    "doc": "(reaper.NF_GetSWSTrackNotes track) :: (string)\ntrack :: MediaTrack\n",
    "name": "NF_GetSWSTrackNotes",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.NF_GetSWS_RMSoptions ) :: (number number)",
    "doc": "(reaper.NF_GetSWS_RMSoptions ) :: (number number)\nGet SWS analysis/normalize options. See NF_SetSWS_RMSoptions.",
    "name": "NF_GetSWS_RMSoptions",
    "returns": [
      {
        "type": "number",
        "name": "target"
      },
      {
        "type": "number",
        "name": "windowSize"
      }
    ],
    "namespace": "reaper",
    "description": "Get SWS analysis/normalize options. See NF_SetSWS_RMSoptions."
  },
  {
    "form": "(reaper.NF_SetSWSMarkerRegionSub markerRegionSub markerRegionIdx) :: (boolean)",
    "doc": "(reaper.NF_SetSWSMarkerRegionSub markerRegionSub markerRegionIdx) :: (boolean)\nmarkerRegionSub :: string\nmarkerRegionIdx :: integer\nSet SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to EnumProjectMarkers (not displayed marker/region index). Returns true if subtitle is set successfully (i.e. marker/region with specified index is present in project). Lua code example here.",
    "name": "NF_SetSWSMarkerRegionSub",
    "params": [
      {
        "type": "string",
        "name": "markerRegionSub"
      },
      {
        "type": "integer",
        "name": "markerRegionIdx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Set SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to EnumProjectMarkers (not displayed marker/region index). Returns true if subtitle is set successfully (i.e. marker/region with specified index is present in project). Lua code example here."
  },
  {
    "form": "(reaper.NF_SetSWSTrackNotes track str) :: nil",
    "doc": "(reaper.NF_SetSWSTrackNotes track str) :: nil\ntrack :: MediaTrack\nstr :: string\n",
    "name": "NF_SetSWSTrackNotes",
    "params": [
      {
        "type": "MediaTrack",
        "name": "track"
      },
      {
        "type": "string",
        "name": "str"
      }
    ],
    "namespace": "reaper"
  },
  {
    "form": "(reaper.NF_SetSWS_RMSoptions targetLevel windowSize) :: (boolean)",
    "doc": "(reaper.NF_SetSWS_RMSoptions targetLevel windowSize) :: (boolean)\ntargetLevel :: number\nwindowSize :: number\nSet SWS analysis/normalize options (same as running action 'SWS: Set RMS analysis/normalize options'). targetLevel: target RMS normalize level (dB), windowSize: window size for peak RMS (sec.)",
    "name": "NF_SetSWS_RMSoptions",
    "params": [
      {
        "type": "number",
        "name": "targetLevel"
      },
      {
        "type": "number",
        "name": "windowSize"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Set SWS analysis/normalize options (same as running action 'SWS: Set RMS analysis/normalize options'). targetLevel: target RMS normalize level (dB), windowSize: window size for peak RMS (sec.)"
  },
  {
    "form": "(reaper.NF_TakeFX_GetFXModuleName item fx) :: (boolean string)",
    "doc": "(reaper.NF_TakeFX_GetFXModuleName item fx) :: (boolean string)\nitem :: MediaItem\nfx :: integer\nSee BR_TrackFX_GetFXModuleName. fx: counted consecutively across all takes (zero-based).",
    "name": "NF_TakeFX_GetFXModuleName",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      },
      {
        "type": "integer",
        "name": "fx"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "name"
      }
    ],
    "namespace": "reaper",
    "description": "See BR_TrackFX_GetFXModuleName. fx: counted consecutively across all takes (zero-based)."
  },
  {
    "form": "(reaper.NF_UpdateSWSMarkerRegionSubWindow ) :: nil",
    "doc": "(reaper.NF_UpdateSWSMarkerRegionSubWindow ) :: nil\nRedraw the Notes window (call if you've changed a subtitle via NF_SetSWSMarkerRegionSub which is currently displayed in the Notes window and you want to appear the new subtitle immediately.)",
    "name": "NF_UpdateSWSMarkerRegionSubWindow",
    "namespace": "reaper",
    "description": "Redraw the Notes window (call if you've changed a subtitle via NF_SetSWSMarkerRegionSub which is currently displayed in the Notes window and you want to appear the new subtitle immediately.)"
  },
  {
    "form": "(reaper.NF_Win32_GetSystemMetrics nIndex) :: (integer)",
    "doc": "(reaper.NF_Win32_GetSystemMetrics nIndex) :: (integer)\nnIndex :: integer\nEquivalent to win32 API GetSystemMetrics().",
    "name": "NF_Win32_GetSystemMetrics",
    "params": [
      {
        "type": "integer",
        "name": "nIndex"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Equivalent to win32 API GetSystemMetrics()."
  },
  {
    "form": "(reaper.ReaPack_AboutInstalledPackage entry) :: (boolean)",
    "doc": "(reaper.ReaPack_AboutInstalledPackage entry) :: (boolean)\nentry :: PackageEntry\nShow the about dialog of the given package entry.\nThe repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.",
    "name": "ReaPack_AboutInstalledPackage",
    "params": [
      {
        "type": "PackageEntry",
        "name": "entry"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Show the about dialog of the given package entry.\nThe repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week."
  },
  {
    "form": "(reaper.ReaPack_AboutRepository repoName) :: (boolean)",
    "doc": "(reaper.ReaPack_AboutRepository repoName) :: (boolean)\nrepoName :: string\nShow the about dialog of the given repository. Returns true if the repository exists in the user configuration.\nThe repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.",
    "name": "ReaPack_AboutRepository",
    "params": [
      {
        "type": "string",
        "name": "repoName"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Show the about dialog of the given repository. Returns true if the repository exists in the user configuration.\nThe repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week."
  },
  {
    "form": "(reaper.ReaPack_AddSetRepository name url enable autoInstall) :: (boolean string)",
    "doc": "(reaper.ReaPack_AddSetRepository name url enable autoInstall) :: (boolean string)\nname :: string\nurl :: string\nenable :: boolean\nautoInstall :: integer\nAdd or modify a repository. Set url to nullptr (or empty string in Lua) to keep the existing URL. Call ReaPack_ProcessQueue(true) when done to process the new list and update the GUI.\nautoInstall: usually set to 2 (obey user setting).",
    "name": "ReaPack_AddSetRepository",
    "params": [
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "string",
        "name": "url"
      },
      {
        "type": "boolean",
        "name": "enable"
      },
      {
        "type": "integer",
        "name": "autoInstall"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "error"
      }
    ],
    "namespace": "reaper",
    "description": "Add or modify a repository. Set url to nullptr (or empty string in Lua) to keep the existing URL. Call ReaPack_ProcessQueue(true) when done to process the new list and update the GUI.\nautoInstall: usually set to 2 (obey user setting)."
  },
  {
    "form": "(reaper.ReaPack_BrowsePackages filter) :: nil",
    "doc": "(reaper.ReaPack_BrowsePackages filter) :: nil\nfilter :: string\nOpens the package browser with the given filter string.",
    "name": "ReaPack_BrowsePackages",
    "params": [
      {
        "type": "string",
        "name": "filter"
      }
    ],
    "namespace": "reaper",
    "description": "Opens the package browser with the given filter string."
  },
  {
    "form": "(reaper.ReaPack_CompareVersions ver1 ver2) :: (integer string)",
    "doc": "(reaper.ReaPack_CompareVersions ver1 ver2) :: (integer string)\nver1 :: string\nver2 :: string\nReturns 0 if both versions are equal, a positive value if ver1 is higher than ver2 and a negative value otherwise.",
    "name": "ReaPack_CompareVersions",
    "params": [
      {
        "type": "string",
        "name": "ver1"
      },
      {
        "type": "string",
        "name": "ver2"
      }
    ],
    "returns": [
      {
        "type": "integer",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "error"
      }
    ],
    "namespace": "reaper",
    "description": "Returns 0 if both versions are equal, a positive value if ver1 is higher than ver2 and a negative value otherwise."
  },
  {
    "form": "(reaper.ReaPack_EnumOwnedFiles entry index) :: (boolean string integer integer)",
    "doc": "(reaper.ReaPack_EnumOwnedFiles entry index) :: (boolean string integer integer)\nentry :: PackageEntry\nindex :: integer\nEnumerate the files owned by the given package. Returns false when there is no more data.\nsections: 0=not in action list, &1=main, &2=midi editor, &4=midi inline editor\ntype: see ReaPack_GetEntryInfo.",
    "name": "ReaPack_EnumOwnedFiles",
    "params": [
      {
        "type": "PackageEntry",
        "name": "entry"
      },
      {
        "type": "integer",
        "name": "index"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "path"
      },
      {
        "type": "integer",
        "name": "sections"
      },
      {
        "type": "integer",
        "name": "type"
      }
    ],
    "namespace": "reaper",
    "description": "Enumerate the files owned by the given package. Returns false when there is no more data.\nsections: 0=not in action list, &1=main, &2=midi editor, &4=midi inline editor\ntype: see ReaPack_GetEntryInfo."
  },
  {
    "form": "(reaper.ReaPack_FreeEntry entry) :: (boolean)",
    "doc": "(reaper.ReaPack_FreeEntry entry) :: (boolean)\nentry :: PackageEntry\nFree resources allocated for the given package entry.",
    "name": "ReaPack_FreeEntry",
    "params": [
      {
        "type": "PackageEntry",
        "name": "entry"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "Free resources allocated for the given package entry."
  },
  {
    "form": "(reaper.ReaPack_GetEntryInfo entry) :: (boolean string string string string integer string string integer integer)",
    "doc": "(reaper.ReaPack_GetEntryInfo entry) :: (boolean string string string string integer string string integer integer)\nentry :: PackageEntry\nGet the repository name, category, package name, package description, package type, the currently installed version, author name, flags (&1=Pinned, &2=BleedingEdge) and how many files are owned by the given package entry.\ntype: 1=script, 2=extension, 3=effect, 4=data, 5=theme, 6=langpack, 7=webinterface",
    "name": "ReaPack_GetEntryInfo",
    "params": [
      {
        "type": "PackageEntry",
        "name": "entry"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "repo"
      },
      {
        "type": "string",
        "name": "cat"
      },
      {
        "type": "string",
        "name": "pkg"
      },
      {
        "type": "string",
        "name": "desc"
      },
      {
        "type": "integer",
        "name": "type"
      },
      {
        "type": "string",
        "name": "ver"
      },
      {
        "type": "string",
        "name": "author"
      },
      {
        "type": "integer",
        "name": "flags"
      },
      {
        "type": "integer",
        "name": "fileCount"
      }
    ],
    "namespace": "reaper",
    "description": "Get the repository name, category, package name, package description, package type, the currently installed version, author name, flags (&1=Pinned, &2=BleedingEdge) and how many files are owned by the given package entry.\ntype: 1=script, 2=extension, 3=effect, 4=data, 5=theme, 6=langpack, 7=webinterface"
  },
  {
    "form": "(reaper.ReaPack_GetOwner fn) :: (PackageEntry string)",
    "doc": "(reaper.ReaPack_GetOwner fn) :: (PackageEntry string)\nfn :: string\nReturns the package entry owning the given file.\nDelete the returned object from memory after use with ReaPack_FreeEntry.",
    "name": "ReaPack_GetOwner",
    "params": [
      {
        "type": "string",
        "name": "fn"
      }
    ],
    "returns": [
      {
        "type": "PackageEntry",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "error"
      }
    ],
    "namespace": "reaper",
    "description": "Returns the package entry owning the given file.\nDelete the returned object from memory after use with ReaPack_FreeEntry."
  },
  {
    "form": "(reaper.ReaPack_GetRepositoryInfo name) :: (boolean string boolean integer)",
    "doc": "(reaper.ReaPack_GetRepositoryInfo name) :: (boolean string boolean integer)\nname :: string\nGet the infos of the given repository.\nautoInstall: 0=manual, 1=when sychronizing, 2=obey user setting",
    "name": "ReaPack_GetRepositoryInfo",
    "params": [
      {
        "type": "string",
        "name": "name"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "url"
      },
      {
        "type": "boolean",
        "name": "enabled"
      },
      {
        "type": "integer",
        "name": "autoInstall"
      }
    ],
    "namespace": "reaper",
    "description": "Get the infos of the given repository.\nautoInstall: 0=manual, 1=when sychronizing, 2=obey user setting"
  },
  {
    "form": "(reaper.ReaPack_ProcessQueue refreshUI) :: nil",
    "doc": "(reaper.ReaPack_ProcessQueue refreshUI) :: nil\nrefreshUI :: boolean\nRun pending operations and save the configuration file. If refreshUI is true the browser and manager windows are guaranteed to be refreshed (otherwise it depends on which operations are in the queue).",
    "name": "ReaPack_ProcessQueue",
    "params": [
      {
        "type": "boolean",
        "name": "refreshUI"
      }
    ],
    "namespace": "reaper",
    "description": "Run pending operations and save the configuration file. If refreshUI is true the browser and manager windows are guaranteed to be refreshed (otherwise it depends on which operations are in the queue)."
  },
  {
    "form": "(reaper.SNM_AddReceive src dest type) :: (boolean)",
    "doc": "(reaper.SNM_AddReceive src dest type) :: (boolean)\nsrc :: MediaTrack\ndest :: MediaTrack\ntype :: integer\n[S&M] Deprecated, see CreateTrackSend (v5.15pre1+). Adds a receive. Returns false if nothing updated.\ntype -1=Default type (user preferences), 0=Post-Fader (Post-Pan), 1=Pre-FX, 2=deprecated, 3=Pre-Fader (Post-FX).\nNote: obeys default sends preferences, supports frozen tracks, etc..",
    "name": "SNM_AddReceive",
    "params": [
      {
        "type": "MediaTrack",
        "name": "src"
      },
      {
        "type": "MediaTrack",
        "name": "dest"
      },
      {
        "type": "integer",
        "name": "type"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Deprecated, see CreateTrackSend (v5.15pre1+). Adds a receive. Returns false if nothing updated.\ntype -1=Default type (user preferences), 0=Post-Fader (Post-Pan), 1=Pre-FX, 2=deprecated, 3=Pre-Fader (Post-FX).\nNote: obeys default sends preferences, supports frozen tracks, etc.."
  },
  {
    "form": "(reaper.SNM_AddTCPFXParm tr fxId prmId) :: (boolean)",
    "doc": "(reaper.SNM_AddTCPFXParm tr fxId prmId) :: (boolean)\ntr :: MediaTrack\nfxId :: integer\nprmId :: integer\n[S&M] Add an FX parameter knob in the TCP. Returns false if nothing updated (invalid parameters, knob already present, etc..)",
    "name": "SNM_AddTCPFXParm",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      },
      {
        "type": "integer",
        "name": "fxId"
      },
      {
        "type": "integer",
        "name": "prmId"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Add an FX parameter knob in the TCP. Returns false if nothing updated (invalid parameters, knob already present, etc..)"
  },
  {
    "form": "(reaper.SNM_CreateFastString str) :: (WDL_FastString)",
    "doc": "(reaper.SNM_CreateFastString str) :: (WDL_FastString)\nstr :: string\n[S&M] Instantiates a new \"fast string\". You must delete this string, see SNM_DeleteFastString.",
    "name": "SNM_CreateFastString",
    "params": [
      {
        "type": "string",
        "name": "str"
      }
    ],
    "returns": [
      {
        "type": "WDL_FastString"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Instantiates a new \"fast string\". You must delete this string, see SNM_DeleteFastString."
  },
  {
    "form": "(reaper.SNM_DeleteFastString str) :: nil",
    "doc": "(reaper.SNM_DeleteFastString str) :: nil\nstr :: WDL_FastString\n[S&M] Deletes a \"fast string\" instance.",
    "name": "SNM_DeleteFastString",
    "params": [
      {
        "type": "WDL_FastString",
        "name": "str"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Deletes a \"fast string\" instance."
  },
  {
    "form": "(reaper.SNM_GetDoubleConfigVar varname errvalue) :: (number)",
    "doc": "(reaper.SNM_GetDoubleConfigVar varname errvalue) :: (number)\nvarname :: string\nerrvalue :: number\n[S&M] Returns a floating-point preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found).",
    "name": "SNM_GetDoubleConfigVar",
    "params": [
      {
        "type": "string",
        "name": "varname"
      },
      {
        "type": "number",
        "name": "errvalue"
      }
    ],
    "returns": [
      {
        "type": "number"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Returns a floating-point preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found)."
  },
  {
    "form": "(reaper.SNM_GetFastString str) :: (string)",
    "doc": "(reaper.SNM_GetFastString str) :: (string)\nstr :: WDL_FastString\n[S&M] Gets the \"fast string\" content.",
    "name": "SNM_GetFastString",
    "params": [
      {
        "type": "WDL_FastString",
        "name": "str"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Gets the \"fast string\" content."
  },
  {
    "form": "(reaper.SNM_GetFastStringLength str) :: (integer)",
    "doc": "(reaper.SNM_GetFastStringLength str) :: (integer)\nstr :: WDL_FastString\n[S&M] Gets the \"fast string\" length.",
    "name": "SNM_GetFastStringLength",
    "params": [
      {
        "type": "WDL_FastString",
        "name": "str"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Gets the \"fast string\" length."
  },
  {
    "form": "(reaper.SNM_GetIntConfigVar varname errvalue) :: (integer)",
    "doc": "(reaper.SNM_GetIntConfigVar varname errvalue) :: (integer)\nvarname :: string\nerrvalue :: integer\n[S&M] Returns an integer preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found).",
    "name": "SNM_GetIntConfigVar",
    "params": [
      {
        "type": "string",
        "name": "varname"
      },
      {
        "type": "integer",
        "name": "errvalue"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Returns an integer preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found)."
  },
  {
    "form": "(reaper.SNM_GetLongConfigVar varname) :: (boolean integer integer)",
    "doc": "(reaper.SNM_GetLongConfigVar varname) :: (boolean integer integer)\nvarname :: string\n[S&M] Reads a 64-bit integer preference split in two 32-bit integers (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).",
    "name": "SNM_GetLongConfigVar",
    "params": [
      {
        "type": "string",
        "name": "varname"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "integer",
        "name": "high"
      },
      {
        "type": "integer",
        "name": "low"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Reads a 64-bit integer preference split in two 32-bit integers (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found)."
  },
  {
    "form": "(reaper.SNM_GetMediaItemTakeByGUID project guid) :: (MediaItem_Take)",
    "doc": "(reaper.SNM_GetMediaItemTakeByGUID project guid) :: (MediaItem_Take)\nproject :: ReaProject\nguid :: string\n[S&M] Gets a take by GUID as string. The GUID must be enclosed in braces {}. To get take GUID as string, see BR_GetMediaItemTakeGUID",
    "name": "SNM_GetMediaItemTakeByGUID",
    "params": [
      {
        "type": "ReaProject",
        "name": "project"
      },
      {
        "type": "string",
        "name": "guid"
      }
    ],
    "returns": [
      {
        "type": "MediaItem_Take"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Gets a take by GUID as string. The GUID must be enclosed in braces {}. To get take GUID as string, see BR_GetMediaItemTakeGUID"
  },
  {
    "form": "(reaper.SNM_GetProjectMarkerName proj num isrgn name) :: (boolean)",
    "doc": "(reaper.SNM_GetProjectMarkerName proj num isrgn name) :: (boolean)\nproj :: ReaProject\nnum :: integer\nisrgn :: boolean\nname :: WDL_FastString\n[S&M] Gets a marker/region name. Returns true if marker/region found.",
    "name": "SNM_GetProjectMarkerName",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "num"
      },
      {
        "type": "boolean",
        "name": "isrgn"
      },
      {
        "type": "WDL_FastString",
        "name": "name"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Gets a marker/region name. Returns true if marker/region found."
  },
  {
    "form": "(reaper.SNM_GetSetObjectState obj state setnewvalue wantminimalstate) :: (boolean)",
    "doc": "(reaper.SNM_GetSetObjectState obj state setnewvalue wantminimalstate) :: (boolean)\nobj :: identifier\nstate :: WDL_FastString\nsetnewvalue :: boolean\nwantminimalstate :: boolean\n[S&M] Gets or sets the state of a track, an item or an envelope. The state chunk size is unlimited. Returns false if failed.\nWhen getting a track state (and when you are not interested in FX data), you can use wantminimalstate=true to radically reduce the length of the state. Do not set such minimal states back though, this is for read-only applications!\nNote: unlike the native GetSetObjectState, calling to FreeHeapPtr() is not required.",
    "name": "SNM_GetSetObjectState",
    "params": [
      {
        "type": "identifier",
        "name": "obj"
      },
      {
        "type": "WDL_FastString",
        "name": "state"
      },
      {
        "type": "boolean",
        "name": "setnewvalue"
      },
      {
        "type": "boolean",
        "name": "wantminimalstate"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Gets or sets the state of a track, an item or an envelope. The state chunk size is unlimited. Returns false if failed.\nWhen getting a track state (and when you are not interested in FX data), you can use wantminimalstate=true to radically reduce the length of the state. Do not set such minimal states back though, this is for read-only applications!\nNote: unlike the native GetSetObjectState, calling to FreeHeapPtr() is not required."
  },
  {
    "form": "(reaper.SNM_GetSetSourceState item takeidx state setnewvalue) :: (boolean)",
    "doc": "(reaper.SNM_GetSetSourceState item takeidx state setnewvalue) :: (boolean)\nitem :: MediaItem\ntakeidx :: integer\nstate :: WDL_FastString\nsetnewvalue :: boolean\n[S&M] Gets or sets a take source state. Returns false if failed. Use takeidx=-1 to get/alter the active take.\nNote: this function does not use a MediaItem_Take* param in order to manage empty takes (i.e. takes with MediaItem_Take*==NULL), see SNM_GetSetSourceState2.",
    "name": "SNM_GetSetSourceState",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      },
      {
        "type": "integer",
        "name": "takeidx"
      },
      {
        "type": "WDL_FastString",
        "name": "state"
      },
      {
        "type": "boolean",
        "name": "setnewvalue"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Gets or sets a take source state. Returns false if failed. Use takeidx=-1 to get/alter the active take.\nNote: this function does not use a MediaItem_Take* param in order to manage empty takes (i.e. takes with MediaItem_Take*==NULL), see SNM_GetSetSourceState2."
  },
  {
    "form": "(reaper.SNM_GetSetSourceState2 take state setnewvalue) :: (boolean)",
    "doc": "(reaper.SNM_GetSetSourceState2 take state setnewvalue) :: (boolean)\ntake :: MediaItem_Take\nstate :: WDL_FastString\nsetnewvalue :: boolean\n[S&M] Gets or sets a take source state. Returns false if failed.\nNote: this function cannot deal with empty takes, see SNM_GetSetSourceState.",
    "name": "SNM_GetSetSourceState2",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "WDL_FastString",
        "name": "state"
      },
      {
        "type": "boolean",
        "name": "setnewvalue"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Gets or sets a take source state. Returns false if failed.\nNote: this function cannot deal with empty takes, see SNM_GetSetSourceState."
  },
  {
    "form": "(reaper.SNM_GetSourceType take type) :: (boolean)",
    "doc": "(reaper.SNM_GetSourceType take type) :: (boolean)\ntake :: MediaItem_Take\ntype :: WDL_FastString\n[S&M] Deprecated, see GetMediaSourceType. Gets the source type of a take. Returns false if failed (e.g. take with empty source, etc..)",
    "name": "SNM_GetSourceType",
    "params": [
      {
        "type": "MediaItem_Take",
        "name": "take"
      },
      {
        "type": "WDL_FastString",
        "name": "type"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Deprecated, see GetMediaSourceType. Gets the source type of a take. Returns false if failed (e.g. take with empty source, etc..)"
  },
  {
    "form": "(reaper.SNM_MoveOrRemoveTrackFX tr fxId what) :: (boolean)",
    "doc": "(reaper.SNM_MoveOrRemoveTrackFX tr fxId what) :: (boolean)\ntr :: MediaTrack\nfxId :: integer\nwhat :: integer\n[S&M] Deprecated, see TakeFX_/TrackFX_ CopyToTrack/Take, TrackFX/TakeFX _Delete (v5.95pre2+). Move or removes a track FX. Returns true if tr has been updated.\nfxId: fx index in chain or -1 for the selected fx. what: 0 to remove, -1 to move fx up in chain, 1 to move fx down in chain.",
    "name": "SNM_MoveOrRemoveTrackFX",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      },
      {
        "type": "integer",
        "name": "fxId"
      },
      {
        "type": "integer",
        "name": "what"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Deprecated, see TakeFX_/TrackFX_ CopyToTrack/Take, TrackFX/TakeFX _Delete (v5.95pre2+). Move or removes a track FX. Returns true if tr has been updated.\nfxId: fx index in chain or -1 for the selected fx. what: 0 to remove, -1 to move fx up in chain, 1 to move fx down in chain."
  },
  {
    "form": "(reaper.SNM_ReadMediaFileTag fn tag) :: (boolean string)",
    "doc": "(reaper.SNM_ReadMediaFileTag fn tag) :: (boolean string)\nfn :: string\ntag :: string\n[S&M] Reads a media file tag. Supported tags: \"artist\", \"album\", \"genre\", \"comment\", \"title\", \"track\" (track number) or \"year\". Returns false if tag was not found. See SNM_TagMediaFile.",
    "name": "SNM_ReadMediaFileTag",
    "params": [
      {
        "type": "string",
        "name": "fn"
      },
      {
        "type": "string",
        "name": "tag"
      }
    ],
    "returns": [
      {
        "type": "boolean",
        "name": "retval"
      },
      {
        "type": "string",
        "name": "tagval"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Reads a media file tag. Supported tags: \"artist\", \"album\", \"genre\", \"comment\", \"title\", \"track\" (track number) or \"year\". Returns false if tag was not found. See SNM_TagMediaFile."
  },
  {
    "form": "(reaper.SNM_RemoveReceive tr rcvidx) :: (boolean)",
    "doc": "(reaper.SNM_RemoveReceive tr rcvidx) :: (boolean)\ntr :: MediaTrack\nrcvidx :: integer\n[S&M] Deprecated, see RemoveTrackSend (v5.15pre1+). Removes a receive. Returns false if nothing updated.",
    "name": "SNM_RemoveReceive",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      },
      {
        "type": "integer",
        "name": "rcvidx"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Deprecated, see RemoveTrackSend (v5.15pre1+). Removes a receive. Returns false if nothing updated."
  },
  {
    "form": "(reaper.SNM_RemoveReceivesFrom tr srctr) :: (boolean)",
    "doc": "(reaper.SNM_RemoveReceivesFrom tr srctr) :: (boolean)\ntr :: MediaTrack\nsrctr :: MediaTrack\n[S&M] Removes all receives from srctr. Returns false if nothing updated.",
    "name": "SNM_RemoveReceivesFrom",
    "params": [
      {
        "type": "MediaTrack",
        "name": "tr"
      },
      {
        "type": "MediaTrack",
        "name": "srctr"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Removes all receives from srctr. Returns false if nothing updated."
  },
  {
    "form": "(reaper.SNM_SelectResourceBookmark name) :: (integer)",
    "doc": "(reaper.SNM_SelectResourceBookmark name) :: (integer)\nname :: string\n[S&M] Select a bookmark of the Resources window. Returns the related bookmark id (or -1 if failed).",
    "name": "SNM_SelectResourceBookmark",
    "params": [
      {
        "type": "string",
        "name": "name"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Select a bookmark of the Resources window. Returns the related bookmark id (or -1 if failed)."
  },
  {
    "form": "(reaper.SNM_SetDoubleConfigVar varname newvalue) :: (boolean)",
    "doc": "(reaper.SNM_SetDoubleConfigVar varname newvalue) :: (boolean)\nvarname :: string\nnewvalue :: number\n[S&M] Sets a floating-point preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found or newvalue out of range).",
    "name": "SNM_SetDoubleConfigVar",
    "params": [
      {
        "type": "string",
        "name": "varname"
      },
      {
        "type": "number",
        "name": "newvalue"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Sets a floating-point preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found or newvalue out of range)."
  },
  {
    "form": "(reaper.SNM_SetFastString str newstr) :: (WDL_FastString)",
    "doc": "(reaper.SNM_SetFastString str newstr) :: (WDL_FastString)\nstr :: WDL_FastString\nnewstr :: string\n[S&M] Sets the \"fast string\" content. Returns str for facility.",
    "name": "SNM_SetFastString",
    "params": [
      {
        "type": "WDL_FastString",
        "name": "str"
      },
      {
        "type": "string",
        "name": "newstr"
      }
    ],
    "returns": [
      {
        "type": "WDL_FastString"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Sets the \"fast string\" content. Returns str for facility."
  },
  {
    "form": "(reaper.SNM_SetIntConfigVar varname newvalue) :: (boolean)",
    "doc": "(reaper.SNM_SetIntConfigVar varname newvalue) :: (boolean)\nvarname :: string\nnewvalue :: integer\n[S&M] Sets an integer preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found or newvalue out of range).",
    "name": "SNM_SetIntConfigVar",
    "params": [
      {
        "type": "string",
        "name": "varname"
      },
      {
        "type": "integer",
        "name": "newvalue"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Sets an integer preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found or newvalue out of range)."
  },
  {
    "form": "(reaper.SNM_SetLongConfigVar varname newHighValue newLowValue) :: (boolean)",
    "doc": "(reaper.SNM_SetLongConfigVar varname newHighValue newLowValue) :: (boolean)\nvarname :: string\nnewHighValue :: integer\nnewLowValue :: integer\n[S&M] Sets a 64-bit integer preference from two 32-bit integers (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).",
    "name": "SNM_SetLongConfigVar",
    "params": [
      {
        "type": "string",
        "name": "varname"
      },
      {
        "type": "integer",
        "name": "newHighValue"
      },
      {
        "type": "integer",
        "name": "newLowValue"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Sets a 64-bit integer preference from two 32-bit integers (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found)."
  },
  {
    "form": "(reaper.SNM_SetProjectMarker proj num isrgn pos rgnend name color) :: (boolean)",
    "doc": "(reaper.SNM_SetProjectMarker proj num isrgn pos rgnend name color) :: (boolean)\nproj :: ReaProject\nnum :: integer\nisrgn :: boolean\npos :: number\nrgnend :: number\nname :: string\ncolor :: integer\n[S&M] Deprecated, see SetProjectMarker4 -- Same function as SetProjectMarker3() except it can set empty names \"\".",
    "name": "SNM_SetProjectMarker",
    "params": [
      {
        "type": "ReaProject",
        "name": "proj"
      },
      {
        "type": "integer",
        "name": "num"
      },
      {
        "type": "boolean",
        "name": "isrgn"
      },
      {
        "type": "number",
        "name": "pos"
      },
      {
        "type": "number",
        "name": "rgnend"
      },
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "integer",
        "name": "color"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Deprecated, see SetProjectMarker4 -- Same function as SetProjectMarker3() except it can set empty names \"\"."
  },
  {
    "form": "(reaper.SNM_TagMediaFile fn tag tagval) :: (boolean)",
    "doc": "(reaper.SNM_TagMediaFile fn tag tagval) :: (boolean)\nfn :: string\ntag :: string\ntagval :: string\n[S&M] Tags a media file thanks to TagLib. Supported tags: \"artist\", \"album\", \"genre\", \"comment\", \"title\", \"track\" (track number) or \"year\". Use an empty tagval to clear a tag. When a file is opened in REAPER, turn it offline before using this function. Returns false if nothing updated. See SNM_ReadMediaFileTag.",
    "name": "SNM_TagMediaFile",
    "params": [
      {
        "type": "string",
        "name": "fn"
      },
      {
        "type": "string",
        "name": "tag"
      },
      {
        "type": "string",
        "name": "tagval"
      }
    ],
    "returns": [
      {
        "type": "boolean"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Tags a media file thanks to TagLib. Supported tags: \"artist\", \"album\", \"genre\", \"comment\", \"title\", \"track\" (track number) or \"year\". Use an empty tagval to clear a tag. When a file is opened in REAPER, turn it offline before using this function. Returns false if nothing updated. See SNM_ReadMediaFileTag."
  },
  {
    "form": "(reaper.SNM_TieResourceSlotActions bookmarkId) :: nil",
    "doc": "(reaper.SNM_TieResourceSlotActions bookmarkId) :: nil\nbookmarkId :: integer\n[S&M] Attach Resources slot actions to a given bookmark.",
    "name": "SNM_TieResourceSlotActions",
    "params": [
      {
        "type": "integer",
        "name": "bookmarkId"
      }
    ],
    "namespace": "reaper",
    "description": "[S&M] Attach Resources slot actions to a given bookmark."
  },
  {
    "form": "(reaper.SN_FocusMIDIEditor ) :: nil",
    "doc": "(reaper.SN_FocusMIDIEditor ) :: nil\nFocuses the active/open MIDI editor.",
    "name": "SN_FocusMIDIEditor",
    "namespace": "reaper",
    "description": "Focuses the active/open MIDI editor."
  },
  {
    "form": "(reaper.ULT_GetMediaItemNote item) :: (string)",
    "doc": "(reaper.ULT_GetMediaItemNote item) :: (string)\nitem :: MediaItem\n[ULT] Deprecated, see GetSetMediaItemInfo_String (v5.95+). Get item notes.",
    "name": "ULT_GetMediaItemNote",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      }
    ],
    "returns": [
      {
        "type": "string"
      }
    ],
    "namespace": "reaper",
    "description": "[ULT] Deprecated, see GetSetMediaItemInfo_String (v5.95+). Get item notes."
  },
  {
    "form": "(reaper.ULT_SetMediaItemNote item note) :: nil",
    "doc": "(reaper.ULT_SetMediaItemNote item note) :: nil\nitem :: MediaItem\nnote :: string\n[ULT] Deprecated, see GetSetMediaItemInfo_String (v5.95+). Set item notes.",
    "name": "ULT_SetMediaItemNote",
    "params": [
      {
        "type": "MediaItem",
        "name": "item"
      },
      {
        "type": "string",
        "name": "note"
      }
    ],
    "namespace": "reaper",
    "description": "[ULT] Deprecated, see GetSetMediaItemInfo_String (v5.95+). Set item notes."
  },
  {
    "form": "(reaper.Xen_AudioWriter_Create filename numchans samplerate) :: (AudioWriter)",
    "doc": "(reaper.Xen_AudioWriter_Create filename numchans samplerate) :: (AudioWriter)\nfilename :: string\nnumchans :: integer\nsamplerate :: integer\nCreates writer for 32 bit floating point WAV",
    "name": "Xen_AudioWriter_Create",
    "params": [
      {
        "type": "string",
        "name": "filename"
      },
      {
        "type": "integer",
        "name": "numchans"
      },
      {
        "type": "integer",
        "name": "samplerate"
      }
    ],
    "returns": [
      {
        "type": "AudioWriter"
      }
    ],
    "namespace": "reaper",
    "description": "Creates writer for 32 bit floating point WAV"
  },
  {
    "form": "(reaper.Xen_AudioWriter_Destroy writer) :: nil",
    "doc": "(reaper.Xen_AudioWriter_Destroy writer) :: nil\nwriter :: AudioWriter\nDestroys writer",
    "name": "Xen_AudioWriter_Destroy",
    "params": [
      {
        "type": "AudioWriter",
        "name": "writer"
      }
    ],
    "namespace": "reaper",
    "description": "Destroys writer"
  },
  {
    "form": "(reaper.Xen_AudioWriter_Write writer numframes data offset) :: (integer)",
    "doc": "(reaper.Xen_AudioWriter_Write writer numframes data offset) :: (integer)\nwriter :: AudioWriter\nnumframes :: integer\ndata :: identifier\noffset :: integer\nWrite interleaved audio data to disk",
    "name": "Xen_AudioWriter_Write",
    "params": [
      {
        "type": "AudioWriter",
        "name": "writer"
      },
      {
        "type": "integer",
        "name": "numframes"
      },
      {
        "type": "identifier",
        "name": "data"
      },
      {
        "type": "integer",
        "name": "offset"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Write interleaved audio data to disk"
  },
  {
    "form": "(reaper.Xen_GetMediaSourceSamples src destbuf destbufoffset numframes numchans samplerate sourceposition) :: (integer)",
    "doc": "(reaper.Xen_GetMediaSourceSamples src destbuf destbufoffset numframes numchans samplerate sourceposition) :: (integer)\nsrc :: PCM_source\ndestbuf :: identifier\ndestbufoffset :: integer\nnumframes :: integer\nnumchans :: integer\nsamplerate :: number\nsourceposition :: number\nGet interleaved audio data from media source",
    "name": "Xen_GetMediaSourceSamples",
    "params": [
      {
        "type": "PCM_source",
        "name": "src"
      },
      {
        "type": "identifier",
        "name": "destbuf"
      },
      {
        "type": "integer",
        "name": "destbufoffset"
      },
      {
        "type": "integer",
        "name": "numframes"
      },
      {
        "type": "integer",
        "name": "numchans"
      },
      {
        "type": "number",
        "name": "samplerate"
      },
      {
        "type": "number",
        "name": "sourceposition"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Get interleaved audio data from media source"
  },
  {
    "form": "(reaper.Xen_StartSourcePreview source gain loop ?outputchanindexIn) :: (integer)",
    "doc": "(reaper.Xen_StartSourcePreview source gain loop ?outputchanindexIn) :: (integer)\nsource :: PCM_source\ngain :: number\nloop :: boolean\noutputchanindexIn :: integer (optional)\nStart audio preview of a PCM_source. Returns id of a preview handle that can be provided to Xen_StopSourcePreview.\nIf the given PCM_source does not belong to an existing MediaItem/Take, it will be deleted by the preview system when the preview is stopped.",
    "name": "Xen_StartSourcePreview",
    "params": [
      {
        "type": "PCM_source",
        "name": "source"
      },
      {
        "type": "number",
        "name": "gain"
      },
      {
        "type": "boolean",
        "name": "loop"
      },
      {
        "type": "integer",
        "name": "outputchanindexIn",
        "optional": true
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Start audio preview of a PCM_source. Returns id of a preview handle that can be provided to Xen_StopSourcePreview.\nIf the given PCM_source does not belong to an existing MediaItem/Take, it will be deleted by the preview system when the preview is stopped."
  },
  {
    "form": "(reaper.Xen_StopSourcePreview preview_id) :: (integer)",
    "doc": "(reaper.Xen_StopSourcePreview preview_id) :: (integer)\npreview_id :: integer\nStop audio preview. id -1 stops all.\nView: \n[] [] [] [] []",
    "name": "Xen_StopSourcePreview",
    "params": [
      {
        "type": "integer",
        "name": "preview_id"
      }
    ],
    "returns": [
      {
        "type": "integer"
      }
    ],
    "namespace": "reaper",
    "description": "Stop audio preview. id -1 stops all.\nView: \n[] [] [] [] []"
  },
  {
    "form": "(reaper.atexit function) :: nil",
    "doc": "(reaper.atexit function) :: nil\nfunction :: \nAdds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code.",
    "name": "atexit",
    "params": [
      {
        "name": "function"
      }
    ],
    "namespace": "reaper",
    "description": "Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code."
  },
  {
    "form": "(reaper.defer function) :: nil",
    "doc": "(reaper.defer function) :: nil\nfunction :: \nAdds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly.",
    "name": "defer",
    "params": [
      {
        "name": "function"
      }
    ],
    "namespace": "reaper",
    "description": "Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly."
  },
  {
    "form": "(reaper.get_action_context ) :: nil",
    "doc": "(reaper.get_action_context ) :: nil\nis_new_value,filename,sectionID,cmdID,mode,resolution,val,contextstr = reaper.get_action_context()\nReturns contextual information about the script, typically MIDI/OSC input values.\nval will be set to a relative or absolute value depending on mode (=0: absolute mode, >0: relative modes).\nresolution=127 for 7-bit resolution, =16383 for 14-bit resolution.\nsectionID, and cmdID will be set to -1 if the script is not part of the action list.\nmode, resolution and val will be set to -1 if the script was not triggered via MIDI/OSC.\ncontextstr may be empty or one of:(flags may include V=virtkey, S=shift, A=alt/option, C=control/command, W=win/control)",
    "name": "get_action_context",
    "namespace": "reaper",
    "description": "is_new_value,filename,sectionID,cmdID,mode,resolution,val,contextstr = reaper.get_action_context()\nReturns contextual information about the script, typically MIDI/OSC input values.\nval will be set to a relative or absolute value depending on mode (=0: absolute mode, >0: relative modes).\nresolution=127 for 7-bit resolution, =16383 for 14-bit resolution.\nsectionID, and cmdID will be set to -1 if the script is not part of the action list.\nmode, resolution and val will be set to -1 if the script was not triggered via MIDI/OSC.\ncontextstr may be empty or one of:(flags may include V=virtkey, S=shift, A=alt/option, C=control/command, W=win/control)"
  },
  {
    "form": "(gfx.arc x y r ang1 ang2 ?antialias) :: nil",
    "doc": "(gfx.arc x y r ang1 ang2 ?antialias) :: nil\nx :: \ny :: \nr :: \nang1 :: \nang2 :: \nantialias ::  (optional)\nDraws an arc of the circle centered at x,y, with ang1/ang2 being specified in radians.",
    "name": "arc",
    "params": [
      {
        "name": "x"
      },
      {
        "name": "y"
      },
      {
        "name": "r"
      },
      {
        "name": "ang1"
      },
      {
        "name": "ang2"
      },
      {
        "name": "antialias",
        "optional": true
      }
    ],
    "namespace": "gfx",
    "description": "Draws an arc of the circle centered at x,y, with ang1/ang2 being specified in radians."
  },
  {
    "form": "(gfx.blit source ?scale ?rotation ?srcx ?srcy ?srcw ?srch ?destx ?desty ?destw ?desth ?rotxoffs ?rotyoffs) :: nil",
    "doc": "(gfx.blit source ?scale ?rotation ?srcx ?srcy ?srcw ?srch ?destx ?desty ?destw ?desth ?rotxoffs ?rotyoffs) :: nil\nsource :: \nscale ::  (optional)\nrotation ::  (optional)\nsrcx ::  (optional)\nsrcy ::  (optional)\nsrcw ::  (optional)\nsrch ::  (optional)\ndestx ::  (optional)\ndesty ::  (optional)\ndestw ::  (optional)\ndesth ::  (optional)\nrotxoffs ::  (optional)\nrotyoffs ::  (optional)\nCopies from source (-1 = main framebuffer, or an image from gfx.loadimg() etc), using current opacity and copy mode (set with gfx.a, gfx.mode).\nIf destx/desty are not specified, gfx.x/gfx.y will be used as the destination position.\nscale (1.0 is unscaled) will be used only if destw/desth are not specified.\nrotation is an angle in radians\nsrcx/srcy/srcw/srch specify the source rectangle (if omitted srcw/srch default to image size)\ndestx/desty/destw/desth specify destination rectangle (if not specified destw/desth default to srcw/srch * scale).",
    "name": "blit",
    "params": [
      {
        "name": "source"
      },
      {
        "name": "scale",
        "optional": true
      },
      {
        "name": "rotation",
        "optional": true
      },
      {
        "name": "srcx",
        "optional": true
      },
      {
        "name": "srcy",
        "optional": true
      },
      {
        "name": "srcw",
        "optional": true
      },
      {
        "name": "srch",
        "optional": true
      },
      {
        "name": "destx",
        "optional": true
      },
      {
        "name": "desty",
        "optional": true
      },
      {
        "name": "destw",
        "optional": true
      },
      {
        "name": "desth",
        "optional": true
      },
      {
        "name": "rotxoffs",
        "optional": true
      },
      {
        "name": "rotyoffs",
        "optional": true
      }
    ],
    "namespace": "gfx",
    "description": "Copies from source (-1 = main framebuffer, or an image from gfx.loadimg() etc), using current opacity and copy mode (set with gfx.a, gfx.mode).\nIf destx/desty are not specified, gfx.x/gfx.y will be used as the destination position.\nscale (1.0 is unscaled) will be used only if destw/desth are not specified.\nrotation is an angle in radians\nsrcx/srcy/srcw/srch specify the source rectangle (if omitted srcw/srch default to image size)\ndestx/desty/destw/desth specify destination rectangle (if not specified destw/desth default to srcw/srch * scale)."
  },
  {
    "form": "(gfx.blitext source coordinatelist rotation) :: nil",
    "doc": "(gfx.blitext source coordinatelist rotation) :: nil\nsource :: \ncoordinatelist :: \nrotation :: \nDeprecated, use gfx.blit instead.",
    "name": "blitext",
    "params": [
      {
        "name": "source"
      },
      {
        "name": "coordinatelist"
      },
      {
        "name": "rotation"
      }
    ],
    "namespace": "gfx",
    "description": "Deprecated, use gfx.blit instead."
  },
  {
    "form": "(gfx.blurto x y) :: nil",
    "doc": "(gfx.blurto x y) :: nil\nx :: \ny :: \nBlurs the region of the screen between gfx.x,gfx.y and x,y, and updates gfx.x,gfx.y to x,y.",
    "name": "blurto",
    "params": [
      {
        "name": "x"
      },
      {
        "name": "y"
      }
    ],
    "namespace": "gfx",
    "description": "Blurs the region of the screen between gfx.x,gfx.y and x,y, and updates gfx.x,gfx.y to x,y."
  },
  {
    "form": "(gfx.circle x y r ?fill ?antialias) :: nil",
    "doc": "(gfx.circle x y r ?fill ?antialias) :: nil\nx :: \ny :: \nr :: \nfill ::  (optional)\nantialias ::  (optional)\nDraws a circle, optionally filling/antialiasing.",
    "name": "circle",
    "params": [
      {
        "name": "x"
      },
      {
        "name": "y"
      },
      {
        "name": "r"
      },
      {
        "name": "fill",
        "optional": true
      },
      {
        "name": "antialias",
        "optional": true
      }
    ],
    "namespace": "gfx",
    "description": "Draws a circle, optionally filling/antialiasing."
  },
  {
    "form": "(gfx.clienttoscreen x y) :: nil",
    "doc": "(gfx.clienttoscreen x y) :: nil\nx :: \ny :: \nConverts the coordinates x,y to screen coordinates, returns those values.",
    "name": "clienttoscreen",
    "params": [
      {
        "name": "x"
      },
      {
        "name": "y"
      }
    ],
    "namespace": "gfx",
    "description": "Converts the coordinates x,y to screen coordinates, returns those values."
  },
  {
    "form": "(gfx.deltablit srcimg srcs srct srcw srch destx desty destw desth dsdx dtdx dsdy dtdy dsdxdy dtdxdy ?usecliprect) :: nil",
    "doc": "(gfx.deltablit srcimg srcs srct srcw srch destx desty destw desth dsdx dtdx dsdy dtdy dsdxdy dtdxdy ?usecliprect) :: nil\nsrcimg :: \nsrcs :: \nsrct :: \nsrcw :: \nsrch :: \ndestx :: \ndesty :: \ndestw :: \ndesth :: \ndsdx :: \ndtdx :: \ndsdy :: \ndtdy :: \ndsdxdy :: \ndtdxdy :: \nusecliprect ::  (optional)\nBlits from srcimg(srcx,srcy,srcw,srch) to destination (destx,desty,destw,desth). Source texture coordinates are s/t, dsdx represents the change in s coordinate for each x pixel, dtdy represents the change in t coordinate for each y pixel, etc. dsdxdy represents the change in dsdx for each line. If usecliprect is specified and 0, then srcw/srch are ignored.",
    "name": "deltablit",
    "params": [
      {
        "name": "srcimg"
      },
      {
        "name": "srcs"
      },
      {
        "name": "srct"
      },
      {
        "name": "srcw"
      },
      {
        "name": "srch"
      },
      {
        "name": "destx"
      },
      {
        "name": "desty"
      },
      {
        "name": "destw"
      },
      {
        "name": "desth"
      },
      {
        "name": "dsdx"
      },
      {
        "name": "dtdx"
      },
      {
        "name": "dsdy"
      },
      {
        "name": "dtdy"
      },
      {
        "name": "dsdxdy"
      },
      {
        "name": "dtdxdy"
      },
      {
        "name": "usecliprect",
        "optional": true
      }
    ],
    "namespace": "gfx",
    "description": "Blits from srcimg(srcx,srcy,srcw,srch) to destination (destx,desty,destw,desth). Source texture coordinates are s/t, dsdx represents the change in s coordinate for each x pixel, dtdy represents the change in t coordinate for each y pixel, etc. dsdxdy represents the change in dsdx for each line. If usecliprect is specified and 0, then srcw/srch are ignored."
  },
  {
    "form": "(gfx.dock v ?wx ?wy ?ww ?wh) :: nil",
    "doc": "(gfx.dock v ?wx ?wy ?ww ?wh) :: nil\nv :: \nwx ::  (optional)\nwy ::  (optional)\nww ::  (optional)\nwh ::  (optional)\nCall with v=-1 to query docked state, otherwise v>=0 to set docked state. State is &1 if docked, second byte is docker index (or last docker index if undocked). If wx-wh specified, additional values will be returned with the undocked window position/size",
    "name": "dock",
    "params": [
      {
        "name": "v"
      },
      {
        "name": "wx",
        "optional": true
      },
      {
        "name": "wy",
        "optional": true
      },
      {
        "name": "ww",
        "optional": true
      },
      {
        "name": "wh",
        "optional": true
      }
    ],
    "namespace": "gfx",
    "description": "Call with v=-1 to query docked state, otherwise v>=0 to set docked state. State is &1 if docked, second byte is docker index (or last docker index if undocked). If wx-wh specified, additional values will be returned with the undocked window position/size"
  },
  {
    "form": "(gfx.drawchar char) :: nil",
    "doc": "(gfx.drawchar char) :: nil\nchar :: \nDraws the character (can be a numeric ASCII code as well), to gfx.x, gfx.y, and moves gfx.x over by the size of the character.",
    "name": "drawchar",
    "params": [
      {
        "name": "char"
      }
    ],
    "namespace": "gfx",
    "description": "Draws the character (can be a numeric ASCII code as well), to gfx.x, gfx.y, and moves gfx.x over by the size of the character."
  },
  {
    "form": "(gfx.drawnumber n ndigits) :: nil",
    "doc": "(gfx.drawnumber n ndigits) :: nil\nn :: \nndigits :: \nDraws the number n with ndigits of precision to gfx.x, gfx.y, and updates gfx.x to the right side of the drawing. The text height is gfx.texth.",
    "name": "drawnumber",
    "params": [
      {
        "name": "n"
      },
      {
        "name": "ndigits"
      }
    ],
    "namespace": "gfx",
    "description": "Draws the number n with ndigits of precision to gfx.x, gfx.y, and updates gfx.x to the right side of the drawing. The text height is gfx.texth."
  },
  {
    "form": "(gfx.drawstr str ?flags ?right ?bottom) :: nil",
    "doc": "(gfx.drawstr str ?flags ?right ?bottom) :: nil\nstr :: \nflags ::  (optional)\nright ::  (optional)\nbottom ::  (optional)\nDraws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y so that subsequent draws will occur in a similar place.\nIf flags, right ,bottom passed in:",
    "name": "drawstr",
    "params": [
      {
        "name": "str"
      },
      {
        "name": "flags",
        "optional": true
      },
      {
        "name": "right",
        "optional": true
      },
      {
        "name": "bottom",
        "optional": true
      }
    ],
    "namespace": "gfx",
    "description": "Draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y so that subsequent draws will occur in a similar place.\nIf flags, right ,bottom passed in:"
  },
  {
    "form": "(gfx.getchar char unichar) :: nil",
    "doc": "(gfx.getchar char unichar) :: nil\nchar :: \nunichar :: \nIf char is 0 or omitted, returns a character from the keyboard queue, or 0 if no character is available, or -1 if the graphics window is not open. If char is specified and nonzero, that character's status will be checked, and the function will return greater than 0 if it is pressed. Note that calling gfx.getchar() at least once causes gfx.mouse_cap to reflect keyboard modifiers even when the mouse is not captured.\nCommon values are standard ASCII, such as 'a', 'A', '=' and '1', but for many keys multi-byte values are used, including 'home', 'up', 'down', 'left', 'rght', 'f1'.. 'f12', 'pgup', 'pgdn', 'ins', and 'del'. \nModified and special keys can also be returned, including:",
    "name": "getchar",
    "params": [
      {
        "name": "char"
      },
      {
        "name": "unichar"
      }
    ],
    "namespace": "gfx",
    "description": "If char is 0 or omitted, returns a character from the keyboard queue, or 0 if no character is available, or -1 if the graphics window is not open. If char is specified and nonzero, that character's status will be checked, and the function will return greater than 0 if it is pressed. Note that calling gfx.getchar() at least once causes gfx.mouse_cap to reflect keyboard modifiers even when the mouse is not captured.\nCommon values are standard ASCII, such as 'a', 'A', '=' and '1', but for many keys multi-byte values are used, including 'home', 'up', 'down', 'left', 'rght', 'f1'.. 'f12', 'pgup', 'pgdn', 'ins', and 'del'. \nModified and special keys can also be returned, including:"
  },
  {
    "form": "(gfx.getdropfile idx) :: nil",
    "doc": "(gfx.getdropfile idx) :: nil\nidx :: \nReturns success,string for dropped file index idx. call gfx.dropfile(-1) to clear the list when finished.",
    "name": "getdropfile",
    "params": [
      {
        "name": "idx"
      }
    ],
    "namespace": "gfx",
    "description": "Returns success,string for dropped file index idx. call gfx.dropfile(-1) to clear the list when finished."
  },
  {
    "form": "(gfx.getfont ) :: nil",
    "doc": "(gfx.getfont ) :: nil\nReturns current font index, and the actual font face used by this font (if available).",
    "name": "getfont",
    "namespace": "gfx",
    "description": "Returns current font index, and the actual font face used by this font (if available)."
  },
  {
    "form": "(gfx.getimgdim handle) :: nil",
    "doc": "(gfx.getimgdim handle) :: nil\nhandle :: \nRetreives the dimensions of an image specified by handle, returns w, h pair.",
    "name": "getimgdim",
    "params": [
      {
        "name": "handle"
      }
    ],
    "namespace": "gfx",
    "description": "Retreives the dimensions of an image specified by handle, returns w, h pair."
  },
  {
    "form": "(gfx.getpixel ) :: nil",
    "doc": "(gfx.getpixel ) :: nil\nReturns r,g,b values [0..1] of the pixel at (gfx.x,gfx.y)",
    "name": "getpixel",
    "namespace": "gfx",
    "description": "Returns r,g,b values [0..1] of the pixel at (gfx.x,gfx.y)"
  },
  {
    "form": "(gfx.gradrect x y w h r g b a ?drdx ?dgdx ?dbdx ?dadx ?drdy ?dgdy ?dbdy ?dady) :: nil",
    "doc": "(gfx.gradrect x y w h r g b a ?drdx ?dgdx ?dbdx ?dadx ?drdy ?dgdy ?dbdy ?dady) :: nil\nx :: \ny :: \nw :: \nh :: \nr :: \ng :: \nb :: \na :: \ndrdx ::  (optional)\ndgdx ::  (optional)\ndbdx ::  (optional)\ndadx ::  (optional)\ndrdy ::  (optional)\ndgdy ::  (optional)\ndbdy ::  (optional)\ndady ::  (optional)\nFills a gradient rectangle with the color and alpha specified. drdx-dadx reflect the adjustment (per-pixel) applied for each pixel moved to the right, drdy-dady are the adjustment applied for each pixel moved toward the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc.",
    "name": "gradrect",
    "params": [
      {
        "name": "x"
      },
      {
        "name": "y"
      },
      {
        "name": "w"
      },
      {
        "name": "h"
      },
      {
        "name": "r"
      },
      {
        "name": "g"
      },
      {
        "name": "b"
      },
      {
        "name": "a"
      },
      {
        "name": "drdx",
        "optional": true
      },
      {
        "name": "dgdx",
        "optional": true
      },
      {
        "name": "dbdx",
        "optional": true
      },
      {
        "name": "dadx",
        "optional": true
      },
      {
        "name": "drdy",
        "optional": true
      },
      {
        "name": "dgdy",
        "optional": true
      },
      {
        "name": "dbdy",
        "optional": true
      },
      {
        "name": "dady",
        "optional": true
      }
    ],
    "namespace": "gfx",
    "description": "Fills a gradient rectangle with the color and alpha specified. drdx-dadx reflect the adjustment (per-pixel) applied for each pixel moved to the right, drdy-dady are the adjustment applied for each pixel moved toward the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc."
  },
  {
    "form": "(gfx.init name ?width ?height ?dockstate ?xpos ?ypos) :: nil",
    "doc": "(gfx.init name ?width ?height ?dockstate ?xpos ?ypos) :: nil\nname :: \nwidth ::  (optional)\nheight ::  (optional)\ndockstate ::  (optional)\nxpos ::  (optional)\nypos ::  (optional)\nInitializes the graphics window with title name. Suggested width and height can be specified. If window is already open, a non-empty name will re-title window, or an empty title will resize window. \nOnce the graphics window is open, gfx.update() should be called periodically.",
    "name": "init",
    "params": [
      {
        "name": "name"
      },
      {
        "name": "width",
        "optional": true
      },
      {
        "name": "height",
        "optional": true
      },
      {
        "name": "dockstate",
        "optional": true
      },
      {
        "name": "xpos",
        "optional": true
      },
      {
        "name": "ypos",
        "optional": true
      }
    ],
    "namespace": "gfx",
    "description": "Initializes the graphics window with title name. Suggested width and height can be specified. If window is already open, a non-empty name will re-title window, or an empty title will resize window. \nOnce the graphics window is open, gfx.update() should be called periodically."
  },
  {
    "form": "(gfx.line x y x2 y2 ?aa) :: nil",
    "doc": "(gfx.line x y x2 y2 ?aa) :: nil\nx :: \ny :: \nx2 :: \ny2 :: \naa ::  (optional)\nDraws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased.",
    "name": "line",
    "params": [
      {
        "name": "x"
      },
      {
        "name": "y"
      },
      {
        "name": "x2"
      },
      {
        "name": "y2"
      },
      {
        "name": "aa",
        "optional": true
      }
    ],
    "namespace": "gfx",
    "description": "Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased."
  },
  {
    "form": "(gfx.lineto x y ?aa) :: nil",
    "doc": "(gfx.lineto x y ?aa) :: nil\nx :: \ny :: \naa ::  (optional)\nDraws a line from gfx.x,gfx.y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx.x and gfx.y to x,y.",
    "name": "lineto",
    "params": [
      {
        "name": "x"
      },
      {
        "name": "y"
      },
      {
        "name": "aa",
        "optional": true
      }
    ],
    "namespace": "gfx",
    "description": "Draws a line from gfx.x,gfx.y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx.x and gfx.y to x,y."
  },
  {
    "form": "(gfx.loadimg image filename) :: nil",
    "doc": "(gfx.loadimg image filename) :: nil\nimage :: \nfilename :: \nLoad image from filename into slot 0..1024-1 specified by image. Returns the image index if success, otherwise -1 if failure. The image will be resized to the dimensions of the image file.",
    "name": "loadimg",
    "params": [
      {
        "name": "image"
      },
      {
        "name": "filename"
      }
    ],
    "namespace": "gfx",
    "description": "Load image from filename into slot 0..1024-1 specified by image. Returns the image index if success, otherwise -1 if failure. The image will be resized to the dimensions of the image file."
  },
  {
    "form": "(gfx.measurechar char) :: nil",
    "doc": "(gfx.measurechar char) :: nil\nchar :: \nMeasures the drawing dimensions of a character with the current font (as set by gfx.setfont). Returns width and height of character.",
    "name": "measurechar",
    "params": [
      {
        "name": "char"
      }
    ],
    "namespace": "gfx",
    "description": "Measures the drawing dimensions of a character with the current font (as set by gfx.setfont). Returns width and height of character."
  },
  {
    "form": "(gfx.measurestr str) :: nil",
    "doc": "(gfx.measurestr str) :: nil\nstr :: \nMeasures the drawing dimensions of a string with the current font (as set by gfx.setfont). Returns width and height of string.",
    "name": "measurestr",
    "params": [
      {
        "name": "str"
      }
    ],
    "namespace": "gfx",
    "description": "Measures the drawing dimensions of a string with the current font (as set by gfx.setfont). Returns width and height of string."
  },
  {
    "form": "(gfx.muladdrect x y w h mul_r mul_g mul_b ?mul_a ?add_r ?add_g ?add_b ?add_a) :: nil",
    "doc": "(gfx.muladdrect x y w h mul_r mul_g mul_b ?mul_a ?add_r ?add_g ?add_b ?add_a) :: nil\nx :: \ny :: \nw :: \nh :: \nmul_r :: \nmul_g :: \nmul_b :: \nmul_a ::  (optional)\nadd_r ::  (optional)\nadd_g ::  (optional)\nadd_b ::  (optional)\nadd_a ::  (optional)\nMultiplies each pixel by mul_* and adds add_*, and updates in-place. Useful for changing brightness/contrast, or other effects.",
    "name": "muladdrect",
    "params": [
      {
        "name": "x"
      },
      {
        "name": "y"
      },
      {
        "name": "w"
      },
      {
        "name": "h"
      },
      {
        "name": "mul_r"
      },
      {
        "name": "mul_g"
      },
      {
        "name": "mul_b"
      },
      {
        "name": "mul_a",
        "optional": true
      },
      {
        "name": "add_r",
        "optional": true
      },
      {
        "name": "add_g",
        "optional": true
      },
      {
        "name": "add_b",
        "optional": true
      },
      {
        "name": "add_a",
        "optional": true
      }
    ],
    "namespace": "gfx",
    "description": "Multiplies each pixel by mul_* and adds add_*, and updates in-place. Useful for changing brightness/contrast, or other effects."
  },
  {
    "form": "(gfx.quit ) :: nil",
    "doc": "(gfx.quit ) :: nil\nCloses the graphics window.",
    "name": "quit",
    "namespace": "gfx",
    "description": "Closes the graphics window."
  },
  {
    "form": "(gfx.rect x y w h ?filled) :: nil",
    "doc": "(gfx.rect x y w h ?filled) :: nil\nx :: \ny :: \nw :: \nh :: \nfilled ::  (optional)\nFills a rectangle at x,y, w,h pixels in dimension, filled by default.",
    "name": "rect",
    "params": [
      {
        "name": "x"
      },
      {
        "name": "y"
      },
      {
        "name": "w"
      },
      {
        "name": "h"
      },
      {
        "name": "filled",
        "optional": true
      }
    ],
    "namespace": "gfx",
    "description": "Fills a rectangle at x,y, w,h pixels in dimension, filled by default."
  },
  {
    "form": "(gfx.rectto x y) :: nil",
    "doc": "(gfx.rectto x y) :: nil\nx :: \ny :: \nFills a rectangle from gfx.x,gfx.y to x,y. Updates gfx.x,gfx.y to x,y.",
    "name": "rectto",
    "params": [
      {
        "name": "x"
      },
      {
        "name": "y"
      }
    ],
    "namespace": "gfx",
    "description": "Fills a rectangle from gfx.x,gfx.y to x,y. Updates gfx.x,gfx.y to x,y."
  },
  {
    "form": "(gfx.roundrect x y w h radius ?antialias) :: nil",
    "doc": "(gfx.roundrect x y w h radius ?antialias) :: nil\nx :: \ny :: \nw :: \nh :: \nradius :: \nantialias ::  (optional)\nDraws a rectangle with rounded corners.",
    "name": "roundrect",
    "params": [
      {
        "name": "x"
      },
      {
        "name": "y"
      },
      {
        "name": "w"
      },
      {
        "name": "h"
      },
      {
        "name": "radius"
      },
      {
        "name": "antialias",
        "optional": true
      }
    ],
    "namespace": "gfx",
    "description": "Draws a rectangle with rounded corners."
  },
  {
    "form": "(gfx.screentoclient x y) :: nil",
    "doc": "(gfx.screentoclient x y) :: nil\nx :: \ny :: \nConverts the screen coordinates x,y to client coordinates, returns those values.",
    "name": "screentoclient",
    "params": [
      {
        "name": "x"
      },
      {
        "name": "y"
      }
    ],
    "namespace": "gfx",
    "description": "Converts the screen coordinates x,y to client coordinates, returns those values."
  },
  {
    "form": "(gfx.set r ?g ?b ?a ?mode ?dest ?a2) :: nil",
    "doc": "(gfx.set r ?g ?b ?a ?mode ?dest ?a2) :: nil\nr :: \ng ::  (optional)\nb ::  (optional)\na ::  (optional)\nmode ::  (optional)\ndest ::  (optional)\na2 ::  (optional)\nSets gfx.r/gfx.g/gfx.b/gfx.a/gfx.mode/gfx.a2, sets gfx.dest if final parameter specified",
    "name": "set",
    "params": [
      {
        "name": "r"
      },
      {
        "name": "g",
        "optional": true
      },
      {
        "name": "b",
        "optional": true
      },
      {
        "name": "a",
        "optional": true
      },
      {
        "name": "mode",
        "optional": true
      },
      {
        "name": "dest",
        "optional": true
      },
      {
        "name": "a2",
        "optional": true
      }
    ],
    "namespace": "gfx",
    "description": "Sets gfx.r/gfx.g/gfx.b/gfx.a/gfx.mode/gfx.a2, sets gfx.dest if final parameter specified"
  },
  {
    "form": "(gfx.setcursor resource_id custom_cursor_name) :: nil",
    "doc": "(gfx.setcursor resource_id custom_cursor_name) :: nil\nresource_id :: \ncustom_cursor_name :: \nSets the mouse cursor to resource_id and/or custom_cursor_name.",
    "name": "setcursor",
    "params": [
      {
        "name": "resource_id"
      },
      {
        "name": "custom_cursor_name"
      }
    ],
    "namespace": "gfx",
    "description": "Sets the mouse cursor to resource_id and/or custom_cursor_name."
  },
  {
    "form": "(gfx.setfont idx ?fontface ?sz ?flags) :: nil",
    "doc": "(gfx.setfont idx ?fontface ?sz ?flags) :: nil\nidx :: \nfontface ::  (optional)\nsz ::  (optional)\nflags ::  (optional)\nCan select a font and optionally configure it. idx=0 for default bitmapped font, no configuration is possible for this font. idx=1..16 for a configurable font, specify fontface such as \"Arial\", sz of 8-100, and optionally specify flags, which is a multibyte character, which can include 'i' for italics, 'u' for underline, or 'b' for bold. These flags may or may not be supported depending on the font and OS. After calling gfx.setfont(), gfx.texth may be updated to reflect the new average line height.",
    "name": "setfont",
    "params": [
      {
        "name": "idx"
      },
      {
        "name": "fontface",
        "optional": true
      },
      {
        "name": "sz",
        "optional": true
      },
      {
        "name": "flags",
        "optional": true
      }
    ],
    "namespace": "gfx",
    "description": "Can select a font and optionally configure it. idx=0 for default bitmapped font, no configuration is possible for this font. idx=1..16 for a configurable font, specify fontface such as \"Arial\", sz of 8-100, and optionally specify flags, which is a multibyte character, which can include 'i' for italics, 'u' for underline, or 'b' for bold. These flags may or may not be supported depending on the font and OS. After calling gfx.setfont(), gfx.texth may be updated to reflect the new average line height."
  },
  {
    "form": "(gfx.setimgdim image w h) :: nil",
    "doc": "(gfx.setimgdim image w h) :: nil\nimage :: \nw :: \nh :: \nResize image referenced by index 0..1024-1, width and height must be 0-8192. The contents of the image will be undefined after the resize.",
    "name": "setimgdim",
    "params": [
      {
        "name": "image"
      },
      {
        "name": "w"
      },
      {
        "name": "h"
      }
    ],
    "namespace": "gfx",
    "description": "Resize image referenced by index 0..1024-1, width and height must be 0-8192. The contents of the image will be undefined after the resize."
  },
  {
    "form": "(gfx.setpixel r g b) :: nil",
    "doc": "(gfx.setpixel r g b) :: nil\nr :: \ng :: \nb :: \nWrites a pixel of r,g,b to gfx.x,gfx.y.",
    "name": "setpixel",
    "params": [
      {
        "name": "r"
      },
      {
        "name": "g"
      },
      {
        "name": "b"
      }
    ],
    "namespace": "gfx",
    "description": "Writes a pixel of r,g,b to gfx.x,gfx.y."
  },
  {
    "form": "(gfx.showmenu str) :: nil",
    "doc": "(gfx.showmenu str) :: nil\nstr :: \nShows a popup menu at gfx.x,gfx.y. str is a list of fields separated by | characters. Each field represents a menu item.\nFields can start with special characters:\n# : grayed out\n! : checked\n> : this menu item shows a submenu\n< : last item in the current submenu\nAn empty field will appear as a separator in the menu. gfx.showmenu returns 0 if the user selected nothing from the menu, 1 if the first field is selected, etc.\nExample:\ngfx.showmenu(\"first item, followed by separator||!second item, checked|>third item which spawns a submenu|#first item in submenu, grayed out|<second and last item in submenu|fourth item in top menu\")",
    "name": "showmenu",
    "params": [
      {
        "name": "str"
      }
    ],
    "namespace": "gfx",
    "description": "Shows a popup menu at gfx.x,gfx.y. str is a list of fields separated by | characters. Each field represents a menu item.\nFields can start with special characters:\n# : grayed out\n! : checked\n> : this menu item shows a submenu\n< : last item in the current submenu\nAn empty field will appear as a separator in the menu. gfx.showmenu returns 0 if the user selected nothing from the menu, 1 if the first field is selected, etc.\nExample:\ngfx.showmenu(\"first item, followed by separator||!second item, checked|>third item which spawns a submenu|#first item in submenu, grayed out|<second and last item in submenu|fourth item in top menu\")"
  },
  {
    "form": "(gfx.transformblit srcimg destx desty destw desth div_w div_h table) :: nil",
    "doc": "(gfx.transformblit srcimg destx desty destw desth div_w div_h table) :: nil\nsrcimg :: \ndestx :: \ndesty :: \ndestw :: \ndesth :: \ndiv_w :: \ndiv_h :: \ntable :: \nBlits to destination at (destx,desty), size (destw,desth). div_w and div_h should be 2..64, and table should point to a table of 2*div_w*div_h values (table can be a regular table or (for less overhead) a reaper.array). Each pair in the table represents a S,T coordinate in the source image, and the table is treated as a left-right, top-bottom list of texture coordinates, which will then be rendered to the destination.",
    "name": "transformblit",
    "params": [
      {
        "name": "srcimg"
      },
      {
        "name": "destx"
      },
      {
        "name": "desty"
      },
      {
        "name": "destw"
      },
      {
        "name": "desth"
      },
      {
        "name": "div_w"
      },
      {
        "name": "div_h"
      },
      {
        "name": "table"
      }
    ],
    "namespace": "gfx",
    "description": "Blits to destination at (destx,desty), size (destw,desth). div_w and div_h should be 2..64, and table should point to a table of 2*div_w*div_h values (table can be a regular table or (for less overhead) a reaper.array). Each pair in the table represents a S,T coordinate in the source image, and the table is treated as a left-right, top-bottom list of texture coordinates, which will then be rendered to the destination."
  },
  {
    "form": "(gfx.update ) :: nil",
    "doc": "(gfx.update ) :: nil\nUpdates the graphics display, if opened",
    "name": "update",
    "namespace": "gfx",
    "description": "Updates the graphics display, if opened"
  },
  {
    "form": "(reaper.gmem_attach sharedMemoryName) :: nil",
    "doc": "(reaper.gmem_attach sharedMemoryName) :: nil\nsharedMemoryName :: \nCauses gmem_read()/gmem_write() to read EEL2/JSFX/Video shared memory segment named by parameter. Set to empty string to detach. 6.20+: returns previous shared memory segment name.",
    "name": "gmem_attach",
    "params": [
      {
        "name": "sharedMemoryName"
      }
    ],
    "namespace": "reaper",
    "description": "Causes gmem_read()/gmem_write() to read EEL2/JSFX/Video shared memory segment named by parameter. Set to empty string to detach. 6.20+: returns previous shared memory segment name."
  },
  {
    "form": "(reaper.gmem_read index) :: nil",
    "doc": "(reaper.gmem_read index) :: nil\nindex :: \nRead (number) value from shared memory attached-to by gmem_attach(). index can be [0..1<<25).",
    "name": "gmem_read",
    "params": [
      {
        "name": "index"
      }
    ],
    "namespace": "reaper",
    "description": "Read (number) value from shared memory attached-to by gmem_attach(). index can be [0..1<<25)."
  },
  {
    "form": "(reaper.gmem_write index value) :: nil",
    "doc": "(reaper.gmem_write index value) :: nil\nindex :: \nvalue :: \nWrite (number) value to shared memory attached-to by gmem_attach(). index can be [0..1<<25).",
    "name": "gmem_write",
    "params": [
      {
        "name": "index"
      },
      {
        "name": "value"
      }
    ],
    "namespace": "reaper",
    "description": "Write (number) value to shared memory attached-to by gmem_attach(). index can be [0..1<<25)."
  },
  {
    "form": "(reaper.runloop function) :: nil",
    "doc": "(reaper.runloop function) :: nil\nfunction :: \nAdds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly.",
    "name": "runloop",
    "params": [
      {
        "name": "function"
      }
    ],
    "namespace": "reaper",
    "description": "Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().\nNote that no undo point will be automatically created when the script finishes, unless you create it explicitly."
  },
  {
    "form": "(reaper.set_action_options flag) :: nil",
    "doc": "(reaper.set_action_options flag) :: nil\nflag :: \nreaper.set_action_options(flag)\nSets action options for the script.\nflag&1: script will auto-terminate if re-launched while already running\nflag&2: if (flag&1) is set, script will re-launch after auto-terminating\nflag&4: set script toggle state on\nflag&8: set script toggle state off",
    "name": "set_action_options",
    "params": [
      {
        "name": "flag"
      }
    ],
    "namespace": "reaper",
    "description": "reaper.set_action_options(flag)\nSets action options for the script.\nflag&1: script will auto-terminate if re-launched while already running\nflag&2: if (flag&1) is set, script will re-launch after auto-terminating\nflag&4: set script toggle state on\nflag&8: set script toggle state off"
  },
  {
    "form": "({reaper.array}.clear value offset size) :: nil",
    "doc": "({reaper.array}.clear value offset size) :: nil\nvalue :: \noffset :: \nsize :: \nSets the value of zero or more items in the array. If value not specified, 0.0 is used. offset is 1-based, if size omitted then the maximum amount available will be set.",
    "name": "clear",
    "params": [
      {
        "name": "value"
      },
      {
        "name": "offset"
      },
      {
        "name": "size"
      }
    ],
    "namespace": "{reaper.array}",
    "description": "Sets the value of zero or more items in the array. If value not specified, 0.0 is used. offset is 1-based, if size omitted then the maximum amount available will be set."
  },
  {
    "form": "({reaper.array}.convolve src srcoffs size destoffs) :: nil",
    "doc": "({reaper.array}.convolve src srcoffs size destoffs) :: nil\nsrc :: \nsrcoffs :: \nsize :: \ndestoffs :: \nConvolves complex value pairs from reaper.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs. size is in normal items (so it must be even)",
    "name": "convolve",
    "params": [
      {
        "name": "src"
      },
      {
        "name": "srcoffs"
      },
      {
        "name": "size"
      },
      {
        "name": "destoffs"
      }
    ],
    "namespace": "{reaper.array}",
    "description": "Convolves complex value pairs from reaper.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs. size is in normal items (so it must be even)"
  },
  {
    "form": "({reaper.array}.copy src srcoffs size destoffs) :: nil",
    "doc": "({reaper.array}.copy src srcoffs size destoffs) :: nil\nsrc :: \nsrcoffs :: \nsize :: \ndestoffs :: \nCopies values from reaper.array or table, starting at 1-based srcoffs, writing to 1-based destoffs.",
    "name": "copy",
    "params": [
      {
        "name": "src"
      },
      {
        "name": "srcoffs"
      },
      {
        "name": "size"
      },
      {
        "name": "destoffs"
      }
    ],
    "namespace": "{reaper.array}",
    "description": "Copies values from reaper.array or table, starting at 1-based srcoffs, writing to 1-based destoffs."
  },
  {
    "form": "({reaper.array}.fft size ?permute ?offset) :: nil",
    "doc": "({reaper.array}.fft size ?permute ?offset) :: nil\nsize :: \npermute ::  (optional)\noffset ::  (optional)\nPerforms a forward FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled following the FFT to be in normal order.",
    "name": "fft",
    "params": [
      {
        "name": "size"
      },
      {
        "name": "permute",
        "optional": true
      },
      {
        "name": "offset",
        "optional": true
      }
    ],
    "namespace": "{reaper.array}",
    "description": "Performs a forward FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled following the FFT to be in normal order."
  },
  {
    "form": "({reaper.array}.fft_real size ?permute ?offset) :: nil",
    "doc": "({reaper.array}.fft_real size ?permute ?offset) :: nil\nsize :: \npermute ::  (optional)\noffset ::  (optional)\nPerforms a forward real->complex FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled following the FFT to be in normal order.",
    "name": "fft_real",
    "params": [
      {
        "name": "size"
      },
      {
        "name": "permute",
        "optional": true
      },
      {
        "name": "offset",
        "optional": true
      }
    ],
    "namespace": "{reaper.array}",
    "description": "Performs a forward real->complex FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled following the FFT to be in normal order."
  },
  {
    "form": "({reaper.array}.get_alloc ) :: nil",
    "doc": "({reaper.array}.get_alloc ) :: nil\nReturns the maximum (allocated) size of the array.",
    "name": "get_alloc",
    "namespace": "{reaper.array}",
    "description": "Returns the maximum (allocated) size of the array."
  },
  {
    "form": "({reaper.array}.ifft size ?permute ?offset) :: nil",
    "doc": "({reaper.array}.ifft size ?permute ?offset) :: nil\nsize :: \npermute ::  (optional)\noffset ::  (optional)\nPerforms a backwards FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled before the IFFT to be in fft-order.",
    "name": "ifft",
    "params": [
      {
        "name": "size"
      },
      {
        "name": "permute",
        "optional": true
      },
      {
        "name": "offset",
        "optional": true
      }
    ],
    "namespace": "{reaper.array}",
    "description": "Performs a backwards FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled before the IFFT to be in fft-order."
  },
  {
    "form": "({reaper.array}.ifft_real size ?permute ?offset) :: nil",
    "doc": "({reaper.array}.ifft_real size ?permute ?offset) :: nil\nsize :: \npermute ::  (optional)\noffset ::  (optional)\nPerforms a backwards complex->real FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled before the IFFT to be in fft-order.",
    "name": "ifft_real",
    "params": [
      {
        "name": "size"
      },
      {
        "name": "permute",
        "optional": true
      },
      {
        "name": "offset",
        "optional": true
      }
    ],
    "namespace": "{reaper.array}",
    "description": "Performs a backwards complex->real FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled before the IFFT to be in fft-order."
  },
  {
    "form": "({reaper.array}.multiply src srcoffs size destoffs) :: nil",
    "doc": "({reaper.array}.multiply src srcoffs size destoffs) :: nil\nsrc :: \nsrcoffs :: \nsize :: \ndestoffs :: \nMultiplies values from reaper.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs.",
    "name": "multiply",
    "params": [
      {
        "name": "src"
      },
      {
        "name": "srcoffs"
      },
      {
        "name": "size"
      },
      {
        "name": "destoffs"
      }
    ],
    "namespace": "{reaper.array}",
    "description": "Multiplies values from reaper.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs."
  },
  {
    "form": "({reaper.array}.resize size) :: nil",
    "doc": "({reaper.array}.resize size) :: nil\nsize :: \nResizes an array object to size. size must be [0..max_size].",
    "name": "resize",
    "params": [
      {
        "name": "size"
      }
    ],
    "namespace": "{reaper.array}",
    "description": "Resizes an array object to size. size must be [0..max_size]."
  },
  {
    "form": "({reaper.array}.table offset size) :: nil",
    "doc": "({reaper.array}.table offset size) :: nil\noffset :: \nsize :: \nReturns a new table with values from items in the array. Offset is 1-based and if size is omitted all available values are used.",
    "name": "table",
    "params": [
      {
        "name": "offset"
      },
      {
        "name": "size"
      }
    ],
    "namespace": "{reaper.array}",
    "description": "Returns a new table with values from items in the array. Offset is 1-based and if size is omitted all available values are used."
  }
]
