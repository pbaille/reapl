local fnl = require("fennel")
local function add_meta(f, arglist, docstring)
  if f then
    return (fnl.metadata):setall(f, "fnl/arglist", arglist, "fnl/docstring", docstring)
  else
    return nil
  end
end
add_meta(reaper.AddMediaItemToTrack, {"tr"}, "creates a new media item.")
add_meta(reaper.AddProjectMarker, {"proj", "isrgn", "pos", "rgnend", "name", "wantidx"}, "Returns the index of the created marker/region, or -1 on failure.\nSupply wantidx>=0 if you want a particular index number, but you'll get a\ndifferent index number a region and wantidx is already in use.")
add_meta(reaper.AddProjectMarker2, {"proj", "isrgn", "pos", "rgnend", "name", "wantidx", "color"}, "Returns the index of the created marker/region, or -1 on failure.\nSupply wantidx>=0 if you want a particular index number, but you'll get a\ndifferent index number a region and wantidx is already in use.\ncolor should be 0 (default color), or ColorToNative(r,g,b)|0x1000000")
add_meta(reaper.AddRemoveReaScript, {"add", "sectionID", "scriptfn", "commit"}, "Add a ReaScript (return the new command ID, or 0 if failed) or remove a\nReaScript (return >0 on success).\nUse commit==true when adding/removing a single script.\nWhen bulk adding/removing n scripts, you can optimize the n-1 first calls with\ncommit==false and commit==true for the last call.")
add_meta(reaper.AddTakeToMediaItem, {"item"}, "creates a new take in an item")
add_meta(reaper.AddTempoTimeSigMarker, {"proj", "timepos", "bpm", "timesig_num", "timesig_denom", "lineartempochange"}, "Deprecated.\nUse SetTempoTimeSigMarker with ptidx=-1.")
add_meta(reaper.adjustZoom, {"amt", "forceset", "doupd", "centermode"}, "forceset=0,doupd=true,centermode=-1 for default")
add_meta(reaper.AnyTrackSolo, {"proj"}, nil)
add_meta(reaper.APIExists, {"function_name"}, "Returns true if function_name exists in the REAPER API")
add_meta(reaper.APITest, {}, "Displays a message window if the API was successfully called.")
add_meta(reaper.ApplyNudge, {"project", "nudgeflag", "nudgewhat", "nudgeunits", "value", "reverse", "copies"}, "nudgeflag: &1=set to value (otherwise nudge by value), &2=snap\nnudgewhat: 0=position, 1=left trim, 2=left edge, 3=right edge, 4=contents,\n5=duplicate, 6=edit cursor\nnudgeunit: 0=ms, 1=seconds, 2=grid, 3=256th notes, ..., 15=whole notes,\n16=measures.beats (1.15 = 1 measure + 1.5 beats), 17=samples, 18=frames,\n19=pixels, 20=item lengths, 21=item selections\nvalue: amount to nudge by, or value to set to\nreverse: in nudge mode, nudges left (otherwise ignored)\ncopies: in nudge duplicate mode, number of copies (otherwise ignored)")
add_meta(reaper.ArmCommand, {"cmd", "sectionname"}, "arms a command (or disarms if 0 passed) in section sectionname (empty string for\nmain)")
add_meta(reaper.Audio_Init, {}, "open all audio and MIDI devices, if not open")
add_meta(reaper.Audio_IsPreBuffer, {}, "is in pre-buffer? threadsafe")
add_meta(reaper.Audio_IsRunning, {}, "is audio running at all? threadsafe")
add_meta(reaper.Audio_Quit, {}, "close all audio and MIDI devices, if open")
add_meta(reaper.AudioAccessorStateChanged, {"accessor"}, "Returns true if the underlying samples (track or media item take) have changed,\nbut does not update the audio accessor, so the user can selectively call\nAudioAccessorValidateState only when needed.\nSee CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor,\nGetAudioAccessorEndTime, GetAudioAccessorSamples.")
add_meta(reaper.AudioAccessorUpdate, {"accessor"}, "Force the accessor to reload its state from the underlying track or media item\ntake.\nSee CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor,\nAudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime,\nGetAudioAccessorSamples.")
add_meta(reaper.AudioAccessorValidateState, {"accessor"}, "Validates the current state of the audio accessor -- must ONLY call this from\nthe main thread.\nReturns true if the state changed.")
add_meta(reaper.BypassFxAllTracks, {"bypass"}, "-1 = bypass all if not all bypassed,otherwise unbypass all")
add_meta(reaper.CalcMediaSrcLoudness, {"mediasource"}, "Calculates loudness statistics of media via dry run render.\nStatistics will be displayed to the user; call\nGetSetProjectInfo_String(\"RENDER_STATS\") to retrieve via API.\nReturns 1 if loudness was calculated successfully, -1 if user canceled the dry\nrun render.")
add_meta(reaper.CalculateNormalization, {"source", "normalizeTo", "normalizeTarget", "normalizeStart", "normalizeEnd"}, "Calculate normalize adjustment for source media.\nnormalizeTo: 0=LUFS-I, 1=RMS-I, 2=peak, 3=true peak, 4=LUFS-M max, 5=LUFS-S max.\nnormalizeTarget: dBFS or LUFS value.\nnormalizeStart, normalizeEnd: time bounds within source media for normalization\ncalculation.\nIf normalizationStart=0 and normalizationEnd=0, the full duration of the media\nwill be used for the calculation.")
add_meta(reaper.ClearAllRecArmed, {}, nil)
add_meta(reaper.ClearConsole, {}, "Clear the ReaScript console.\nSee ShowConsoleMsg")
add_meta(reaper.ClearPeakCache, {}, "resets the global peak caches")
add_meta(reaper.ColorFromNative, {"col"}, "Extract RGB values from an OS dependent color.\nSee ColorToNative.")
add_meta(reaper.ColorToNative, {"r", "g", "b"}, "Make an OS dependent color from RGB values (e.g.\nRGB() macro on Windows).\nr,g and b are in [0..255].\nSee ColorFromNative.")
add_meta(reaper.CountActionShortcuts, {"section", "cmdID"}, "Returns the number of shortcuts that exist for the given command ID.\nsee GetActionShortcutDesc, DeleteActionShortcut, DoActionShortcutDialog.")
add_meta(reaper.CountAutomationItems, {"env"}, "Returns the number of automation items on this envelope.\nSee GetSetAutomationItemInfo")
add_meta(reaper.CountEnvelopePoints, {"envelope"}, "Returns the number of points in the envelope.\nSee CountEnvelopePointsEx.")
add_meta(reaper.CountEnvelopePointsEx, {"envelope", "autoitem_idx"}, "Returns the number of points in the envelope.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on\nthe envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number\nof points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation\nitem, including all loop iterations.\nSee GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx,\nDeleteEnvelopePointEx.")
add_meta(reaper.CountMediaItems, {"proj"}, "count the number of items in the project (proj=0 for active project)")
add_meta(reaper.CountProjectMarkers, {"proj"}, "num_markersOut and num_regionsOut may be NULL.")
add_meta(reaper.CountSelectedMediaItems, {"proj"}, "count the number of selected items in the project (proj=0 for active project)")
add_meta(reaper.CountSelectedTracks, {"proj"}, "Count the number of selected tracks in the project (proj=0 for active project).\nThis function ignores the master track, see CountSelectedTracks2.")
add_meta(reaper.CountSelectedTracks2, {"proj", "wantmaster"}, "Count the number of selected tracks in the project (proj=0 for active project).")
add_meta(reaper.CountTakeEnvelopes, {"take"}, "See GetTakeEnvelope")
add_meta(reaper.CountTakes, {"item"}, "count the number of takes in the item")
add_meta(reaper.CountTCPFXParms, {"project", "track"}, "Count the number of FX parameter knobs displayed on the track control panel.")
add_meta(reaper.CountTempoTimeSigMarkers, {"proj"}, "Count the number of tempo/time signature markers in the project.\nSee GetTempoTimeSigMarker, SetTempoTimeSigMarker, AddTempoTimeSigMarker.")
add_meta(reaper.CountTrackEnvelopes, {"track"}, "see GetTrackEnvelope")
add_meta(reaper.CountTrackMediaItems, {"track"}, "count the number of items in the track")
add_meta(reaper.CountTracks, {"proj"}, "count the number of tracks in the project (proj=0 for active project)")
add_meta(reaper.CreateNewMIDIItemInProj, {"track", "starttime", "endtime", "qnIn"}, "Create a new MIDI media item, containing no MIDI events.\nTime is in seconds unless qn is set.")
add_meta(reaper.CreateTakeAudioAccessor, {"take"}, "Create an audio accessor object for this take.\nMust only call from the main thread.\nSee CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged,\nGetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.")
add_meta(reaper.CreateTrackAudioAccessor, {"track"}, "Create an audio accessor object for this track.\nMust only call from the main thread.\nSee CreateTakeAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged,\nGetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.")
add_meta(reaper.CreateTrackSend, {"tr", "desttrIn"}, "Create a send/receive (desttrInOptional!=NULL), or a hardware output\n(desttrInOptional==NULL) with default properties, return >=0 on success (== new\nsend/receive index).\nSee RemoveTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value,\nSetTrackSendInfo_Value.")
add_meta(reaper.CSurf_FlushUndo, {"force"}, "call this to force flushing of the undo states after using CSurf_On*Change()")
add_meta(reaper.CSurf_GetTouchState, {"trackid", "isPan"}, nil)
add_meta(reaper.CSurf_GoEnd, {}, nil)
add_meta(reaper.CSurf_GoStart, {}, nil)
add_meta(reaper.CSurf_NumTracks, {"mcpView"}, nil)
add_meta(reaper.CSurf_OnArrow, {"whichdir", "wantzoom"}, nil)
add_meta(reaper.CSurf_OnFwd, {"seekplay"}, nil)
add_meta(reaper.CSurf_OnFXChange, {"trackid", "en"}, nil)
add_meta(reaper.CSurf_OnInputMonitorChange, {"trackid", "monitor"}, nil)
add_meta(reaper.CSurf_OnInputMonitorChangeEx, {"trackid", "monitor", "allowgang"}, nil)
add_meta(reaper.CSurf_OnMuteChange, {"trackid", "mute"}, nil)
add_meta(reaper.CSurf_OnMuteChangeEx, {"trackid", "mute", "allowgang"}, nil)
add_meta(reaper.CSurf_OnPanChange, {"trackid", "pan", "relative"}, nil)
add_meta(reaper.CSurf_OnPanChangeEx, {"trackid", "pan", "relative", "allowGang"}, nil)
add_meta(reaper.CSurf_OnPause, {}, nil)
add_meta(reaper.CSurf_OnPlay, {}, nil)
add_meta(reaper.CSurf_OnPlayRateChange, {"playrate"}, nil)
add_meta(reaper.CSurf_OnRecArmChange, {"trackid", "recarm"}, nil)
add_meta(reaper.CSurf_OnRecArmChangeEx, {"trackid", "recarm", "allowgang"}, nil)
add_meta(reaper.CSurf_OnRecord, {}, nil)
add_meta(reaper.CSurf_OnRecvPanChange, {"trackid", "recv_index", "pan", "relative"}, nil)
add_meta(reaper.CSurf_OnRecvVolumeChange, {"trackid", "recv_index", "volume", "relative"}, nil)
add_meta(reaper.CSurf_OnRew, {"seekplay"}, nil)
add_meta(reaper.CSurf_OnRewFwd, {"seekplay", "dir"}, nil)
add_meta(reaper.CSurf_OnScroll, {"xdir", "ydir"}, nil)
add_meta(reaper.CSurf_OnSelectedChange, {"trackid", "selected"}, nil)
add_meta(reaper.CSurf_OnSendPanChange, {"trackid", "send_index", "pan", "relative"}, nil)
add_meta(reaper.CSurf_OnSendVolumeChange, {"trackid", "send_index", "volume", "relative"}, nil)
add_meta(reaper.CSurf_OnSoloChange, {"trackid", "solo"}, nil)
add_meta(reaper.CSurf_OnSoloChangeEx, {"trackid", "solo", "allowgang"}, nil)
add_meta(reaper.CSurf_OnStop, {}, nil)
add_meta(reaper.CSurf_OnTempoChange, {"bpm"}, nil)
add_meta(reaper.CSurf_OnTrackSelection, {"trackid"}, nil)
add_meta(reaper.CSurf_OnVolumeChange, {"trackid", "volume", "relative"}, nil)
add_meta(reaper.CSurf_OnVolumeChangeEx, {"trackid", "volume", "relative", "allowGang"}, nil)
add_meta(reaper.CSurf_OnWidthChange, {"trackid", "width", "relative"}, nil)
add_meta(reaper.CSurf_OnWidthChangeEx, {"trackid", "width", "relative", "allowGang"}, nil)
add_meta(reaper.CSurf_OnZoom, {"xdir", "ydir"}, nil)
add_meta(reaper.CSurf_ResetAllCachedVolPanStates, {}, nil)
add_meta(reaper.CSurf_ScrubAmt, {"amt"}, nil)
add_meta(reaper.CSurf_SetAutoMode, {"mode", "ignoresurf"}, nil)
add_meta(reaper.CSurf_SetPlayState, {"play", "pause", "rec", "ignoresurf"}, nil)
add_meta(reaper.CSurf_SetRepeatState, {"rep", "ignoresurf"}, nil)
add_meta(reaper.CSurf_SetSurfaceMute, {"trackid", "mute", "ignoresurf"}, nil)
add_meta(reaper.CSurf_SetSurfacePan, {"trackid", "pan", "ignoresurf"}, nil)
add_meta(reaper.CSurf_SetSurfaceRecArm, {"trackid", "recarm", "ignoresurf"}, nil)
add_meta(reaper.CSurf_SetSurfaceSelected, {"trackid", "selected", "ignoresurf"}, nil)
add_meta(reaper.CSurf_SetSurfaceSolo, {"trackid", "solo", "ignoresurf"}, nil)
add_meta(reaper.CSurf_SetSurfaceVolume, {"trackid", "volume", "ignoresurf"}, nil)
add_meta(reaper.CSurf_SetTrackListChange, {}, nil)
add_meta(reaper.CSurf_TrackFromID, {"idx", "mcpView"}, nil)
add_meta(reaper.CSurf_TrackToID, {"track", "mcpView"}, nil)
add_meta(reaper.DB2SLIDER, {"x"}, nil)
add_meta(reaper.DeleteActionShortcut, {"section", "cmdID", "shortcutidx"}, "Delete the specific shortcut for the given command ID.\nSee CountActionShortcuts, GetActionShortcutDesc, DoActionShortcutDialog.")
add_meta(reaper.DeleteEnvelopePointEx, {"envelope", "autoitem_idx", "ptidx"}, "Delete an envelope point.\nIf setting multiple points at once, set noSort=true, and call\nEnvelope_SortPoints when done.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on\nthe envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number\nof points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation\nitem, including all loop iterations.\nSee CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx,\nInsertEnvelopePointEx.")
add_meta(reaper.DeleteEnvelopePointRange, {"envelope", "time_start", "time_end"}, "Delete a range of envelope points.\nSee DeleteEnvelopePointRangeEx, DeleteEnvelopePointEx.")
add_meta(reaper.DeleteEnvelopePointRangeEx, {"envelope", "autoitem_idx", "time_start", "time_end"}, "Delete a range of envelope points.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on\nthe envelope, etc.")
add_meta(reaper.DeleteExtState, {"section", "key", "persist"}, "Delete the extended state value for a specific section and key.\npersist=true means the value should remain deleted the next time REAPER is\nopened.\nSee SetExtState, GetExtState, HasExtState.")
add_meta(reaper.DeleteProjectMarker, {"proj", "markrgnindexnumber", "isrgn"}, "Delete a marker.\nproj==NULL for the active project.")
add_meta(reaper.DeleteProjectMarkerByIndex, {"proj", "markrgnidx"}, "Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first\nmarker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than\nrepresenting the displayed marker/region ID number (see SetProjectMarker4).")
add_meta(reaper.DeleteTakeMarker, {"take", "idx"}, "Delete a take marker.\nNote that idx will change for all following take markers.\nSee GetNumTakeMarkers, GetTakeMarker, SetTakeMarker")
add_meta(reaper.DeleteTakeStretchMarkers, {"take", "idx", "countIn"}, "Deletes one or more stretch markers.\nReturns number of stretch markers deleted.")
add_meta(reaper.DeleteTempoTimeSigMarker, {"project", "markerindex"}, "Delete a tempo/time signature marker.")
add_meta(reaper.DeleteTrack, {"tr"}, "deletes a track")
add_meta(reaper.DeleteTrackMediaItem, {"tr", "it"}, nil)
add_meta(reaper.DestroyAudioAccessor, {"accessor"}, "Destroy an audio accessor.\nMust only call from the main thread.\nSee CreateTakeAudioAccessor, CreateTrackAudioAccessor,\nAudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime,\nGetAudioAccessorSamples.")
add_meta(reaper.DoActionShortcutDialog, {"hwnd", "section", "cmdID", "shortcutidx"}, "Open the action shortcut dialog to edit or add a shortcut for the given command\nID.\nIf (shortcutidx >= 0 && shortcutidx < CountActionShortcuts()), that specific\nshortcut will be replaced, otherwise a new shortcut will be added.\nSee CountActionShortcuts, GetActionShortcutDesc, DeleteActionShortcut.")
add_meta(reaper.Dock_UpdateDockID, {"ident_str", "whichDock"}, "updates preference for docker window ident_str to be in dock whichDock on next\nopen")
add_meta(reaper.DockGetPosition, {"whichDock"}, "-1=not found, 0=bottom, 1=left, 2=top, 3=right, 4=floating")
add_meta(reaper.DockIsChildOfDock, {"hwnd"}, "returns dock index that contains hwnd, or -1")
add_meta(reaper.DockWindowActivate, {"hwnd"}, nil)
add_meta(reaper.DockWindowAdd, {"hwnd", "name", "pos", "allowShow"}, nil)
add_meta(reaper.DockWindowAddEx, {"hwnd", "name", "identstr", "allowShow"}, nil)
add_meta(reaper.DockWindowRefresh, {}, nil)
add_meta(reaper.DockWindowRefreshForHWND, {"hwnd"}, nil)
add_meta(reaper.DockWindowRemove, {"hwnd"}, nil)
add_meta(reaper.EditTempoTimeSigMarker, {"project", "markerindex"}, "Open the tempo/time signature marker editor dialog.")
add_meta(reaper.EnsureNotCompletelyOffscreen, {"integerr.left", "integerr.top", "integerr.right", "integerr.bot"}, "call with a saved window rect for your window and it'll correct any positioning\ninfo.")
add_meta(reaper.EnumerateFiles, {"path", "fileindex"}, "List the files in the \"path\" directory.\nReturns NULL/nil when all files have been listed.\nUse fileindex = -1 to force re-read of directory (invalidate cache).\nSee EnumerateSubdirectories")
add_meta(reaper.EnumerateSubdirectories, {"path", "subdirindex"}, "List the subdirectories in the \"path\" directory.\nUse subdirindex = -1 to force re-read of directory (invalidate cache).\nReturns NULL/nil when all subdirectories have been listed.\nSee EnumerateFiles")
add_meta(reaper.EnumInstalledFX, {"index"}, "Enumerates installed FX.\nReturns true if successful, sets nameOut and identOut to name and ident of FX at\nindex.")
add_meta(reaper.EnumPitchShiftModes, {"mode"}, "Start querying modes at 0, returns FALSE when no more modes possible, sets\nstrOut to NULL if a mode is currently unsupported")
add_meta(reaper.EnumPitchShiftSubModes, {"mode", "submode"}, "Returns submode name, or NULL")
add_meta(reaper.EnumProjectMarkers, {"idx"}, nil)
add_meta(reaper.EnumProjectMarkers2, {"proj", "idx"}, nil)
add_meta(reaper.EnumProjectMarkers3, {"proj", "idx"}, nil)
add_meta(reaper.EnumProjects, {"idx"}, "idx=-1 for current project,projfn can be NULL if not interested in filename.\nuse idx 0x40000000 for currently rendering project, if any.")
add_meta(reaper.EnumProjExtState, {"proj", "extname", "idx"}, "Enumerate the data stored with the project for a specific extname.\nReturns false when there is no more data.\nSee SetProjExtState, GetProjExtState.")
add_meta(reaper.EnumRegionRenderMatrix, {"proj", "regionindex", "rendertrack"}, "Enumerate which tracks will be rendered within this region when using the region\nrender matrix.\nWhen called with rendertrack==0, the function returns the first track that will\nbe rendered (which may be the master track); rendertrack==1 will return the next\ntrack rendered, and so on.\nThe function returns NULL when there are no more tracks that will be rendered\nwithin this region.")
add_meta(reaper.EnumTrackMIDIProgramNames, {"track", "programNumber", "programName"}, "returns false if there are no plugins on the track that support MIDI programs,or\nif all programs have been enumerated")
add_meta(reaper.EnumTrackMIDIProgramNamesEx, {"proj", "track", "programNumber", "programName"}, "returns false if there are no plugins on the track that support MIDI programs,or\nif all programs have been enumerated")
add_meta(reaper.Envelope_Evaluate, {"envelope", "time", "samplerate", "samplesRequested"}, "Get the effective envelope value at a given time position.\nsamplesRequested is how long the caller expects until the next call to\nEnvelope_Evaluate (often, the buffer block size).\nThe return value is how many samples beyond that time position that the returned\nvalues are valid.\ndVdS is the change in value per sample (first derivative), ddVdS is the second\nderivative, dddVdS is the third derivative.\nSee GetEnvelopeScalingMode.")
add_meta(reaper.Envelope_FormatValue, {"env", "value"}, "Formats the value of an envelope to a user-readable form")
add_meta(reaper.Envelope_GetParentTake, {"env"}, "If take envelope, gets the take from the envelope.\nIf FX, indexOut set to FX index, index2Out set to parameter index, otherwise -1.")
add_meta(reaper.Envelope_GetParentTrack, {"env"}, "If track envelope, gets the track from the envelope.\nIf FX, indexOut set to FX index, index2Out set to parameter index, otherwise -1.")
add_meta(reaper.Envelope_SortPoints, {"envelope"}, "Sort envelope points by time.\nSee SetEnvelopePoint, InsertEnvelopePoint.")
add_meta(reaper.Envelope_SortPointsEx, {"envelope", "autoitem_idx"}, "Sort envelope points by time.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on\nthe envelope, etc.\nSee SetEnvelopePoint, InsertEnvelopePoint.")
add_meta(reaper.ExecProcess, {"cmdline", "timeoutmsec"}, "Executes command line, returns NULL on total failure, otherwise the return\nvalue, a newline, and then the output of the command.\nIf timeoutmsec is 0, command will be allowed to run indefinitely (recommended\nfor large amounts of returned output).\ntimeoutmsec is -1 for no wait/terminate, -2 for no wait and minimize")
add_meta(reaper.file_exists, {"path"}, "returns true if path points to a valid, readable file")
add_meta(reaper.FindTempoTimeSigMarker, {"project", "time"}, "Find the tempo/time signature marker that falls at or before this time position\n(the marker that is in effect as of this time position).")
add_meta(reaper.format_timestr, {"tpos", "buf"}, "Format tpos (which is time in seconds) as hh:mm:ss.sss.\nSee format_timestr_pos, format_timestr_len.")
add_meta(reaper.format_timestr_len, {"tpos", "buf", "offset", "modeoverride"}, "time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f\noffset is start of where the length will be calculated from")
add_meta(reaper.format_timestr_pos, {"tpos", "buf", "modeoverride"}, "time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f")
add_meta(reaper.genGuid, {"gGUID"}, nil)
add_meta(reaper.get_config_var_string, {"name"}, "gets ini configuration variable value as string")
add_meta(reaper.get_ini_file, {}, "Get reaper.ini full filename.")
add_meta(reaper.GetActionShortcutDesc, {"section", "cmdID", "shortcutidx"}, "Get the text description of a specific shortcut for the given command ID.\nSee CountActionShortcuts,DeleteActionShortcut,DoActionShortcutDialog.")
add_meta(reaper.GetActiveTake, {"item"}, "get the active take in this item")
add_meta(reaper.GetAllProjectPlayStates, {"ignoreProject"}, "returns the bitwise OR of all project play states (1=playing, 2=pause,\n4=recording)")
add_meta(reaper.GetAppVersion, {}, "Returns app version which may include an OS/arch signifier, such as: \"6.17\"\n(windows 32-bit), \"6.17/x64\" (windows 64-bit), \"6.17/OSX64\" (macOS 64-bit\nIntel), \"6.17/OSX\" (macOS 32-bit), \"6.17/macOS-arm64\", \"6.17/linux-x86_64\",\n\"6.17/linux-i686\", \"6.17/linux-aarch64\", \"6.17/linux-armv7l\", etc")
add_meta(reaper.GetArmedCommand, {}, "gets the currently armed command and section name (returns 0 if nothing armed).\nsection name is empty-string for main section.")
add_meta(reaper.GetAudioAccessorEndTime, {"accessor"}, "Get the end time of the audio that can be returned from this accessor.\nSee CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor,\nAudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorSamples.")
add_meta(reaper.GetAudioAccessorHash, {"accessor", "hashNeed128"}, "Deprecated.\nSee AudioAccessorStateChanged instead.")
add_meta(reaper.GetAudioAccessorSamples, {"accessor", "samplerate", "numchannels", "starttime_sec", "numsamplesperchannel", "samplebuffer"}, "Get a block of samples from the audio accessor.\nSamples are extracted immediately pre-FX, and returned interleaved (first sample\nof first channel, first sample of second channel...).\nReturns 0 if no audio, 1 if audio, -1 on error.\nSee CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor,\nAudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime.\nThis function has special handling in Python, and only returns two objects, the\nAPI function return value, and the sample buffer.\nExample usage:")
add_meta(reaper.GetAudioAccessorStartTime, {"accessor"}, "Get the start time of the audio that can be returned from this accessor.\nSee CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor,\nAudioAccessorStateChanged, GetAudioAccessorEndTime, GetAudioAccessorSamples.")
add_meta(reaper.GetAudioDeviceInfo, {"attribute"}, "get information about the currently open audio device.\nattribute can be MODE, IDENT_IN, IDENT_OUT, BSIZE, SRATE, BPS.\nreturns false if unknown attribute or device not open.")
add_meta(reaper.GetConfigWantsDock, {"ident_str"}, "gets the dock ID desired by ident_str, if any")
add_meta(reaper.GetCurrentProjectInLoadSave, {}, "returns current project if in load/save (usually only used from\nproject_config_extension_t)")
add_meta(reaper.GetCursorContext, {}, "return the current cursor context: 0 if track panels, 1 if items, 2 if\nenvelopes, otherwise unknown")
add_meta(reaper.GetCursorContext2, {"want_last_valid"}, "0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when\nwant_last_valid is true)")
add_meta(reaper.GetCursorPosition, {}, "edit cursor position")
add_meta(reaper.GetCursorPositionEx, {"proj"}, "edit cursor position")
add_meta(reaper.GetDisplayedMediaItemColor, {"item"}, "see GetDisplayedMediaItemColor2.")
add_meta(reaper.GetDisplayedMediaItemColor2, {"item", "take"}, "Returns the custom take, item, or track color that is used (according to the\nuser preference) to color the media item.\nThe returned color is OS dependent|0x01000000 (i.e.\nColorToNative(r,g,b)|0x01000000), so a return of zero means \"no color\", not\nblack.")
add_meta(reaper.GetEnvelopeInfo_Value, {"env", "parmname"}, "Gets an envelope numerical-value attribute:\nI_TCPY : int : Y offset of envelope relative to parent track (may be separate\nlane or overlap with track contents)\nI_TCPH : int : visible height of envelope\nI_TCPY_USED : int : Y offset of envelope relative to parent track, exclusive of\npadding\nI_TCPH_USED : int : visible height of envelope, exclusive of padding\nP_TRACK : MediaTrack * : parent track pointer (if any)\nP_DESTTRACK : MediaTrack * : destination track pointer, if on a send\nP_ITEM : MediaItem * : parent item pointer (if any)\nP_TAKE : MediaItem_Take * : parent take pointer (if any)\nI_SEND_IDX : int : 1-based index of send in P_TRACK, or 0 if not a send\nI_HWOUT_IDX : int : 1-based index of hardware output in P_TRACK or 0 if not a\nhardware output\nI_RECV_IDX : int : 1-based index of receive in P_DESTTRACK or 0 if not a\nsend/receive")
add_meta(reaper.GetEnvelopeName, {"env"}, nil)
add_meta(reaper.GetEnvelopePoint, {"envelope", "ptidx"}, "Get the attributes of an envelope point.\nSee GetEnvelopePointEx.")
add_meta(reaper.GetEnvelopePointByTime, {"envelope", "time"}, "Returns the envelope point at or immediately prior to the given time position.\nSee GetEnvelopePointByTimeEx.")
add_meta(reaper.GetEnvelopePointByTimeEx, {"envelope", "autoitem_idx", "time"}, "Returns the envelope point at or immediately prior to the given time position.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on\nthe envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number\nof points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation\nitem, including all loop iterations.\nSee GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx,\nDeleteEnvelopePointEx.")
add_meta(reaper.GetEnvelopePointEx, {"envelope", "autoitem_idx", "ptidx"}, "Get the attributes of an envelope point.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on\nthe envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number\nof points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation\nitem, including all loop iterations.\nSee CountEnvelopePointsEx, SetEnvelopePointEx, InsertEnvelopePointEx,\nDeleteEnvelopePointEx.")
add_meta(reaper.GetEnvelopeScalingMode, {"env"}, "Returns the envelope scaling mode: 0=no scaling, 1=fader scaling.\nAll API functions deal with raw envelope point values, to convert raw from/to\nscaled values see ScaleFromEnvelopeMode, ScaleToEnvelopeMode.")
add_meta(reaper.GetEnvelopeStateChunk, {"env", "str", "isundo"}, "Gets the RPPXML state of an envelope, returns true if successful.\nUndo flag is a performance/caching hint.")
add_meta(reaper.GetEnvelopeUIState, {"env"}, "gets information on the UI state of an envelope: returns &1 if\nautomation/modulation is playing back, &2 if automation is being actively\nwritten, &4 if the envelope recently had an effective automation mode change")
add_meta(reaper.GetExePath, {}, "returns path of REAPER.exe (not including EXE), i.e.\nC:\\Program Files\\REAPER")
add_meta(reaper.GetExtState, {"section", "key"}, "Get the extended state value for a specific section and key.\nSee SetExtState, DeleteExtState, HasExtState.")
add_meta(reaper.GetFocusedFX, {}, "This function is deprecated (returns GetFocusedFX2()&3), see\nGetTouchedOrFocusedFX.")
add_meta(reaper.GetFocusedFX2, {}, "Return value has 1 set if track FX, 2 if take/item FX, 4 set if FX is no longer\nfocused but still open.\ntracknumber==0 means the master track, 1 means track 1, etc.\nitemnumber is zero-based (or -1 if not an item).\nFor interpretation of fxnumber, see GetLastTouchedFX.\nDeprecated, see GetTouchedOrFocusedFX")
add_meta(reaper.GetFreeDiskSpaceForRecordPath, {"proj", "pathidx"}, "returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate.")
add_meta(reaper.GetFXEnvelope, {"track", "fxindex", "parameterindex", "create"}, "Returns the FX parameter envelope.\nIf the envelope does not exist and create=true, the envelope will be created.\nIf the envelope already exists and is bypassed and create=true, then the\nenvelope will be unbypassed.")
add_meta(reaper.GetGlobalAutomationOverride, {}, "return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass")
add_meta(reaper.GetHZoomLevel, {}, "returns pixels/second")
add_meta(reaper.GetInputActivityLevel, {"input_id"}, "returns approximate input level if available, 0-511 mono inputs, |1024 for\nstereo pairs, 4096+devidx*32 for MIDI devices")
add_meta(reaper.GetInputChannelName, {"channelIndex"}, nil)
add_meta(reaper.GetInputOutputLatency, {}, "Gets the audio device input/output latency in samples")
add_meta(reaper.GetItemEditingTime2, {}, "returns time of relevant edit, set which_item to the pcm_source (if applicable),\nflags (if specified) will be set to 1 for edge resizing, 2 for fade change, 4\nfor item move, 8 for item slip edit (edit cursor time or start of item)")
add_meta(reaper.GetItemFromPoint, {"screen_x", "screen_y", "allow_locked"}, "Returns the first item at the screen coordinates specified.\nIf allow_locked is false, locked items are ignored.\nIf takeOutOptional specified, returns the take hit.\nSee GetThingFromPoint.")
add_meta(reaper.GetItemProjectContext, {"item"}, nil)
add_meta(reaper.GetItemStateChunk, {"item", "str", "isundo"}, "Gets the RPPXML state of an item, returns true if successful.\nUndo flag is a performance/caching hint.")
add_meta(reaper.GetLastColorThemeFile, {}, nil)
add_meta(reaper.GetLastMarkerAndCurRegion, {"proj", "time"}, "Get the last project marker before time, and/or the project region that includes\ntime.\nmarkeridx and regionidx are returned not necessarily as the displayed\nmarker/region index, but as the index that can be passed to EnumProjectMarkers.\nEither or both of markeridx and regionidx may be NULL.\nSee EnumProjectMarkers.")
add_meta(reaper.GetLastTouchedFX, {}, "Returns true if the last touched FX parameter is valid, false otherwise.\nThe low word of tracknumber is the 1-based track index -- 0 means the master\ntrack, 1 means track 1, etc.\nIf the high word of tracknumber is nonzero, it refers to the 1-based item index\n(1 is the first item on the track, etc).\nFor track FX, the low 24 bits of fxnumber refer to the FX index in the chain,\nand if the next 8 bits are 01, then the FX is record FX.\nFor item FX, the low word defines the FX index in the chain, and the high word\ndefines the take number.\nDeprecated, see GetTouchedOrFocusedFX.")
add_meta(reaper.GetLastTouchedTrack, {}, nil)
add_meta(reaper.GetMainHwnd, {}, nil)
add_meta(reaper.GetMasterMuteSoloFlags, {}, "&1=master mute,&2=master solo.\nThis is deprecated as you can just query the master track as well.")
add_meta(reaper.GetMasterTrack, {"proj"}, nil)
add_meta(reaper.GetMasterTrackVisibility, {}, "returns &1 if the master track is visible in the TCP, &2 if NOT visible in the\nmixer.\nSee SetMasterTrackVisibility.")
add_meta(reaper.GetMaxMidiInputs, {}, "returns max dev for midi inputs/outputs")
add_meta(reaper.GetMaxMidiOutputs, {}, nil)
add_meta(reaper.GetMediaFileMetadata, {"mediaSource", "identifier"}, "Get text-based metadata from a media file for a given identifier.\nCall with identifier=\"\" to list all identifiers contained in the file, separated\nby newlines.\nMay return \"[Binary data]\" for metadata that REAPER doesn't handle.")
add_meta(reaper.GetMediaItem, {"proj", "itemidx"}, "get an item from a project by item count (zero-based) (proj=0 for active\nproject)")
add_meta(reaper.GetMediaItem_Track, {"item"}, "Get parent track of media item")
add_meta(reaper.GetMediaItemInfo_Value, {"item", "parmname"}, "Get media item numerical-value attributes.\nB_MUTE : bool * : muted (item solo overrides).\nsetting this value will clear C_MUTE_SOLO.\nB_MUTE_ACTUAL : bool * : muted (ignores solo).\nsetting this value will not affect C_MUTE_SOLO.\nC_LANEPLAYS : char * : in fixed lane tracks, 0=this item lane does not play,\n1=this item lane plays exclusively, 2=this item lane plays and other lanes also\nplay, -1=this item is on a non-visible, non-playing lane on a non-fixed-lane\ntrack (read-only)\nC_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed).\nnote that this API does not automatically unsolo other items when soloing (nor\nclear the unsolos when clearing the last soloed item), it must be done by the\ncaller via action or via this API.\nB_LOOPSRC : bool * : loop source\nB_ALLTAKESPLAY : bool * : all takes play\nB_UISEL : bool * : selected in arrange view\nC_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats\n(position, length, rate), 2=beats (position only).\nfor auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1\nC_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled,\nrequires C_BEATATTACHMODE=1\nC_LOCK : char * : locked, &1=locked\nD_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_POSITION : double * : item position in seconds\nD_LENGTH : double * : item length in seconds\nD_SNAPOFFSET : double * : item snap offset in seconds\nD_FADEINLEN : double * : item manual fadein length in seconds\nD_FADEOUTLEN : double * : item manual fadeout length in seconds\nD_FADEINDIR : double * : item fadein curvature, -1..1\nD_FADEOUTDIR : double * : item fadeout curvature, -1..1\nD_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no\nauto-fadein\nD_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no\nauto-fadeout\nC_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear\nC_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear\nI_GROUPID : int * : group ID, 0=no group\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e.\nColorToNative(r,g,b)|0x1000000).\nIf you do not |0x1000000, then it will not be used, but will store the color\nI_CURTAKE : int * : active take number\nIP_ITEMNUMBER : int : item number on this track (read-only, returns the item\nnumber directly)\nF_FREEMODE_Y : float * : free item positioning or fixed lane Y-position.\n0=top of track, 1.0=bottom of track\nF_FREEMODE_H : float * : free item positioning or fixed lane height.\n0.5=half the track height, 1.0=full track height\nI_FIXEDLANE : int * : fixed lane of item (fine to call with setNewValue, but\nreturned value is read-only)\nB_FIXEDLANE_HIDDEN : bool * : true if displaying only one fixed lane and this\nitem is in a different lane (read-only)\nP_TRACK : MediaTrack * : (read-only)")
add_meta(reaper.GetMediaItemNumTakes, {"item"}, nil)
add_meta(reaper.GetMediaItemTake, {"item", "tk"}, nil)
add_meta(reaper.GetMediaItemTake_Item, {"take"}, "Get parent item of media item take")
add_meta(reaper.GetMediaItemTake_Peaks, {"take", "peakrate", "starttime", "numchannels", "numsamplesperchannel", "want_extra_type", "buf"}, "Gets block of peak samples to buf.\nNote that the peak samples are interleaved, but in two or three blocks\n(maximums, then minimums, then extra).\nReturn value has 20 bits of returned sample count, then 4 bits of output_mode\n(0xf00000), then a bit to signify whether extra_type was available (0x1000000).\nextra_type can be 115 ('s') for spectral information, which will return peak\nsamples as integers with the low 15 bits frequency, next 14 bits tonality.")
add_meta(reaper.GetMediaItemTake_Source, {"take"}, "Get media source of media item take")
add_meta(reaper.GetMediaItemTake_Track, {"take"}, "Get parent track of media item take")
add_meta(reaper.GetMediaItemTakeByGUID, {"project", "guidGUID"}, nil)
add_meta(reaper.GetMediaItemTakeInfo_Value, {"take", "parmname"}, "Get media item take numerical-value attributes.\nD_STARTOFFS : double * : start offset in source media, in seconds\nD_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative\nif take polarity is flipped\nD_PAN : double * : take pan, -1..1\nD_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc\nD_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double\nspeed, etc\nD_PITCH : double * : take pitch adjustment in semitones, -12=one octave down,\n0=normal, +12=one octave up, etc\nB_PPITCH : bool * : preserve pitch when changing playback rate\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix,\n3=left, 4=right\nI_PITCHMODE : int * : pitch shifter mode, -1=project default, otherwise high 2\nbytes=shifter, low 2 bytes=parameter\nI_STRETCHFLAGS : int * : stretch marker flags (&7 mask for mode override:\n0=default, 1=balanced, 2/3/6=tonal, 4=transient, 5=no pre-echo)\nF_STRETCHFADESIZE : float * : stretch marker fade size in seconds (0.0025\ndefault)\nI_RECPASSID : int * : record pass ID\nI_TAKEFX_NCH : int * : number of internal audio channels for per-take FX to use\n(OK to call with setNewValue, but the returned value is read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e.\nColorToNative(r,g,b)|0x1000000).\nIf you do not |0x1000000, then it will not be used, but will store the color\nIP_TAKENUMBER : int : take number (read-only, returns the take number directly)\nP_TRACK : pointer to MediaTrack (read-only)\nP_ITEM : pointer to MediaItem (read-only)\nP_SOURCE : PCM_source *.\nNote that if setting this, you should first retrieve the old source, set the\nnew, THEN delete the old.")
add_meta(reaper.GetMediaItemTrack, {"item"}, nil)
add_meta(reaper.GetMediaSourceFileName, {"source"}, "Copies the media source filename to filenamebuf.\nNote that in-project MIDI media sources have no associated filename.\nSee GetMediaSourceParent.")
add_meta(reaper.GetMediaSourceLength, {"source"}, "Returns the length of the source media.\nIf the media source is beat-based, the length will be in quarter notes,\notherwise it will be in seconds.")
add_meta(reaper.GetMediaSourceNumChannels, {"source"}, "Returns the number of channels in the source media.")
add_meta(reaper.GetMediaSourceParent, {"src"}, "Returns the parent source, or NULL if src is the root source.\nThis can be used to retrieve the parent properties of sections or reversed\nsources for example.")
add_meta(reaper.GetMediaSourceSampleRate, {"source"}, "Returns the sample rate.\nMIDI source media will return zero.")
add_meta(reaper.GetMediaSourceType, {"source"}, "copies the media source type (\"WAV\", \"MIDI\", etc) to typebuf")
add_meta(reaper.GetMediaTrackInfo_Value, {"tr", "parmname"}, "Get track numerical-value attributes.\nB_MUTE : bool * : muted\nB_PHASE : bool * : track phase inverted\nB_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread\nplayback state, read-only)\nIP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track\n(read-only, returns the int directly)\nI_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe\nsoloed, 6=safe soloed in place\nB_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is\nnot muted, this track acts soloed\nI_FXEN : int * : fx enabled, 0=bypassed, !0=fx active\nI_RECARM : int * : record armed, 0=not record armed, 1=record armed\nI_RECINPUT : int * : record input, <0=no input.\nif 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only\nchan), next 6 bits represent physical input (63=all, 62=VKB).\nIf 4096 is not set, low 10 bits (0..1023) are input start channel\n(ReaRoute/Loopback start at 512).\nIf 2048 is set, input is multichannel input (using track channel count), or if\n1024 is set, input is stereo input, otherwise input is mono.\nI_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out\nw/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency\ncompensation, 7=midi overdub, 8=midi replace\nI_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post\nfader, 1=pre-fx, 2=post-fx/pre-fader)\nI_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape\nstyle)\nI_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on\nB_AUTO_RECARM : bool * : automatically set record arm when selected (does not\nimmediately affect recarm state, script should set directly if desired)\nI_VUMODE : int * : track vu mode, &1:disabled, &30==0:stereo peaks,\n&30==2:multichannel peaks, &30==4:stereo RMS, &30==8:combined RMS,\n&30==12:LUFS-M, &30==16:LUFS-S (readout=max), &30==20:LUFS-S (readout=current),\n&32:LUFS calculation on channels 1+2 only\nI_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch,\n3=write, 4=latch\nI_NCHAN : int * : number of track channels, 2-128, even numbers only\nI_SELECTED : int * : track selected, 0=unselected, 1=selected\nI_WNDH : int * : current TCP window height in pixels including envelopes\n(read-only)\nI_TCPH : int * : current TCP window height in pixels not including envelopes\n(read-only)\nI_TCPY : int * : current TCP window Y-position in pixels relative to top of\narrange view (read-only)\nI_MCPX : int * : current MCP X-position in pixels relative to mixer container\n(read-only)\nI_MCPY : int * : current MCP Y-position in pixels relative to mixer container\n(read-only)\nI_MCPW : int * : current MCP width in pixels (read-only)\nI_MCPH : int * : current MCP height in pixels (read-only)\nI_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder\nparent, -1=track is the last in the innermost folder, -2=track is the last in\nthe innermost and next-innermost folders, etc\nI_FOLDERCOMPACT : int * : folder collapsed state (only valid on folders),\n0=normal, 1=collapsed, 2=fully collapsed\nI_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits\nare which channels (0=all, 1-16), next 5 bits are output device index (0-31)\nI_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no\nanticipative FX\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e.\nColorToNative(r,g,b)|0x1000000).\nIf you do not |0x1000000, then it will not be used, but will store the color\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none,\notherwise size in pixels\nI_SPACER : int * : 1=TCP track spacer above this trackB_HEIGHTLOCK : bool * :\ntrack height lock (must set I_HEIGHTOVERRIDE before locking)\nD_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_PAN : double * : trim pan of track, -1..1\nD_WIDTH : double * : width of track, -1..1\nD_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6\nD_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6\nI_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual\npan\nD_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB,\n0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain\ncompensation, etc\nI_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with\ndeprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid\ntaper\nP_ENV:<envchunkname or P_ENV:{GUID...\n: TrackEnvelope * : (read-only) chunkname can be <VOLENV, <PANENV, etc; GUID is\nthe stringified envelope GUID.\nB_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on\nmaster track)\nB_SHOWINTCP : bool * : track control panel visible in arrange view (do not use\non master track)\nB_MAINSEND : bool * : track sends audio to parent\nC_MAINSEND_OFFS : char * : channel offset of track send to parent\nC_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child\ntrack channels, 1=use one channel only)\nI_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes\nenabled (call UpdateTimeline() after changing)\nI_NUMFIXEDLANES : int * : number of track fixed lanes (fine to call with\nsetNewValue, but returned value is read-only)\nC_LANESCOLLAPSED : char * : fixed lane collapse state (1=lanes collapsed,\n2=track displays as non-fixed-lanes but hidden lanes exist)\nC_LANEPLAYS:N : char * :  on fixed lane tracks, 0=lane N does not play, 1=lane N\nplays exclusively, 2=lane N plays and other lanes also play (fine to call with\nsetNewValue, but returned value is read-only)\nC_ALLLANESPLAY : char * : on fixed lane tracks, 0=no lanes play, 1=all lanes\nplay, 2=some lanes play (fine to call with setNewValue 0 or 1, but returned\nvalue is read-only)\nC_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats\n(position, length, rate), 2=beats (position only)\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed,\n1=maximum allowed)\nF_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum\nallowed, 1=maximum allowed)\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send\ntotal area (0=minimum allowed, 1=maximum allowed)\nF_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are\nembedded (0=min allowed, default, 1=max allowed)\nI_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed,\n&2=offset value is measured in samples (otherwise measured in seconds)\nD_PLAY_OFFSET : double * : track media playback offset, units depend on\nI_PLAY_OFFSET_FLAG\nP_PARTRACK : MediaTrack * : parent track (read-only)\nP_PROJECT : ReaProject * : parent project (read-only)")
add_meta(reaper.GetMIDIInputName, {"dev", "nameout"}, "returns true if device present")
add_meta(reaper.GetMIDIOutputName, {"dev", "nameout"}, "returns true if device present")
add_meta(reaper.GetMixerScroll, {}, "Get the leftmost track visible in the mixer")
add_meta(reaper.GetMouseModifier, {"context", "modifier_flag"}, "Get the current mouse modifier assignment for a specific modifier key\nassignment, in a specific context.\naction will be filled in with the command ID number for a built-in mouse\nmodifier\nor built-in REAPER command ID, or the custom action ID string.\nNote: the action string may have a space and 'c' or 'm' appended to it to\nspecify command ID vs mouse modifier ID.\nSee SetMouseModifier for more information.")
add_meta(reaper.GetMousePosition, {}, "get mouse position in screen coordinates")
add_meta(reaper.GetNumAudioInputs, {}, "Return number of normal audio hardware inputs available")
add_meta(reaper.GetNumAudioOutputs, {}, "Return number of normal audio hardware outputs available")
add_meta(reaper.GetNumMIDIInputs, {}, "returns max number of real midi hardware inputs")
add_meta(reaper.GetNumMIDIOutputs, {}, "returns max number of real midi hardware outputs")
add_meta(reaper.GetNumTakeMarkers, {"take"}, "Returns number of take markers.\nSee GetTakeMarker, SetTakeMarker, DeleteTakeMarker")
add_meta(reaper.GetNumTracks, {}, nil)
add_meta(reaper.GetOS, {}, "Returns \"Win32\", \"Win64\", \"OSX32\", \"OSX64\", \"macOS-arm64\", or \"Other\".")
add_meta(reaper.GetOutputChannelName, {"channelIndex"}, nil)
add_meta(reaper.GetOutputLatency, {}, "returns output latency in seconds")
add_meta(reaper.GetParentTrack, {"track"}, nil)
add_meta(reaper.GetPeakFileName, {"fn"}, "get the peak file name for a given file (can be either filename.reapeaks,or a\nhashed filename in another path)")
add_meta(reaper.GetPeakFileNameEx, {"fn", "buf", "forWrite"}, "get the peak file name for a given file (can be either filename.reapeaks,or a\nhashed filename in another path)")
add_meta(reaper.GetPeakFileNameEx2, {"fn", "buf", "forWrite", "peaksfileextension"}, "Like GetPeakFileNameEx, but you can specify peaksfileextension such as\n\".reapeaks\"")
add_meta(reaper.GetPlayPosition, {}, "returns latency-compensated actual-what-you-hear position")
add_meta(reaper.GetPlayPosition2, {}, "returns position of next audio block being processed")
add_meta(reaper.GetPlayPosition2Ex, {"proj"}, "returns position of next audio block being processed")
add_meta(reaper.GetPlayPositionEx, {"proj"}, "returns latency-compensated actual-what-you-hear position")
add_meta(reaper.GetPlayState, {}, "&1=playing, &2=paused, &4=is recording")
add_meta(reaper.GetPlayStateEx, {"proj"}, "&1=playing, &2=paused, &4=is recording")
add_meta(reaper.GetProjectLength, {"proj"}, "returns length of project (maximum of end of media item, markers, end of\nregions, tempo map")
add_meta(reaper.GetProjectName, {"proj"}, nil)
add_meta(reaper.GetProjectPath, {}, "Get the project recording path.")
add_meta(reaper.GetProjectPathEx, {"proj"}, "Get the project recording path.")
add_meta(reaper.GetProjectStateChangeCount, {"proj"}, "returns an integer that changes when the project state changes")
add_meta(reaper.GetProjectTimeOffset, {"proj", "rndframe"}, "Gets project time offset in seconds (project settings - project start time).\nIf rndframe is true, the offset is rounded to a multiple of the project frame\nsize.")
add_meta(reaper.GetProjectTimeSignature, {}, "deprecated")
add_meta(reaper.GetProjectTimeSignature2, {"proj"}, "Gets basic time signature (beats per minute, numerator of time signature in bpi)\nthis does not reflect tempo envelopes but is purely what is set in the project\nsettings.")
add_meta(reaper.GetProjExtState, {"proj", "extname", "key"}, "Get the value previously associated with this extname and key, the last time the\nproject was saved.\nSee SetProjExtState, EnumProjExtState.")
add_meta(reaper.GetResourcePath, {}, "returns path where ini files are stored, other things are in subdirectories.")
add_meta(reaper.GetSelectedEnvelope, {"proj"}, "get the currently selected envelope, returns NULL/nil if no envelope is selected")
add_meta(reaper.GetSelectedMediaItem, {"proj", "selitem"}, "get a selected item by selected item count (zero-based) (proj=0 for active\nproject)")
add_meta(reaper.GetSelectedTrack, {"proj", "seltrackidx"}, "Get a selected track from a project (proj=0 for active project) by selected\ntrack count (zero-based).\nThis function ignores the master track, see GetSelectedTrack2.")
add_meta(reaper.GetSelectedTrack2, {"proj", "seltrackidx", "wantmaster"}, "Get a selected track from a project (proj=0 for active project) by selected\ntrack count (zero-based).")
add_meta(reaper.GetSelectedTrackEnvelope, {"proj"}, "get the currently selected track envelope, returns NULL/nil if no envelope is\nselected")
add_meta(reaper.GetSet_ArrangeView2, {"proj", "isSet", "screen_x_start", "screen_x_end", "start_time", "end_time"}, "Gets or sets the arrange view start/end time for screen coordinates.\nuse screen_x_start=screen_x_end=0 to use the full arrange view's start/end time")
add_meta(reaper.GetSet_LoopTimeRange, {"isSet", "isLoop", "start", "end", "allowautoseek"}, nil)
add_meta(reaper.GetSet_LoopTimeRange2, {"proj", "isSet", "isLoop", "start", "end", "allowautoseek"}, nil)
add_meta(reaper.GetSetAutomationItemInfo, {"env", "autoitem_idx", "desc", "value", "is_set"}, "Get or set automation item information.\nautoitem_idx=0 for the first automation item on an envelope, 1 for the second\nitem, etc.\ndesc can be any of the following:\nD_POOL_ID : double * : automation item pool ID (as an integer); edits are\npropagated to all other automation items that share a pool ID\nD_POSITION : double * : automation item timeline position in seconds\nD_LENGTH : double * : automation item length in seconds\nD_STARTOFFS : double * : automation item start offset in seconds\nD_PLAYRATE : double * : automation item playback rate\nD_BASELINE : double * : automation item baseline value in the range [0,1]\nD_AMPLITUDE : double * : automation item amplitude in the range [-1,1]\nD_LOOPSRC : double * : nonzero if the automation item contents are looped\nD_UISEL : double * : nonzero if the automation item is selected in the arrange\nview\nD_POOL_QNLEN : double * : automation item pooled source length in quarter notes\n(setting will affect all pooled instances)")
add_meta(reaper.GetSetAutomationItemInfo_String, {"env", "autoitem_idx", "desc", "valuestrNeedBig", "is_set"}, "Get or set automation item information.\nautoitem_idx=0 for the first automation item on an envelope, 1 for the second\nitem, etc.\nreturns true on success.\ndesc can be any of the following:\nP_POOL_NAME : char * : name of the underlying automation item pool\nP_POOL_EXT:xyz : char * : extension-specific persistent data")
add_meta(reaper.GetSetEnvelopeInfo_String, {"env", "parmname", "stringNeedBig", "setNewValue"}, "Gets/sets an attribute string:\nP_EXT:xyz : char * : extension-specific persistent data\nGUID : GUID * : 16-byte GUID, can query only, not set.\nIf using a _String() function, GUID is a string {xyz-...}.")
add_meta(reaper.GetSetEnvelopeState, {"env", "str"}, "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk")
add_meta(reaper.GetSetEnvelopeState2, {"env", "str", "isundo"}, "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk")
add_meta(reaper.GetSetItemState, {"item", "str"}, "deprecated -- see SetItemStateChunk, GetItemStateChunk")
add_meta(reaper.GetSetItemState2, {"item", "str", "isundo"}, "deprecated -- see SetItemStateChunk, GetItemStateChunk")
add_meta(reaper.GetSetMediaItemInfo_String, {"item", "parmname", "stringNeedBig", "setNewValue"}, "Gets/sets an item attribute string:\nP_NOTES : char * : item note text (do not write to returned pointer, use\nsetNewValue to update)\nP_EXT:xyz : char * : extension-specific persistent data\nGUID : GUID * : 16-byte GUID, can query or update.\nIf using a _String() function, GUID is a string {xyz-...}.")
add_meta(reaper.GetSetMediaItemTakeInfo_String, {"tk", "parmname", "stringNeedBig", "setNewValue"}, "Gets/sets a take attribute string:\nP_NAME : char * : take name\nP_EXT:xyz : char * : extension-specific persistent data\nGUID : GUID * : 16-byte GUID, can query or update.\nIf using a _String() function, GUID is a string {xyz-...}.")
add_meta(reaper.GetSetMediaTrackInfo_String, {"tr", "parmname", "stringNeedBig", "setNewValue"}, "Get or set track string attributes.\nP_NAME : char * : track name (on master returns NULL)\nP_ICON : const char * : track icon (full filename, or relative to\nresource_path/data/track_icons)\nP_LANENAME:n : char * : lane name (returns NULL for non-fixed-lane-tracks)\nP_MCP_LAYOUT : const char * : layout name\nP_RAZOREDITS : const char * : list of razor edit areas, as space-separated\ntriples of start time, end time, and envelope GUID string.\nExample: \"0.0 1.0 \\\"\\\" 0.0 1.0 \"{xyz-...}\"\nP_RAZOREDITS_EXT : const char * : list of razor edit areas, as comma-separated\nsets of space-separated tuples of start time, end time, optional: envelope GUID\nstring, fixed/fipm top y-position, fixed/fipm bottom y-position.\nExample: \"0.0 1.0,0.0 1.0 \"{xyz-...}\",1.0 2.0 \"\" 0.25 0.75\"\nP_TCP_LAYOUT : const char * : layout name\nP_EXT:xyz : char * : extension-specific persistent data\nP_UI_RECT:tcp.mute : char * : read-only, allows querying screen position + size\nof track WALTER elements (tcp.size queries screen position and size of entire\nTCP, etc).\nGUID : GUID * : 16-byte GUID, can query or update.\nIf using a _String() function, GUID is a string {xyz-...}.")
add_meta(reaper.GetSetProjectAuthor, {"proj", "set", "author"}, "deprecated, see GetSetProjectInfo_String with desc=\"PROJECT_AUTHOR\"")
add_meta(reaper.GetSetProjectGrid, {"project", "set", "division", "swingmode", "swingamt"}, "Get or set the arrange view grid division.\n0.25=quarter note, 1.0/3.0=half note triplet, etc.\nswingmode can be 1 for swing enabled, swingamt is -1..1.\nswingmode can be 3 for measure-grid.\nReturns grid configuration flags")
add_meta(reaper.GetSetProjectInfo, {"project", "desc", "value", "is_set"}, "Get or set project information.\nRENDER_SETTINGS : &(1|2)=0:master mix, &1=stems+master mix, &2=stems only,\n&4=multichannel tracks to multichannel files, &8=use render matrix, &16=tracks\nwith only mono media to mono files, &32=selected media items, &64=selected media\nitems via master, &128=selected tracks via master, &256=embed transients if\nformat supports, &512=embed metadata if format supports, &1024=embed take\nmarkers if format supports, &2048=2nd pass render\nRENDER_BOUNDSFLAG : 0=custom time bounds, 1=entire project, 2=time selection,\n3=all project regions, 4=selected media items, 5=selected project regions, 6=all\nproject markers, 7=selected project markers\nRENDER_CHANNELS : number of channels in rendered file\nRENDER_SRATE : sample rate of rendered file (or 0 for project sample rate)\nRENDER_STARTPOS : render start time when RENDER_BOUNDSFLAG=0\nRENDER_ENDPOS : render end time when RENDER_BOUNDSFLAG=0\nRENDER_TAILFLAG : apply render tail setting when rendering: &1=custom time\nbounds, &2=entire project, &4=time selection, &8=all project markers/regions,\n&16=selected media items, &32=selected project markers/regions\nRENDER_TAILMS : tail length in ms to render (only used if RENDER_BOUNDSFLAG and\nRENDER_TAILFLAG are set)\nRENDER_ADDTOPROJ : &1=add rendered files to project, &2=do not render files that\nare likely silent\nRENDER_DITHER : &1=dither, &2=noise shaping, &4=dither stems, &8=noise shaping\non stems\nRENDER_NORMALIZE: &1=enable, (&14==0)=LUFS-I, (&14==2)=RMS, (&14==4)=peak,\n(&14==6)=true peak, (&14==8)=LUFS-M max, (&14==10)=LUFS-S max, &32=normalize\nstems to common gain based on master, &64=enable brickwall limit, &128=brickwall\nlimit true peak, (&2304==256)=only normalize files that are too loud,\n(&2304==2048)=only normalize files that are too quiet, &512=apply fade-in,\n&1024=apply fade-out\nRENDER_NORMALIZE_TARGET: render normalization target as amplitude, so 0.5 means\n-6.02dB, 0.25 means -12.04dB, etc\nRENDER_BRICKWALL: render brickwall limit as amplitude, so 0.5 means -6.02dB,\n0.25 means -12.04dB, etc\nRENDER_FADEIN: render fade-in (0.001 means 1 ms, requires RENDER_NORMALIZE&512)\nRENDER_FADEOUT: render fade-out (0.001 means 1 ms, requires\nRENDER_NORMALIZE&1024)\nRENDER_FADEINSHAPE: render fade-in shape\nRENDER_FADEOUTSHAPE: render fade-out shape\nPROJECT_SRATE : samplerate (ignored unless PROJECT_SRATE_USE set)\nPROJECT_SRATE_USE : set to 1 if project samplerate is used")
add_meta(reaper.GetSetProjectInfo_String, {"project", "desc", "valuestrNeedBig", "is_set"}, "Get or set project information.\nPROJECT_NAME : project file name (read-only, is_set will be ignored)\nPROJECT_TITLE : title field from Project Settings/Notes dialog\nPROJECT_AUTHOR : author field from Project Settings/Notes dialog\nTRACK_GROUP_NAME:X : track group name, X should be 1..64\nMARKER_GUID:X : get the GUID (unique ID) of the marker or region with index X,\nwhere X is the index passed to EnumProjectMarkers, not necessarily the displayed\nnumber (read-only)\nMARKER_INDEX_FROM_GUID:{GUID} : get the GUID index of the marker or region with\nGUID {GUID} (read-only)\nOPENCOPY_CFGIDX : integer for the configuration of format to use when creating\ncopies/applying FX.\n0=wave (auto-depth), 1=APPLYFX_FORMAT, 2=RECORD_FORMAT\nRECORD_PATH : recording directory -- may be blank or a relative path, to get the\neffective path see GetProjectPathEx()\nRECORD_PATH_SECONDARY : secondary recording directory\nRECORD_FORMAT : base64-encoded sink configuration (see project files, etc).\nCallers can also pass a simple 4-byte string (non-base64-encoded), e.g.\n\"evaw\" or \"l3pm\", to use default settings for that sink type.\nAPPLYFX_FORMAT : base64-encoded sink configuration (see project files, etc).\nUsed only if RECFMT_OPENCOPY is set to 1.\nCallers can also pass a simple 4-byte string (non-base64-encoded), e.g.\n\"evaw\" or \"l3pm\", to use default settings for that sink type.\nRENDER_FILE : render directory\nRENDER_PATTERN : render file name (may contain wildcards)\nRENDER_METADATA : get or set the metadata saved with the project (not metadata\nembedded in project media).\nExample, ID3 album name metadata: valuestr=\"ID3:TALB\" to get,\nvaluestr=\"ID3:TALB|my album name\" to set.\nCall with valuestr=\"\" and is_set=false to get a semicolon-separated list of\ndefined project metadata identifiers.\nRENDER_TARGETS : semicolon separated list of files that would be written if the\nproject is rendered using the most recent render settings\nRENDER_STATS : (read-only) semicolon separated list of statistics for the most\nrecently rendered files.\ncall with valuestr=\"XXX\" to run an action (for example, \"42437\"=dry run render\nselected items) before returning statistics.\nRENDER_FORMAT : base64-encoded sink configuration (see project files, etc).\nCallers can also pass a simple 4-byte string (non-base64-encoded), e.g.\n\"evaw\" or \"l3pm\", to use default settings for that sink type.\nRENDER_FORMAT2 : base64-encoded secondary sink configuration.\nCallers can also pass a simple 4-byte string (non-base64-encoded), e.g.\n\"evaw\" or \"l3pm\", to use default settings for that sink type, or \"\" to disable\nsecondary render.\n\194\160\194\160\194\160\194\160Formats available on this machine:")
add_meta(reaper.GetSetProjectNotes, {"proj", "set", "notes"}, "gets or sets project notes, notesNeedBig_sz is ignored when setting")
add_meta(reaper.GetSetRepeat, {"val"}, "-1 == query,0=clear,1=set,>1=toggle .\nreturns new value")
add_meta(reaper.GetSetRepeatEx, {"proj", "val"}, "-1 == query,0=clear,1=set,>1=toggle .\nreturns new value")
add_meta(reaper.GetSetTrackGroupMembership, {"tr", "groupname", "setmask", "setvalue"}, "Gets or modifies the group membership for a track.\nReturns group state prior to call (each bit represents one of the 32 group\nnumbers).\nif setmask has bits set, those bits in setvalue will be applied to group.\nGroup can be one of:\nMEDIA_EDIT_LEAD\nMEDIA_EDIT_FOLLOW\nVOLUME_LEAD\nVOLUME_FOLLOW\nVOLUME_VCA_LEAD\nVOLUME_VCA_FOLLOW\nPAN_LEAD\nPAN_FOLLOW\nWIDTH_LEAD\nWIDTH_FOLLOW\nMUTE_LEAD\nMUTE_FOLLOW\nSOLO_LEAD\nSOLO_FOLLOW\nRECARM_LEAD\nRECARM_FOLLOW\nPOLARITY_LEAD\nPOLARITY_FOLLOW\nAUTOMODE_LEAD\nAUTOMODE_FOLLOW\nVOLUME_REVERSE\nPAN_REVERSE\nWIDTH_REVERSE\nNO_LEAD_WHEN_FOLLOW\nVOLUME_VCA_FOLLOW_ISPREFX\nNote: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and\n_FOLLOW, which is deprecated but still supported (scripts that must support\nv6.11 and earlier can use the deprecated strings).")
add_meta(reaper.GetSetTrackGroupMembershipHigh, {"tr", "groupname", "setmask", "setvalue"}, "Gets or modifies the group membership for a track.\nReturns group state prior to call (each bit represents one of the high 32 group\nnumbers).\nif setmask has bits set, those bits in setvalue will be applied to group.\nGroup can be one of:\nMEDIA_EDIT_LEAD\nMEDIA_EDIT_FOLLOW\nVOLUME_LEAD\nVOLUME_FOLLOW\nVOLUME_VCA_LEAD\nVOLUME_VCA_FOLLOW\nPAN_LEAD\nPAN_FOLLOW\nWIDTH_LEAD\nWIDTH_FOLLOW\nMUTE_LEAD\nMUTE_FOLLOW\nSOLO_LEAD\nSOLO_FOLLOW\nRECARM_LEAD\nRECARM_FOLLOW\nPOLARITY_LEAD\nPOLARITY_FOLLOW\nAUTOMODE_LEAD\nAUTOMODE_FOLLOW\nVOLUME_REVERSE\nPAN_REVERSE\nWIDTH_REVERSE\nNO_LEAD_WHEN_FOLLOW\nVOLUME_VCA_FOLLOW_ISPREFX\nNote: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and\n_FOLLOW, which is deprecated but still supported (scripts that must support\nv6.11 and earlier can use the deprecated strings).")
add_meta(reaper.GetSetTrackSendInfo_String, {"tr", "category", "sendidx", "parmname", "stringNeedBig", "setNewValue"}, "Gets/sets a send attribute string:\nP_EXT:xyz : char * : extension-specific persistent data")
add_meta(reaper.GetSetTrackState, {"track", "str"}, "deprecated -- see SetTrackStateChunk, GetTrackStateChunk")
add_meta(reaper.GetSetTrackState2, {"track", "str", "isundo"}, "deprecated -- see SetTrackStateChunk, GetTrackStateChunk")
add_meta(reaper.GetSubProjectFromSource, {"src"}, nil)
add_meta(reaper.GetTake, {"item", "takeidx"}, "get a take from an item by take count (zero-based)")
add_meta(reaper.GetTakeEnvelope, {"take", "envidx"}, nil)
add_meta(reaper.GetTakeEnvelopeByName, {"take", "envname"}, nil)
add_meta(reaper.GetTakeMarker, {"take", "idx"}, "Get information about a take marker.\nReturns the position in media item source time, or -1 if the take marker does\nnot exist.\nSee GetNumTakeMarkers, SetTakeMarker, DeleteTakeMarker")
add_meta(reaper.GetTakeName, {"take"}, "returns NULL if the take is not valid")
add_meta(reaper.GetTakeNumStretchMarkers, {"take"}, "Returns number of stretch markers in take")
add_meta(reaper.GetTakeStretchMarker, {"take", "idx"}, "Gets information on a stretch marker, idx is 0..n.\nReturns -1 if stretch marker not valid.\nposOut will be set to position in item, srcposOutOptional will be set to source\nmedia position.\nReturns index.\nif input index is -1, the following marker is found using position (or source\nposition if position is -1).\nIf position/source position are used to find marker position, their values are\nnot updated.")
add_meta(reaper.GetTakeStretchMarkerSlope, {"take", "idx"}, "See SetTakeStretchMarkerSlope")
add_meta(reaper.GetTCPFXParm, {"project", "track", "index"}, "Get information about a specific FX parameter knob (see CountTCPFXParms).")
add_meta(reaper.GetTempoMatchPlayRate, {"source", "srcscale", "position", "mult"}, "finds the playrate and target length to insert this item stretched to a round\npower-of-2 number of bars, between 1/8 and 256")
add_meta(reaper.GetTempoTimeSigMarker, {"proj", "ptidx"}, "Get information about a tempo/time signature marker.\nSee CountTempoTimeSigMarkers, SetTempoTimeSigMarker, AddTempoTimeSigMarker.")
add_meta(reaper.GetThemeColor, {"ini_key", "flags"}, "Returns the theme color specified, or -1 on failure.\nIf the low bit of flags is set, the color as originally specified by the theme\n(before any transformations) is returned, otherwise the current (possibly\ntransformed and modified) color is returned.\nSee SetThemeColor for a list of valid ini_key.")
add_meta(reaper.GetThingFromPoint, {"screen_x", "screen_y"}, "Hit tests a point in screen coordinates.\nUpdates infoOut with information such as \"arrange\", \"fx_chain\", \"fx_0\" (first FX\nin chain, floating), \"spacer_0\" (spacer before first track).\nIf a track panel is hit, string will begin with \"tcp\" or \"mcp\" or \"tcp.mute\" etc\n(future versions may append additional information).\nMay return NULL with valid info string to indicate non-track thing.")
add_meta(reaper.GetToggleCommandState, {"command_id"}, "See GetToggleCommandStateEx.")
add_meta(reaper.GetToggleCommandStateEx, {"section_id", "command_id"}, "For the main action context, the MIDI editor, or the media explorer, returns the\ntoggle state of the action.\n0=off, 1=on, -1=NA because the action does not have on/off states.\nFor the MIDI editor, the action state for the most recently focused window will\nbe returned.")
add_meta(reaper.GetTooltipWindow, {}, "gets a tooltip window,in case you want to ask it for font information.\nCan return NULL.")
add_meta(reaper.GetTouchedOrFocusedFX, {"mode"}, "mode can be 0 to query last touched parameter, or 1 to query currently focused\nFX.\nReturns false if failed.\nIf successful, trackIdxOut will be track index (-1 is master track, 0 is first\ntrack).\nitemidxOut will be 0-based item index if an item, or -1 if not an item.\ntakeidxOut will be 0-based take index.\nfxidxOut will be FX index, potentially with 0x2000000 set to signify\ncontainer-addressing, or with 0x1000000 set to signify record-input FX.\nparmOut will be set to the parameter index if querying last-touched.\nparmOut will have 1 set if querying focused state and FX is no longer focused\nbut still open.")
add_meta(reaper.GetTrack, {"proj", "trackidx"}, "get a track from a project by track count (zero-based) (proj=0 for active\nproject)")
add_meta(reaper.GetTrackAutomationMode, {"tr"}, "return the track mode, regardless of global override")
add_meta(reaper.GetTrackColor, {"track"}, "Returns the track custom color as OS dependent color|0x1000000 (i.e.\nColorToNative(r,g,b)|0x1000000).\nBlack is returned as 0x1000000, no color setting is returned as 0.")
add_meta(reaper.GetTrackDepth, {"track"}, nil)
add_meta(reaper.GetTrackEnvelope, {"track", "envidx"}, nil)
add_meta(reaper.GetTrackEnvelopeByChunkName, {"tr", "cfgchunkname_or_guid"}, "Gets a built-in track envelope by configuration chunk name, like \"<VOLENV\", or\nGUID string, like \"{B577250D-146F-B544-9B34-F24FBE488F1F}\".")
add_meta(reaper.GetTrackEnvelopeByName, {"track", "envname"}, nil)
add_meta(reaper.GetTrackFromPoint, {"screen_x", "screen_y"}, "Returns the track from the screen coordinates specified.\nIf the screen coordinates refer to a window associated to the track (such as\nFX), the track will be returned.\ninfoOutOptional will be set to 1 if it is likely an envelope, 2 if it is likely\na track FX.\nFor a free item positioning or fixed lane track, the second byte of\ninfoOutOptional will be set to the (approximate, for fipm tracks) item lane\nunderneath the mouse.\nSee GetThingFromPoint.")
add_meta(reaper.GetTrackGUID, {"tr"}, nil)
add_meta(reaper.GetTrackMediaItem, {"tr", "itemidx"}, nil)
add_meta(reaper.GetTrackMIDILyrics, {"track", "flag"}, "Get all MIDI lyrics on the track.\nLyrics will be returned as one string with tabs between each word.\nflag&1: double tabs at the end of each measure and triple tabs when skipping\nmeasures, flag&2: each lyric is preceded by its beat position in the project\n(example with flag=2: \"1.1.2\\tLyric for measure 1 beat 2\\t2.1.1\\tLyric for\nmeasure 2 beat 1\9\").\nSee SetTrackMIDILyrics")
add_meta(reaper.GetTrackMIDINoteName, {"track", "pitch", "chan"}, "see GetTrackMIDINoteNameEx")
add_meta(reaper.GetTrackMIDINoteNameEx, {"proj", "track", "pitch", "chan"}, "Get note/CC name.\npitch 128 for CC0 name, 129 for CC1 name, etc.\nSee SetTrackMIDINoteNameEx")
add_meta(reaper.GetTrackMIDINoteRange, {"proj", "track"}, nil)
add_meta(reaper.GetTrackName, {"track"}, "Returns \"MASTER\" for master track, \"Track N\" if track has no name.")
add_meta(reaper.GetTrackNumMediaItems, {"tr"}, nil)
add_meta(reaper.GetTrackNumSends, {"tr", "category"}, "returns number of sends/receives/hardware outputs - category is <0 for receives,\n0=sends, >0 for hardware outputs")
add_meta(reaper.GetTrackReceiveName, {"track", "recv_index"}, "See GetTrackSendName.")
add_meta(reaper.GetTrackReceiveUIMute, {"track", "recv_index"}, "See GetTrackSendUIMute.")
add_meta(reaper.GetTrackReceiveUIVolPan, {"track", "recv_index"}, "See GetTrackSendUIVolPan.")
add_meta(reaper.GetTrackSendInfo_Value, {"tr", "category", "sendidx", "parmname"}, "Get send/receive/hardware output numerical-value attributes.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nparameter names:\nB_MUTE : bool *\nB_PHASE : bool * : true to flip phase\nB_MONO : bool *\nD_VOL : double * : 1.0 = +0dB etc\nD_PAN : double * : -1..+1\nD_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\nI_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\nI_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read,\n2=touch, 3=write, 4=latch)\nI_SRCCHAN : int * : -1 for no audio send.\nLow 10 bits specify channel offset, and higher bits specify channel count.\n(srcchan>>10) == 0 for stereo, 1 for mono, 2 for 4 channel, 3 for 6 channel,\netc.\nI_DSTCHAN : int * : low 10 bits are destination index, &1024 set to mix to mono.\nI_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, next 5 bits=dest\nchannel, 0=orig, 1-16=chan\nP_DESTTRACK : MediaTrack * : destination track, only applies for sends/recvs\n(read-only)\nP_SRCTRACK : MediaTrack * : source track, only applies for sends/recvs\n(read-only)\nP_ENV:<envchunkname : TrackEnvelope * : call with :<VOLENV, :<PANENV, etc\nappended (read-only)\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends.")
add_meta(reaper.GetTrackSendName, {"track", "send_index"}, "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends.\nSee GetTrackReceiveName.")
add_meta(reaper.GetTrackSendUIMute, {"track", "send_index"}, "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends.\nSee GetTrackReceiveUIMute.")
add_meta(reaper.GetTrackSendUIVolPan, {"track", "send_index"}, "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends.\nSee GetTrackReceiveUIVolPan.")
add_meta(reaper.GetTrackState, {"track"}, "Gets track state, returns track name.\nflags will be set to:\n&1=folder\n&2=selected\n&4=has fx enabled\n&8=muted\n&16=soloed\n&32=SIP'd (with &16)\n&64=rec armed\n&128=rec monitoring on\n&256=rec monitoring auto\n&512=hide from TCP\n&1024=hide from MCP")
add_meta(reaper.GetTrackStateChunk, {"track", "str", "isundo"}, "Gets the RPPXML state of a track, returns true if successful.\nUndo flag is a performance/caching hint.")
add_meta(reaper.GetTrackUIMute, {"track"}, nil)
add_meta(reaper.GetTrackUIPan, {"track"}, nil)
add_meta(reaper.GetTrackUIVolPan, {"track"}, nil)
add_meta(reaper.GetUnderrunTime, {}, "retrieves the last timestamps of audio xrun (yellow-flash, if available), media\nxrun (red-flash), and the current time stamp (all milliseconds)")
add_meta(reaper.GetUserFileNameForRead, {"filenameNeed4096", "title", "defext"}, "returns true if the user selected a valid file, false if the user canceled the\ndialog")
add_meta(reaper.GetUserInputs, {"title", "num_inputs", "captions_csv", "retvals_csv"}, "Get values from the user.\nIf a caption begins with *, for example \"*password\", the edit field will not\ndisplay the input text.\nMaximum fields is 16.\nValues are returned as a comma-separated string.\nReturns false if the user canceled the dialog.\nYou can supply special extra information via additional caption fields:\nextrawidth=XXX to increase text field width, separator=X to use a different\nseparator for returned fields.")
add_meta(reaper.GoToMarker, {"proj", "marker_index", "use_timeline_order"}, "Go to marker.\nIf use_timeline_order==true, marker_index 1 refers to the first marker on the\ntimeline.\nIf use_timeline_order==false, marker_index 1 refers to the first marker with the\nuser-editable index of 1.")
add_meta(reaper.GoToRegion, {"proj", "region_index", "use_timeline_order"}, "Seek to region after current region finishes playing (smooth seek).\nIf use_timeline_order==true, region_index 1 refers to the first region on the\ntimeline.\nIf use_timeline_order==false, region_index 1 refers to the first region with the\nuser-editable index of 1.")
add_meta(reaper.GR_SelectColor, {"hwnd"}, "Runs the system color chooser dialog.\nReturns 0 if the user cancels the dialog.")
add_meta(reaper.GSC_mainwnd, {"t"}, "this is just like win32 GetSysColor() but can have overrides.")
add_meta(reaper.guidToString, {"gGUID", "destNeed64"}, "dest should be at least 64 chars long to be safe")
add_meta(reaper.HasExtState, {"section", "key"}, "Returns true if there exists an extended state value for a specific section and\nkey.\nSee SetExtState, GetExtState, DeleteExtState.")
add_meta(reaper.HasTrackMIDIPrograms, {"track"}, "returns name of track plugin that is supplying MIDI programs,or NULL if there is\nnone")
add_meta(reaper.HasTrackMIDIProgramsEx, {"proj", "track"}, "returns name of track plugin that is supplying MIDI programs,or NULL if there is\nnone")
add_meta(reaper.Help_Set, {"helpstring", "is_temporary_help"}, nil)
add_meta(reaper.image_resolve_fn, {"in", "out"}, nil)
add_meta(reaper.InsertAutomationItem, {"env", "pool_id", "position", "length"}, "Insert a new automation item.\npool_id < 0 collects existing envelope points into the automation item; if\npool_id is >= 0 the automation item will be a new instance of that pool (which\nwill be created as an empty instance if it does not exist).\nReturns the index of the item, suitable for passing to other automation item API\nfunctions.\nSee GetSetAutomationItemInfo.")
add_meta(reaper.InsertEnvelopePoint, {"envelope", "time", "value", "shape", "tension", "selected", "noSortIn"}, "Insert an envelope point.\nIf setting multiple points at once, set noSort=true, and call\nEnvelope_SortPoints when done.\nSee InsertEnvelopePointEx.")
add_meta(reaper.InsertEnvelopePointEx, {"envelope", "autoitem_idx", "time", "value", "shape", "tension", "selected", "noSortIn"}, "Insert an envelope point.\nIf setting multiple points at once, set noSort=true, and call\nEnvelope_SortPoints when done.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on\nthe envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number\nof points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation\nitem, including all loop iterations.\nSee CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx,\nDeleteEnvelopePointEx.")
add_meta(reaper.InsertMedia, {"file", "mode"}, "mode: 0=add to current track, 1=add new track, 3=add to selected items as takes,\n&4=stretch/loop to fit time sel, &8=try to match tempo 1x, &16=try to match\ntempo 0.5x, &32=try to match tempo 2x, &64=don't preserve pitch when matching\ntempo, &128=no loop/section if startpct/endpct set, &256=force loop regardless\nof global preference for looping imported items, &512=use high word as absolute\ntrack index if mode&3==0 or mode&2048, &1024=insert into reasamplomatic on a new\ntrack (add 1 to insert on last selected track), &2048=insert into open\nreasamplomatic instance (add 512 to use high word as absolute track index),\n&4096=move to source preferred position (BWF start offset), &8192=reverse")
add_meta(reaper.InsertMediaSection, {"file", "mode", "startpct", "endpct", "pitchshift"}, "See InsertMedia.")
add_meta(reaper.InsertTrackAtIndex, {"idx", "wantDefaults"}, "inserts a track at idx,of course this will be clamped to 0..GetNumTracks().\nwantDefaults=TRUE for default envelopes/FX,otherwise no enabled fx/env")
add_meta(reaper.IsMediaExtension, {"ext", "wantOthers"}, "Tests a file extension (i.e.\n\"wav\" or \"mid\") to see if it's a media extension.\nIf wantOthers is set, then \"RPP\", \"TXT\" and other project-type formats will also\npass.")
add_meta(reaper.IsMediaItemSelected, {"item"}, nil)
add_meta(reaper.IsProjectDirty, {"proj"}, "Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save'\nis disabled in preferences.")
add_meta(reaper.IsTrackSelected, {"track"}, nil)
add_meta(reaper.IsTrackVisible, {"track", "mixer"}, "If mixer==true, returns true if the track is visible in the mixer.\nIf mixer==false, returns true if the track is visible in the track control\npanel.")
add_meta(reaper.joystick_create, {"guidGUID"}, "creates a joystick device")
add_meta(reaper.joystick_destroy, {"device"}, "destroys a joystick device")
add_meta(reaper.joystick_enum, {"index"}, "enumerates installed devices, returns GUID as a string")
add_meta(reaper.joystick_getaxis, {"dev", "axis"}, "returns axis value (-1..1)")
add_meta(reaper.joystick_getbuttonmask, {"dev"}, "returns button pressed mask, 1=first button, 2=second...")
add_meta(reaper.joystick_getinfo, {"dev"}, "returns button count")
add_meta(reaper.joystick_getpov, {"dev", "pov"}, "returns POV value (usually 0..655.35, or 655.35 on error)")
add_meta(reaper.joystick_update, {"dev"}, "Updates joystick state from hardware, returns true if successful (joystick_get*\nwill not be valid until joystick_update() is called successfully)")
add_meta(reaper.kbd_enumerateActions, {"section", "idx"}, nil)
add_meta(reaper.kbd_getTextFromCmd, {"cmd", "section"}, nil)
add_meta(reaper.LICE_ClipLine, {"pX1", "pY1", "pX2", "pY2", "xLo", "yLo", "xHi", "yHi"}, "Returns false if the line is entirely offscreen.")
add_meta(reaper.LocalizeString, {"src_string", "section", "flags"}, "Returns a localized version of src_string, in section section.\nflags can have 1 set to only localize if sprintf-style formatting matches the\noriginal.")
add_meta(reaper.Loop_OnArrow, {"project", "direction"}, "Move the loop selection left or right.\nReturns true if snap is enabled.")
add_meta(reaper.Main_OnCommand, {"command", "flag"}, "See Main_OnCommandEx.")
add_meta(reaper.Main_OnCommandEx, {"command", "flag", "proj"}, "Performs an action belonging to the main action section.\nTo perform non-native actions (ReaScripts, custom or extension plugins' actions)\nsafely, see NamedCommandLookup().")
add_meta(reaper.Main_openProject, {"name"}, "opens a project.\nwill prompt the user to save unless name is prefixed with 'noprompt:'.\nIf name is prefixed with 'template:', project file will be loaded as a template.\nIf passed a .RTrackTemplate file, adds the template to the existing project.")
add_meta(reaper.Main_SaveProject, {"proj", "forceSaveAsIn"}, "Save the project.")
add_meta(reaper.Main_SaveProjectEx, {"proj", "filename", "options"}, "Save the project.\noptions: &1=save selected tracks as track template, &2=include media with track\ntemplate, &4=include envelopes with track template.\nSee Main_openProject, Main_SaveProject.")
add_meta(reaper.Main_UpdateLoopInfo, {"ignoremask"}, nil)
add_meta(reaper.MarkProjectDirty, {"proj"}, "Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in\npreferences.")
add_meta(reaper.MarkTrackItemsDirty, {"track", "item"}, "If track is supplied, item is ignored")
add_meta(reaper.Master_GetPlayRate, {"project"}, nil)
add_meta(reaper.Master_GetPlayRateAtTime, {"time_s", "proj"}, nil)
add_meta(reaper.Master_GetTempo, {}, nil)
add_meta(reaper.Master_NormalizePlayRate, {"playrate", "isnormalized"}, "Convert play rate to/from a value between 0 and 1, representing the position on\nthe project playrate slider.")
add_meta(reaper.Master_NormalizeTempo, {"bpm", "isnormalized"}, "Convert the tempo to/from a value between 0 and 1, representing bpm in the range\nof 40-296 bpm.")
add_meta(reaper.MB, {"msg", "title", "type"}, "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL :\nret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO")
add_meta(reaper.MediaItemDescendsFromTrack, {"item", "track"}, "Returns 1 if the track holds the item, 2 if the track is a folder containing the\ntrack that holds the item, etc.")
add_meta(reaper.MIDI_CountEvts, {"take"}, "Count the number of notes, CC events, and text/sysex events in a given MIDI\nitem.")
add_meta(reaper.MIDI_DeleteCC, {"take", "ccidx"}, "Delete a MIDI CC event.")
add_meta(reaper.MIDI_DeleteEvt, {"take", "evtidx"}, "Delete a MIDI event.")
add_meta(reaper.MIDI_DeleteNote, {"take", "noteidx"}, "Delete a MIDI note.")
add_meta(reaper.MIDI_DeleteTextSysexEvt, {"take", "textsyxevtidx"}, "Delete a MIDI text or sysex event.")
add_meta(reaper.MIDI_DisableSort, {"take"}, "Disable sorting for all MIDI insert, delete, get and set functions, until\nMIDI_Sort is called.")
add_meta(reaper.MIDI_EnumSelCC, {"take", "ccidx"}, "Returns the index of the next selected MIDI CC event after ccidx (-1 if there\nare no more selected events).")
add_meta(reaper.MIDI_EnumSelEvts, {"take", "evtidx"}, "Returns the index of the next selected MIDI event after evtidx (-1 if there are\nno more selected events).")
add_meta(reaper.MIDI_EnumSelNotes, {"take", "noteidx"}, "Returns the index of the next selected MIDI note after noteidx (-1 if there are\nno more selected events).")
add_meta(reaper.MIDI_EnumSelTextSysexEvts, {"take", "textsyxidx"}, "Returns the index of the next selected MIDI text/sysex event after textsyxidx\n(-1 if there are no more selected events).")
add_meta(reaper.MIDI_GetAllEvts, {"take"}, "Get all MIDI data.\nMIDI buffer is returned as a list of { int offset, char flag, int msglen,\nunsigned char msg[] }.\noffset: MIDI ticks from previous event\nflag: &1=selected &2=muted\nflag high 4 bits for CC shape: &16=linear, &32=slow start/end, &16|32=fast\nstart, &64=fast end, &64|16=bezier\nmsg: the MIDI message.\nA meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier\ncurve data for the previous MIDI event: 1 byte for the bezier type (usually 0)\nand 4 bytes for the bezier tension as a float.\nFor tick intervals longer than a 32 bit word can represent, zero-length meta\nevents may be placed between valid events.\nSee MIDI_SetAllEvts.")
add_meta(reaper.MIDI_GetCC, {"take", "ccidx"}, "Get MIDI CC event properties.")
add_meta(reaper.MIDI_GetCCShape, {"take", "ccidx"}, "Get CC shape and bezier tension.\nSee MIDI_GetCC, MIDI_SetCCShape")
add_meta(reaper.MIDI_GetEvt, {"take", "evtidx"}, "Get MIDI event properties.")
add_meta(reaper.MIDI_GetGrid, {"take"}, "Returns the most recent MIDI editor grid size for this MIDI take, in QN.\nSwing is between 0 and 1.\nNote length is 0 if it follows the grid size.")
add_meta(reaper.MIDI_GetHash, {"take", "notesonly"}, "Get a string that only changes when the MIDI data changes.\nIf notesonly==true, then the string changes only when the MIDI notes change.\nSee MIDI_GetTrackHash")
add_meta(reaper.MIDI_GetNote, {"take", "noteidx"}, "Get MIDI note properties.")
add_meta(reaper.MIDI_GetPPQPos_EndOfMeasure, {"take", "ppqpos"}, "Returns the MIDI tick (ppq) position corresponding to the end of the measure.")
add_meta(reaper.MIDI_GetPPQPos_StartOfMeasure, {"take", "ppqpos"}, "Returns the MIDI tick (ppq) position corresponding to the start of the measure.")
add_meta(reaper.MIDI_GetPPQPosFromProjQN, {"take", "projqn"}, "Returns the MIDI tick (ppq) position corresponding to a specific project time in\nquarter notes.")
add_meta(reaper.MIDI_GetPPQPosFromProjTime, {"take", "projtime"}, "Returns the MIDI tick (ppq) position corresponding to a specific project time in\nseconds.")
add_meta(reaper.MIDI_GetProjQNFromPPQPos, {"take", "ppqpos"}, "Returns the project time in quarter notes corresponding to a specific MIDI tick\n(ppq) position.")
add_meta(reaper.MIDI_GetProjTimeFromPPQPos, {"take", "ppqpos"}, "Returns the project time in seconds corresponding to a specific MIDI tick (ppq)\nposition.")
add_meta(reaper.MIDI_GetRecentInputEvent, {"idx"}, "Gets a recent MIDI input event from the global history.\nidx=0 for the most recent event, which also latches to the latest MIDI event\nstate (to get a more recent list, calling with idx=0 is necessary).\nidx=1 next most recent event, returns a non-zero sequence number for the event,\nor zero if no more events.\ntsOut will be set to the timestamp in samples relative to the current position\n(0 is current, -48000 is one second ago, etc).\ndevIdxOut will have the low 16 bits set to the input device index, and 0x10000\nwill be set if device was enabled only for control.\nprojPosOut will be set to project position in seconds if project was playing\nback at time of event, otherwise -1.\nLarge SysEx events will not be included in this event list.")
add_meta(reaper.MIDI_GetScale, {"take"}, "Get the active scale in the media source, if any.\nroot 0=C, 1=C#, etc.\nscale &0x1=root, &0x2=minor 2nd, &0x4=major 2nd, &0x8=minor 3rd, &0xF=fourth,\netc.")
add_meta(reaper.MIDI_GetTextSysexEvt, {"take", "textsyxevtidx", "selected", "muted", "ppqpos", "type", "msg"}, "Get MIDI meta-event properties.\nAllowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI\ntext event types, 15=REAPER notation event.\nFor all other meta-messages, type is returned as -2 and msg returned as all\nzeroes.\nSee MIDI_GetEvt.")
add_meta(reaper.MIDI_GetTrackHash, {"track", "notesonly"}, "Get a string that only changes when the MIDI data changes.\nIf notesonly==true, then the string changes only when the MIDI notes change.\nSee MIDI_GetHash")
add_meta(reaper.midi_init, {"force_reinit_input", "force_reinit_output"}, "Opens MIDI devices as configured in preferences.\nforce_reinit_input and force_reinit_output force a particular device index to\nclose/re-open (pass -1 to not force any devices to reopen).")
add_meta(reaper.MIDI_InsertCC, {"take", "selected", "muted", "ppqpos", "chanmsg", "chan", "msg2", "msg3"}, "Insert a new MIDI CC event.")
add_meta(reaper.MIDI_InsertEvt, {"take", "selected", "muted", "ppqpos", "bytestr"}, "Insert a new MIDI event.")
add_meta(reaper.MIDI_InsertNote, {"take", "selected", "muted", "startppqpos", "endppqpos", "chan", "pitch", "vel", "noSortIn"}, "Insert a new MIDI note.\nSet noSort if inserting multiple events, then call MIDI_Sort when done.")
add_meta(reaper.MIDI_InsertTextSysexEvt, {"take", "selected", "muted", "ppqpos", "type", "bytestr"}, "Insert a new MIDI text or sysex event.\nAllowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI\ntext event types, 15=REAPER notation event.")
add_meta(reaper.midi_reinit, {}, "Reset (close and re-open) all MIDI devices")
add_meta(reaper.MIDI_SelectAll, {"take", "select"}, "Select or deselect all MIDI content.")
add_meta(reaper.MIDI_SetAllEvts, {"take", "buf"}, "Set all MIDI data.\nMIDI buffer is passed in as a list of { int offset, char flag, int msglen,\nunsigned char msg[] }.\noffset: MIDI ticks from previous event\nflag: &1=selected &2=muted\nflag high 4 bits for CC shape: &16=linear, &32=slow start/end, &16|32=fast\nstart, &64=fast end, &64|16=bezier\nmsg: the MIDI message.\nA meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier\ncurve data for the previous MIDI event: 1 byte for the bezier type (usually 0)\nand 4 bytes for the bezier tension as a float.\nFor tick intervals longer than a 32 bit word can represent, zero-length meta\nevents may be placed between valid events.\nSee MIDI_GetAllEvts.")
add_meta(reaper.MIDI_SetCC, {"take", "ccidx", "selectedIn", "mutedIn", "ppqposIn", "chanmsgIn", "chanIn", "msg2In", "msg3In", "noSortIn"}, "Set MIDI CC event properties.\nProperties passed as NULL will not be set.\nset noSort if setting multiple events, then call MIDI_Sort when done.")
add_meta(reaper.MIDI_SetCCShape, {"take", "ccidx", "shape", "beztension", "noSortIn"}, "Set CC shape and bezier tension.\nset noSort if setting multiple events, then call MIDI_Sort when done.\nSee MIDI_SetCC, MIDI_GetCCShape")
add_meta(reaper.MIDI_SetEvt, {"take", "evtidx", "selectedIn", "mutedIn", "ppqposIn", "msg", "noSortIn"}, "Set MIDI event properties.\nProperties passed as NULL will not be set.\nset noSort if setting multiple events, then call MIDI_Sort when done.")
add_meta(reaper.MIDI_SetItemExtents, {"item", "startQN", "endQN"}, "Set the start/end positions of a media item that contains a MIDI take.")
add_meta(reaper.MIDI_SetNote, {"take", "noteidx", "selectedIn", "mutedIn", "startppqposIn", "endppqposIn", "chanIn", "pitchIn", "velIn", "noSortIn"}, "Set MIDI note properties.\nProperties passed as NULL (or negative values) will not be set.\nSet noSort if setting multiple events, then call MIDI_Sort when done.\nSetting multiple note start positions at once is done more safely by deleting\nand re-inserting the notes.")
add_meta(reaper.MIDI_SetTextSysexEvt, {"take", "textsyxevtidx", "selectedIn", "mutedIn", "ppqposIn", "typeIn", "msg", "noSortIn"}, "Set MIDI text or sysex event properties.\nProperties passed as NULL will not be set.\nAllowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI\ntext event types, 15=REAPER notation event.\nset noSort if setting multiple events, then call MIDI_Sort when done.")
add_meta(reaper.MIDI_Sort, {"take"}, "Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc.")
add_meta(reaper.MIDIEditor_EnumTakes, {"midieditor", "takeindex", "editable_only"}, "list the takes that are currently being edited in this MIDI editor, starting\nwith the active take.\nSee MIDIEditor_GetTake")
add_meta(reaper.MIDIEditor_GetActive, {}, "get a pointer to the focused MIDI editor window\nsee MIDIEditor_GetMode, MIDIEditor_OnCommand")
add_meta(reaper.MIDIEditor_GetMode, {"midieditor"}, "get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)\nsee MIDIEditor_GetActive, MIDIEditor_OnCommand")
add_meta(reaper.MIDIEditor_GetSetting_int, {"midieditor", "setting_desc"}, "Get settings from a MIDI editor.\nsetting_desc can be:\nsnap_enabled: returns 0 or 1\nactive_note_row: returns 0-127\nlast_clicked_cc_lane: returns 0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity,\n0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select,\n0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events, 0x210=media\nitem lane\ndefault_note_vel: returns 0-127\ndefault_note_chan: returns 0-15\ndefault_note_len: returns default length in MIDI ticks\nscale_enabled: returns 0-1\nscale_root: returns 0-12 (0=C)\nlist_cnt: if viewing list view, returns event count\nif setting_desc is unsupported, the function returns -1.\nSee MIDIEditor_SetSetting_int, MIDIEditor_GetActive, MIDIEditor_GetSetting_str")
add_meta(reaper.MIDIEditor_GetSetting_str, {"midieditor", "setting_desc"}, "Get settings from a MIDI editor.\nsetting_desc can be:\nlast_clicked_cc_lane: returns text description (\"velocity\", \"pitch\", etc)\nscale: returns the scale record, for example \"102034050607\" for a major scale\nlist_X: if viewing list view, returns string describing event at row X\n(0-based).\nString will have a list of key=value pairs, e.g.\n'pos=4.0 len=4.0 offvel=127 msg=90317F'.\npos/len times are in QN, len/offvel may not be present if event is not a note.\nother keys which may be present include pos_pq/len_pq, sel, mute, ccval14,\nccshape, ccbeztension.\nif setting_desc is unsupported, the function returns false.\nSee MIDIEditor_GetActive, MIDIEditor_GetSetting_int")
add_meta(reaper.MIDIEditor_GetTake, {"midieditor"}, "get the take that is currently being edited in this MIDI editor.\nsee MIDIEditor_EnumTakes")
add_meta(reaper.MIDIEditor_LastFocused_OnCommand, {"command_id", "islistviewcommand"}, "Send an action command to the last focused MIDI editor.\nReturns false if there is no MIDI editor open, or if the view mode (piano roll\nor event list) does not match the input.\nsee MIDIEditor_OnCommand")
add_meta(reaper.MIDIEditor_OnCommand, {"midieditor", "command_id"}, "Send an action command to a MIDI editor.\nReturns false if the supplied MIDI editor pointer is not valid (not an open MIDI\neditor).\nsee MIDIEditor_GetActive, MIDIEditor_LastFocused_OnCommand")
add_meta(reaper.MIDIEditor_SetSetting_int, {"midieditor", "setting_desc", "setting"}, "Set settings for a MIDI editor.\nsetting_desc can be:\nactive_note_row: 0-127\nSee MIDIEditor_GetSetting_int")
add_meta(reaper.MIDIEditorFlagsForTrack, {"track", "pitchwheelrange", "flags", "is_set"}, "Get or set MIDI editor settings for this track.\npitchwheelrange: semitones up or down.\nflags &1: snap pitch lane edits to semitones if pitchwheel range is defined.")
add_meta(reaper.mkpanstr, {"strNeed64", "pan"}, nil)
add_meta(reaper.mkvolpanstr, {"strNeed64", "vol", "pan"}, nil)
add_meta(reaper.mkvolstr, {"strNeed64", "vol"}, nil)
add_meta(reaper.MoveEditCursor, {"adjamt", "dosel"}, nil)
add_meta(reaper.MoveMediaItemToTrack, {"item", "desttr"}, "returns TRUE if move succeeded")
add_meta(reaper.MuteAllTracks, {"mute"}, nil)
add_meta(reaper.my_getViewport, {"integerr.left", "integerr.top", "integerr.right", "integerr.bot", "sr.left", "sr.top", "sr.right", "sr.bot", "wantWorkArea"}, nil)
add_meta(reaper.NamedCommandLookup, {"command_name"}, "Get the command ID number for named command that was registered by an extension\nsuch as \"_SWS_ABOUT\" or \"_113088d11ae641c193a2b7ede3041ad5\" for a ReaScript or a\ncustom action.")
add_meta(reaper.OnPauseButton, {}, "direct way to simulate pause button hit")
add_meta(reaper.OnPauseButtonEx, {"proj"}, "direct way to simulate pause button hit")
add_meta(reaper.OnPlayButton, {}, "direct way to simulate play button hit")
add_meta(reaper.OnPlayButtonEx, {"proj"}, "direct way to simulate play button hit")
add_meta(reaper.OnStopButton, {}, "direct way to simulate stop button hit")
add_meta(reaper.OnStopButtonEx, {"proj"}, "direct way to simulate stop button hit")
add_meta(reaper.OpenColorThemeFile, {"fn"}, nil)
add_meta(reaper.OpenMediaExplorer, {"mediafn", "play"}, "Opens mediafn in the Media Explorer, play=true will play the file immediately\n(or toggle playback if mediafn was already open), =false will just select it.")
add_meta(reaper.OscLocalMessageToHost, {"message", "valueIn"}, "Send an OSC message directly to REAPER.\nThe value argument may be NULL.\nThe message will be matched against the default OSC patterns.")
add_meta(reaper.parse_timestr, {"buf"}, "Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error).\nSee parse_timestr_pos, parse_timestr_len.")
add_meta(reaper.parse_timestr_len, {"buf", "offset", "modeoverride"}, "time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f")
add_meta(reaper.parse_timestr_pos, {"buf", "modeoverride"}, "Parse time string, time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f")
add_meta(reaper.parsepanstr, {"str"}, nil)
add_meta(reaper.PCM_Sink_Enum, {"idx"}, nil)
add_meta(reaper.PCM_Sink_GetExtension, {"data"}, nil)
add_meta(reaper.PCM_Sink_ShowConfig, {"cfg", "hwndParent"}, nil)
add_meta(reaper.PCM_Source_BuildPeaks, {"src", "mode"}, "Calls and returns PCM_source::PeaksBuild_Begin() if mode=0, PeaksBuild_Run() if\nmode=1, and PeaksBuild_Finish() if mode=2.\nNormal use is to call PCM_Source_BuildPeaks(src,0), and if that returns nonzero,\ncall PCM_Source_BuildPeaks(src,1) periodically until it returns zero (it returns\nthe percentage of the file remaining), then call PCM_Source_BuildPeaks(src,2) to\nfinalize.\nIf PCM_Source_BuildPeaks(src,0) returns zero, then no further action is\nnecessary.")
add_meta(reaper.PCM_Source_CreateFromFile, {"filename"}, "See PCM_Source_CreateFromFileEx.")
add_meta(reaper.PCM_Source_CreateFromFileEx, {"filename", "forcenoMidiImp"}, "Create a PCM_source from filename, and override pref of MIDI files being\nimported as in-project MIDI events.")
add_meta(reaper.PCM_Source_CreateFromType, {"sourcetype"}, "Create a PCM_source from a \"type\" (use this if you're going to load its state\nvia LoadState/ProjectStateContext).\nValid types include \"WAVE\", \"MIDI\", or whatever plug-ins define as well.")
add_meta(reaper.PCM_Source_Destroy, {"src"}, "Deletes a PCM_source -- be sure that you remove any project reference before\ndeleting a source")
add_meta(reaper.PCM_Source_GetPeaks, {"src", "peakrate", "starttime", "numchannels", "numsamplesperchannel", "want_extra_type", "buf"}, "Gets block of peak samples to buf.\nNote that the peak samples are interleaved, but in two or three blocks\n(maximums, then minimums, then extra).\nReturn value has 20 bits of returned sample count, then 4 bits of output_mode\n(0xf00000), then a bit to signify whether extra_type was available (0x1000000).\nextra_type can be 115 ('s') for spectral information, which will return peak\nsamples as integers with the low 15 bits frequency, next 14 bits tonality.")
add_meta(reaper.PCM_Source_GetSectionInfo, {"src"}, "If a section/reverse block, retrieves offset/len/reverse.\nreturn true if success")
add_meta(reaper.PluginWantsAlwaysRunFx, {"amt"}, nil)
add_meta(reaper.PreventUIRefresh, {"prevent_count"}, "adds prevent_count to the UI refresh prevention state; always add then remove\nthe same amount, or major disfunction will occur")
add_meta(reaper.PromptForAction, {"session_mode", "init_id", "section_id"}, "Uses the action list to choose an action.\nCall with session_mode=1 to create a session (init_id will be the initial action\nto select, or 0), then poll with session_mode=0, checking return value for\nuser-selected action (will return 0 if no action selected yet, or -1 if the\naction window is no longer available).\nWhen finished, call with session_mode=-1.")
add_meta(reaper.ReaScriptError, {"errmsg"}, "Causes REAPER to display the error message after the current ReaScript finishes.\nIf called within a Lua context and errmsg has a ! prefix, script execution will\nbe terminated.")
add_meta(reaper.RecursiveCreateDirectory, {"path", "ignored"}, "returns positive value on success, 0 on failure.")
add_meta(reaper.reduce_open_files, {"flags"}, "garbage-collects extra open files and closes them.\nif flags has 1 set, this is done incrementally (call this from a regular timer,\nif desired).\nif flags has 2 set, files are aggressively closed (they may need to be re-opened\nvery soon).\nreturns number of files closed by this call.")
add_meta(reaper.RefreshToolbar, {"command_id"}, "See RefreshToolbar2.")
add_meta(reaper.RefreshToolbar2, {"section_id", "command_id"}, "Refresh the toolbar button states of a toggle action.")
add_meta(reaper.relative_fn, {"in", "out"}, "Makes a filename \"in\" relative to the current project, if any.")
add_meta(reaper.RemoveTrackSend, {"tr", "category", "sendidx"}, "Remove a send/receive/hardware output, return true on success.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs.\nSee CreateTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value,\nSetTrackSendInfo_Value, GetTrackNumSends.")
add_meta(reaper.RenderFileSection, {"source_filename", "target_filename", "start_percent", "end_percent", "playrate"}, "Not available while playing back.")
add_meta(reaper.ReorderSelectedTracks, {"beforeTrackIdx", "makePrevFolder"}, "Moves all selected tracks to immediately above track specified by index\nbeforeTrackIdx, returns false if no tracks were selected.\nmakePrevFolder=0 for normal, 1 = as child of track preceding track specified by\nbeforeTrackIdx, 2 = if track preceding track specified by beforeTrackIdx is last\ntrack in folder, extend folder")
add_meta(reaper.Resample_EnumModes, {"mode"}, nil)
add_meta(reaper.resolve_fn, {"in", "out"}, "See resolve_fn2.")
add_meta(reaper.resolve_fn2, {"in", "out", "checkSubDir"}, "Resolves a filename \"in\" by using project settings etc.\nIf no file found, out will be a copy of in.")
add_meta(reaper.ReverseNamedCommandLookup, {"command_id"}, "Get the named command for the given command ID.\nThe returned string will not start with '_' (e.g.\nit will return \"SWS_ABOUT\"), it will be NULL if command_id is a native action.")
add_meta(reaper.ScaleFromEnvelopeMode, {"scaling_mode", "val"}, "See GetEnvelopeScalingMode.")
add_meta(reaper.ScaleToEnvelopeMode, {"scaling_mode", "val"}, "See GetEnvelopeScalingMode.")
add_meta(reaper.SectionFromUniqueID, {"uniqueID"}, nil)
add_meta(reaper.SelectAllMediaItems, {"proj", "selected"}, nil)
add_meta(reaper.SelectProjectInstance, {"proj"}, nil)
add_meta(reaper.SendMIDIMessageToHardware, {"output", "msg"}, "Sends a MIDI message to output device specified by output.\nMessage is sent in immediate mode.")
add_meta(reaper.SetActiveTake, {"take"}, "set this take active in this media item")
add_meta(reaper.SetAutomationMode, {"mode", "onlySel"}, "sets all or selected tracks to mode.")
add_meta(reaper.SetCurrentBPM, {"__proj", "bpm", "wantUndo"}, "set current BPM in project, set wantUndo=true to add undo point")
add_meta(reaper.SetCursorContext, {"mode", "envIn"}, "You must use this to change the focus programmatically.\nmode=0 to focus track panels, 1 to focus the arrange window, 2 to focus the\narrange window and select env (or env==NULL to clear the current track/take\nenvelope selection)")
add_meta(reaper.SetEditCurPos, {"time", "moveview", "seekplay"}, nil)
add_meta(reaper.SetEditCurPos2, {"proj", "time", "moveview", "seekplay"}, nil)
add_meta(reaper.SetEnvelopePoint, {"envelope", "ptidx", "timeIn", "valueIn", "shapeIn", "tensionIn", "selectedIn", "noSortIn"}, "Set attributes of an envelope point.\nValues that are not supplied will be ignored.\nIf setting multiple points at once, set noSort=true, and call\nEnvelope_SortPoints when done.\nSee SetEnvelopePointEx.")
add_meta(reaper.SetEnvelopePointEx, {"envelope", "autoitem_idx", "ptidx", "timeIn", "valueIn", "shapeIn", "tensionIn", "selectedIn", "noSortIn"}, "Set attributes of an envelope point.\nValues that are not supplied will be ignored.\nIf setting multiple points at once, set noSort=true, and call\nEnvelope_SortPoints when done.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on\nthe envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number\nof points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation\nitem, including all loop iterations.\nSee CountEnvelopePointsEx, GetEnvelopePointEx, InsertEnvelopePointEx,\nDeleteEnvelopePointEx.")
add_meta(reaper.SetEnvelopeStateChunk, {"env", "str", "isundo"}, "Sets the RPPXML state of an envelope, returns true if successful.\nUndo flag is a performance/caching hint.")
add_meta(reaper.SetExtState, {"section", "key", "value", "persist"}, "Set the extended state value for a specific section and key.\npersist=true means the value should be stored and reloaded the next time REAPER\nis opened.\nSee GetExtState, DeleteExtState, HasExtState.")
add_meta(reaper.SetGlobalAutomationOverride, {"mode"}, "mode: see GetGlobalAutomationOverride")
add_meta(reaper.SetItemStateChunk, {"item", "str", "isundo"}, "Sets the RPPXML state of an item, returns true if successful.\nUndo flag is a performance/caching hint.")
add_meta(reaper.SetMasterTrackVisibility, {"flag"}, "set &1 to show the master track in the TCP, &2 to HIDE in the mixer.\nReturns the previous visibility state.\nSee GetMasterTrackVisibility.")
add_meta(reaper.SetMediaItemInfo_Value, {"item", "parmname", "newvalue"}, "Set media item numerical-value attributes.\nB_MUTE : bool * : muted (item solo overrides).\nsetting this value will clear C_MUTE_SOLO.\nB_MUTE_ACTUAL : bool * : muted (ignores solo).\nsetting this value will not affect C_MUTE_SOLO.\nC_LANEPLAYS : char * : in fixed lane tracks, 0=this item lane does not play,\n1=this item lane plays exclusively, 2=this item lane plays and other lanes also\nplay, -1=this item is on a non-visible, non-playing lane on a non-fixed-lane\ntrack (read-only)\nC_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed).\nnote that this API does not automatically unsolo other items when soloing (nor\nclear the unsolos when clearing the last soloed item), it must be done by the\ncaller via action or via this API.\nB_LOOPSRC : bool * : loop source\nB_ALLTAKESPLAY : bool * : all takes play\nB_UISEL : bool * : selected in arrange view\nC_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats\n(position, length, rate), 2=beats (position only).\nfor auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1\nC_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled,\nrequires C_BEATATTACHMODE=1\nC_LOCK : char * : locked, &1=locked\nD_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_POSITION : double * : item position in seconds\nD_LENGTH : double * : item length in seconds\nD_SNAPOFFSET : double * : item snap offset in seconds\nD_FADEINLEN : double * : item manual fadein length in seconds\nD_FADEOUTLEN : double * : item manual fadeout length in seconds\nD_FADEINDIR : double * : item fadein curvature, -1..1\nD_FADEOUTDIR : double * : item fadeout curvature, -1..1\nD_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no\nauto-fadein\nD_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no\nauto-fadeout\nC_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear\nC_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear\nI_GROUPID : int * : group ID, 0=no group\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e.\nColorToNative(r,g,b)|0x1000000).\nIf you do not |0x1000000, then it will not be used, but will store the color\nI_CURTAKE : int * : active take number\nIP_ITEMNUMBER : int : item number on this track (read-only, returns the item\nnumber directly)\nF_FREEMODE_Y : float * : free item positioning or fixed lane Y-position.\n0=top of track, 1.0=bottom of track\nF_FREEMODE_H : float * : free item positioning or fixed lane height.\n0.5=half the track height, 1.0=full track height\nI_FIXEDLANE : int * : fixed lane of item (fine to call with setNewValue, but\nreturned value is read-only)\nB_FIXEDLANE_HIDDEN : bool * : true if displaying only one fixed lane and this\nitem is in a different lane (read-only)")
add_meta(reaper.SetMediaItemLength, {"item", "length", "refreshUI"}, "Redraws the screen only if refreshUI == true.\nSee UpdateArrange().")
add_meta(reaper.SetMediaItemPosition, {"item", "position", "refreshUI"}, "Redraws the screen only if refreshUI == true.\nSee UpdateArrange().")
add_meta(reaper.SetMediaItemSelected, {"item", "selected"}, nil)
add_meta(reaper.SetMediaItemTake_Source, {"take", "source"}, "Set media source of media item take.\nThe old source will not be destroyed, it is the caller's responsibility to\nretrieve it and destroy it after.\nIf source already exists in any project, it will be duplicated before being set.\nC/C++ code should not use this and instead use GetSetMediaItemTakeInfo() with\nP_SOURCE to manage ownership directly.")
add_meta(reaper.SetMediaItemTakeInfo_Value, {"take", "parmname", "newvalue"}, "Set media item take numerical-value attributes.\nD_STARTOFFS : double * : start offset in source media, in seconds\nD_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative\nif take polarity is flipped\nD_PAN : double * : take pan, -1..1\nD_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc\nD_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double\nspeed, etc\nD_PITCH : double * : take pitch adjustment in semitones, -12=one octave down,\n0=normal, +12=one octave up, etc\nB_PPITCH : bool * : preserve pitch when changing playback rate\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix,\n3=left, 4=right\nI_PITCHMODE : int * : pitch shifter mode, -1=project default, otherwise high 2\nbytes=shifter, low 2 bytes=parameter\nI_STRETCHFLAGS : int * : stretch marker flags (&7 mask for mode override:\n0=default, 1=balanced, 2/3/6=tonal, 4=transient, 5=no pre-echo)\nF_STRETCHFADESIZE : float * : stretch marker fade size in seconds (0.0025\ndefault)\nI_RECPASSID : int * : record pass ID\nI_TAKEFX_NCH : int * : number of internal audio channels for per-take FX to use\n(OK to call with setNewValue, but the returned value is read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e.\nColorToNative(r,g,b)|0x1000000).\nIf you do not |0x1000000, then it will not be used, but will store the color\nIP_TAKENUMBER : int : take number (read-only, returns the take number directly)")
add_meta(reaper.SetMediaTrackInfo_Value, {"tr", "parmname", "newvalue"}, "Set track numerical-value attributes.\nB_MUTE : bool * : muted\nB_PHASE : bool * : track phase inverted\nB_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread\nplayback state, read-only)\nIP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track\n(read-only, returns the int directly)\nI_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe\nsoloed, 6=safe soloed in place\nB_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is\nnot muted, this track acts soloed\nI_FXEN : int * : fx enabled, 0=bypassed, !0=fx active\nI_RECARM : int * : record armed, 0=not record armed, 1=record armed\nI_RECINPUT : int * : record input, <0=no input.\nif 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only\nchan), next 6 bits represent physical input (63=all, 62=VKB).\nIf 4096 is not set, low 10 bits (0..1023) are input start channel\n(ReaRoute/Loopback start at 512).\nIf 2048 is set, input is multichannel input (using track channel count), or if\n1024 is set, input is stereo input, otherwise input is mono.\nI_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out\nw/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency\ncompensation, 7=midi overdub, 8=midi replace\nI_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post\nfader, 1=pre-fx, 2=post-fx/pre-fader)\nI_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape\nstyle)\nI_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on\nB_AUTO_RECARM : bool * : automatically set record arm when selected (does not\nimmediately affect recarm state, script should set directly if desired)\nI_VUMODE : int * : track vu mode, &1:disabled, &30==0:stereo peaks,\n&30==2:multichannel peaks, &30==4:stereo RMS, &30==8:combined RMS,\n&30==12:LUFS-M, &30==16:LUFS-S (readout=max), &30==20:LUFS-S (readout=current),\n&32:LUFS calculation on channels 1+2 only\nI_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch,\n3=write, 4=latch\nI_NCHAN : int * : number of track channels, 2-128, even numbers only\nI_SELECTED : int * : track selected, 0=unselected, 1=selected\nI_WNDH : int * : current TCP window height in pixels including envelopes\n(read-only)\nI_TCPH : int * : current TCP window height in pixels not including envelopes\n(read-only)\nI_TCPY : int * : current TCP window Y-position in pixels relative to top of\narrange view (read-only)\nI_MCPX : int * : current MCP X-position in pixels relative to mixer container\n(read-only)\nI_MCPY : int * : current MCP Y-position in pixels relative to mixer container\n(read-only)\nI_MCPW : int * : current MCP width in pixels (read-only)\nI_MCPH : int * : current MCP height in pixels (read-only)\nI_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder\nparent, -1=track is the last in the innermost folder, -2=track is the last in\nthe innermost and next-innermost folders, etc\nI_FOLDERCOMPACT : int * : folder collapsed state (only valid on folders),\n0=normal, 1=collapsed, 2=fully collapsed\nI_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits\nare which channels (0=all, 1-16), next 5 bits are output device index (0-31)\nI_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no\nanticipative FX\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e.\nColorToNative(r,g,b)|0x1000000).\nIf you do not |0x1000000, then it will not be used, but will store the color\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none,\notherwise size in pixels\nI_SPACER : int * : 1=TCP track spacer above this trackB_HEIGHTLOCK : bool * :\ntrack height lock (must set I_HEIGHTOVERRIDE before locking)\nD_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_PAN : double * : trim pan of track, -1..1\nD_WIDTH : double * : width of track, -1..1\nD_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6\nD_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6\nI_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual\npan\nD_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB,\n0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain\ncompensation, etc\nI_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with\ndeprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid\ntaper\nP_ENV:<envchunkname or P_ENV:{GUID...\n: TrackEnvelope * : (read-only) chunkname can be <VOLENV, <PANENV, etc; GUID is\nthe stringified envelope GUID.\nB_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on\nmaster track)\nB_SHOWINTCP : bool * : track control panel visible in arrange view (do not use\non master track)\nB_MAINSEND : bool * : track sends audio to parent\nC_MAINSEND_OFFS : char * : channel offset of track send to parent\nC_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child\ntrack channels, 1=use one channel only)\nI_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes\nenabled (call UpdateTimeline() after changing)\nI_NUMFIXEDLANES : int * : number of track fixed lanes (fine to call with\nsetNewValue, but returned value is read-only)\nC_LANESCOLLAPSED : char * : fixed lane collapse state (1=lanes collapsed,\n2=track displays as non-fixed-lanes but hidden lanes exist)\nC_LANEPLAYS:N : char * :  on fixed lane tracks, 0=lane N does not play, 1=lane N\nplays exclusively, 2=lane N plays and other lanes also play (fine to call with\nsetNewValue, but returned value is read-only)\nC_ALLLANESPLAY : char * : on fixed lane tracks, 0=no lanes play, 1=all lanes\nplay, 2=some lanes play (fine to call with setNewValue 0 or 1, but returned\nvalue is read-only)\nC_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats\n(position, length, rate), 2=beats (position only)\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed,\n1=maximum allowed)\nF_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum\nallowed, 1=maximum allowed)\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send\ntotal area (0=minimum allowed, 1=maximum allowed)\nF_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are\nembedded (0=min allowed, default, 1=max allowed)\nI_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed,\n&2=offset value is measured in samples (otherwise measured in seconds)\nD_PLAY_OFFSET : double * : track media playback offset, units depend on\nI_PLAY_OFFSET_FLAG")
add_meta(reaper.SetMIDIEditorGrid, {"project", "division"}, "Set the MIDI editor grid division.\n0.25=quarter note, 1.0/3.0=half note tripet, etc.")
add_meta(reaper.SetMixerScroll, {"leftmosttrack"}, "Scroll the mixer so that leftmosttrack is the leftmost visible track.\nReturns the leftmost track after scrolling, which may be different from the\npassed-in track if there are not enough tracks to its right.")
add_meta(reaper.SetMouseModifier, {"context", "modifier_flag", "action"}, "Set the mouse modifier assignment for a specific modifier key assignment, in a\nspecific context.\nContext is a string like \"MM_CTX_ITEM\" (see reaper-mouse.ini) or \"Media item\nleft drag\" (unlocalized).\nModifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for\nalt, 8 for win.\n(macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)\nFor left-click and double-click contexts, the action can be any built-in command\nID number\nor any custom action ID string.\nFind built-in command IDs in the REAPER actions window\n(enable \"show command IDs\" in the context menu), and find custom action ID\nstrings in reaper-kb.ini.\nThe action string may be a mouse modifier ID (see reaper-mouse.ini) with \" m\"\nappended to it,\nor (for click/double-click contexts) a command ID with \" c\" appended to it,\nor the text that appears in the mouse modifiers preferences dialog, like \"Move\nitem\" (unlocalized).\nFor example, SetMouseModifier(\"MM_CTX_ITEM\", 0, \"1 m\") and\nSetMouseModifier(\"Media item left drag\", 0, \"Move item\") are equivalent.\nSetMouseModifier(context, modifier_flag, -1) will reset that mouse modifier to\ndefault.\nSetMouseModifier(context, -1, -1) will reset the entire context to default.\nSetMouseModifier(-1, -1, -1) will reset all contexts to default.\nSee GetMouseModifier.")
add_meta(reaper.SetOnlyTrackSelected, {"track"}, "Set exactly one track selected, deselect all others")
add_meta(reaper.SetProjectGrid, {"project", "division"}, "Set the arrange view grid division.\n0.25=quarter note, 1.0/3.0=half note triplet, etc.")
add_meta(reaper.SetProjectMarker, {"markrgnindexnumber", "isrgn", "pos", "rgnend", "name"}, "Note: this function can't clear a marker's name (an empty string will leave the\nname unchanged), see SetProjectMarker4.")
add_meta(reaper.SetProjectMarker2, {"proj", "markrgnindexnumber", "isrgn", "pos", "rgnend", "name"}, "Note: this function can't clear a marker's name (an empty string will leave the\nname unchanged), see SetProjectMarker4.")
add_meta(reaper.SetProjectMarker3, {"proj", "markrgnindexnumber", "isrgn", "pos", "rgnend", "name", "color"}, "Note: this function can't clear a marker's name (an empty string will leave the\nname unchanged), see SetProjectMarker4.")
add_meta(reaper.SetProjectMarker4, {"proj", "markrgnindexnumber", "isrgn", "pos", "rgnend", "name", "color", "flags"}, "color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags&1 to\nclear name")
add_meta(reaper.SetProjectMarkerByIndex, {"proj", "markrgnidx", "isrgn", "pos", "rgnend", "IDnumber", "name", "color"}, "See SetProjectMarkerByIndex2.")
add_meta(reaper.SetProjectMarkerByIndex2, {"proj", "markrgnidx", "isrgn", "pos", "rgnend", "IDnumber", "name", "color", "flags"}, "Differs from SetProjectMarker4 in that markrgnidx is 0 for the first\nmarker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than\nrepresenting the displayed marker/region ID number (see SetProjectMarker3).\nFunction will fail if attempting to set a duplicate ID number for a region\n(duplicate ID numbers for markers are OK).\n, flags&1 to clear name.\nIf flags&2, markers will not be re-sorted, and after making updates, you MUST\ncall SetProjectMarkerByIndex2 with markrgnidx=-1 and flags&2 to force re-sort/UI\nupdates.")
add_meta(reaper.SetProjExtState, {"proj", "extname", "key", "value"}, "Save a key/value pair for a specific extension, to be restored the next time\nthis specific project is loaded.\nTypically extname will be the name of a reascript or extension section.\nIf key is NULL or \"\", all extended data for that extname will be deleted.\nIf val is NULL or \"\", the data previously associated with that key will be\ndeleted.\nReturns the size of the state for this extname.\nSee GetProjExtState, EnumProjExtState.")
add_meta(reaper.SetRegionRenderMatrix, {"proj", "regionindex", "track", "flag"}, "Add (flag > 0) or remove (flag < 0) a track from this region when using the\nregion render matrix.\nIf adding, flag==2 means force mono, flag==4 means force stereo, flag==N means\nforce N/2 channels.")
add_meta(reaper.SetTakeMarker, {"take", "idx", "nameIn", "srcposIn", "colorIn"}, "Inserts or updates a take marker.\nIf idx<0, a take marker will be added, otherwise an existing take marker will be\nupdated.\nReturns the index of the new or updated take marker (which may change if srcPos\nis updated).\nSee GetNumTakeMarkers, GetTakeMarker, DeleteTakeMarker")
add_meta(reaper.SetTakeStretchMarker, {"take", "idx", "pos", "srcposIn"}, "Adds or updates a stretch marker.\nIf idx<0, stretch marker will be added.\nIf idx>=0, stretch marker will be updated.\nWhen adding, if srcposInOptional is omitted, source position will be\nauto-calculated.\nWhen updating a stretch marker, if srcposInOptional is omitted, srcpos will not\nbe modified.\nPosition/srcposition values will be constrained to nearby stretch markers.\nReturns index of stretch marker, or -1 if did not insert (or marker already\nexisted at time).")
add_meta(reaper.SetTakeStretchMarkerSlope, {"take", "idx", "slope"}, "See GetTakeStretchMarkerSlope")
add_meta(reaper.SetTempoTimeSigMarker, {"proj", "ptidx", "timepos", "measurepos", "beatpos", "bpm", "timesig_num", "timesig_denom", "lineartempo"}, "Set parameters of a tempo/time signature marker.\nProvide either timepos (with measurepos=-1, beatpos=-1), or measurepos and\nbeatpos (with timepos=-1).\nIf timesig_num and timesig_denom are zero, the previous time signature will be\nused.\nptidx=-1 will insert a new tempo/time signature marker.\nSee CountTempoTimeSigMarkers, GetTempoTimeSigMarker, AddTempoTimeSigMarker.")
add_meta(reaper.SetThemeColor, {"ini_key", "color", "flags"}, "Temporarily updates the theme color to the color specified (or the theme default\ncolor if -1 is specified).\nReturns -1 on failure, otherwise returns the color (or transformed-color).\nNote that the UI is not updated by this, the caller should call UpdateArrange()\netc as necessary.\nIf the low bit of flags is set, any color transformations are bypassed.\nTo read a value see GetThemeColor.\nCurrently valid ini_keys:")
add_meta(reaper.SetToggleCommandState, {"section_id", "command_id", "state"}, "Updates the toggle state of an action, returns true if succeeded.\nOnly ReaScripts can have their toggle states changed programmatically.\nSee RefreshToolbar2.")
add_meta(reaper.SetTrackAutomationMode, {"tr", "mode"}, nil)
add_meta(reaper.SetTrackColor, {"track", "color"}, "Set the custom track color, color is OS dependent (i.e.\nColorToNative(r,g,b).\nTo unset the track color, see SetMediaTrackInfo_Value I_CUSTOMCOLOR")
add_meta(reaper.SetTrackMIDILyrics, {"track", "flag", "str"}, "Set all MIDI lyrics on the track.\nLyrics will be stuffed into any MIDI items found in range.\nFlag is unused at present.\nstr is passed in as beat position, tab, text, tab (example with flag=2:\n\"1.1.2\\tLyric for measure 1 beat 2\\t2.1.1\\tLyric for measure 2 beat 1\9\").\nSee GetTrackMIDILyrics")
add_meta(reaper.SetTrackMIDINoteName, {"track", "pitch", "chan", "name"}, "channel < 0 assigns these note names to all channels.")
add_meta(reaper.SetTrackMIDINoteNameEx, {"proj", "track", "pitch", "chan", "name"}, "channel < 0 assigns note name to all channels.\npitch 128 assigns name for CC0, pitch 129 for CC1, etc.")
add_meta(reaper.SetTrackSelected, {"track", "selected"}, nil)
add_meta(reaper.SetTrackSendInfo_Value, {"tr", "category", "sendidx", "parmname", "newvalue"}, "Set send/receive/hardware output numerical-value attributes, return true on\nsuccess.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nparameter names:\nB_MUTE : bool *\nB_PHASE : bool * : true to flip phase\nB_MONO : bool *\nD_VOL : double * : 1.0 = +0dB etc\nD_PAN : double * : -1..+1\nD_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\nI_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\nI_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read,\n2=touch, 3=write, 4=latch)\nI_SRCCHAN : int * : -1 for no audio send.\nLow 10 bits specify channel offset, and higher bits specify channel count.\n(srcchan>>10) == 0 for stereo, 1 for mono, 2 for 4 channel, 3 for 6 channel,\netc.\nI_DSTCHAN : int * : low 10 bits are destination index, &1024 set to mix to mono.\nI_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, next 5 bits=dest\nchannel, 0=orig, 1-16=chan\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends.")
add_meta(reaper.SetTrackSendUIPan, {"track", "send_idx", "pan", "isend"}, "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends.\nisend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal\ntweak.")
add_meta(reaper.SetTrackSendUIVol, {"track", "send_idx", "vol", "isend"}, "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends.\nisend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal\ntweak.")
add_meta(reaper.SetTrackStateChunk, {"track", "str", "isundo"}, "Sets the RPPXML state of a track, returns true if successful.\nUndo flag is a performance/caching hint.")
add_meta(reaper.SetTrackUIInputMonitor, {"track", "monitor", "igngroupflags"}, "monitor: 0=no monitoring, 1=monitoring, 2=auto-monitoring.\nreturns new value or -1 if error.\nigngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging")
add_meta(reaper.SetTrackUIMute, {"track", "mute", "igngroupflags"}, "mute: <0 toggles, >0 sets mute, 0=unsets mute.\nreturns new value or -1 if error.\nigngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging")
add_meta(reaper.SetTrackUIPan, {"track", "pan", "relative", "done", "igngroupflags"}, "igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging")
add_meta(reaper.SetTrackUIPolarity, {"track", "polarity", "igngroupflags"}, "polarity (AKA phase): <0 toggles, 0=normal, >0=inverted.\nreturns new value or -1 if error.igngroupflags: &1 to prevent track grouping, &2\nto prevent selection ganging")
add_meta(reaper.SetTrackUIRecArm, {"track", "recarm", "igngroupflags"}, "recarm: <0 toggles, >0 sets recarm, 0=unsets recarm.\nreturns new value or -1 if error.\nigngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging")
add_meta(reaper.SetTrackUISolo, {"track", "solo", "igngroupflags"}, "solo: <0 toggles, 1 sets solo (default mode), 0=unsets solo, 2 sets solo\n(non-SIP), 4 sets solo (SIP).\nreturns new value or -1 if error.\nigngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging")
add_meta(reaper.SetTrackUIVolume, {"track", "volume", "relative", "done", "igngroupflags"}, "igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging")
add_meta(reaper.SetTrackUIWidth, {"track", "width", "relative", "done", "igngroupflags"}, "igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging")
add_meta(reaper.ShowActionList, {"section", "callerWnd"}, nil)
add_meta(reaper.ShowConsoleMsg, {"msg"}, "Show a message to the user (also useful for debugging).\nSend \"\\n\" for newline, \"\" to clear the console.\nPrefix string with \"!SHOW:\" and text will be added to console without opening\nthe window.\nSee ClearConsole")
add_meta(reaper.ShowMessageBox, {"msg", "title", "type"}, "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL :\nret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO")
add_meta(reaper.ShowPopupMenu, {"name", "x", "y", "hwndParent", "ctx", "ctx2", "ctx3"}, "shows a context menu, valid names include: track_input, track_panel, track_area,\ntrack_routing, item, ruler, envelope, envelope_point, envelope_item.\nctxOptional can be a track pointer for track_*, item pointer for item* (but is\noptional).\nfor envelope_point, ctx2Optional has point index, ctx3Optional has item index\n(0=main envelope, 1=first AI).\nfor envelope_item, ctx2Optional has AI index (1=first AI)")
add_meta(reaper.SLIDER2DB, {"y"}, nil)
add_meta(reaper.SnapToGrid, {"project", "time_pos"}, nil)
add_meta(reaper.SoloAllTracks, {"solo"}, "solo=2 for SIP")
add_meta(reaper.Splash_GetWnd, {}, "gets the splash window, in case you want to display a message over it.\nReturns NULL when the splash window is not displayed.")
add_meta(reaper.SplitMediaItem, {"item", "position"}, "the original item becomes the left-hand split, the function returns the\nright-hand split (or NULL if the split failed)")
add_meta(reaper.stringToGuid, {"str", "gGUID"}, nil)
add_meta(reaper.StuffMIDIMessage, {"mode", "msg1", "msg2", "msg3"}, "Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard queue, or the\nMIDI-as-control input queue, or sends to a MIDI hardware output.\nmode=0 for VKB, 1 for control (actions map etc), 2 for VKB-on-current-channel;\n16 for external MIDI device 0, 17 for external MIDI device 1, etc; see\nGetNumMIDIOutputs, GetMIDIOutputName.")
add_meta(reaper.TakeFX_AddByName, {"take", "fxname", "instantiate"}, "Adds or queries the position of a named FX in a take.\nSee TrackFX_AddByName() for information on fxname and instantiate.\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_CopyToTake, {"src_take", "src_fx", "dest_take", "dest_fx", "is_move"}, "Copies (or moves) FX from src_take to dest_take.\nCan be used with src_take=dest_take to reorder.\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_CopyToTrack, {"src_take", "src_fx", "dest_track", "dest_fx", "is_move"}, "Copies (or moves) FX from src_take to dest_track.\ndest_fx can have 0x1000000 set to reference input FX.\nFX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_Delete, {"take", "fx"}, "Remove a FX from take chain (returns true on success) FX indices can have\n0x2000000 added to them, in which case they will be used to address FX in\ncontainers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_EndParamEdit, {"take", "fx", "param"}, "FX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_FormatParamValue, {"take", "fx", "param", "val"}, "Note: only works with FX that support Cockos VST extensions.\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_FormatParamValueNormalized, {"take", "fx", "param", "value", "buf"}, "Note: only works with FX that support Cockos VST extensions.\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_GetChainVisible, {"take"}, "returns index of effect visible in chain, or -1 for chain hidden, or -2 for\nchain visible but no effect selected")
add_meta(reaper.TakeFX_GetCount, {"take"}, nil)
add_meta(reaper.TakeFX_GetEnabled, {"take", "fx"}, "See TakeFX_SetEnabled FX indices can have 0x2000000 added to them, in which case\nthey will be used to address FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_GetEnvelope, {"take", "fxindex", "parameterindex", "create"}, "Returns the FX parameter envelope.\nIf the envelope does not exist and create=true, the envelope will be created.\nIf the envelope already exists and is bypassed and create=true, then the\nenvelope will be unbypassed.\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_GetFloatingWindow, {"take", "index"}, "returns HWND of floating window for effect index, if any FX indices can have\n0x2000000 added to them, in which case they will be used to address FX in\ncontainers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_GetFormattedParamValue, {"take", "fx", "param"}, "FX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_GetFXGUID, {"take", "fx"}, "FX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_GetFXName, {"take", "fx"}, "FX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_GetIOSize, {"take", "fx"}, "Gets the number of input/output pins for FX if available, returns plug-in type\nor -1 on error FX indices can have 0x2000000 added to them, in which case they\nwill be used to address FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_GetNamedConfigParm, {"take", "fx", "parmname"}, "gets plug-in specific named configuration value (returns true on success).\nsee TrackFX_GetNamedConfigParm FX indices can have 0x2000000 added to them, in\nwhich case they will be used to address FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_GetNumParams, {"take", "fx"}, "FX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_GetOffline, {"take", "fx"}, "See TakeFX_SetOffline FX indices can have 0x2000000 added to them, in which case\nthey will be used to address FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_GetOpen, {"take", "fx"}, "Returns true if this FX UI is open in the FX chain window or a floating window.\nSee TakeFX_SetOpen FX indices can have 0x2000000 added to them, in which case\nthey will be used to address FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_GetParam, {"take", "fx", "param"}, "FX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_GetParameterStepSizes, {"take", "fx", "param"}, "FX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_GetParamEx, {"take", "fx", "param"}, "FX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_GetParamFromIdent, {"take", "fx", "ident_str"}, "gets the parameter index from an identifying string (:wet, :bypass, or a string\nreturned from GetParamIdent), or -1 if unknown.\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_GetParamIdent, {"take", "fx", "param"}, "gets an identifying string for the parameter FX indices can have 0x2000000 added\nto them, in which case they will be used to address FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_GetParamName, {"take", "fx", "param"}, "FX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_GetParamNormalized, {"take", "fx", "param"}, "FX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_GetPinMappings, {"take", "fx", "isoutput", "pin"}, "gets the effective channel mapping bitmask for a particular pin.\nhigh32Out will be set to the high 32 bits.\nAdd 0x1000000 to pin index in order to access the second 64 bits of mappings\nindependent of the first 64 bits.\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_GetPreset, {"take", "fx"}, "Get the name of the preset currently showing in the REAPER dropdown, or the full\npath to a factory preset file for VST3 plug-ins (.vstpreset).\nSee TakeFX_SetPreset.\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_GetPresetIndex, {"take", "fx"}, "Returns current preset index, or -1 if error.\nnumberOfPresetsOut will be set to total number of presets available.\nSee TakeFX_SetPresetByIndex FX indices can have 0x2000000 added to them, in\nwhich case they will be used to address FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_GetUserPresetFilename, {"take", "fx"}, "FX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_NavigatePresets, {"take", "fx", "presetmove"}, "presetmove==1 activates the next preset, presetmove==-1 activates the previous\npreset, etc.\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_SetEnabled, {"take", "fx", "enabled"}, "See TakeFX_GetEnabled FX indices can have 0x2000000 added to them, in which case\nthey will be used to address FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_SetNamedConfigParm, {"take", "fx", "parmname", "value"}, "gets plug-in specific named configuration value (returns true on success).\nsee TrackFX_SetNamedConfigParm FX indices can have 0x2000000 added to them, in\nwhich case they will be used to address FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_SetOffline, {"take", "fx", "offline"}, "See TakeFX_GetOffline FX indices can have 0x2000000 added to them, in which case\nthey will be used to address FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_SetOpen, {"take", "fx", "open"}, "Open this FX UI.\nSee TakeFX_GetOpen FX indices can have 0x2000000 added to them, in which case\nthey will be used to address FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_SetParam, {"take", "fx", "param", "val"}, "FX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_SetParamNormalized, {"take", "fx", "param", "value"}, "FX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_SetPinMappings, {"take", "fx", "isoutput", "pin", "low32bits", "hi32bits"}, "sets the channel mapping bitmask for a particular pin.\nreturns false if unsupported (not all types of plug-ins support this\ncapability).\nAdd 0x1000000 to pin index in order to access the second 64 bits of mappings\nindependent of the first 64 bits.\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_SetPreset, {"take", "fx", "presetname"}, "Activate a preset with the name shown in the REAPER dropdown.\nFull paths to .vstpreset files are also supported for VST3 plug-ins.\nSee TakeFX_GetPreset.\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_SetPresetByIndex, {"take", "fx", "idx"}, "Sets the preset idx, or the factory preset (idx==-2), or the default user preset\n(idx==-1).\nReturns true on success.\nSee TakeFX_GetPresetIndex.\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeFX_Show, {"take", "index", "showFlag"}, "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating\nwindow(index valid), =3 for show floating window (index valid) FX indices can\nhave 0x2000000 added to them, in which case they will be used to address FX in\ncontainers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TakeIsMIDI, {"take"}, "Returns true if the active take contains MIDI.")
add_meta(reaper.ThemeLayout_GetLayout, {"section", "idx"}, "Gets theme layout information.\nsection can be 'global' for global layout override, 'seclist' to enumerate a\nlist of layout sections, otherwise a layout section such as 'mcp', 'tcp',\n'trans', etc.\nidx can be -1 to query the current value, -2 to get the description of the\nsection (if not global), -3 will return the current context DPI-scaling\n(256=normal, 512=retina, etc), or 0..x.\nreturns false if failed.")
add_meta(reaper.ThemeLayout_GetParameter, {"wp"}, "returns theme layout parameter.\nreturn value is cfg-name, or nil/empty if out of range.")
add_meta(reaper.ThemeLayout_RefreshAll, {}, "Refreshes all layouts")
add_meta(reaper.ThemeLayout_SetLayout, {"section", "layout"}, "Sets theme layout override for a particular section -- section can be 'global'\nor 'mcp' etc.\nIf setting global layout, prefix a ! to the layout string to clear any\nper-layout overrides.\nReturns false if failed.")
add_meta(reaper.ThemeLayout_SetParameter, {"wp", "value", "persist"}, "sets theme layout parameter to value.\npersist=true in order to have change loaded on next theme load.\nnote that the caller should update layouts via ??? to make changes visible.")
add_meta(reaper.time_precise, {}, "Gets a precise system timestamp in seconds")
add_meta(reaper.TimeMap2_beatsToTime, {"proj", "tpos", "measuresIn"}, "convert a beat position (or optionally a beats+measures if measures is non-NULL)\nto time.")
add_meta(reaper.TimeMap2_GetDividedBpmAtTime, {"proj", "time"}, "get the effective BPM at the time (seconds) position (i.e.\n2x in /8 signatures)")
add_meta(reaper.TimeMap2_GetNextChangeTime, {"proj", "time"}, "when does the next time map (tempo or time sig) change occur")
add_meta(reaper.TimeMap2_QNToTime, {"proj", "qn"}, "converts project QN position to time.")
add_meta(reaper.TimeMap2_timeToBeats, {"proj", "tpos"}, "convert a time into beats.\nif measures is non-NULL, measures will be set to the measure count, return value\nwill be beats since measure.\nif cml is non-NULL, will be set to current measure length in beats (i.e.\ntime signature numerator)\nif fullbeats is non-NULL, and measures is non-NULL, fullbeats will get the full\nbeat count (same value returned if measures is NULL).\nif cdenom is non-NULL, will be set to the current time signature denominator.")
add_meta(reaper.TimeMap2_timeToQN, {"proj", "tpos"}, "converts project time position to QN position.")
add_meta(reaper.TimeMap_curFrameRate, {"proj"}, "Gets project framerate, and optionally whether it is drop-frame timecode")
add_meta(reaper.TimeMap_GetDividedBpmAtTime, {"time"}, "get the effective BPM at the time (seconds) position (i.e.\n2x in /8 signatures)")
add_meta(reaper.TimeMap_GetMeasureInfo, {"proj", "measure"}, "Get the QN position and time signature information for the start of a measure.\nReturn the time in seconds of the measure start.")
add_meta(reaper.TimeMap_GetMetronomePattern, {"proj", "time", "pattern"}, "Fills in a string representing the active metronome pattern.\nFor example, in a 7/8 measure divided 3+4, the pattern might be \"1221222\".\nThe length of the string is the time signature numerator, and the function\nreturns the time signature denominator.")
add_meta(reaper.TimeMap_GetTimeSigAtTime, {"proj", "time"}, "get the effective time signature and tempo")
add_meta(reaper.TimeMap_QNToMeasures, {"proj", "qn"}, "Find which measure the given QN position falls in.")
add_meta(reaper.TimeMap_QNToTime, {"qn"}, "converts project QN position to time.")
add_meta(reaper.TimeMap_QNToTime_abs, {"proj", "qn"}, "Converts project quarter note count (QN) to time.\nQN is counted from the start of the project, regardless of any partial measures.\nSee TimeMap2_QNToTime")
add_meta(reaper.TimeMap_timeToQN, {"tpos"}, "converts project QN position to time.")
add_meta(reaper.TimeMap_timeToQN_abs, {"proj", "tpos"}, "Converts project time position to quarter note count (QN).\nQN is counted from the start of the project, regardless of any partial measures.\nSee TimeMap2_timeToQN")
add_meta(reaper.ToggleTrackSendUIMute, {"track", "send_idx"}, "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends.")
add_meta(reaper.Track_GetPeakHoldDB, {"track", "channel", "clear"}, "Returns meter hold state, in dB*0.01 (0 = +0dB, -0.01 = -1dB, 0.02 = +2dB, etc).\nIf clear is set, clears the meter hold.\nIf channel==1024 or channel==1025, returns loudness values if this is the master\ntrack or this track's VU meters are set to display loudness.")
add_meta(reaper.Track_GetPeakInfo, {"track", "channel"}, "Returns peak meter value (1.0=+0dB, 0.0=-inf) for channel.\nIf channel==1024 or channel==1025, returns loudness values if this is the master\ntrack or this track's VU meters are set to display loudness.")
add_meta(reaper.TrackCtl_SetToolTip, {"fmt", "xpos", "ypos", "topmost"}, "displays tooltip at location, or removes if empty string")
add_meta(reaper.TrackFX_AddByName, {"track", "fxname", "recFX", "instantiate"}, "Adds or queries the position of a named FX from the track FX chain (recFX=false)\nor record input FX/monitoring FX (recFX=true, monitoring FX are on master\ntrack).\nSpecify a negative value for instantiate to always create a new effect, 0 to\nonly query the first instance of an effect, or a positive value to add an\ninstance if one is not found.\nIf instantiate is <= -1000, it is used for the insertion position (-1000 is\nfirst item in chain, -1001 is second, etc).\nfxname can have prefix to specify type: VST3:,VST2:,VST:,AU:,JS:, or DX:, or\nFXADD: which adds selected items from the currently-open FX browser, FXADD:2 to\nlimit to 2 FX added, or FXADD:2e to only succeed if exactly 2 FX are selected.\nReturns -1 on failure or the new position in chain on success.\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_CopyToTake, {"src_track", "src_fx", "dest_take", "dest_fx", "is_move"}, "Copies (or moves) FX from src_track to dest_take.\nsrc_fx can have 0x1000000 set to reference input FX.\nFX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_CopyToTrack, {"src_track", "src_fx", "dest_track", "dest_fx", "is_move"}, "Copies (or moves) FX from src_track to dest_track.\nCan be used with src_track=dest_track to reorder, FX indices have 0x1000000 set\nto reference input FX.\nFX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_Delete, {"track", "fx"}, "Remove a FX from track chain (returns true on success) FX indices for tracks can\nhave 0x1000000 added to them in order to reference record input FX (normal\ntracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_EndParamEdit, {"track", "fx", "param"}, "FX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_FormatParamValue, {"track", "fx", "param", "val"}, "Note: only works with FX that support Cockos VST extensions.\nFX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_FormatParamValueNormalized, {"track", "fx", "param", "value", "buf"}, "Note: only works with FX that support Cockos VST extensions.\nFX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_GetByName, {"track", "fxname", "instantiate"}, "Get the index of the first track FX insert that matches fxname.\nIf the FX is not in the chain and instantiate is true, it will be inserted.\nSee TrackFX_GetInstrument, TrackFX_GetEQ.\nDeprecated in favor of TrackFX_AddByName.")
add_meta(reaper.TrackFX_GetChainVisible, {"track"}, "returns index of effect visible in chain, or -1 for chain hidden, or -2 for\nchain visible but no effect selected")
add_meta(reaper.TrackFX_GetCount, {"track"}, nil)
add_meta(reaper.TrackFX_GetEnabled, {"track", "fx"}, "See TrackFX_SetEnabled FX indices for tracks can have 0x1000000 added to them in\norder to reference record input FX (normal tracks) or hardware output FX (master\ntrack).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_GetEQ, {"track", "instantiate"}, "Get the index of ReaEQ in the track FX chain.\nIf ReaEQ is not in the chain and instantiate is true, it will be inserted.\nSee TrackFX_GetInstrument, TrackFX_GetByName.")
add_meta(reaper.TrackFX_GetEQBandEnabled, {"track", "fxidx", "bandtype", "bandidx"}, "Returns true if the EQ band is enabled.\nReturns false if the band is disabled, or if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf,\n5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype,\n1=target 2nd band matching bandtype, etc.\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam,\nTrackFX_SetEQBandEnabled.\nFX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_GetEQParam, {"track", "fxidx", "paramidx"}, "Returns false if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf,\n5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype,\n1=target 2nd band matching bandtype, etc.\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\nSee TrackFX_GetEQ, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled,\nTrackFX_SetEQBandEnabled.\nFX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_GetFloatingWindow, {"track", "index"}, "returns HWND of floating window for effect index, if any FX indices for tracks\ncan have 0x1000000 added to them in order to reference record input FX (normal\ntracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_GetFormattedParamValue, {"track", "fx", "param"}, "FX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_GetFXGUID, {"track", "fx"}, "FX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_GetFXName, {"track", "fx"}, "FX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_GetInstrument, {"track"}, "Get the index of the first track FX insert that is a virtual instrument, or -1\nif none.\nSee TrackFX_GetEQ, TrackFX_GetByName.")
add_meta(reaper.TrackFX_GetIOSize, {"track", "fx"}, "Gets the number of input/output pins for FX if available, returns plug-in type\nor -1 on error FX indices for tracks can have 0x1000000 added to them in order\nto reference record input FX (normal tracks) or hardware output FX (master\ntrack).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_GetNamedConfigParm, {"track", "fx", "parmname"}, "gets plug-in specific named configuration value (returns true on success).\n\nSupported values for read:\npdc : PDC latency\nin_pin_X : name of input pin X\nout_pin_X : name of output pin X\nfx_type : type string\nfx_ident : type-specific identifier\nfx_name : name of FX (also supported as original_name)\nGainReduction_dB : [ReaComp + other supported compressors]\nparent_container : FX ID of parent container, if any (v7.06+)\ncontainer_count : [Container] number of FX in container\ncontainer_item.X : FX ID of item in container (first item is container_item.0)\n(v7.06+)\nparam.X.container_map.hint_id : unique ID of mapping (preserved if mapping order\nchanges)\nparam.X.container_map.delete : read this value in order to remove the mapping\nfor this parameter\ncontainer_map.add : read from this value to add a new container parameter\nmapping -- will return new parameter index (accessed via\nparam.X.container_map.*)\ncontainer_map.add.FXID.PARMIDX : read from this value to add/get container\nparameter mapping for FXID/PARMIDX -- will return the parameter index (accessed\nvia param.X.container_map.*).\nFXID can be a full address (must be a child of the container) or a 0-based\nsub-index (v7.06+).\ncontainer_map.get.FXID.PARMIDX : read from this value to get container parameter\nmapping for FXID/PARMIDX -- will return the parameter index (accessed via\nparam.X.container_map.*).\nFXID can be a full address (must be a child of the container) or a 0-based\nsub-index (v7.06+).\nSupported values for read/write:\nvst_chunk[_program] : base64-encoded VST-specific chunk.\nclap_chunk : base64-encoded CLAP-specific chunk.\nparam.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter\nmoduation LFO state\nparam.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo,x2,y2] :\nparameter modulation ACS state\n\nparam.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2]\n: parameter link/MIDI link: set effect=-100 to support midi_*\nparam.X.mod.[active,baseline,visible] : parameter module global settings\nparam.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string\nif set\nparam.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1,\n2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)\nparam.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX\nonly, &8=LFO retrigger, &16=visible FX only\nparam.X.container_map.fx_index : index of FX contained in container\nparam.X.container_map.fx_parm : parameter index of parameter of FX contained in\ncontainer\nparam.X.container_map.aliased_name : name of parameter (if user-renamed,\notherwise fails)\nBANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]\nTHRESHOLD, CEILING, TRUEPEAK : [ReaLimit]\nNUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]\nITEMx : [ReaVerb] state configuration line, when writing should be followed by a\nwrite of DONE\nFILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are\nwrite-only, when writing any, should be followed by a write of DONE\nMODE, RSMODE : [RS5k] general mode, resample mode\nVIDEO_CODE : [video processor] code\nforce_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence\nparallel : 0, 1 or 2 - 1=process plug-in in parallel with previous, 2=process\nplug-in parallel and merge MIDI\ninstance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k,\n2=~192k, etc.\nWhen setting requires playback stop/start to take effect\nchain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k,\n2=~192k, etc.\nWhen setting requires playback stop/start to take effect\nchain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC,\n3=hwcomp-master)\nchain_sel : selected/visible FX in chain\nrenamed_name : renamed FX instance name (empty string = not renamed)\ncontainer_nch : number of internal channels for container\ncontainer_nch_in : number of input pins for container\ncontainer_nch_out : number of output pints for container\ncontainer_nch_feedback : number of internal feedback channels enabled in\ncontainer\nfocused : reading returns 1 if focused.\nWriting a positive value to this sets the FX UI as \"last focused.\"\nlast_touched : reading returns two integers, one indicates whether FX is the\nlast-touched FX, the second indicates which parameter was last touched.\nWriting a negative value ensures this plug-in is not set as last touched,\notherwise the FX is set \"last touched,\" and last touched parameter index is set\nto the value in the string (if valid).\nFX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_GetNumParams, {"track", "fx"}, "FX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_GetOffline, {"track", "fx"}, "See TrackFX_SetOffline FX indices for tracks can have 0x1000000 added to them in\norder to reference record input FX (normal tracks) or hardware output FX (master\ntrack).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_GetOpen, {"track", "fx"}, "Returns true if this FX UI is open in the FX chain window or a floating window.\nSee TrackFX_SetOpen FX indices for tracks can have 0x1000000 added to them in\norder to reference record input FX (normal tracks) or hardware output FX (master\ntrack).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_GetParam, {"track", "fx", "param"}, "FX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_GetParameterStepSizes, {"track", "fx", "param"}, "FX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_GetParamEx, {"track", "fx", "param"}, "FX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_GetParamFromIdent, {"track", "fx", "ident_str"}, "gets the parameter index from an identifying string (:wet, :bypass, :delta, or a\nstring returned from GetParamIdent), or -1 if unknown.\nFX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_GetParamIdent, {"track", "fx", "param"}, "gets an identifying string for the parameter FX indices for tracks can have\n0x1000000 added to them in order to reference record input FX (normal tracks) or\nhardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_GetParamName, {"track", "fx", "param"}, "FX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_GetParamNormalized, {"track", "fx", "param"}, "FX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_GetPinMappings, {"tr", "fx", "isoutput", "pin"}, "gets the effective channel mapping bitmask for a particular pin.\nhigh32Out will be set to the high 32 bits.\nAdd 0x1000000 to pin index in order to access the second 64 bits of mappings\nindependent of the first 64 bits.\nFX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_GetPreset, {"track", "fx"}, "Get the name of the preset currently showing in the REAPER dropdown, or the full\npath to a factory preset file for VST3 plug-ins (.vstpreset).\nSee TrackFX_SetPreset.\nFX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_GetPresetIndex, {"track", "fx"}, "Returns current preset index, or -1 if error.\nnumberOfPresetsOut will be set to total number of presets available.\nSee TrackFX_SetPresetByIndex FX indices for tracks can have 0x1000000 added to\nthem in order to reference record input FX (normal tracks) or hardware output FX\n(master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_GetRecChainVisible, {"track"}, "returns index of effect visible in record input chain, or -1 for chain hidden,\nor -2 for chain visible but no effect selected")
add_meta(reaper.TrackFX_GetRecCount, {"track"}, "returns count of record input FX.\nTo access record input FX, use a FX indices [0x1000000..0x1000000+n).\nOn the master track, this accesses monitoring FX rather than record input FX.")
add_meta(reaper.TrackFX_GetUserPresetFilename, {"track", "fx"}, "FX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_NavigatePresets, {"track", "fx", "presetmove"}, "presetmove==1 activates the next preset, presetmove==-1 activates the previous\npreset, etc.\nFX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_SetEnabled, {"track", "fx", "enabled"}, "See TrackFX_GetEnabled FX indices for tracks can have 0x1000000 added to them in\norder to reference record input FX (normal tracks) or hardware output FX (master\ntrack).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_SetEQBandEnabled, {"track", "fxidx", "bandtype", "bandidx", "enable"}, "Enable or disable a ReaEQ band.\nReturns false if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf,\n5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype,\n1=target 2nd band matching bandtype, etc.\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam,\nTrackFX_GetEQBandEnabled.\nFX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_SetEQParam, {"track", "fxidx", "bandtype", "bandidx", "paramtype", "val", "isnorm"}, "Returns false if track/fxidx is not ReaEQ.\nTargets a band matching bandtype.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf,\n5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype,\n1=target 2nd band matching bandtype, etc.\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_GetEQBandEnabled,\nTrackFX_SetEQBandEnabled.\nFX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_SetNamedConfigParm, {"track", "fx", "parmname", "value"}, "sets plug-in specific named configuration value (returns true on success).\nSupport values for write:\nvst_chunk[_program] : base64-encoded VST-specific chunk.\nclap_chunk : base64-encoded CLAP-specific chunk.\nparam.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter\nmoduation LFO state\nparam.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo,x2,y2] :\nparameter modulation ACS state\n\nparam.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2]\n: parameter link/MIDI link: set effect=-100 to support midi_*\nparam.X.mod.[active,baseline,visible] : parameter module global settings\nparam.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string\nif set\nparam.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1,\n2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)\nparam.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX\nonly, &8=LFO retrigger, &16=visible FX only\nparam.X.container_map.fx_index : index of FX contained in container\nparam.X.container_map.fx_parm : parameter index of parameter of FX contained in\ncontainer\nparam.X.container_map.aliased_name : name of parameter (if user-renamed,\notherwise fails)\nBANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]\nTHRESHOLD, CEILING, TRUEPEAK : [ReaLimit]\nNUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]\nITEMx : [ReaVerb] state configuration line, when writing should be followed by a\nwrite of DONE\nFILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are\nwrite-only, when writing any, should be followed by a write of DONE\nMODE, RSMODE : [RS5k] general mode, resample mode\nVIDEO_CODE : [video processor] code\nforce_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence\nparallel : 0, 1 or 2 - 1=process plug-in in parallel with previous, 2=process\nplug-in parallel and merge MIDI\ninstance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k,\n2=~192k, etc.\nWhen setting requires playback stop/start to take effect\nchain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k,\n2=~192k, etc.\nWhen setting requires playback stop/start to take effect\nchain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC,\n3=hwcomp-master)\nchain_sel : selected/visible FX in chain\nrenamed_name : renamed FX instance name (empty string = not renamed)\ncontainer_nch : number of internal channels for container\ncontainer_nch_in : number of input pins for container\ncontainer_nch_out : number of output pints for container\ncontainer_nch_feedback : number of internal feedback channels enabled in\ncontainer\nfocused : reading returns 1 if focused.\nWriting a positive value to this sets the FX UI as \"last focused.\"\nlast_touched : reading returns two integers, one indicates whether FX is the\nlast-touched FX, the second indicates which parameter was last touched.\nWriting a negative value ensures this plug-in is not set as last touched,\notherwise the FX is set \"last touched,\" and last touched parameter index is set\nto the value in the string (if valid).\nFX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_SetOffline, {"track", "fx", "offline"}, "See TrackFX_GetOffline FX indices for tracks can have 0x1000000 added to them in\norder to reference record input FX (normal tracks) or hardware output FX (master\ntrack).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_SetOpen, {"track", "fx", "open"}, "Open this FX UI.\nSee TrackFX_GetOpen FX indices for tracks can have 0x1000000 added to them in\norder to reference record input FX (normal tracks) or hardware output FX (master\ntrack).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_SetParam, {"track", "fx", "param", "val"}, "FX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_SetParamNormalized, {"track", "fx", "param", "value"}, "FX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_SetPinMappings, {"tr", "fx", "isoutput", "pin", "low32bits", "hi32bits"}, "sets the channel mapping bitmask for a particular pin.\nreturns false if unsupported (not all types of plug-ins support this\ncapability).\nAdd 0x1000000 to pin index in order to access the second 64 bits of mappings\nindependent of the first 64 bits.\nFX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_SetPreset, {"track", "fx", "presetname"}, "Activate a preset with the name shown in the REAPER dropdown.\nFull paths to .vstpreset files are also supported for VST3 plug-ins.\nSee TrackFX_GetPreset.\nFX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_SetPresetByIndex, {"track", "fx", "idx"}, "Sets the preset idx, or the factory preset (idx==-2), or the default user preset\n(idx==-1).\nReturns true on success.\nSee TrackFX_GetPresetIndex.\nFX indices for tracks can have 0x1000000 added to them in order to reference\nrecord input FX (normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackFX_Show, {"track", "index", "showFlag"}, "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating\nwindow(index valid), =3 for show floating window (index valid) FX indices for\ntracks can have 0x1000000 added to them in order to reference record input FX\n(normal tracks) or hardware output FX (master track).\nFX indices can have 0x2000000 added to them, in which case they will be used to\naddress FX in containers.\nTo address a container, the 1-based subitem is multiplied by one plus the count\nof the FX chain and added to the 1-based container item index.\ne.g.\nto address the third item in the container at the second position of the track\nFX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2.\nThis can be extended to sub-containers using TrackFX_GetNamedConfigParm with\ncontainer_count and similar logic.\nIn REAPER v7.06+, you can use the much more convenient method to navigate\nhierarchies, see TrackFX_GetNamedConfigParm with parent_container and\ncontainer_item.X.")
add_meta(reaper.TrackList_AdjustWindows, {"isMinor"}, nil)
add_meta(reaper.TrackList_UpdateAllExternalSurfaces, {}, nil)
add_meta(reaper.Undo_BeginBlock, {}, "call to start a new block")
add_meta(reaper.Undo_BeginBlock2, {"proj"}, "call to start a new block")
add_meta(reaper.Undo_CanRedo2, {"proj"}, "returns string of next action,if able,NULL if not")
add_meta(reaper.Undo_CanUndo2, {"proj"}, "returns string of last action,if able,NULL if not")
add_meta(reaper.Undo_DoRedo2, {"proj"}, "nonzero if success")
add_meta(reaper.Undo_DoUndo2, {"proj"}, "nonzero if success")
add_meta(reaper.Undo_EndBlock, {"descchange", "extraflags"}, "call to end the block,with extra flags if any,and a description")
add_meta(reaper.Undo_EndBlock2, {"proj", "descchange", "extraflags"}, "call to end the block,with extra flags if any,and a description")
add_meta(reaper.Undo_OnStateChange, {"descchange"}, "limited state change to items")
add_meta(reaper.Undo_OnStateChange2, {"proj", "descchange"}, "limited state change to items")
add_meta(reaper.Undo_OnStateChange_Item, {"proj", "name", "item"}, nil)
add_meta(reaper.Undo_OnStateChangeEx, {"descchange", "whichStates", "trackparm"}, "trackparm=-1 by default,or if updating one fx chain,you can specify track index")
add_meta(reaper.Undo_OnStateChangeEx2, {"proj", "descchange", "whichStates", "trackparm"}, "trackparm=-1 by default,or if updating one fx chain,you can specify track index")
add_meta(reaper.UpdateArrange, {}, "Redraw the arrange view")
add_meta(reaper.UpdateItemInProject, {"item"}, nil)
add_meta(reaper.UpdateItemLanes, {"proj"}, "Recalculate lane arrangement for fixed lane tracks, including auto-removing\nempty lanes at the bottom of the track")
add_meta(reaper.UpdateTimeline, {}, "Redraw the arrange view and ruler")
add_meta(reaper.ValidatePtr, {"pointer", "ctypename"}, "see ValidatePtr2")
add_meta(reaper.ValidatePtr2, {"proj", "pointer", "ctypename"}, "Return true if the pointer is a valid object of the right type in proj (proj is\nignored if pointer is itself a project).\nSupported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*,\nTrackEnvelope* and PCM_source*.")
add_meta(reaper.ViewPrefs, {"page", "pageByName"}, "Opens the prefs to a page, use pageByName if page is 0.\nView:\n[] [] [] [] []")
add_meta(reaper.atexit, {"function"}, "Adds code to be executed when the script finishes or is ended by the user.\nTypically used to clean up after the user terminates defer() or runloop() code.")
add_meta(reaper.defer, {"function"}, "Adds code to be called back by REAPER.\nUsed to create persistent ReaScripts that continue to run and respond to input,\nwhile the user does other tasks.\nIdentical to runloop().\nNote that no undo point will be automatically created when the script finishes,\nunless you create it explicitly.")
add_meta(reaper.get_action_context, {}, "is_new_value,filename,sectionID,cmdID,mode,resolution,val,contextstr =\nreaper.get_action_context()\nReturns contextual information about the script, typically MIDI/OSC input\nvalues.\nval will be set to a relative or absolute value depending on mode (=0: absolute\nmode, >0: relative modes).\nresolution=127 for 7-bit resolution, =16383 for 14-bit resolution.\nsectionID, and cmdID will be set to -1 if the script is not part of the action\nlist.\nmode, resolution and val will be set to -1 if the script was not triggered via\nMIDI/OSC.\ncontextstr may be empty or one of:(flags may include V=virtkey, S=shift,\nA=alt/option, C=control/command, W=win/control)")
add_meta(reaper.arc, {"x", "y", "r", "ang1", "ang2", "antialias"}, "Draws an arc of the circle centered at x,y, with ang1/ang2 being specified in\nradians.")
add_meta(reaper.blit, {"source", "scale", "rotation", "srcx", "srcy", "srcw", "srch", "destx", "desty", "destw", "desth", "rotxoffs", "rotyoffs"}, "Copies from source (-1 = main framebuffer, or an image from gfx.loadimg() etc),\nusing current opacity and copy mode (set with gfx.a, gfx.mode).\nIf destx/desty are not specified, gfx.x/gfx.y will be used as the destination\nposition.\nscale (1.0 is unscaled) will be used only if destw/desth are not specified.\nrotation is an angle in radians\nsrcx/srcy/srcw/srch specify the source rectangle (if omitted srcw/srch default\nto image size)\ndestx/desty/destw/desth specify destination rectangle (if not specified\ndestw/desth default to srcw/srch * scale).")
add_meta(reaper.blitext, {"source", "coordinatelist", "rotation"}, "Deprecated, use gfx.blit instead.")
add_meta(reaper.blurto, {"x", "y"}, "Blurs the region of the screen between gfx.x,gfx.y and x,y, and updates\ngfx.x,gfx.y to x,y.")
add_meta(reaper.circle, {"x", "y", "r", "fill", "antialias"}, "Draws a circle, optionally filling/antialiasing.")
add_meta(reaper.clienttoscreen, {"x", "y"}, "Converts the coordinates x,y to screen coordinates, returns those values.")
add_meta(reaper.deltablit, {"srcimg", "srcs", "srct", "srcw", "srch", "destx", "desty", "destw", "desth", "dsdx", "dtdx", "dsdy", "dtdy", "dsdxdy", "dtdxdy", "usecliprect"}, "Blits from srcimg(srcx,srcy,srcw,srch) to destination (destx,desty,destw,desth).\nSource texture coordinates are s/t, dsdx represents the change in s coordinate\nfor each x pixel, dtdy represents the change in t coordinate for each y pixel,\netc.\ndsdxdy represents the change in dsdx for each line.\nIf usecliprect is specified and 0, then srcw/srch are ignored.")
add_meta(reaper.dock, {"v", "wx", "wy", "ww", "wh"}, "Call with v=-1 to query docked state, otherwise v>=0 to set docked state.\nState is &1 if docked, second byte is docker index (or last docker index if\nundocked).\nIf wx-wh specified, additional values will be returned with the undocked window\nposition/size")
add_meta(reaper.drawchar, {"char"}, "Draws the character (can be a numeric ASCII code as well), to gfx.x, gfx.y, and\nmoves gfx.x over by the size of the character.")
add_meta(reaper.drawnumber, {"n", "ndigits"}, "Draws the number n with ndigits of precision to gfx.x, gfx.y, and updates gfx.x\nto the right side of the drawing.\nThe text height is gfx.texth.")
add_meta(reaper.drawstr, {"str", "flags", "right", "bottom"}, "Draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y so that subsequent draws\nwill occur in a similar place.\nIf flags, right ,bottom passed in:")
add_meta(reaper.getchar, {"char", "unichar"}, "If char is 0 or omitted, returns a character from the keyboard queue, or 0 if no\ncharacter is available, or -1 if the graphics window is not open.\nIf char is specified and nonzero, that character's status will be checked, and\nthe function will return greater than 0 if it is pressed.\nNote that calling gfx.getchar() at least once causes gfx.mouse_cap to reflect\nkeyboard modifiers even when the mouse is not captured.\nCommon values are standard ASCII, such as 'a', 'A', '=' and '1', but for many\nkeys multi-byte values are used, including 'home', 'up', 'down', 'left', 'rght',\n'f1'..\n'f12', 'pgup', 'pgdn', 'ins', and 'del'.\n\nModified and special keys can also be returned, including:")
add_meta(reaper.getdropfile, {"idx"}, "Returns success,string for dropped file index idx.\ncall gfx.dropfile(-1) to clear the list when finished.")
add_meta(reaper.getfont, {}, "Returns current font index, and the actual font face used by this font (if\navailable).")
add_meta(reaper.getimgdim, {"handle"}, "Retreives the dimensions of an image specified by handle, returns w, h pair.")
add_meta(reaper.getpixel, {}, "Returns r,g,b values [0..1] of the pixel at (gfx.x,gfx.y)")
add_meta(reaper.gradrect, {"x", "y", "w", "h", "r", "g", "b", "a", "drdx", "dgdx", "dbdx", "dadx", "drdy", "dgdy", "dbdy", "dady"}, "Fills a gradient rectangle with the color and alpha specified.\ndrdx-dadx reflect the adjustment (per-pixel) applied for each pixel moved to the\nright, drdy-dady are the adjustment applied for each pixel moved toward the\nbottom.\nNormally drdx=adjustamount/w, drdy=adjustamount/h, etc.")
add_meta(reaper.init, {"name", "width", "height", "dockstate", "xpos", "ypos"}, "Initializes the graphics window with title name.\nSuggested width and height can be specified.\nIf window is already open, a non-empty name will re-title window, or an empty\ntitle will resize window.\n\nOnce the graphics window is open, gfx.update() should be called periodically.")
add_meta(reaper.line, {"x", "y", "x2", "y2", "aa"}, "Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it\nwill be antialiased.")
add_meta(reaper.lineto, {"x", "y", "aa"}, "Draws a line from gfx.x,gfx.y to x,y.\nIf aa is 0.5 or greater, then antialiasing is used.\nUpdates gfx.x and gfx.y to x,y.")
add_meta(reaper.loadimg, {"image", "filename"}, "Load image from filename into slot 0..1024-1 specified by image.\nReturns the image index if success, otherwise -1 if failure.\nThe image will be resized to the dimensions of the image file.")
add_meta(reaper.measurechar, {"char"}, "Measures the drawing dimensions of a character with the current font (as set by\ngfx.setfont).\nReturns width and height of character.")
add_meta(reaper.measurestr, {"str"}, "Measures the drawing dimensions of a string with the current font (as set by\ngfx.setfont).\nReturns width and height of string.")
add_meta(reaper.muladdrect, {"x", "y", "w", "h", "mul_r", "mul_g", "mul_b", "mul_a", "add_r", "add_g", "add_b", "add_a"}, "Multiplies each pixel by mul_* and adds add_*, and updates in-place.\nUseful for changing brightness/contrast, or other effects.")
add_meta(reaper.quit, {}, "Closes the graphics window.")
add_meta(reaper.rect, {"x", "y", "w", "h", "filled"}, "Fills a rectangle at x,y, w,h pixels in dimension, filled by default.")
add_meta(reaper.rectto, {"x", "y"}, "Fills a rectangle from gfx.x,gfx.y to x,y.\nUpdates gfx.x,gfx.y to x,y.")
add_meta(reaper.roundrect, {"x", "y", "w", "h", "radius", "antialias"}, "Draws a rectangle with rounded corners.")
add_meta(reaper.screentoclient, {"x", "y"}, "Converts the screen coordinates x,y to client coordinates, returns those values.")
add_meta(reaper.set, {"r", "g", "b", "a", "mode", "dest", "a2"}, "Sets gfx.r/gfx.g/gfx.b/gfx.a/gfx.mode/gfx.a2, sets gfx.dest if final parameter\nspecified")
add_meta(reaper.setcursor, {"resource_id", "custom_cursor_name"}, "Sets the mouse cursor to resource_id and/or custom_cursor_name.")
add_meta(reaper.setfont, {"idx", "fontface", "sz", "flags"}, "Can select a font and optionally configure it.\nidx=0 for default bitmapped font, no configuration is possible for this font.\nidx=1..16 for a configurable font, specify fontface such as \"Arial\", sz of\n8-100, and optionally specify flags, which is a multibyte character, which can\ninclude 'i' for italics, 'u' for underline, or 'b' for bold.\nThese flags may or may not be supported depending on the font and OS.\nAfter calling gfx.setfont(), gfx.texth may be updated to reflect the new average\nline height.")
add_meta(reaper.setimgdim, {"image", "w", "h"}, "Resize image referenced by index 0..1024-1, width and height must be 0-8192.\nThe contents of the image will be undefined after the resize.")
add_meta(reaper.setpixel, {"r", "g", "b"}, "Writes a pixel of r,g,b to gfx.x,gfx.y.")
add_meta(reaper.showmenu, {"str"}, "Shows a popup menu at gfx.x,gfx.y.\nstr is a list of fields separated by | characters.\nEach field represents a menu item.\nFields can start with special characters:\n# : grayed out\n! : checked\n> : this menu item shows a submenu\n< : last item in the current submenu\nAn empty field will appear as a separator in the menu.\ngfx.showmenu returns 0 if the user selected nothing from the menu, 1 if the\nfirst field is selected, etc.\nExample:\ngfx.showmenu(\"first item, followed by separator||!second item, checked|>third\nitem which spawns a submenu|#first item in submenu, grayed out|<second and last\nitem in submenu|fourth item in top menu\")")
add_meta(reaper.transformblit, {"srcimg", "destx", "desty", "destw", "desth", "div_w", "div_h", "table"}, "Blits to destination at (destx,desty), size (destw,desth).\ndiv_w and div_h should be 2..64, and table should point to a table of\n2*div_w*div_h values (table can be a regular table or (for less overhead) a\nreaper.array).\nEach pair in the table represents a S,T coordinate in the source image, and the\ntable is treated as a left-right, top-bottom list of texture coordinates, which\nwill then be rendered to the destination.")
add_meta(reaper.update, {}, "Updates the graphics display, if opened")
add_meta(reaper.gmem_attach, {"sharedMemoryName"}, "Causes gmem_read()/gmem_write() to read EEL2/JSFX/Video shared memory segment\nnamed by parameter.\nSet to empty string to detach.\n6.20+: returns previous shared memory segment name.")
add_meta(reaper.gmem_read, {"index"}, "Read (number) value from shared memory attached-to by gmem_attach().\nindex can be [0..1<<25).")
add_meta(reaper.gmem_write, {"index", "value"}, "Write (number) value to shared memory attached-to by gmem_attach().\nindex can be [0..1<<25).")
add_meta(reaper.runloop, {"function"}, "Adds code to be called back by REAPER.\nUsed to create persistent ReaScripts that continue to run and respond to input,\nwhile the user does other tasks.\nIdentical to defer().\nNote that no undo point will be automatically created when the script finishes,\nunless you create it explicitly.")
add_meta(reaper.set_action_options, {"flag"}, "reaper.set_action_options(flag)\nSets action options for the script.\nflag&1: script will auto-terminate if re-launched while already running\nflag&2: if (flag&1) is set, script will re-launch after auto-terminating\nflag&4: set script toggle state on\nflag&8: set script toggle state off")
add_meta(reaper.clear, {"value", "offset", "size"}, "Sets the value of zero or more items in the array.\nIf value not specified, 0.0 is used.\noffset is 1-based, if size omitted then the maximum amount available will be\nset.")
add_meta(reaper.convolve, {"src", "srcoffs", "size", "destoffs"}, "Convolves complex value pairs from reaper.array, starting at 1-based srcoffs,\nreading/writing to 1-based destoffs.\nsize is in normal items (so it must be even)")
add_meta(reaper.copy, {"src", "srcoffs", "size", "destoffs"}, "Copies values from reaper.array or table, starting at 1-based srcoffs, writing\nto 1-based destoffs.")
add_meta(reaper.fft, {"size", "permute", "offset"}, "Performs a forward FFT of size.\nsize must be a power of two between 4 and 32768 inclusive.\nIf permute is specified and true, the values will be shuffled following the FFT\nto be in normal order.")
add_meta(reaper.fft_real, {"size", "permute", "offset"}, "Performs a forward real->complex FFT of size.\nsize must be a power of two between 4 and 32768 inclusive.\nIf permute is specified and true, the values will be shuffled following the FFT\nto be in normal order.")
add_meta(reaper.get_alloc, {}, "Returns the maximum (allocated) size of the array.")
add_meta(reaper.ifft, {"size", "permute", "offset"}, "Performs a backwards FFT of size.\nsize must be a power of two between 4 and 32768 inclusive.\nIf permute is specified and true, the values will be shuffled before the IFFT to\nbe in fft-order.")
add_meta(reaper.ifft_real, {"size", "permute", "offset"}, "Performs a backwards complex->real FFT of size.\nsize must be a power of two between 4 and 32768 inclusive.\nIf permute is specified and true, the values will be shuffled before the IFFT to\nbe in fft-order.")
add_meta(reaper.multiply, {"src", "srcoffs", "size", "destoffs"}, "Multiplies values from reaper.array, starting at 1-based srcoffs,\nreading/writing to 1-based destoffs.")
add_meta(reaper.resize, {"size"}, "Resizes an array object to size.\nsize must be [0..max_size].")
add_meta(reaper.table, {"offset", "size"}, "Returns a new table with values from items in the array.\nOffset is 1-based and if size is omitted all available values are used.")
return {}
