* Reapl, a reaper REPL

The goal of this project is to implement a reaper REPL that speaks lisp.

** Reaper

[[https://www.reaper.fm/][Reaper]] is an highly extensible DAW.
It is scriptable using the [[https://www.lua.org/][Lua language]].

** Fennel

[[https://fennel-lang.org/][Fennel]] is a lisp that compiles to lua.
Therefore it is the perfect tool for creating a lisp repl for reaper.

** Setup

*** Prerequisites

- [[https://reapack.com/][reapack]]

*** Reaper

In reaper 7.x, go to Extensions > ReaPack > Import repositories...

Paste this url: =https://raw.githubusercontent.com/pbaille/reapl/main/index.xml=

Now, the =pbaille_start fennel repl= should be available.

Once triggered, a console window will appear:

[[file:resources/repl_window.png]]

** Usage

2 options are available in order to talk to the reapl backend:

*** from clojure

- Clone this repo

=git clone git@github.com:pbaille/reapl.git=

- Launch a repl

#+begin_src clojure
(require '[reapl.interop :refer [>> <<]])
;; the >> form let you send an expression to execute, without caring about the return value
(>> (reaper.ShowConsoleMsg "hello"))
;; the << form brings you back the value
(<< (reaper.GetAppVersion))
;; => "7.x/xxx"
#+end_src

There is some sample expressions to evaluate in =src/clojure/reapl/scratch.clj=

*** from emacs

Load the =src/elisp/reapl-interop.el= file into emacs.

Use the =pb/send-fnl-s-expression-to-reaper-socket-repl= function to send thing at point to reaper.

Getting the return value is not implemented for now.

*** manually

In order to interact with the backend you will have to send messages to =http://localhost:9999= and eventually listen to =http://localhost:9997= for return values.

please refer to =src/clojure/reapl/interop.clj= or =src/elisp/reapl-interop.el= for details.

** Implementation

The communication between the reapl backend and its client is done via UDP sockets.

The luasocket library is not compatible with reaper's embedded version of lua, but thanks to Daniel Lumertz and Mavriq, some workarounds ([[https://github.com/mavriq-dev/mavriq-lua-sockets][1]], [[https://github.com/daniellumertz/DanielLumertz-Scripts/tree/master/LUA%20Sockets][2]]) have been found around this.

The [[https://www.wikiwand.com/en/Bencode][bencode]] serialization format is used to communicate between client and backend.

For more details please look at:
- =src/fennel/socket-repl.fnl= (backend)
- =src/clojure/reapl/interop.clj= (frontend)

TODO...

** Extra Fennel libraries

This project comes with two helper libraries (written in fennel).
It is still a work in progress but is already quite useful.

Sources can be found in =src/fennel=

*** pb-utils.fnl

A collection of general purpose utility.

*** reaper-utils.fnl

Some fennel wrapping of the reaper API.
